{
    "swagger": "2.0",
    "info": {
        "version": "0.10.703",
        "title": "LUSID API",
        "description": "# Introduction\n\nThis page documents the [LUSID APIs](https://api.lusid.com/swagger), which allows authorised clients to query and update their data within the LUSID platform.\n\nSDKs to interact with the LUSID APIs are available in the following languages :\n\n* [C#](https://github.com/finbourne/lusid-sdk-csharp)\n* [Java](https://github.com/finbourne/lusid-sdk-java)\n* [JavaScript](https://github.com/finbourne/lusid-sdk-js)\n* [Python](https://github.com/finbourne/lusid-sdk-python)\n\n# Data Model\n\nThe LUSID API has a relatively lightweight but extremely powerful data model.   One of the goals of LUSID was not to enforce on clients a single rigid data model but rather to provide a flexible foundation onto which clients can streamline their data.   One of the primary tools to extend the data model is through using properties.  Properties can be associated with amongst others: -\n* Transactions\n* Instruments\n* Portfolios \n\nThe LUSID data model is exposed through the LUSID APIs.  The APIs provide access to both business objects and the meta data used to configure the systems behaviours.   The key business entities are: -\n* **Portfolios**\nA portfolio is the primary container for transactions and holdings. \n* **Derived Portfolios**\nDerived portfolios allow portfolios to be created based on other portfolios, by overriding or overlaying specific items\n* **Holdings**\nA holding is a position account for a instrument within a portfolio.  Holdings can only be adjusted via transactions.\n* **Transactions**\nA Transaction is a source of transactions used to manipulate holdings. \n* **Corporate Actions**\nA corporate action is a market event which occurs to a instrument, for example a stock split\n* **Instruments** \nA instrument represents a currency, tradable instrument or OTC contract that is attached to a transaction and a holding.\n* **Properties**\nSeveral entities allow additional user defined properties to be associated with them.   For example, a Portfolio manager may be associated with a portfolio\n\nMeta data includes: -\n* **Transaction Types**\nTransactions are booked with a specific transaction type.  The types are client defined and are used to map the Transaction to a series of movements which update the portfolio holdings. \n* **Properties Types**\nTypes of user defined properties used within the system.\n\nThis section describes the data model that LUSID exposes via the APIs.\n\n## Scope\n\nAll data in LUSID is segregated at the client level.  Entities in LUSID are identifiable by a unique code.  Every entity lives within a logical data partition known as a Scope.  Scope is an identity namespace allowing two entities with the same unique code to co-exist within individual address spaces.\n\nFor example, prices for equities from different vendors may be uploaded into different scopes such as `client/vendor1` and `client/vendor2`.  A portfolio may then be valued using either of the price sources by referencing the appropriate scope.\n\nLUSID Clients cannot access scopes of other clients.\n\n## Schema\n\nA detailed description of the entities used by the API and parameters for endpoints which take a JSON document can be retrieved via the `schema` endpoint.\n\n## Instruments\n\nLUSID has its own built-in instrument master which you can use to master your own instrument universe.\n\nEvery instrument must be created with one or more unique market identifiers, such as [FIGI](https://openfigi.com/). For any non-listed instruments (eg OTCs), you can upload an instrument against a custom ID of your choosing.\n\nIn addition, LUSID will allocate each instrument a unique 'LUSID instrument identifier'. The LUSID instrument identifier is what is used when uploading transactions, holdings, prices, etc. The API exposes an `instrument/lookup` endpoint which can be used to lookup these LUSID identifiers using their market identifiers.\n\nCash can be referenced using the ISO currency code prefixed with \"`CCY_`\" e.g. `CCY_GBP`\n\n## Instrument Prices (Analytics)\n\nInstrument prices are stored in LUSID's Analytics Store\n\n| Field|Type|Description |\n| ---|---|--- |\n| InstrumentUid|string|Unique instrument identifier |\n| Value|decimal|Value of the analytic, eg price |\n| Denomination|string|Underlying unit of the analytic, eg currency, EPS etc. |\n\n\n## Instrument Data\n\nInstrument data can be uploaded to the system using the [Instrument Properties](#tag/InstrumentProperties) endpoint.\n\n| Field|Type|Description |\n| ---|---|--- |\n| Key|propertykey|The key of the property. This takes the format {domain}/{scope}/{code} e.g. 'Instrument/system/Name' or 'Transaction/strategy/quantsignal'. |\n| Value|string|The value of the property. |\n| EffectiveFrom|datetimeoffset|The effective datetime from which the property is valid. |\n\n\n## Portfolios\n\nPortfolios are the top-level entity containers within LUSID, containing transactions, corporate actions and holdings.    The transactions build up the portfolio holdings on which valuations, analytics profit & loss and risk can be calculated.    \nProperties can be associated with Portfolios to add in additional model data.  Portfolio properties can be changed over time as well.  For example, to allow a Portfolio Manager to be linked with a Portfolio.\n\nAdditionally, portfolios can be securitised and held by other portfolios, allowing LUSID to perform \"drill-through\" into underlying fund holdings\n\n### Reference Portfolios\nReference portfolios are portfolios that contain only weights, as opposed to transactions, and are designed to represent entities such as indices.\n\n### Derived Portfolios\n\nLUSID also allows for a portfolio to be composed of another portfolio via derived portfolios.  A derived portfolio can contain its own transactions and also inherits any transactions from its parent portfolio.  Any changes made to the parent portfolio are automatically reflected in derived portfolio.\n\nDerived portfolios in conjunction with scopes are a powerful construct.  For example, to do pre-trade what-if analysis, a derived portfolio could be created a new namespace linked to the underlying live (parent) portfolio.  Analysis can then be undertaken on the derived portfolio without affecting the live portfolio.\n\n### Portfolio Groups\nPortfolio groups allow the construction of a hierarchy from portfolios and groups.  Portfolio operations on the group are executed on an aggregated set of portfolios in the hierarchy. \n\nFor example:\n \n* Global Portfolios _(group)_\n  * APAC _(group)_\n    * Hong Kong _(portfolio)_\n    * Japan _(portfolio)_\n  * Europe _(group)_\n    * France _(portfolio)_\n    * Germany _(portfolio)_\n  * UK _(portfolio)_\n \nIn this example **Global Portfolios** is a group that consists of an aggregate of **Hong Kong**, **Japan**, **France**, **Germany** and **UK** portfolios.\n\n### Movements Engine\nThe Movements engine sits on top of the immutable event store and is used to manage the relationship between input trading actions and their associated portfolio holdings.   \n\nThe movements engine reads in the following entity types:-\n* Posting Transactions\n* Applying Corporate Actions \n* Holding Adjustments\n\nThese are converted to one or more movements and used by the movements engine to calculate holdings.  At the same time it also calculates running balances, and realised P&L.  The outputs from the movements engine are holdings and transactions.\n\n## Transactions\n\nA transaction represents an economic activity against a Portfolio.\n\nTransactions are processed according to a configuration. This will tell the LUSID engine how to interpret the transaction and correctly update the holdings. LUSID comes with a set of transaction types you can use out of the box, or you can configure your own set(s) of transactions.\n\nFor more details see the [LUSID Getting Started Guide for transaction configuration.](https://support.lusid.com/configuring-transaction-types)\n\n| Field|Type|Description |\n| ---|---|--- |\n| TransactionId|string|The unique identifier for the transaction. |\n| Type|string|The type of the transaction e.g. 'Buy', 'Sell'. The transaction type should have been pre-configured via the System Configuration API endpoint. If it hasn't been pre-configured the transaction will still be updated or inserted however you will be unable to generate the resultant holdings for the portfolio that contains this transaction as LUSID does not know how to process it. |\n| InstrumentIdentifiers|map|A set of instrument identifiers to use to resolve the transaction to a unique instrument. |\n| TransactionDate|dateorcutlabel|The date of the transaction. |\n| SettlementDate|dateorcutlabel|The settlement date of the transaction. |\n| Units|decimal|The number of units transacted in the associated instrument. |\n| TransactionPrice|transactionprice|The price for each unit of the transacted instrument in the transaction currency. |\n| TotalConsideration|currencyandamount|The total value of the transaction in the settlement currency. |\n| ExchangeRate|decimal|The exchange rate between the transaction and settlement currency. For example if the transaction currency is in USD and the settlement currency is in GBP this this the USD/GBP rate. |\n| TransactionCurrency|currency|The transaction currency. |\n| Properties|map|Set of unique transaction properties and associated values to store with the transaction. Each property must be from the 'Transaction' domain. |\n| CounterpartyId|string|The identifier for the counterparty of the transaction. |\n| Source|string|The source of the transaction. This is used to look up the appropriate transaction group set in the transaction type configuration. |\n\n\nFrom these fields, the following values can be calculated\n * **Transaction value in Transaction currency**: TotalConsideration / ExchangeRate\n * **Transaction value in Portfolio currency**: Transaction value in Transaction currency * TradeToPortfolioRate\n\n### Example Transactions\n\n#### A Common Purchase Example\nThree example transactions are shown in the table below. \n\nThey represent a purchase of USD denominated IBM shares within a Sterling denominated portfolio.\n\n * The first two transactions are for separate buy and fx trades\n   * Buying 500 IBM shares for $71,480.00\n   * A foreign exchange conversion to fund the IBM purchase. (Buy $71,480.00 for &#163;54,846.60)\n * The third transaction is an alternate version of the above trades. Buying 500 IBM shares and settling directly in Sterling.\n\n| Column |  Buy Trade | Fx Trade | Buy Trade with foreign Settlement |\n| ----- | ----- | ----- | ----- |\n| TransactionId | FBN00001 | FBN00002 | FBN00003 |\n| Type | Buy | FxBuy | Buy |\n| InstrumentIdentifiers | { \"figi\", \"BBG000BLNNH6\" } | { \"CCY\", \"CCY_USD\" } | { \"figi\", \"BBG000BLNNH6\" } |\n| TransactionDate | 2018-08-02 | 2018-08-02 | 2018-08-02 |\n| SettlementDate | 2018-08-06 | 2018-08-06 | 2018-08-06 |\n| Units | 500 | 71480 | 500 |\n| TransactionPrice | 142.96 | 1 | 142.96 |\n| TradeCurrency | USD | USD | USD |\n| ExchangeRate | 1 | 0.7673 | 0.7673 |\n| TotalConsideration.Amount | 71480.00 | 54846.60 | 54846.60 |\n| TotalConsideration.Currency | USD | GBP | GBP |\n| Trade/default/TradeToPortfolioRate&ast; | 0.7673 | 0.7673 | 0.7673 |\n\n[&ast; This is a property field]\n\n#### A Forward FX Example\n\nLUSID has a flexible transaction modelling system, and there are a number of different ways of modelling forward fx trades.\n\nThe default LUSID transaction types are FwdFxBuy and FwdFxSell. Other types and behaviours can be configured as required.\n\nUsing these transaction types, the holdings query will report two forward positions. One in each currency. \n\nSince an FX trade is an exchange of one currency for another, the following two 6 month forward transactions are equivalent:\n\n| Column |  Forward 'Sell' Trade | Forward 'Buy' Trade |\n| ----- | ----- | ----- |\n| TransactionId | FBN00004 | FBN00005 |\n| Type | FwdFxSell | FwdFxBuy |\n| InstrumentIdentifiers | { \"CCY\", \"CCY_GBP\" } | { \"CCY\", \"CCY_USD\" } |\n| TransactionDate | 2018-08-02 | 2018-08-02 |\n| SettlementDate | 2019-02-06 | 2019-02-06 |\n| Units | 10000.00 | 13142.00 |\n| TransactionPrice |1 | 1 |\n| TradeCurrency | GBP | USD |\n| ExchangeRate | 1.3142 | 0.760919 |\n| TotalConsideration.Amount | 13142.00 | 10000.00 |\n| TotalConsideration.Currency | USD | GBP |\n| Trade/default/TradeToPortfolioRate | 1.0 | 0.760919 |\n\n## Holdings\n\nA holding represents a position in a instrument or cash on a given date.\n\n| Field|Type|Description |\n| ---|---|--- |\n| InstrumentUid|string|The unqiue Lusid Instrument Id (LUID) of the instrument that the holding is in. |\n| SubHoldingKeys|map|The sub-holding properties which identify the holding. Each property will be from the 'Transaction' domain. These are configured when a transaction portfolio is created. |\n| Properties|map|The properties which have been requested to be decorated onto the holding. These will be from the 'Instrument' or 'Holding' domain. |\n| HoldingType|string|The type of the holding e.g. Position, Balance, CashCommitment, Receivable, ForwardFX etc. |\n| Units|decimal|The total number of units of the holding. |\n| SettledUnits|decimal|The total number of settled units of the holding. |\n| Cost|currencyandamount|The total cost of the holding in the transaction currency. |\n| CostPortfolioCcy|currencyandamount|The total cost of the holding in the portfolio currency. |\n| Transaction|transaction|The transaction associated with an unsettled holding. |\n\n\n## Corporate Actions\n\nCorporate actions are represented within LUSID in terms of a set of instrument-specific 'transitions'.  These transitions are used to specify the participants of the corporate action, and the effect that the corporate action will have on holdings in those participants.\n\n### Corporate Action\n\n| Field|Type|Description |\n| ---|---|--- |\n| CorporateActionCode|code|The unique identifier of this corporate action |\n| Description|string|  |\n| AnnouncementDate|datetimeoffset|The announcement date of the corporate action |\n| ExDate|datetimeoffset|The ex date of the corporate action |\n| RecordDate|datetimeoffset|The record date of the corporate action |\n| PaymentDate|datetimeoffset|The payment date of the corporate action |\n| Transitions|corporateactiontransition[]|The transitions that result from this corporate action |\n\n\n### Transition\n\n| Field|Type|Description |\n| ---|---|--- |\n| InputTransition|corporateactiontransitioncomponent|Indicating the basis of the corporate action - which security and how many units |\n| OutputTransitions|corporateactiontransitioncomponent[]|What will be generated relative to the input transition |\n\n\n### Example Corporate Action Transitions\n\n#### A Dividend Action Transition\n\nIn this example, for each share of IBM, 0.20 units (or 20 pence) of GBP are generated.\n\n| Column |  Input Transition | Output Transition |\n| ----- | ----- | ----- |\n| Instrument Identifiers | { \"figi\" : \"BBG000BLNNH6\" } | { \"ccy\" : \"CCY_GBP\" } |\n| Units Factor | 1 | 0.20 |\n| Cost Factor | 1 | 0 |\n\n#### A Split Action Transition\n\nIn this example, for each share of IBM, we end up with 2 units (2 shares) of IBM, with total value unchanged.\n\n| Column |  Input Transition | Output Transition |\n| ----- | ----- | ----- |\n| Instrument Identifiers | { \"figi\" : \"BBG000BLNNH6\" } | { \"figi\" : \"BBG000BLNNH6\" } |\n| Units Factor | 1 | 2 |\n| Cost Factor | 1 | 1 |\n\n#### A Spinoff Action Transition\n\nIn this example, for each share of IBM, we end up with 1 unit (1 share) of IBM and 3 units (3 shares) of Celestica, with 85% of the value remaining on the IBM share, and 5% in each Celestica share (15% total).\n\n| Column |  Input Transition | Output Transition 1 | Output Transition 2 |\n| ----- | ----- | ----- | ----- |\n| Instrument Identifiers | { \"figi\" : \"BBG000BLNNH6\" } | { \"figi\" : \"BBG000BLNNH6\" } | { \"figi\" : \"BBG000HBGRF3\" } |\n| Units Factor | 1 | 1 | 3 |\n| Cost Factor | 1 | 0.85 | 0.15 |\n\n## Property\n\nProperties are key-value pairs that can be applied to any entity within a domain (where a domain is `trade`, `portfolio`, `security` etc).  Properties must be defined before use with a `PropertyDefinition` and can then subsequently be added to entities.\n\n# Schemas\n\nThe following headers are returned on all responses from LUSID\n\n| Name | Purpose |\n| --- | --- |\n| lusid-meta-duration | Duration of the request |\n| lusid-meta-success | Whether or not LUSID considered the request to be successful |\n| lusid-meta-requestId | The unique identifier for the request |\n| lusid-schema-url | Url of the schema for the data being returned |\n| lusid-property-schema-url | Url of the schema for any properties |\n\n\n# Error Codes\n\n| Code|Name|Description |\n| ---|---|--- |\n| <a name=\"102\">102</a>|VersionNotFound|  |\n| <a name=\"104\">104</a>|InstrumentNotFound|  |\n| <a name=\"105\">105</a>|PropertyNotFound|  |\n| <a name=\"106\">106</a>|PortfolioRecursionDepth|  |\n| <a name=\"108\">108</a>|GroupNotFound|  |\n| <a name=\"109\">109</a>|PortfolioNotFound|  |\n| <a name=\"110\">110</a>|PropertySchemaNotFound|  |\n| <a name=\"111\">111</a>|PortfolioAncestryNotFound|  |\n| <a name=\"112\">112</a>|PortfolioWithIdAlreadyExists|  |\n| <a name=\"113\">113</a>|OrphanedPortfolio|  |\n| <a name=\"119\">119</a>|MissingBaseClaims|  |\n| <a name=\"121\">121</a>|PropertyNotDefined|  |\n| <a name=\"122\">122</a>|CannotDeleteSystemProperty|  |\n| <a name=\"123\">123</a>|CannotModifyImmutablePropertyField|  |\n| <a name=\"124\">124</a>|PropertyAlreadyExists|  |\n| <a name=\"125\">125</a>|InvalidPropertyLifeTime|  |\n| <a name=\"127\">127</a>|CannotModifyDefaultDataType|  |\n| <a name=\"128\">128</a>|GroupAlreadyExists|  |\n| <a name=\"129\">129</a>|NoSuchDataType|  |\n| <a name=\"132\">132</a>|ValidationError|  |\n| <a name=\"133\">133</a>|LoopDetectedInGroupHierarchy|  |\n| <a name=\"135\">135</a>|SubGroupAlreadyExists|  |\n| <a name=\"138\">138</a>|PriceSourceNotFound|  |\n| <a name=\"139\">139</a>|AnalyticStoreNotFound|  |\n| <a name=\"141\">141</a>|AnalyticStoreAlreadyExists|  |\n| <a name=\"143\">143</a>|ClientInstrumentAlreadyExists|  |\n| <a name=\"144\">144</a>|DuplicateInParameterSet|  |\n| <a name=\"147\">147</a>|ResultsNotFound|  |\n| <a name=\"148\">148</a>|OrderFieldNotInResultSet|  |\n| <a name=\"149\">149</a>|OperationFailed|  |\n| <a name=\"150\">150</a>|ElasticSearchError|  |\n| <a name=\"151\">151</a>|InvalidParameterValue|  |\n| <a name=\"153\">153</a>|CommandProcessingFailure|  |\n| <a name=\"154\">154</a>|EntityStateConstructionFailure|  |\n| <a name=\"155\">155</a>|EntityTimelineDoesNotExist|  |\n| <a name=\"156\">156</a>|EventPublishFailure|  |\n| <a name=\"157\">157</a>|InvalidRequestFailure|  |\n| <a name=\"158\">158</a>|EventPublishUnknown|  |\n| <a name=\"159\">159</a>|EventQueryFailure|  |\n| <a name=\"160\">160</a>|BlobDidNotExistFailure|  |\n| <a name=\"162\">162</a>|SubSystemRequestFailure|  |\n| <a name=\"163\">163</a>|SubSystemConfigurationFailure|  |\n| <a name=\"165\">165</a>|FailedToDelete|  |\n| <a name=\"166\">166</a>|UpsertClientInstrumentFailure|  |\n| <a name=\"167\">167</a>|IllegalAsAtInterval|  |\n| <a name=\"168\">168</a>|IllegalBitemporalQuery|  |\n| <a name=\"169\">169</a>|InvalidAlternateId|  |\n| <a name=\"170\">170</a>|CannotAddSourcePortfolioPropertyExplicitly|  |\n| <a name=\"171\">171</a>|EntityAlreadyExistsInGroup|  |\n| <a name=\"173\">173</a>|EntityWithIdAlreadyExists|  |\n| <a name=\"174\">174</a>|DerivedPortfolioDetailsDoNotExist|  |\n| <a name=\"176\">176</a>|PortfolioWithNameAlreadyExists|  |\n| <a name=\"177\">177</a>|InvalidTransactions|  |\n| <a name=\"178\">178</a>|ReferencePortfolioNotFound|  |\n| <a name=\"179\">179</a>|DuplicateIdFailure|  |\n| <a name=\"180\">180</a>|CommandRetrievalFailure|  |\n| <a name=\"181\">181</a>|DataFilterApplicationFailure|  |\n| <a name=\"182\">182</a>|SearchFailed|  |\n| <a name=\"183\">183</a>|MovementsEngineConfigurationKeyFailure|  |\n| <a name=\"184\">184</a>|FxRateSourceNotFound|  |\n| <a name=\"185\">185</a>|AccrualSourceNotFound|  |\n| <a name=\"186\">186</a>|AccessDenied|  |\n| <a name=\"187\">187</a>|InvalidIdentityToken|  |\n| <a name=\"188\">188</a>|InvalidRequestHeaders|  |\n| <a name=\"189\">189</a>|PriceNotFound|  |\n| <a name=\"190\">190</a>|InvalidSubHoldingKeysProvided|  |\n| <a name=\"191\">191</a>|DuplicateSubHoldingKeysProvided|  |\n| <a name=\"192\">192</a>|CutDefinitionNotFound|  |\n| <a name=\"193\">193</a>|CutDefinitionInvalid|  |\n| <a name=\"194\">194</a>|TimeVariantPropertyDeletionDateUnspecified|  |\n| <a name=\"195\">195</a>|PerpetualPropertyDeletionDateSpecified|  |\n| <a name=\"200\">200</a>|InvalidUnitForDataType|  |\n| <a name=\"201\">201</a>|InvalidTypeForDataType|  |\n| <a name=\"202\">202</a>|InvalidValueForDataType|  |\n| <a name=\"203\">203</a>|UnitNotDefinedForDataType|  |\n| <a name=\"204\">204</a>|UnitsNotSupportedOnDataType|  |\n| <a name=\"205\">205</a>|CannotSpecifyUnitsOnDataType|  |\n| <a name=\"206\">206</a>|UnitSchemaInconsistentWithDataType|  |\n| <a name=\"207\">207</a>|UnitDefinitionNotSpecified|  |\n| <a name=\"208\">208</a>|DuplicateUnitDefinitionsSpecified|  |\n| <a name=\"209\">209</a>|InvalidUnitsDefinition|  |\n| <a name=\"210\">210</a>|InvalidInstrumentIdentifierUnit|  |\n| <a name=\"211\">211</a>|HoldingsAdjustmentDoesNotExist|  |\n| <a name=\"212\">212</a>|CouldNotBuildExcelUrl|  |\n| <a name=\"213\">213</a>|CouldNotGetExcelVersion|  |\n| <a name=\"214\">214</a>|InstrumentByCodeNotFound|  |\n| <a name=\"215\">215</a>|EntitySchemaDoesNotExist|  |\n| <a name=\"216\">216</a>|FeatureNotSupportedOnPortfolioType|  |\n| <a name=\"217\">217</a>|QuoteNotFoundFailure|  |\n| <a name=\"218\">218</a>|InvalidQuoteIdentifierFailure|  |\n| <a name=\"219\">219</a>|InvalidInstrumentDefinition|  |\n| <a name=\"221\">221</a>|InstrumentUpsertFailure|  |\n| <a name=\"222\">222</a>|ReferencePortfolioRequestNotSupported|  |\n| <a name=\"223\">223</a>|TransactionPortfolioRequestNotSupported|  |\n| <a name=\"224\">224</a>|InvalidPropertyValueAssignment|  |\n| <a name=\"230\">230</a>|TransactionTypeNotFound|  |\n| <a name=\"231\">231</a>|TransactionTypeDuplication|  |\n| <a name=\"232\">232</a>|PortfolioDoesNotExistAtGivenDate|  |\n| <a name=\"233\">233</a>|QueryParserFailure|  |\n| <a name=\"234\">234</a>|DuplicateConstituentFailure|  |\n| <a name=\"235\">235</a>|UnresolvedInstrumentConstituentFailure|  |\n| <a name=\"236\">236</a>|UnresolvedInstrumentInTransitionFailure|  |\n| <a name=\"300\">300</a>|MissingRecipeFailure|  |\n| <a name=\"301\">301</a>|DependenciesFailure|  |\n| <a name=\"304\">304</a>|PortfolioPreprocessFailure|  |\n| <a name=\"310\">310</a>|ValuationEngineFailure|  |\n| <a name=\"311\">311</a>|TaskFactoryFailure|  |\n| <a name=\"312\">312</a>|TaskEvaluationFailure|  |\n| <a name=\"350\">350</a>|InstrumentFailure|  |\n| <a name=\"351\">351</a>|CashFlowsFailure|  |\n| <a name=\"360\">360</a>|AggregationFailure|  |\n| <a name=\"370\">370</a>|ResultRetrievalFailure|  |\n| <a name=\"371\">371</a>|ResultProcessingFailure|  |\n| <a name=\"371\">371</a>|ResultProcessingFailure|  |\n| <a name=\"372\">372</a>|VendorResultProcessingFailure|  |\n| <a name=\"373\">373</a>|VendorResultMappingFailure|  |\n| <a name=\"374\">374</a>|VendorLibraryUnauthorisedFailure|  |\n| <a name=\"390\">390</a>|AttemptToUpsertDuplicateQuotes|  |\n| <a name=\"391\">391</a>|CorporateActionSourceDoesNotExist|  |\n| <a name=\"392\">392</a>|CorporateActionSourceAlreadyExists|  |\n| <a name=\"393\">393</a>|InstrumentIdentifierAlreadyInUse|  |\n| <a name=\"394\">394</a>|PropertiesNotFound|  |\n| <a name=\"395\">395</a>|BatchOperationAborted|  |\n| <a name=\"400\">400</a>|InvalidIso4217CurrencyCodeFailure|  |\n| <a name=\"410\">410</a>|IndexDoesNotExist|  |\n| <a name=\"411\">411</a>|SortFieldDoesNotExist|  |\n| <a name=\"413\">413</a>|NegativePaginationParameters|  |\n| <a name=\"414\">414</a>|InvalidSearchSyntax|  |\n| <a name=\"-10\">-10</a>|ServerConfigurationError|  |\n| <a name=\"-1\">-1</a>|Unknown error|  |\n",
        "contact": {
            "name": "FINBOURNE Technology",
            "url": "https://www.finbourne.com",
            "email": "info@finbourne.com"
        },
        "x-logo": {
            "url": "https://content.finbourne.com/FINBOURNE.png",
            "backgroundColor": "#415464"
        }
    },
    "basePath": "/api",
    "paths": {
        "/api/datatypes/{scope}": {
            "get": {
                "tags": [
                    "Data Types"
                ],
                "summary": "[EARLY ACCESS] List data types",
                "description": "List all data types in a specified scope",
                "operationId": "ListDataTypes",
                "consumes": [],
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ],
                "parameters": [
                    {
                        "name": "scope",
                        "in": "path",
                        "description": "The requested scope of the data types",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "includeSystem",
                        "in": "query",
                        "description": "Whether to additionally include those data types in the \"system\" scope",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "name": "sortBy",
                        "in": "query",
                        "description": "Optional. Order the results by these fields. Use use the '-' sign to denote descending order e.g. -MyFieldName",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi",
                        "uniqueItems": false
                    },
                    {
                        "name": "start",
                        "in": "query",
                        "description": "Optional. When paginating, skip this number of results",
                        "required": false,
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Optional. When paginating, limit the number of returned results to this many.",
                        "required": false,
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Optional. Expression to filter the result set",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ResourceListOfDataType"
                        }
                    },
                    "400": {
                        "description": "The details of the input related failure",
                        "schema": {
                            "$ref": "#/definitions/LusidValidationProblemDetails"
                        }
                    },
                    "default": {
                        "description": "Error response",
                        "schema": {
                            "$ref": "#/definitions/LusidProblemDetails"
                        }
                    }
                },
                "x-fbn-apistatus": "EarlyAccess"
            }
        },
        "/api/datatypes/{scope}/{code}": {
            "get": {
                "tags": [
                    "Data Types"
                ],
                "summary": "[EARLY ACCESS] Get data type definition",
                "description": "Get the definition of a specified data type",
                "operationId": "GetDataType",
                "consumes": [],
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ],
                "parameters": [
                    {
                        "name": "scope",
                        "in": "path",
                        "description": "The scope of the data type",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "code",
                        "in": "path",
                        "description": "The code of the data type",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/DataType"
                        }
                    },
                    "400": {
                        "description": "The details of the input related failure",
                        "schema": {
                            "$ref": "#/definitions/LusidValidationProblemDetails"
                        }
                    },
                    "default": {
                        "description": "Error response",
                        "schema": {
                            "$ref": "#/definitions/LusidProblemDetails"
                        }
                    }
                },
                "x-fbn-apistatus": "EarlyAccess"
            }
        },
        "/api/datatypes/{scope}/{code}/units": {
            "get": {
                "tags": [
                    "Data Types"
                ],
                "summary": "[EARLY ACCESS] Get units from data type",
                "description": "Get the definitions of the specified units associated bound to a specific data type",
                "operationId": "GetUnitsFromDataType",
                "consumes": [],
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ],
                "parameters": [
                    {
                        "name": "scope",
                        "in": "path",
                        "description": "The scope of the data type",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "code",
                        "in": "path",
                        "description": "The code of the data type",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "units",
                        "in": "query",
                        "description": "One or more unit identifiers for which the definition is being requested",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi",
                        "uniqueItems": false
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Optional. Expression to filter the result set",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ResourceListOfIUnitDefinitionDto"
                        }
                    },
                    "400": {
                        "description": "The details of the input related failure",
                        "schema": {
                            "$ref": "#/definitions/LusidValidationProblemDetails"
                        }
                    },
                    "default": {
                        "description": "Error response",
                        "schema": {
                            "$ref": "#/definitions/LusidProblemDetails"
                        }
                    }
                },
                "x-fbn-apistatus": "EarlyAccess"
            }
        },
        "/api/derivedtransactionportfolios/{scope}": {
            "post": {
                "tags": [
                    "Derived Transaction Portfolios"
                ],
                "summary": "[EARLY ACCESS] Create derived transaction portfolio",
                "description": "Creates a transaction portfolio that derives from an existing transaction portfolio. In a derived portfolio, parts of the portfolio can either be specific to this portfolio, or can be inherited from a \"parent\". Different parts of the portfolio (e.g. transactions or properties) are combined in different ways. The portfolio details are either overridden in entirety, or not at all. The same is true for properties. Transactions on a derived portfolio are merged with its parent portfolio's transactions. If the parent portfolio is itself a derived portfolio, transactions from that parent are also merged (and that parent's portfolio's, if it is also a derived portfolio, and so on).",
                "operationId": "CreateDerivedPortfolio",
                "consumes": [],
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ],
                "parameters": [
                    {
                        "name": "scope",
                        "in": "path",
                        "description": "The scope into which to create the new derived portfolio",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "portfolio",
                        "in": "body",
                        "description": "The root object of the new derived portfolio, containing a populated reference portfolio id and reference scope",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/CreateDerivedTransactionPortfolioRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "The created derived portfolio, with populated id",
                        "schema": {
                            "$ref": "#/definitions/Portfolio"
                        }
                    },
                    "400": {
                        "description": "The details of the input related failure",
                        "schema": {
                            "$ref": "#/definitions/LusidValidationProblemDetails"
                        }
                    },
                    "default": {
                        "description": "Error response",
                        "schema": {
                            "$ref": "#/definitions/LusidProblemDetails"
                        }
                    }
                },
                "x-fbn-apistatus": "EarlyAccess"
            }
        },
        "/api/derivedtransactionportfolios/{scope}/{code}/details": {
            "delete": {
                "tags": [
                    "Derived Transaction Portfolios"
                ],
                "summary": "[EARLY ACCESS] Delete portfolio details",
                "description": "Deletes the portfolio details for the specified derived transaction portfolio",
                "operationId": "DeleteDerivedPortfolioDetails",
                "consumes": [],
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ],
                "parameters": [
                    {
                        "name": "scope",
                        "in": "path",
                        "description": "The scope of the portfolio",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "code",
                        "in": "path",
                        "description": "The code of the portfolio",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "effectiveAt",
                        "in": "query",
                        "description": "The effective date of the change",
                        "required": false,
                        "type": "string",
                        "format": "dateorcutlabel"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/DeletedEntityResponse"
                        }
                    },
                    "400": {
                        "description": "The details of the input related failure",
                        "schema": {
                            "$ref": "#/definitions/LusidValidationProblemDetails"
                        }
                    },
                    "default": {
                        "description": "Error response",
                        "schema": {
                            "$ref": "#/definitions/LusidProblemDetails"
                        }
                    }
                },
                "x-fbn-apistatus": "EarlyAccess"
            }
        },
        "/api/instruments": {
            "get": {
                "tags": [
                    "Instruments"
                ],
                "summary": "[EARLY ACCESS] List instruments",
                "description": "List all the instruments that have been mastered in the LUSID instrument master.\n\nThe maximum number of instruments that this method can list per request is 2,000.",
                "operationId": "ListInstruments",
                "consumes": [],
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ],
                "parameters": [
                    {
                        "name": "asAt",
                        "in": "query",
                        "description": "The asAt datetime at which to list the instruments. Defaults to return the latest\r\n            version of each instruments if not specified.",
                        "required": false,
                        "type": "string",
                        "format": "date-time"
                    },
                    {
                        "name": "effectiveAt",
                        "in": "query",
                        "description": "The effective datetime or cut label at which to list the instruments.\r\n            Defaults to the current LUSID system datetime if not specified.",
                        "required": false,
                        "type": "string",
                        "format": "dateorcutlabel"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "The pagination token to use to continue listing instruments from a previous call to list instruments.\r\n            This value is returned from the previous call. If a pagination token is provided the sortBy, filter, effectiveAt, and asAt fields\r\n            must not have changed since the original request. Also, if set, a start value cannot be provided.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "sortBy",
                        "in": "query",
                        "description": "Order the results by these fields. Use use the '-' sign to denote descending order e.g. -MyFieldName.",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi",
                        "uniqueItems": false
                    },
                    {
                        "name": "start",
                        "in": "query",
                        "description": "When paginating, skip this number of results.",
                        "required": false,
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "When paginating, limit the number of returned results to this many.",
                        "required": false,
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Expression to filter the result set. Defaults to filter down to active instruments only, i.e. those\r\n            that have not been deleted. Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
                        "required": false,
                        "type": "string",
                        "default": "State eq 'Active'"
                    },
                    {
                        "name": "instrumentPropertyKeys",
                        "in": "query",
                        "description": "A list of property keys from the \"Instrument\" domain to decorate onto each instrument. These take the format {domain}/{scope}/{code} e.g. \"Instrument/system/Name\".",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi",
                        "uniqueItems": false
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The requested instruments",
                        "schema": {
                            "$ref": "#/definitions/ResourceListOfInstrument"
                        }
                    },
                    "400": {
                        "description": "The details of the input related failure",
                        "schema": {
                            "$ref": "#/definitions/LusidValidationProblemDetails"
                        }
                    },
                    "default": {
                        "description": "Error response",
                        "schema": {
                            "$ref": "#/definitions/LusidProblemDetails"
                        }
                    }
                },
                "x-fbn-apistatus": "EarlyAccess"
            },
            "post": {
                "tags": [
                    "Instruments"
                ],
                "summary": "[EARLY ACCESS] Upsert instruments",
                "description": "Update or insert one or more instruments into the LUSID instrument master. An instrument will be updated\r\nif it already exists and inserted if it does not.\r\n            \r\nIn the request each instrument definition should be keyed by a unique correlation id. This id is ephemeral\r\nand is not stored by LUSID. It serves only as a way to easily identify each instrument in the response.\r\n            \r\nThe response will return both the collection of successfully updated or inserted instruments, as well as those that failed.\r\nFor the failures a reason will be provided explaining why the instrument could not be updated or inserted.\r\n            \r\nIt is important to always check the failed set for any unsuccessful results.\n\nThe maximum number of instruments that this method can upsert per request is 2,000.",
                "operationId": "UpsertInstruments",
                "consumes": [],
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ],
                "parameters": [
                    {
                        "name": "requests",
                        "in": "body",
                        "description": "The definitions of the instruments to update or insert.",
                        "required": false,
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "$ref": "#/definitions/InstrumentDefinition"
                            },
                            "example": {
                                "request_id_1": {
                                    "name": "Instrument name",
                                    "identifiers": {
                                        "ClientInternal": {
                                            "value": "some-identifier",
                                            "effectiveAt": "0001-01-01T00:00:00+00:00"
                                        },
                                        "Figi": {
                                            "value": "some-figi-code",
                                            "effectiveAt": "0001-01-01T00:00:00+00:00"
                                        }
                                    },
                                    "properties": [
                                        {
                                            "key": "Instrument/default/Isin",
                                            "value": {
                                                "labelValue": "US0378331005"
                                            },
                                            "effectiveFrom": "2018-06-18T09:00:00+00:00"
                                        }
                                    ],
                                    "lookThroughPortfolioId": {
                                        "scope": "MyScope",
                                        "code": "portfolio-code"
                                    },
                                    "definition": {
                                        "instrumentFormat": "some-format",
                                        "content": "{\"some-key\": \"some-value\"}"
                                    }
                                },
                                "request_id_2": {
                                    "name": "Instrument name",
                                    "identifiers": {
                                        "ClientInternal": {
                                            "value": "some-identifier-2",
                                            "effectiveAt": "0001-01-01T00:00:00+00:00"
                                        },
                                        "Figi": {
                                            "value": "some-figi-code-2",
                                            "effectiveAt": "0001-01-01T00:00:00+00:00"
                                        }
                                    },
                                    "properties": [],
                                    "lookThroughPortfolioId": {
                                        "scope": "MyScope",
                                        "code": "portfolio-code"
                                    },
                                    "definition": {
                                        "instrumentFormat": "some-format",
                                        "content": "{\"some-key\": \"some-value\"}"
                                    }
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "The successfully updated or inserted instruments along with any failures",
                        "schema": {
                            "$ref": "#/definitions/UpsertInstrumentsResponse"
                        }
                    },
                    "400": {
                        "description": "The details of the input related failure",
                        "schema": {
                            "$ref": "#/definitions/LusidValidationProblemDetails"
                        }
                    },
                    "default": {
                        "description": "Error response",
                        "schema": {
                            "$ref": "#/definitions/LusidProblemDetails"
                        }
                    }
                },
                "x-fbn-apistatus": "EarlyAccess"
            }
        },
        "/api/instruments/{identifierType}/{identifier}": {
            "get": {
                "tags": [
                    "Instruments"
                ],
                "summary": "[EARLY ACCESS] Get instrument",
                "description": "Get the definition of a single instrument identified by a unique instrument identifier.",
                "operationId": "GetInstrument",
                "consumes": [],
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ],
                "parameters": [
                    {
                        "name": "identifierType",
                        "in": "path",
                        "description": "The identifier being supplied e.g. \"Figi\".",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "identifier",
                        "in": "path",
                        "description": "The value of the identifier for the requested instrument.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "effectiveAt",
                        "in": "query",
                        "description": "The effective datetime or cut label at which to retrieve the instrument definition.\r\n            Defaults to the current LUSID system datetime if not specified.",
                        "required": false,
                        "type": "string",
                        "format": "dateorcutlabel"
                    },
                    {
                        "name": "asAt",
                        "in": "query",
                        "description": "The asAt datetime at which to retrieve the instrument definition. Defaults to\r\n            return the latest version of the instrument definition if not specified.",
                        "required": false,
                        "type": "string",
                        "format": "date-time"
                    },
                    {
                        "name": "instrumentPropertyKeys",
                        "in": "query",
                        "description": "A list of property keys from the \"Instrument\" domain to decorate onto the instrument.\r\n            These take the format {domain}/{scope}/{code} e.g. \"Instrument/system/Name\".",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi",
                        "uniqueItems": false
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The requested instrument",
                        "schema": {
                            "$ref": "#/definitions/Instrument"
                        }
                    },
                    "400": {
                        "description": "The details of the input related failure",
                        "schema": {
                            "$ref": "#/definitions/LusidValidationProblemDetails"
                        }
                    },
                    "default": {
                        "description": "Error response",
                        "schema": {
                            "$ref": "#/definitions/LusidProblemDetails"
                        }
                    }
                },
                "x-fbn-apistatus": "EarlyAccess"
            },
            "post": {
                "tags": [
                    "Instruments"
                ],
                "summary": "[EARLY ACCESS] Update instrument identifier",
                "description": "Update, insert or delete a single instrument identifier for a single instrument. If it is not being deleted\r\nthe identifier will be updated if it already exists and inserted if it does not.",
                "operationId": "UpdateInstrumentIdentifier",
                "consumes": [],
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ],
                "parameters": [
                    {
                        "name": "identifierType",
                        "in": "path",
                        "description": "The identifier to use to resolve the instrument e.g. \"Figi\".",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "identifier",
                        "in": "path",
                        "description": "The original value of the identifier for the requested instrument.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "request",
                        "in": "body",
                        "description": "The identifier to update or remove. This may or may not be the same identifier used\r\n            to resolve the instrument.",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/UpdateInstrumentIdentifierRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The updated instrument definition with the identifier updated, inserted or deleted",
                        "schema": {
                            "$ref": "#/definitions/Instrument"
                        }
                    },
                    "400": {
                        "description": "The details of the input related failure",
                        "schema": {
                            "$ref": "#/definitions/LusidValidationProblemDetails"
                        }
                    },
                    "default": {
                        "description": "Error response",
                        "schema": {
                            "$ref": "#/definitions/LusidProblemDetails"
                        }
                    }
                },
                "x-fbn-apistatus": "EarlyAccess"
            },
            "delete": {
                "tags": [
                    "Instruments"
                ],
                "summary": "[EARLY ACCESS] Delete instrument",
                "description": "Delete a single instrument identified by a unique instrument identifier. Once an instrument has been\r\ndeleted it will be marked as 'inactive' and it can no longer be used when updating or inserting transactions or holdings.\r\nYou can still query existing transactions and holdings related to the deleted instrument.",
                "operationId": "DeleteInstrument",
                "consumes": [],
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ],
                "parameters": [
                    {
                        "name": "identifierType",
                        "in": "path",
                        "description": "The identifier being supplied e.g. \"Figi\".",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "identifier",
                        "in": "path",
                        "description": "The value of the identifier that resolves to the instrument to delete.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The datetime that the instrument was deleted",
                        "schema": {
                            "$ref": "#/definitions/DeleteInstrumentResponse"
                        }
                    },
                    "400": {
                        "description": "The details of the input related failure",
                        "schema": {
                            "$ref": "#/definitions/LusidValidationProblemDetails"
                        }
                    },
                    "default": {
                        "description": "Error response",
                        "schema": {
                            "$ref": "#/definitions/LusidProblemDetails"
                        }
                    }
                },
                "x-fbn-apistatus": "EarlyAccess"
            }
        },
        "/api/instruments/$get": {
            "post": {
                "tags": [
                    "Instruments"
                ],
                "summary": "[EARLY ACCESS] Get instruments",
                "description": "Get the definition of one or more instruments identified by a collection of unique instrument identifiers.",
                "operationId": "GetInstruments",
                "consumes": [],
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ],
                "parameters": [
                    {
                        "name": "identifierType",
                        "in": "query",
                        "description": "The identifier being supplied e.g. \"Figi\".",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "identifiers",
                        "in": "body",
                        "description": "The values of the identifier for the requested instruments.",
                        "required": true,
                        "schema": {
                            "uniqueItems": false,
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "example": [
                                "instrument-identifier-1",
                                "instrument-identifier-2"
                            ]
                        }
                    },
                    {
                        "name": "effectiveAt",
                        "in": "query",
                        "description": "The effective datetime or cut label at which to retrieve the instrument definitions.\r\n            Defaults to the current LUSID system datetime if not specified.",
                        "required": false,
                        "type": "string",
                        "format": "dateorcutlabel"
                    },
                    {
                        "name": "asAt",
                        "in": "query",
                        "description": "The asAt datetime at which to retrieve the instrument definitions.\r\n            Defaults to return the latest version of each instrument definition if not specified.",
                        "required": false,
                        "type": "string",
                        "format": "date-time"
                    },
                    {
                        "name": "instrumentPropertyKeys",
                        "in": "query",
                        "description": "A list of property keys from the \"Instrument\" domain to decorate onto the instrument.\r\n            These take the format {domain}/{scope}/{code} e.g. \"Instrument/system/Name\".",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi",
                        "uniqueItems": false
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The requested instruments which could be identified along with any failures",
                        "schema": {
                            "$ref": "#/definitions/GetInstrumentsResponse"
                        }
                    },
                    "400": {
                        "description": "The details of the input related failure",
                        "schema": {
                            "$ref": "#/definitions/LusidValidationProblemDetails"
                        }
                    },
                    "default": {
                        "description": "Error response",
                        "schema": {
                            "$ref": "#/definitions/LusidProblemDetails"
                        }
                    }
                },
                "x-fbn-apistatus": "EarlyAccess"
            }
        },
        "/api/instruments/$upsertproperties": {
            "post": {
                "tags": [
                    "Instruments"
                ],
                "summary": "[EARLY ACCESS] Upsert instruments properties",
                "description": "Update or insert one or more instrument properties for one or more instruments. Each instrument property will be updated\r\nif it already exists and inserted if it does not. If any properties fail to be updated or inserted, none will be updated or inserted and\r\nthe reason for the failure will be returned.",
                "operationId": "UpsertInstrumentsProperties",
                "consumes": [],
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ],
                "parameters": [
                    {
                        "name": "instrumentProperties",
                        "in": "body",
                        "description": "A collection of instruments and associated instrument properties to update or insert.",
                        "required": true,
                        "schema": {
                            "uniqueItems": false,
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/UpsertInstrumentPropertyRequest"
                            }
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "The asAt time at which the properties were updated, inserted or deleted",
                        "schema": {
                            "$ref": "#/definitions/UpsertInstrumentPropertiesResponse"
                        }
                    },
                    "400": {
                        "description": "The details of the input related failure",
                        "schema": {
                            "$ref": "#/definitions/LusidValidationProblemDetails"
                        }
                    },
                    "default": {
                        "description": "Error response",
                        "schema": {
                            "$ref": "#/definitions/LusidProblemDetails"
                        }
                    }
                },
                "x-fbn-apistatus": "EarlyAccess"
            }
        },
        "/api/instruments/identifierTypes": {
            "get": {
                "tags": [
                    "Instruments"
                ],
                "summary": "[EARLY ACCESS] Get instrument identifier types",
                "description": "Get the allowable instrument identifier types and their descriptions.",
                "operationId": "GetInstrumentIdentifierTypes",
                "consumes": [],
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ],
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "The allowable instrument identifier types",
                        "schema": {
                            "$ref": "#/definitions/ResourceListOfInstrumentIdTypeDescriptor"
                        }
                    },
                    "default": {
                        "description": "Error response",
                        "schema": {
                            "$ref": "#/definitions/LusidProblemDetails"
                        }
                    }
                },
                "x-fbn-apistatus": "EarlyAccess"
            }
        },
        "/api/login/saml/{domain}": {
            "get": {
                "tags": [
                    "Login"
                ],
                "summary": "Get SAML Identity Provider",
                "description": "Get the unique identifier for the SAML 2.0 Identity Provider to be used for domain.",
                "operationId": "GetSamlIdentityProviderId",
                "consumes": [],
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ],
                "parameters": [
                    {
                        "name": "domain",
                        "in": "path",
                        "description": "The domain that the user will be logging in to",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The ID of the SAML Identity Provider to be used (may be null)",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "The details of the input related failure",
                        "schema": {
                            "$ref": "#/definitions/LusidValidationProblemDetails"
                        }
                    },
                    "default": {
                        "description": "Error response",
                        "schema": {
                            "$ref": "#/definitions/LusidProblemDetails"
                        }
                    }
                },
                "x-fbn-apistatus": "Stable"
            }
        },
        "/api/metadata/access/resources": {
            "get": {
                "tags": [
                    "Application Metadata"
                ],
                "summary": "[EARLY ACCESS] Get resources available for access control",
                "description": "Get the comprehensive set of resources that are available for access control",
                "operationId": "ListAccessControlledResources",
                "consumes": [],
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ],
                "parameters": [
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Optional. Expression to filter the result set",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ResourceListOfAccessControlledResource"
                        }
                    },
                    "400": {
                        "description": "The details of the input related failure",
                        "schema": {
                            "$ref": "#/definitions/LusidValidationProblemDetails"
                        }
                    },
                    "default": {
                        "description": "Error response",
                        "schema": {
                            "$ref": "#/definitions/LusidProblemDetails"
                        }
                    }
                },
                "x-fbn-apistatus": "EarlyAccess"
            }
        },
        "/api/metadata/downloads/exceladdin": {
            "get": {
                "tags": [
                    "Application Metadata"
                ],
                "summary": "[EARLY ACCESS] Download Excel Addin",
                "description": "Download the LUSID Excel Addin for Microsoft Excel. Not providing a specific value will return the latest version being returned",
                "operationId": "GetExcelAddin",
                "consumes": [],
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ],
                "parameters": [
                    {
                        "name": "version",
                        "in": "query",
                        "description": "The requested version of the Excel plugin",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/FileResponse"
                        }
                    },
                    "400": {
                        "description": "The details of the input related failure",
                        "schema": {
                            "$ref": "#/definitions/LusidValidationProblemDetails"
                        }
                    },
                    "default": {
                        "description": "Error response",
                        "schema": {
                            "$ref": "#/definitions/LusidProblemDetails"
                        }
                    }
                },
                "x-fbn-apistatus": "EarlyAccess"
            }
        },
        "/api/metadata/versions": {
            "get": {
                "tags": [
                    "Application Metadata"
                ],
                "summary": "[EARLY ACCESS] Get LUSID versions",
                "description": "Get the semantic versions associated with LUSID and its ecosystem",
                "operationId": "GetLusidVersions",
                "consumes": [],
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ],
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Collection of versions associated with LUSID",
                        "schema": {
                            "$ref": "#/definitions/VersionSummaryDto"
                        }
                    },
                    "default": {
                        "description": "Error response",
                        "schema": {
                            "$ref": "#/definitions/LusidProblemDetails"
                        }
                    }
                },
                "x-fbn-apistatus": "EarlyAccess"
            }
        },
        "/api/portfoliogroups/{scope}": {
            "get": {
                "tags": [
                    "Portfolio Groups"
                ],
                "summary": "[EARLY ACCESS] List portfolio groups",
                "description": "List all the portfolio groups in a single scope.",
                "operationId": "ListPortfolioGroups",
                "consumes": [],
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ],
                "parameters": [
                    {
                        "name": "scope",
                        "in": "path",
                        "description": "The scope to list the portfolio groups in.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "asAt",
                        "in": "query",
                        "description": "The asAt datetime at which to list the portfolio groups. Defaults to return the latest version of each portfolio group if not specified.",
                        "required": false,
                        "type": "string",
                        "format": "date-time"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Expression to filter the result set. Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The portfolio groups in the specified scope",
                        "schema": {
                            "$ref": "#/definitions/ResourceListOfPortfolioGroup"
                        }
                    },
                    "400": {
                        "description": "The details of the input related failure",
                        "schema": {
                            "$ref": "#/definitions/LusidValidationProblemDetails"
                        }
                    },
                    "default": {
                        "description": "Error response",
                        "schema": {
                            "$ref": "#/definitions/LusidProblemDetails"
                        }
                    }
                },
                "x-fbn-apistatus": "EarlyAccess"
            },
            "post": {
                "tags": [
                    "Portfolio Groups"
                ],
                "summary": "[EARLY ACCESS] Create portfolio group",
                "description": "Create a portfolio group in a specific scope.",
                "operationId": "CreatePortfolioGroup",
                "consumes": [],
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ],
                "parameters": [
                    {
                        "name": "scope",
                        "in": "path",
                        "description": "The scope that the portfolio group will be created in.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "request",
                        "in": "body",
                        "description": "The definition and details of the portfolio group.",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/CreatePortfolioGroupRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "The newly created portfolio group",
                        "schema": {
                            "$ref": "#/definitions/PortfolioGroup"
                        }
                    },
                    "400": {
                        "description": "The details of the input related failure",
                        "schema": {
                            "$ref": "#/definitions/LusidValidationProblemDetails"
                        }
                    },
                    "default": {
                        "description": "Error response",
                        "schema": {
                            "$ref": "#/definitions/LusidProblemDetails"
                        }
                    }
                },
                "x-fbn-apistatus": "EarlyAccess"
            }
        },
        "/api/portfoliogroups/{scope}/{code}": {
            "get": {
                "tags": [
                    "Portfolio Groups"
                ],
                "summary": "[EARLY ACCESS] Get portfolio group",
                "description": "Retrieve the definition of a single portfolio group.",
                "operationId": "GetPortfolioGroup",
                "consumes": [],
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ],
                "parameters": [
                    {
                        "name": "scope",
                        "in": "path",
                        "description": "The scope of the portfolio group to retrieve the definition for.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "code",
                        "in": "path",
                        "description": "The code of the portfolio group to retrieve the definition for. Together with the scope\r\n            this uniquely identifies the portfolio group.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "asAt",
                        "in": "query",
                        "description": "The asAt datetime at which to retrieve the portfolio group definition. Defaults to return\r\n            the latest version of the portfolio group definition if not specified.",
                        "required": false,
                        "type": "string",
                        "format": "date-time"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The requested portfolio group definition",
                        "schema": {
                            "$ref": "#/definitions/PortfolioGroup"
                        }
                    },
                    "400": {
                        "description": "The details of the input related failure",
                        "schema": {
                            "$ref": "#/definitions/LusidValidationProblemDetails"
                        }
                    },
                    "default": {
                        "description": "Error response",
                        "schema": {
                            "$ref": "#/definitions/LusidProblemDetails"
                        }
                    }
                },
                "x-fbn-apistatus": "EarlyAccess"
            },
            "put": {
                "tags": [
                    "Portfolio Groups"
                ],
                "summary": "[EARLY ACCESS] Update portfolio group",
                "description": "Update the definition of a single portfolio group. Not all elements within a portfolio group definition are modifiable\r\ndue to the potential implications for data already stored against the portfolio group.",
                "operationId": "UpdatePortfolioGroup",
                "consumes": [],
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ],
                "parameters": [
                    {
                        "name": "scope",
                        "in": "path",
                        "description": "The scope of the portfolio group to update the definition for.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "code",
                        "in": "path",
                        "description": "The code of the portfolio group to update the definition for. Together with the scope this uniquely identifies the portfolio group.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "request",
                        "in": "body",
                        "description": "The updated portfolio group definition.",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/UpdatePortfolioGroupRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "The updated definition of the portfolio group",
                        "schema": {
                            "$ref": "#/definitions/PortfolioGroup"
                        }
                    },
                    "400": {
                        "description": "The details of the input related failure",
                        "schema": {
                            "$ref": "#/definitions/LusidValidationProblemDetails"
                        }
                    },
                    "default": {
                        "description": "Error response",
                        "schema": {
                            "$ref": "#/definitions/LusidProblemDetails"
                        }
                    }
                },
                "x-fbn-apistatus": "EarlyAccess"
            },
            "delete": {
                "tags": [
                    "Portfolio Groups"
                ],
                "summary": "[EARLY ACCESS] Delete portfolio group",
                "description": "Delete a single portfolio group. A portfolio group can be deleted while it still contains portfolios or sub groups.\r\nIn this case any portfolios or sub groups contained in this group will not be deleted however they will no longer be grouped together by this portfolio group.",
                "operationId": "DeletePortfolioGroup",
                "consumes": [],
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ],
                "parameters": [
                    {
                        "name": "scope",
                        "in": "path",
                        "description": "The scope of the portfolio group to delete.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "code",
                        "in": "path",
                        "description": "The code of the portfolio group to delete. Together with the scope this uniquely identifies the portfolio group to delete.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The datetime that the portfolio group was deleted",
                        "schema": {
                            "$ref": "#/definitions/DeletedEntityResponse"
                        }
                    },
                    "400": {
                        "description": "The details of the input related failure",
                        "schema": {
                            "$ref": "#/definitions/LusidValidationProblemDetails"
                        }
                    },
                    "default": {
                        "description": "Error response",
                        "schema": {
                            "$ref": "#/definitions/LusidProblemDetails"
                        }
                    }
                },
                "x-fbn-apistatus": "EarlyAccess"
            }
        },
        "/api/portfoliogroups/{scope}/{code}/commands": {
            "get": {
                "tags": [
                    "Portfolio Groups"
                ],
                "summary": "[EARLY ACCESS] Get portfolio group commands",
                "description": "Gets all the commands that modified a single portfolio group.",
                "operationId": "GetPortfolioGroupCommands",
                "consumes": [],
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ],
                "parameters": [
                    {
                        "name": "scope",
                        "in": "path",
                        "description": "The scope of the portfolio group to retrieve the commands for.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "code",
                        "in": "path",
                        "description": "The code of the portfolio group to retrieve the commands for. Together with the scope this uniquely identifies the portfolio group.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "fromAsAt",
                        "in": "query",
                        "description": "The lower bound asAt datetime (inclusive) from which to retrieve commands. There is no lower bound if this is not specified.",
                        "required": false,
                        "type": "string",
                        "format": "date-time"
                    },
                    {
                        "name": "toAsAt",
                        "in": "query",
                        "description": "The upper bound asAt datetime (inclusive) from which to retrieve commands. There is no upper bound if this is not specified.",
                        "required": false,
                        "type": "string",
                        "format": "date-time"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Expression to filter the result set. Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The commands that modified the specified portfolio group",
                        "schema": {
                            "$ref": "#/definitions/ResourceListOfProcessedCommand"
                        }
                    },
                    "400": {
                        "description": "The details of the input related failure",
                        "schema": {
                            "$ref": "#/definitions/LusidValidationProblemDetails"
                        }
                    },
                    "default": {
                        "description": "Error response",
                        "schema": {
                            "$ref": "#/definitions/LusidProblemDetails"
                        }
                    }
                },
                "x-fbn-apistatus": "EarlyAccess"
            }
        },
        "/api/portfoliogroups/{scope}/{code}/expansion": {
            "get": {
                "tags": [
                    "Portfolio Groups"
                ],
                "summary": "[EARLY ACCESS] Get portfolio group expansion",
                "description": "List all the portfolios in a group, including all portfolios within sub groups in the group. Each portfolio will be decorated with all of its properties unless a property filter is specified.",
                "operationId": "GetPortfolioGroupExpansion",
                "consumes": [],
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ],
                "parameters": [
                    {
                        "name": "scope",
                        "in": "path",
                        "description": "The scope of the portfolio group to expand.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "code",
                        "in": "path",
                        "description": "The code of the portfolio group to expand. Together with the scope this uniquely identifies the portfolio\r\n            group to expand.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "effectiveAt",
                        "in": "query",
                        "description": "The effective datetime at which to expand the portfolio group. Defaults to the current LUSID system datetime if not specified.",
                        "required": false,
                        "type": "string",
                        "format": "date-time"
                    },
                    {
                        "name": "asAt",
                        "in": "query",
                        "description": "The asAt datetime at which to expand the portfolio group. Defaults to return the latest version of each portfolio in the group if not specified.",
                        "required": false,
                        "type": "string",
                        "format": "date-time"
                    },
                    {
                        "name": "propertyFilter",
                        "in": "query",
                        "description": "The restricted list of property keys from the \"Portfolio\" domain which will be decorated onto each portfolio. These take the format {domain}/{scope}/{code} e.g. \"Portfolio/Manager/Id\".",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi",
                        "uniqueItems": false
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The expanded portfolio group",
                        "schema": {
                            "$ref": "#/definitions/ExpandedGroup"
                        }
                    },
                    "400": {
                        "description": "The details of the input related failure",
                        "schema": {
                            "$ref": "#/definitions/LusidValidationProblemDetails"
                        }
                    },
                    "default": {
                        "description": "Error response",
                        "schema": {
                            "$ref": "#/definitions/LusidProblemDetails"
                        }
                    }
                },
                "x-fbn-apistatus": "EarlyAccess"
            }
        },
        "/api/portfoliogroups/{scope}/{code}/portfolios": {
            "post": {
                "tags": [
                    "Portfolio Groups"
                ],
                "summary": "[EARLY ACCESS] Add portfolio to group",
                "description": "Add a single portfolio to a portfolio group.",
                "operationId": "AddPortfolioToGroup",
                "consumes": [],
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ],
                "parameters": [
                    {
                        "name": "scope",
                        "in": "path",
                        "description": "The scope of the portfolio group to add a portfolio to.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "code",
                        "in": "path",
                        "description": "The code of the portfolio group to add a portfolio to. Together with the scope this uniquely identifies the portfolio group.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "portfolioId",
                        "in": "body",
                        "description": "The resource identifier of the portfolio to add to the portfolio group.",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/ResourceId"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "The portfolio group containing the newly added portfolio",
                        "schema": {
                            "$ref": "#/definitions/PortfolioGroup"
                        }
                    },
                    "400": {
                        "description": "The details of the input related failure",
                        "schema": {
                            "$ref": "#/definitions/LusidValidationProblemDetails"
                        }
                    },
                    "default": {
                        "description": "Error response",
                        "schema": {
                            "$ref": "#/definitions/LusidProblemDetails"
                        }
                    }
                },
                "x-fbn-apistatus": "EarlyAccess"
            }
        },
        "/api/portfoliogroups/{scope}/{code}/portfolios/{portfolioScope}/{portfolioCode}": {
            "delete": {
                "tags": [
                    "Portfolio Groups"
                ],
                "summary": "[EARLY ACCESS] Delete portfolio from group",
                "description": "Remove a single portfolio from a portfolio group.",
                "operationId": "DeletePortfolioFromGroup",
                "consumes": [],
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ],
                "parameters": [
                    {
                        "name": "scope",
                        "in": "path",
                        "description": "The scope of the portfolio group to remove the portfolio from.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "code",
                        "in": "path",
                        "description": "The code of the portfolio group to remove the portfolio from. Together with the scope this uniquely identifies the portfolio group.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "portfolioScope",
                        "in": "path",
                        "description": "The scope of the portfolio being removed from the portfolio group.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "portfolioCode",
                        "in": "path",
                        "description": "The code of the portfolio being removed from the portfolio group. Together with the scope this uniquely identifies the portfolio to remove.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The portfolio group with the portfolio removed from the group",
                        "schema": {
                            "$ref": "#/definitions/PortfolioGroup"
                        }
                    },
                    "400": {
                        "description": "The details of the input related failure",
                        "schema": {
                            "$ref": "#/definitions/LusidValidationProblemDetails"
                        }
                    },
                    "default": {
                        "description": "Error response",
                        "schema": {
                            "$ref": "#/definitions/LusidProblemDetails"
                        }
                    }
                },
                "x-fbn-apistatus": "EarlyAccess"
            }
        },
        "/api/portfoliogroups/{scope}/{code}/subgroups": {
            "post": {
                "tags": [
                    "Portfolio Groups"
                ],
                "summary": "[EARLY ACCESS] Add sub group to group",
                "description": "Add a portfolio group to a portfolio group as a sub group.",
                "operationId": "AddSubGroupToGroup",
                "consumes": [],
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ],
                "parameters": [
                    {
                        "name": "scope",
                        "in": "path",
                        "description": "The scope of the portfolio group to add a portfolio group to.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "code",
                        "in": "path",
                        "description": "The code of the portfolio group to add a portfolio group to. Together with the scope this uniquely identifies the portfolio group.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "portfolioGroupId",
                        "in": "body",
                        "description": "The resource identifier of the portfolio group to add to the portfolio group as a sub group.",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/ResourceId"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "The portfolio group containing the newly added portfolio group as a sub group",
                        "schema": {
                            "$ref": "#/definitions/PortfolioGroup"
                        }
                    },
                    "400": {
                        "description": "The details of the input related failure",
                        "schema": {
                            "$ref": "#/definitions/LusidValidationProblemDetails"
                        }
                    },
                    "default": {
                        "description": "Error response",
                        "schema": {
                            "$ref": "#/definitions/LusidProblemDetails"
                        }
                    }
                },
                "x-fbn-apistatus": "EarlyAccess"
            }
        },
        "/api/portfoliogroups/{scope}/{code}/subgroups/{subgroupScope}/{subgroupCode}": {
            "delete": {
                "tags": [
                    "Portfolio Groups"
                ],
                "summary": "[EARLY ACCESS] Delete sub group from group",
                "description": "Remove a single portfolio group (sub group) from a portfolio group.",
                "operationId": "DeleteSubGroupFromGroup",
                "consumes": [],
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ],
                "parameters": [
                    {
                        "name": "scope",
                        "in": "path",
                        "description": "The scope of the portfolio group to remove the sub group from.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "code",
                        "in": "path",
                        "description": "The code of the portfolio group to remove the sub group from. Together with the scope this uniquely identifies the portfolio group.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "subgroupScope",
                        "in": "path",
                        "description": "The scope of the sub group to remove from the portfolio group.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "subgroupCode",
                        "in": "path",
                        "description": "The code of the sub group to remove from the portfolio group. Together with the scope this uniquely identifies the sub group.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The portfolio group with the sub group removed from the group",
                        "schema": {
                            "$ref": "#/definitions/PortfolioGroup"
                        }
                    },
                    "400": {
                        "description": "The details of the input related failure",
                        "schema": {
                            "$ref": "#/definitions/LusidValidationProblemDetails"
                        }
                    },
                    "default": {
                        "description": "Error response",
                        "schema": {
                            "$ref": "#/definitions/LusidProblemDetails"
                        }
                    }
                },
                "x-fbn-apistatus": "EarlyAccess"
            }
        },
        "/api/portfolios": {
            "get": {
                "tags": [
                    "Portfolios"
                ],
                "summary": "[EARLY ACCESS] List portfolios",
                "description": "List all the portfolios matching the specified criteria.",
                "operationId": "ListPortfolios",
                "consumes": [],
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ],
                "parameters": [
                    {
                        "name": "effectiveAt",
                        "in": "query",
                        "description": "The effective datetime or cut label at which to list the portfolios. Defaults to the current LUSID\r\n            system datetime if not specified.",
                        "required": false,
                        "type": "string",
                        "format": "dateorcutlabel"
                    },
                    {
                        "name": "asAt",
                        "in": "query",
                        "description": "The asAt datetime at which to list the portfolios. Defaults to return the latest version\r\n            of each portfolio if not specified.",
                        "required": false,
                        "type": "string",
                        "format": "date-time"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "The pagination token to use to continue listing portfolios from a previous call to list portfolios. This\r\nvalue is returned from the previous call. If a pagination token is provided the filter, effectiveAt\r\nand asAt fields must not have changed since the original request. Also, if set, a start value cannot be provided.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "start",
                        "in": "query",
                        "description": "When paginating, skip this number of results.",
                        "required": false,
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "When paginating, limit the number of returned results to this many. Defaults to 65,535 if not specified.",
                        "required": false,
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Expression to filter the result set. Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "query",
                        "in": "query",
                        "description": "Expression specifying the criteria that the returned portfolios must meet e.g. to see which\r\n            portfolios have holdings in the instruments with a Lusid Instrument Id (LUID) of 'LUID_PPA8HI6M' or a Figi of 'BBG000BLNNH6'\r\n            you would specify \"instrument.identifiers in (('LusidInstrumentId', 'LUID_PPA8HI6M'), ('Figi', 'BBG000BLNNH6'))\".",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "portfolioPropertyKeys",
                        "in": "query",
                        "description": "A list of property keys from the \"Portfolio\" domain to decorate onto each portfolio.\r\n            These take the format {domain}/{scope}/{code} e.g. \"Portfolio/Manager/Id\".",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi",
                        "uniqueItems": false
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The requested portfolios",
                        "schema": {
                            "$ref": "#/definitions/ResourceListOfPortfolio"
                        }
                    },
                    "400": {
                        "description": "The details of the input related failure",
                        "schema": {
                            "$ref": "#/definitions/LusidValidationProblemDetails"
                        }
                    },
                    "default": {
                        "description": "Error response",
                        "schema": {
                            "$ref": "#/definitions/LusidProblemDetails"
                        }
                    }
                },
                "x-fbn-apistatus": "EarlyAccess"
            }
        },
        "/api/portfolios/{scope}": {
            "get": {
                "tags": [
                    "Portfolios"
                ],
                "summary": "[EARLY ACCESS] List portfolios for scope",
                "description": "List all the portfolios in a single scope.",
                "operationId": "ListPortfoliosForScope",
                "consumes": [],
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ],
                "parameters": [
                    {
                        "name": "scope",
                        "in": "path",
                        "description": "The scope of the portfolios.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "effectiveAt",
                        "in": "query",
                        "description": "The effective datetime or cut label at which to list the portfolios. Defaults to the current LUSID\r\n            system datetime if not specified.",
                        "required": false,
                        "type": "string",
                        "format": "dateorcutlabel"
                    },
                    {
                        "name": "asAt",
                        "in": "query",
                        "description": "The asAt datetime at which to list the portfolios. Defaults to return the latest version\r\n            of each portfolio if not specified.",
                        "required": false,
                        "type": "string",
                        "format": "date-time"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Expression to filter the result set. Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "portfolioPropertyKeys",
                        "in": "query",
                        "description": "A list of property keys from the \"Portfolio\" domain to decorate onto each portfolio.\r\n            These take the format {domain}/{scope}/{code} e.g. \"Portfolio/Manager/Id\".",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi",
                        "uniqueItems": false
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The portfolios in the specified scope",
                        "schema": {
                            "$ref": "#/definitions/ResourceListOfPortfolio"
                        }
                    },
                    "400": {
                        "description": "The details of the input related failure",
                        "schema": {
                            "$ref": "#/definitions/LusidValidationProblemDetails"
                        }
                    },
                    "default": {
                        "description": "Error response",
                        "schema": {
                            "$ref": "#/definitions/LusidProblemDetails"
                        }
                    }
                },
                "x-fbn-apistatus": "EarlyAccess"
            }
        },
        "/api/portfolios/{scope}/{code}": {
            "get": {
                "tags": [
                    "Portfolios"
                ],
                "summary": "[EARLY ACCESS] Get portfolio",
                "description": "Retrieve the definition of a single portfolio.",
                "operationId": "GetPortfolio",
                "consumes": [],
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ],
                "parameters": [
                    {
                        "name": "scope",
                        "in": "path",
                        "description": "The scope of the portfolio to retrieve the definition for.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "code",
                        "in": "path",
                        "description": "The code of the portfolio to retrieve the definition for. Together with the scope this\r\n            uniquely identifies the portfolio.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "effectiveAt",
                        "in": "query",
                        "description": "The effective datetime or cut label at which to retrieve the portfolio definition. Defaults to the current LUSID system datetime if not specified.",
                        "required": false,
                        "type": "string",
                        "format": "dateorcutlabel"
                    },
                    {
                        "name": "asAt",
                        "in": "query",
                        "description": "The asAt datetime at which to retrieve the portfolio definition. Defaults to return the latest version of the portfolio definition if not specified.",
                        "required": false,
                        "type": "string",
                        "format": "date-time"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The requested portfolio definition",
                        "schema": {
                            "$ref": "#/definitions/Portfolio"
                        }
                    },
                    "400": {
                        "description": "The details of the input related failure",
                        "schema": {
                            "$ref": "#/definitions/LusidValidationProblemDetails"
                        }
                    },
                    "default": {
                        "description": "Error response",
                        "schema": {
                            "$ref": "#/definitions/LusidProblemDetails"
                        }
                    }
                },
                "x-fbn-apistatus": "EarlyAccess"
            },
            "put": {
                "tags": [
                    "Portfolios"
                ],
                "summary": "[EARLY ACCESS] Update portfolio",
                "description": "Update the definition of a single portfolio. Not all elements within a portfolio definition are\r\nmodifiable due to the potential implications for data already stored against the portfolio.",
                "operationId": "UpdatePortfolio",
                "consumes": [],
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ],
                "parameters": [
                    {
                        "name": "scope",
                        "in": "path",
                        "description": "The scope of the portfolio to update the definition for.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "code",
                        "in": "path",
                        "description": "The code of the portfolio to update the definition for. Together with the scope this uniquely\r\n            identifies the portfolio.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "request",
                        "in": "body",
                        "description": "The updated portfolio definition.",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/UpdatePortfolioRequest"
                        }
                    },
                    {
                        "name": "effectiveAt",
                        "in": "query",
                        "description": "The effective datetime or cut label at which to update the definition. Defaults to the current\r\n            LUSID system datetime if not specified.",
                        "required": false,
                        "type": "string",
                        "format": "dateorcutlabel"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The updated definition of the portfolio",
                        "schema": {
                            "$ref": "#/definitions/Portfolio"
                        }
                    },
                    "400": {
                        "description": "The details of the input related failure",
                        "schema": {
                            "$ref": "#/definitions/LusidValidationProblemDetails"
                        }
                    },
                    "default": {
                        "description": "Error response",
                        "schema": {
                            "$ref": "#/definitions/LusidProblemDetails"
                        }
                    }
                },
                "x-fbn-apistatus": "EarlyAccess"
            },
            "delete": {
                "tags": [
                    "Portfolios"
                ],
                "summary": "[EARLY ACCESS] Delete portfolio",
                "description": "Delete a single portfolio. The deletion of the portfolio will be valid from the portfolio's creation datetime. This means that the portfolio will no longer exist at any effective datetime from the asAt datetime of deletion.",
                "operationId": "DeletePortfolio",
                "consumes": [],
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ],
                "parameters": [
                    {
                        "name": "scope",
                        "in": "path",
                        "description": "The scope of the portfolio.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "code",
                        "in": "path",
                        "description": "The code of the portfolio.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The datetime that the portfolio was deleted",
                        "schema": {
                            "$ref": "#/definitions/DeletedEntityResponse"
                        }
                    },
                    "400": {
                        "description": "The details of the input related failure",
                        "schema": {
                            "$ref": "#/definitions/LusidValidationProblemDetails"
                        }
                    },
                    "default": {
                        "description": "Error response",
                        "schema": {
                            "$ref": "#/definitions/LusidProblemDetails"
                        }
                    }
                },
                "x-fbn-apistatus": "EarlyAccess"
            }
        },
        "/api/portfolios/{scope}/{code}/commands": {
            "get": {
                "tags": [
                    "Portfolios"
                ],
                "summary": "[EARLY ACCESS] Get portfolio commands",
                "description": "Gets all the commands that modified a single portfolio, including any input transactions.",
                "operationId": "GetPortfolioCommands",
                "consumes": [],
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ],
                "parameters": [
                    {
                        "name": "scope",
                        "in": "path",
                        "description": "The scope of the portfolio to retrieve the commands for.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "code",
                        "in": "path",
                        "description": "The code of the portfolio to retrieve the commands for. Together with the scope this uniquely identifies\r\n            the portfolio.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "fromAsAt",
                        "in": "query",
                        "description": "The lower bound asAt datetime (inclusive) from which to retrieve commands. There is no lower bound if this is not specified.",
                        "required": false,
                        "type": "string",
                        "format": "date-time"
                    },
                    {
                        "name": "toAsAt",
                        "in": "query",
                        "description": "The upper bound asAt datetime (inclusive) from which to retrieve commands. There is no upper bound if this is not specified.",
                        "required": false,
                        "type": "string",
                        "format": "date-time"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Expression to filter the result set. Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The commands that modified the specified portfolio.",
                        "schema": {
                            "$ref": "#/definitions/ResourceListOfProcessedCommand"
                        }
                    },
                    "400": {
                        "description": "The details of the input related failure",
                        "schema": {
                            "$ref": "#/definitions/LusidValidationProblemDetails"
                        }
                    },
                    "default": {
                        "description": "Error response",
                        "schema": {
                            "$ref": "#/definitions/LusidProblemDetails"
                        }
                    }
                },
                "x-fbn-apistatus": "EarlyAccess"
            }
        },
        "/api/portfolios/{scope}/{code}/properties": {
            "get": {
                "tags": [
                    "Portfolios"
                ],
                "summary": "[EARLY ACCESS] Get portfolio properties",
                "description": "List all the properties of a single portfolio.",
                "operationId": "GetPortfolioProperties",
                "consumes": [],
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ],
                "parameters": [
                    {
                        "name": "scope",
                        "in": "path",
                        "description": "The scope of the portfolio to list the properties for.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "code",
                        "in": "path",
                        "description": "The code of the portfolio to list the properties for. Together with the scope this uniquely\r\n            identifies the portfolio.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "effectiveAt",
                        "in": "query",
                        "description": "The effective datetime or cut label at which to list the portfolio's properties. Defaults to the current LUSID system datetime if not specified.",
                        "required": false,
                        "type": "string",
                        "format": "dateorcutlabel"
                    },
                    {
                        "name": "asAt",
                        "in": "query",
                        "description": "The asAt datetime at which to list the portfolio's properties. Defaults to return the latest version of each property if not specified.",
                        "required": false,
                        "type": "string",
                        "format": "date-time"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The properties of the specified portfolio",
                        "schema": {
                            "$ref": "#/definitions/PortfolioProperties"
                        }
                    },
                    "400": {
                        "description": "The details of the input related failure",
                        "schema": {
                            "$ref": "#/definitions/LusidValidationProblemDetails"
                        }
                    },
                    "default": {
                        "description": "Error response",
                        "schema": {
                            "$ref": "#/definitions/LusidProblemDetails"
                        }
                    }
                },
                "x-fbn-apistatus": "EarlyAccess"
            },
            "post": {
                "tags": [
                    "Portfolios"
                ],
                "summary": "[EARLY ACCESS] Upsert portfolio properties",
                "description": "Update or insert one or more properties onto a single portfolio. A property will be updated if it\r\nalready exists and inserted if it does not. All properties must be of the domain 'Portfolio'.",
                "operationId": "UpsertPortfolioProperties",
                "consumes": [],
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ],
                "parameters": [
                    {
                        "name": "scope",
                        "in": "path",
                        "description": "The scope of the portfolio to update or insert the properties onto.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "code",
                        "in": "path",
                        "description": "The code of the portfolio to update or insert the properties onto. Together with the scope\r\n            this uniquely identifies the portfolio.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "portfolioProperties",
                        "in": "body",
                        "description": "The properties to be updated or inserted onto the portfolio. Each property in\r\n            the request must be keyed by its unique property key. This has the format {domain}/{scope}/{code} e.g. \"Portfolio/Manager/Id\".",
                        "required": false,
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "$ref": "#/definitions/Property"
                            },
                            "example": {
                                "Portfolio/MyScope/MyPropertyName": {
                                    "key": "Portfolio/MyScope/MyPropertyName",
                                    "value": {
                                        "metricValue": {
                                            "value": 12345.5672,
                                            "unit": "Unit"
                                        }
                                    },
                                    "effectiveFrom": "2018-03-05T00:00:00+00:00"
                                },
                                "Portfolio/MyScope/MyPropertyName2": {
                                    "key": "Portfolio/MyScope/MyPropertyName2",
                                    "value": {
                                        "metricValue": {
                                            "value": 925.3,
                                            "unit": "Unit"
                                        }
                                    },
                                    "effectiveFrom": "2018-03-05T00:00:00+00:00"
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The updated or inserted properties",
                        "schema": {
                            "$ref": "#/definitions/PortfolioProperties"
                        }
                    },
                    "400": {
                        "description": "The details of the input related failure",
                        "schema": {
                            "$ref": "#/definitions/LusidValidationProblemDetails"
                        }
                    },
                    "default": {
                        "description": "Error response",
                        "schema": {
                            "$ref": "#/definitions/LusidProblemDetails"
                        }
                    }
                },
                "x-fbn-apistatus": "EarlyAccess"
            },
            "delete": {
                "tags": [
                    "Portfolios"
                ],
                "summary": "[EARLY ACCESS] Delete portfolio properties",
                "description": "Delete one or more properties from a single portfolio. If the properties are time variant then an effective date time from which the properties\r\nwill be deleted must be specified. If the properties are perpetual then it is invalid to specify an effective date time for deletion.",
                "operationId": "DeletePortfolioProperties",
                "consumes": [],
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ],
                "parameters": [
                    {
                        "name": "scope",
                        "in": "path",
                        "description": "The scope of the portfolio to delete properties from.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "code",
                        "in": "path",
                        "description": "The code of the portfolio to delete properties from. Together with the scope this uniquely\r\n            identifies the portfolio.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "effectiveAt",
                        "in": "query",
                        "description": "The effective datetime or cut label at which to delete the properties.",
                        "required": false,
                        "type": "string",
                        "format": "dateorcutlabel"
                    },
                    {
                        "name": "portfolioPropertyKeys",
                        "in": "query",
                        "description": "The property keys of the properties to delete. These take the format\r\n            {domain}/{scope}/{code} e.g. \"Portfolio/Manager/Id\". Each property must be from the \"Portfolio\" domain.",
                        "required": true,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi",
                        "uniqueItems": false
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The datetime that the properties were deleted from the specified portfolio",
                        "schema": {
                            "$ref": "#/definitions/DeletedEntityResponse"
                        }
                    },
                    "400": {
                        "description": "The details of the input related failure",
                        "schema": {
                            "$ref": "#/definitions/LusidValidationProblemDetails"
                        }
                    },
                    "default": {
                        "description": "Error response",
                        "schema": {
                            "$ref": "#/definitions/LusidProblemDetails"
                        }
                    }
                },
                "x-fbn-apistatus": "EarlyAccess"
            }
        },
        "/api/portfolios/$reconcileholdings": {
            "post": {
                "tags": [
                    "Reconciliations"
                ],
                "summary": "[EARLY ACCESS] Reconcile portfolio holdings",
                "description": "Reconcile the holdings of two portfolios.",
                "operationId": "ReconcileHoldings",
                "consumes": [],
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ],
                "parameters": [
                    {
                        "name": "request",
                        "in": "body",
                        "description": "The specifications of the inputs to the reconciliation",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/PortfoliosReconciliationRequest"
                        }
                    },
                    {
                        "name": "sortBy",
                        "in": "query",
                        "description": "Optional. Order the results by these fields. Use use the '-' sign to denote descending order e.g. -MyFieldName",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi",
                        "uniqueItems": false
                    },
                    {
                        "name": "start",
                        "in": "query",
                        "description": "Optional. When paginating, skip this number of results",
                        "required": false,
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Optional. When paginating, limit the number of returned results to this many.",
                        "required": false,
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Optional. Expression to filter the result set",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The requested reconciliation",
                        "schema": {
                            "$ref": "#/definitions/ResourceListOfReconciliationBreak"
                        }
                    },
                    "400": {
                        "description": "The details of the input related failure",
                        "schema": {
                            "$ref": "#/definitions/LusidValidationProblemDetails"
                        }
                    },
                    "default": {
                        "description": "Error response",
                        "schema": {
                            "$ref": "#/definitions/LusidProblemDetails"
                        }
                    }
                },
                "x-fbn-apistatus": "EarlyAccess"
            }
        },
        "/api/propertydefinitions": {
            "get": {
                "tags": [
                    "Property Definitions"
                ],
                "summary": "[EARLY ACCESS] Get multiple property definitions",
                "description": "Retrieve the definition of one or more specified properties.",
                "operationId": "GetMultiplePropertyDefinitions",
                "consumes": [],
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ],
                "parameters": [
                    {
                        "name": "propertyKeys",
                        "in": "query",
                        "description": "One or more property keys which identify each property that a definition should\r\n            be retrieved for. The format for each property key is {domain}/{scope}/{code}, e.g. 'Portfolio/Manager/Id'.",
                        "required": true,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi",
                        "uniqueItems": false
                    },
                    {
                        "name": "asAt",
                        "in": "query",
                        "description": "The asAt datetime at which to retrieve the property definitions. Defaults to return\r\n            the latest version of each definition if not specified.",
                        "required": false,
                        "type": "string",
                        "format": "date-time"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Expression to filter the result set. Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The requested property definitions",
                        "schema": {
                            "$ref": "#/definitions/ResourceListOfPropertyDefinition"
                        }
                    },
                    "400": {
                        "description": "The details of the input related failure",
                        "schema": {
                            "$ref": "#/definitions/LusidValidationProblemDetails"
                        }
                    },
                    "default": {
                        "description": "Error response",
                        "schema": {
                            "$ref": "#/definitions/LusidProblemDetails"
                        }
                    }
                },
                "x-fbn-apistatus": "EarlyAccess"
            },
            "post": {
                "tags": [
                    "Property Definitions"
                ],
                "summary": "[EARLY ACCESS] Create property definition",
                "description": "Define a new property.",
                "operationId": "CreatePropertyDefinition",
                "consumes": [],
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ],
                "parameters": [
                    {
                        "name": "definition",
                        "in": "body",
                        "description": "The definition of the new property.",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CreatePropertyDefinitionRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "The newly created property definition",
                        "schema": {
                            "$ref": "#/definitions/PropertyDefinition"
                        }
                    },
                    "400": {
                        "description": "The details of the input related failure",
                        "schema": {
                            "$ref": "#/definitions/LusidValidationProblemDetails"
                        }
                    },
                    "default": {
                        "description": "Error response",
                        "schema": {
                            "$ref": "#/definitions/LusidProblemDetails"
                        }
                    }
                },
                "x-fbn-apistatus": "EarlyAccess"
            }
        },
        "/api/propertydefinitions/{domain}/{scope}/{code}": {
            "get": {
                "tags": [
                    "Property Definitions"
                ],
                "summary": "[EARLY ACCESS] Get property definition",
                "description": "Retrieve the definition of a specified property.",
                "operationId": "GetPropertyDefinition",
                "consumes": [],
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ],
                "parameters": [
                    {
                        "name": "domain",
                        "in": "path",
                        "description": "The domain of the specified property.",
                        "required": true,
                        "type": "string",
                        "enum": [
                            "NotDefined",
                            "Transaction",
                            "Portfolio",
                            "Holding",
                            "ReferenceHolding",
                            "TransactionConfiguration",
                            "Instrument",
                            "CutLabelDefinition",
                            "Analytic"
                        ]
                    },
                    {
                        "name": "scope",
                        "in": "path",
                        "description": "The scope of the specified property.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "code",
                        "in": "path",
                        "description": "The code of the specified property. Together with the domain and scope this uniquely\r\n            identifies the property.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "asAt",
                        "in": "query",
                        "description": "The asAt datetime at which to retrieve the property definition. Defaults to return\r\n            the latest version of the definition if not specified.",
                        "required": false,
                        "type": "string",
                        "format": "date-time"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The requested property definition",
                        "schema": {
                            "$ref": "#/definitions/PropertyDefinition"
                        }
                    },
                    "400": {
                        "description": "The details of the input related failure",
                        "schema": {
                            "$ref": "#/definitions/LusidValidationProblemDetails"
                        }
                    },
                    "default": {
                        "description": "Error response",
                        "schema": {
                            "$ref": "#/definitions/LusidProblemDetails"
                        }
                    }
                },
                "x-fbn-apistatus": "EarlyAccess"
            },
            "put": {
                "tags": [
                    "Property Definitions"
                ],
                "summary": "[EARLY ACCESS] Update property definition",
                "description": "Update the definition of a specified existing property. Not all elements within a property definition\r\nare modifiable due to the potential implications for values already stored against the property.",
                "operationId": "UpdatePropertyDefinition",
                "consumes": [],
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ],
                "parameters": [
                    {
                        "name": "domain",
                        "in": "path",
                        "description": "The domain of the property being updated.",
                        "required": true,
                        "type": "string",
                        "enum": [
                            "NotDefined",
                            "Transaction",
                            "Portfolio",
                            "Holding",
                            "ReferenceHolding",
                            "TransactionConfiguration",
                            "Instrument",
                            "CutLabelDefinition",
                            "Analytic"
                        ]
                    },
                    {
                        "name": "scope",
                        "in": "path",
                        "description": "The scope of the property being updated.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "code",
                        "in": "path",
                        "description": "The code of the property being updated. Together with the domain and scope this uniquely\r\n            identifies the property.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "definition",
                        "in": "body",
                        "description": "The updated definition of the property.",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/UpdatePropertyDefinitionRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The updated property definition",
                        "schema": {
                            "$ref": "#/definitions/PropertyDefinition"
                        }
                    },
                    "400": {
                        "description": "The details of the input related failure",
                        "schema": {
                            "$ref": "#/definitions/LusidValidationProblemDetails"
                        }
                    },
                    "default": {
                        "description": "Error response",
                        "schema": {
                            "$ref": "#/definitions/LusidProblemDetails"
                        }
                    }
                },
                "x-fbn-apistatus": "EarlyAccess"
            },
            "delete": {
                "tags": [
                    "Property Definitions"
                ],
                "summary": "[EARLY ACCESS] Delete property definition",
                "description": "Delete the definition of the specified property.",
                "operationId": "DeletePropertyDefinition",
                "consumes": [],
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ],
                "parameters": [
                    {
                        "name": "domain",
                        "in": "path",
                        "description": "The domain of the property to be deleted.",
                        "required": true,
                        "type": "string",
                        "enum": [
                            "NotDefined",
                            "Transaction",
                            "Portfolio",
                            "Holding",
                            "ReferenceHolding",
                            "TransactionConfiguration",
                            "Instrument",
                            "CutLabelDefinition",
                            "Analytic"
                        ]
                    },
                    {
                        "name": "scope",
                        "in": "path",
                        "description": "The scope of the property to be deleted.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "code",
                        "in": "path",
                        "description": "The code of the property to be deleted. Together with the domain and scope this uniquely\r\n            identifies the property.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The time that the property definition was deleted",
                        "schema": {
                            "$ref": "#/definitions/DeletedEntityResponse"
                        }
                    },
                    "400": {
                        "description": "The details of the input related failure",
                        "schema": {
                            "$ref": "#/definitions/LusidValidationProblemDetails"
                        }
                    },
                    "default": {
                        "description": "Error response",
                        "schema": {
                            "$ref": "#/definitions/LusidProblemDetails"
                        }
                    }
                },
                "x-fbn-apistatus": "EarlyAccess"
            }
        },
        "/api/referenceportfolios/{scope}": {
            "post": {
                "tags": [
                    "Reference Portfolio"
                ],
                "summary": "[EARLY ACCESS] Create reference portfolio",
                "description": "Create a new reference portfolio.",
                "operationId": "CreateReferencePortfolio",
                "consumes": [],
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ],
                "parameters": [
                    {
                        "name": "scope",
                        "in": "path",
                        "description": "The intended scope of the portfolio",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "referencePortfolio",
                        "in": "body",
                        "description": "The portfolio creation request object",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/CreateReferencePortfolioRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "The created reference portfolio, with populated id",
                        "schema": {
                            "$ref": "#/definitions/Portfolio"
                        }
                    },
                    "400": {
                        "description": "The details of the input related failure",
                        "schema": {
                            "$ref": "#/definitions/LusidValidationProblemDetails"
                        }
                    },
                    "default": {
                        "description": "Error response",
                        "schema": {
                            "$ref": "#/definitions/LusidProblemDetails"
                        }
                    }
                },
                "x-fbn-apistatus": "EarlyAccess"
            }
        },
        "/api/referenceportfolios/{scope}/{code}/constituents": {
            "get": {
                "tags": [
                    "Reference Portfolio"
                ],
                "summary": "[EARLY ACCESS] Get constituents",
                "description": "Get constituents from the specified reference portfolio at an effective time.",
                "operationId": "GetReferencePortfolioConstituents",
                "consumes": [],
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ],
                "parameters": [
                    {
                        "name": "scope",
                        "in": "path",
                        "description": "The scope of the reference portfolio.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "code",
                        "in": "path",
                        "description": "The code of the reference portfolio. Together with the scope this uniquely identifies\r\n            the reference portfolio.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "effectiveAt",
                        "in": "query",
                        "description": "The effective date of the constituents to retrieve. Defaults to the current LUSID system datetime if not specified.",
                        "required": false,
                        "type": "string",
                        "format": "dateorcutlabel"
                    },
                    {
                        "name": "asAt",
                        "in": "query",
                        "description": "The asAt datetime at which to retrieve constituents. Defaults to return the latest version\r\n            of each constituent if not specified.",
                        "required": false,
                        "type": "string",
                        "format": "date-time"
                    },
                    {
                        "name": "propertyKeys",
                        "in": "query",
                        "description": "A list of property keys from the \"Instrument\" or \"ReferenceHolding\" domain to decorate onto\r\n            the constituents. These take the format {domain}/{scope}/{code} e.g. \"Instrument/system/Name\" or\r\n            \"ReferenceHolding/strategy/quantsignal\". Defaults to return all available instrument and reference holding properties if not specified.",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi",
                        "uniqueItems": false
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The requested reference portfolio constituents",
                        "schema": {
                            "$ref": "#/definitions/GetReferencePortfolioConstituentsResponse"
                        }
                    },
                    "400": {
                        "description": "The details of the input related failure",
                        "schema": {
                            "$ref": "#/definitions/LusidValidationProblemDetails"
                        }
                    },
                    "default": {
                        "description": "Error response",
                        "schema": {
                            "$ref": "#/definitions/LusidProblemDetails"
                        }
                    }
                },
                "x-fbn-apistatus": "EarlyAccess"
            },
            "post": {
                "tags": [
                    "Reference Portfolio"
                ],
                "summary": "[EARLY ACCESS] Add constituents",
                "description": "Add constituents to the specified reference portfolio.",
                "operationId": "UpsertReferencePortfolioConstituents",
                "consumes": [],
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ],
                "parameters": [
                    {
                        "name": "scope",
                        "in": "path",
                        "description": "The scope of the portfolio",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "code",
                        "in": "path",
                        "description": "The code of the portfolio",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "constituents",
                        "in": "body",
                        "description": "The constituents to upload to the portfolio",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/UpsertReferencePortfolioConstituentsRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/UpsertReferencePortfolioConstituentsResponse"
                        }
                    },
                    "400": {
                        "description": "The details of the input related failure",
                        "schema": {
                            "$ref": "#/definitions/LusidValidationProblemDetails"
                        }
                    },
                    "default": {
                        "description": "Error response",
                        "schema": {
                            "$ref": "#/definitions/LusidProblemDetails"
                        }
                    }
                },
                "x-fbn-apistatus": "EarlyAccess"
            }
        },
        "/api/referenceportfolios/{scope}/{code}/constituentsadjustments": {
            "get": {
                "tags": [
                    "Reference Portfolio"
                ],
                "summary": "[EARLY ACCESS] Gets constituents adjustments in an interval of effective time.",
                "description": "Specify a time period in which you'd like to see the list of times that adjustments where made to this portfolio",
                "operationId": "ListConstituentsAdjustments",
                "consumes": [],
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ],
                "parameters": [
                    {
                        "name": "scope",
                        "in": "path",
                        "description": "The scope of the portfolio",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "code",
                        "in": "path",
                        "description": "Code for the portfolio",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "fromEffectiveAt",
                        "in": "query",
                        "description": "Events between this time (inclusive) and the toEffectiveAt are returned.",
                        "required": false,
                        "type": "string",
                        "format": "dateorcutlabel"
                    },
                    {
                        "name": "toEffectiveAt",
                        "in": "query",
                        "description": "Events between this time (inclusive) and the fromEffectiveAt are returned.",
                        "required": false,
                        "type": "string",
                        "format": "dateorcutlabel"
                    },
                    {
                        "name": "asAtTime",
                        "in": "query",
                        "description": "The as-at time for which the result is valid.",
                        "required": false,
                        "type": "string",
                        "format": "date-time"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ResourceListOfConstituentsAdjustmentHeader"
                        }
                    },
                    "400": {
                        "description": "The details of the input related failure",
                        "schema": {
                            "$ref": "#/definitions/LusidValidationProblemDetails"
                        }
                    },
                    "default": {
                        "description": "Error response",
                        "schema": {
                            "$ref": "#/definitions/LusidProblemDetails"
                        }
                    }
                },
                "x-fbn-apistatus": "EarlyAccess"
            }
        },
        "/api/scopes": {
            "get": {
                "tags": [
                    "Scopes"
                ],
                "summary": "[EARLY ACCESS] List scopes",
                "description": "List all the scopes that contain data.",
                "operationId": "ListScopes",
                "consumes": [],
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ],
                "parameters": [
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Expression to filter the result set. Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A list of scopes",
                        "schema": {
                            "$ref": "#/definitions/ResourceListOfScopeDefinition"
                        }
                    },
                    "400": {
                        "description": "The details of the input related failure",
                        "schema": {
                            "$ref": "#/definitions/LusidValidationProblemDetails"
                        }
                    },
                    "default": {
                        "description": "Error response",
                        "schema": {
                            "$ref": "#/definitions/LusidProblemDetails"
                        }
                    }
                },
                "x-fbn-apistatus": "EarlyAccess"
            }
        },
        "/api/systemconfiguration/cutlabels": {
            "get": {
                "tags": [
                    "Cut Label Definitions"
                ],
                "summary": "[EARLY ACCESS] List Existing Cut Labels",
                "description": "List all the Cut Label Definitions that are valid at the given AsAt time",
                "operationId": "ListCutLabelDefinitions",
                "consumes": [],
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ],
                "parameters": [
                    {
                        "name": "asAt",
                        "in": "query",
                        "description": "Optional. The As At time at which listed Cut Labels are valid",
                        "required": false,
                        "type": "string",
                        "format": "date-time"
                    },
                    {
                        "name": "sortBy",
                        "in": "query",
                        "description": "Optional. Order the results by these fields. Use use the '-' sign to denote descending order e.g. -MyFieldName",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi",
                        "uniqueItems": false
                    },
                    {
                        "name": "start",
                        "in": "query",
                        "description": "Optional. When paginating, skip this number of results",
                        "required": false,
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Optional. When paginating, limit the number of returned results to this many.",
                        "required": false,
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Optional. Expression to filter the result set",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "query",
                        "in": "query",
                        "description": "Optional. Expression specifying the criteria that the returned cut labels must meet",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A list of cut labels",
                        "schema": {
                            "$ref": "#/definitions/ResourceListOfCutLabelDefinition"
                        }
                    },
                    "400": {
                        "description": "The details of the input related failure",
                        "schema": {
                            "$ref": "#/definitions/LusidValidationProblemDetails"
                        }
                    },
                    "default": {
                        "description": "Error response",
                        "schema": {
                            "$ref": "#/definitions/LusidProblemDetails"
                        }
                    }
                },
                "x-fbn-apistatus": "EarlyAccess"
            },
            "post": {
                "tags": [
                    "Cut Label Definitions"
                ],
                "summary": "[EARLY ACCESS] Create a Cut Label",
                "description": "Create a Cut Label valid in all scopes",
                "operationId": "CreateCutLabelDefinition",
                "consumes": [],
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ],
                "parameters": [
                    {
                        "name": "createRequest",
                        "in": "body",
                        "description": "The cut label definition",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/CreateCutLabelDefinitionRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "The created cut label",
                        "schema": {
                            "$ref": "#/definitions/CutLabelDefinition"
                        }
                    },
                    "400": {
                        "description": "The details of the input related failure",
                        "schema": {
                            "$ref": "#/definitions/LusidValidationProblemDetails"
                        }
                    },
                    "default": {
                        "description": "Error response",
                        "schema": {
                            "$ref": "#/definitions/LusidProblemDetails"
                        }
                    }
                },
                "x-fbn-apistatus": "EarlyAccess"
            }
        },
        "/api/systemconfiguration/cutlabels/{code}": {
            "get": {
                "tags": [
                    "Cut Label Definitions"
                ],
                "summary": "[EARLY ACCESS] Get a Cut Label",
                "description": "Get a specified cut label at a given time",
                "operationId": "GetCutLabelDefinition",
                "consumes": [],
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ],
                "parameters": [
                    {
                        "name": "code",
                        "in": "path",
                        "description": "The Code of the Cut Label that is being queried",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "asAt",
                        "in": "query",
                        "description": "The time at which to get the Cut Label",
                        "required": false,
                        "type": "string",
                        "format": "date-time"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The requested cut label",
                        "schema": {
                            "$ref": "#/definitions/CutLabelDefinition"
                        }
                    },
                    "400": {
                        "description": "The details of the input related failure",
                        "schema": {
                            "$ref": "#/definitions/LusidValidationProblemDetails"
                        }
                    },
                    "default": {
                        "description": "Error response",
                        "schema": {
                            "$ref": "#/definitions/LusidProblemDetails"
                        }
                    }
                },
                "x-fbn-apistatus": "EarlyAccess"
            },
            "put": {
                "tags": [
                    "Cut Label Definitions"
                ],
                "summary": "[EARLY ACCESS] Update a Cut Label",
                "description": "Update a specified cut label",
                "operationId": "UpdateCutLabelDefinition",
                "consumes": [],
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ],
                "parameters": [
                    {
                        "name": "code",
                        "in": "path",
                        "description": "The Code of the Cut Label that is being updated",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "updateRequest",
                        "in": "body",
                        "description": "The cut label update definition",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/UpdateCutLabelDefinitionRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The updated cut label",
                        "schema": {
                            "$ref": "#/definitions/CutLabelDefinition"
                        }
                    },
                    "400": {
                        "description": "The details of the input related failure",
                        "schema": {
                            "$ref": "#/definitions/LusidValidationProblemDetails"
                        }
                    },
                    "default": {
                        "description": "Error response",
                        "schema": {
                            "$ref": "#/definitions/LusidProblemDetails"
                        }
                    }
                },
                "x-fbn-apistatus": "EarlyAccess"
            },
            "delete": {
                "tags": [
                    "Cut Label Definitions"
                ],
                "summary": "[EARLY ACCESS] Delete a Cut Label",
                "description": "Delete a specified cut label",
                "operationId": "DeleteCutLabelDefinition",
                "consumes": [],
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ],
                "parameters": [
                    {
                        "name": "code",
                        "in": "path",
                        "description": "The Code of the Cut Label that is being Deleted",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The time of deletion",
                        "schema": {
                            "format": "date-time",
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "The details of the input related failure",
                        "schema": {
                            "$ref": "#/definitions/LusidValidationProblemDetails"
                        }
                    },
                    "default": {
                        "description": "Error response",
                        "schema": {
                            "$ref": "#/definitions/LusidProblemDetails"
                        }
                    }
                },
                "x-fbn-apistatus": "EarlyAccess"
            }
        },
        "/api/systemconfiguration/transactiontypes": {
            "get": {
                "tags": [
                    "System Configuration"
                ],
                "summary": "[EARLY ACCESS] List transaction types",
                "description": "Get the list of persisted transaction types",
                "operationId": "ListConfigurationTransactionTypes",
                "consumes": [],
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ],
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ResourceListOfTransactionConfigurationData"
                        }
                    },
                    "default": {
                        "description": "Error response",
                        "schema": {
                            "$ref": "#/definitions/LusidProblemDetails"
                        }
                    }
                },
                "x-fbn-apistatus": "EarlyAccess"
            },
            "post": {
                "tags": [
                    "System Configuration"
                ],
                "summary": "[EARLY ACCESS] Create transaction type",
                "description": "Create a new transaction type by specifying a definition and the mappings to movements",
                "operationId": "CreateConfigurationTransactionType",
                "consumes": [],
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ],
                "parameters": [
                    {
                        "name": "type",
                        "in": "body",
                        "description": "A transaction type definition",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/TransactionConfigurationDataRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ResourceListOfTransactionConfigurationData"
                        }
                    },
                    "400": {
                        "description": "The details of the input related failure",
                        "schema": {
                            "$ref": "#/definitions/LusidValidationProblemDetails"
                        }
                    },
                    "default": {
                        "description": "Error response",
                        "schema": {
                            "$ref": "#/definitions/LusidProblemDetails"
                        }
                    }
                },
                "x-fbn-apistatus": "EarlyAccess"
            }
        },
        "/api/transactionportfolios/{scope}": {
            "post": {
                "tags": [
                    "Transaction Portfolios"
                ],
                "summary": "[EARLY ACCESS] Create portfolio",
                "description": "Create a transaction portfolio in a specific scope.",
                "operationId": "CreatePortfolio",
                "consumes": [],
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ],
                "parameters": [
                    {
                        "name": "scope",
                        "in": "path",
                        "description": "The scope that the transaction portfolio will be created in.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "createRequest",
                        "in": "body",
                        "description": "The definition and details of the transaction portfolio.",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/CreateTransactionPortfolioRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "The newly created transaction portfolio",
                        "schema": {
                            "$ref": "#/definitions/Portfolio"
                        }
                    },
                    "400": {
                        "description": "The details of the input related failure",
                        "schema": {
                            "$ref": "#/definitions/LusidValidationProblemDetails"
                        }
                    },
                    "default": {
                        "description": "Error response",
                        "schema": {
                            "$ref": "#/definitions/LusidProblemDetails"
                        }
                    }
                },
                "x-fbn-apistatus": "EarlyAccess"
            }
        },
        "/api/transactionportfolios/{scope}/{code}/details": {
            "get": {
                "tags": [
                    "Transaction Portfolios"
                ],
                "summary": "[EARLY ACCESS] Get details",
                "description": "Get the details associated with a transaction portfolio.",
                "operationId": "GetDetails",
                "consumes": [],
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ],
                "parameters": [
                    {
                        "name": "scope",
                        "in": "path",
                        "description": "The scope of the transaction portfolio to retrieve the details for.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "code",
                        "in": "path",
                        "description": "The code of the transaction portfolio to retrieve the details for. Together with the\r\n            scope this uniquely identifies the transaction portfolio.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "effectiveAt",
                        "in": "query",
                        "description": "The effective datetime or cut label at which to retrieve the details of the transaction\r\n            portfolio. Defaults to the current LUSID system datetime if not specified.",
                        "required": false,
                        "type": "string",
                        "format": "dateorcutlabel"
                    },
                    {
                        "name": "asAt",
                        "in": "query",
                        "description": "The asAt datetime at which to retrieve the details of the transaction portfolio. Defaults\r\n            to return the latest version of the details if not specified.",
                        "required": false,
                        "type": "string",
                        "format": "date-time"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The details of the specified transaction portfolio",
                        "schema": {
                            "$ref": "#/definitions/PortfolioDetails"
                        },
                        "examples": {
                            "application/json": {
                                "originPortfolioId": {
                                    "scope": "Region",
                                    "code": "UK"
                                },
                                "baseCurrency": "GBP",
                                "corporateActionSourceId": {
                                    "scope": "Sources",
                                    "code": "Vendor1"
                                },
                                "subHoldingKeys": [
                                    "Portfolio/Client/AccountType"
                                ]
                            }
                        }
                    },
                    "400": {
                        "description": "The details of the input related failure",
                        "schema": {
                            "$ref": "#/definitions/LusidValidationProblemDetails"
                        }
                    },
                    "default": {
                        "description": "Error response",
                        "schema": {
                            "$ref": "#/definitions/LusidProblemDetails"
                        }
                    }
                },
                "x-fbn-apistatus": "EarlyAccess"
            },
            "post": {
                "tags": [
                    "Transaction Portfolios"
                ],
                "summary": "[EARLY ACCESS] Upsert portfolio details",
                "description": "Update or insert details for the specified transaction portfolio. The details will be updated\r\nif they already exist and inserted if they do not.",
                "operationId": "UpsertPortfolioDetails",
                "consumes": [],
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ],
                "parameters": [
                    {
                        "name": "scope",
                        "in": "path",
                        "description": "The scope of the transaction portfolio to update or insert details for.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "code",
                        "in": "path",
                        "description": "The code of the transaction portfolio to update or insert details for. Together with the\r\n            scope this uniquely identifies the transaction portfolio.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "details",
                        "in": "body",
                        "description": "The details to update or insert for the specified transaction portfolio.",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/CreatePortfolioDetails"
                        }
                    },
                    {
                        "name": "effectiveAt",
                        "in": "query",
                        "description": "The effective datetime or cut label at which the updated or inserted details should become valid.\r\n            Defaults to the current LUSID system datetime if not specified.",
                        "required": false,
                        "type": "string",
                        "format": "dateorcutlabel"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The newly updated or inserted details",
                        "schema": {
                            "$ref": "#/definitions/PortfolioDetails"
                        }
                    },
                    "400": {
                        "description": "The details of the input related failure",
                        "schema": {
                            "$ref": "#/definitions/LusidValidationProblemDetails"
                        }
                    },
                    "default": {
                        "description": "Error response",
                        "schema": {
                            "$ref": "#/definitions/LusidProblemDetails"
                        }
                    }
                },
                "x-fbn-apistatus": "EarlyAccess"
            }
        },
        "/api/transactionportfolios/{scope}/{code}/executions": {
            "post": {
                "tags": [
                    "Transaction Portfolios"
                ],
                "summary": "[EARLY ACCESS] Upsert executions",
                "description": "Update or insert executions into the specified transaction portfolio. An execution will be updated\r\nif it already exists and inserted if it does not.",
                "operationId": "UpsertExecutions",
                "consumes": [],
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ],
                "parameters": [
                    {
                        "name": "scope",
                        "in": "path",
                        "description": "The scope of the transaction portfolio.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "code",
                        "in": "path",
                        "description": "The code of the transaction portfolio. Together with the scope this uniquely identifies\r\n            the transaction portfolio.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "executions",
                        "in": "body",
                        "description": "The executions to update or insert.",
                        "required": false,
                        "schema": {
                            "uniqueItems": false,
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ExecutionRequest"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The version of the transaction portfolio that contains the newly updated or inserted executions",
                        "schema": {
                            "$ref": "#/definitions/UpsertPortfolioExecutionsResponse"
                        }
                    },
                    "400": {
                        "description": "The details of the input related failure",
                        "schema": {
                            "$ref": "#/definitions/LusidValidationProblemDetails"
                        }
                    },
                    "default": {
                        "description": "Error response",
                        "schema": {
                            "$ref": "#/definitions/LusidProblemDetails"
                        }
                    }
                },
                "x-fbn-apistatus": "EarlyAccess"
            },
            "delete": {
                "tags": [
                    "Transaction Portfolios"
                ],
                "summary": "[EARLY ACCESS] Cancel executions",
                "description": "Cancel one or more executions which exist in a specified transaction portfolio.",
                "operationId": "CancelExecutions",
                "consumes": [],
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ],
                "parameters": [
                    {
                        "name": "scope",
                        "in": "path",
                        "description": "The scope of the transaction portfolio.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "code",
                        "in": "path",
                        "description": "The code of the transaction portfolio. Together with the scope this uniquely identifies\r\n            the transaction portfolio.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "executionIds",
                        "in": "query",
                        "description": "The ids of the executions to cancel.",
                        "required": true,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi",
                        "uniqueItems": false
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The datetime that the executions were cancelled",
                        "schema": {
                            "$ref": "#/definitions/DeletedEntityResponse"
                        }
                    },
                    "400": {
                        "description": "The details of the input related failure",
                        "schema": {
                            "$ref": "#/definitions/LusidValidationProblemDetails"
                        }
                    },
                    "default": {
                        "description": "Error response",
                        "schema": {
                            "$ref": "#/definitions/LusidProblemDetails"
                        }
                    }
                },
                "x-fbn-apistatus": "EarlyAccess"
            }
        },
        "/api/transactionportfolios/{scope}/{code}/holdings": {
            "get": {
                "tags": [
                    "Transaction Portfolios"
                ],
                "summary": "[EARLY ACCESS] Get holdings",
                "description": "Get the holdings of the specified transaction portfolio.",
                "operationId": "GetHoldings",
                "consumes": [],
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ],
                "parameters": [
                    {
                        "name": "scope",
                        "in": "path",
                        "description": "The scope of the transaction portfolio.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "code",
                        "in": "path",
                        "description": "The code of the transaction portfolio. Together with the scope this uniquely identifies\r\n            the transaction portfolio.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "byTaxlots",
                        "in": "query",
                        "description": "Whether or not to expand the holdings to return the underlying tax-lots. Defaults to\r\n            False.",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "name": "effectiveAt",
                        "in": "query",
                        "description": "The effective datetime or cut label at which to retrieve the holdings of the transaction\r\n            portfolio. Defaults to the current LUSID system datetime if not specified.",
                        "required": false,
                        "type": "string",
                        "format": "dateorcutlabel"
                    },
                    {
                        "name": "asAt",
                        "in": "query",
                        "description": "The asAt datetime at which to retrieve the holdings of the transaction portfolio. Defaults\r\n            to return the latest version of the holdings if not specified.",
                        "required": false,
                        "type": "string",
                        "format": "date-time"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Expression to filter the result set. Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "propertyKeys",
                        "in": "query",
                        "description": "A list of property keys from the \"Instrument\" or \"Holding\" domain to decorate onto\r\n            the holdings. These take the format {domain}/{scope}/{code} e.g. \"Instrument/system/Name\" or \"Holding/system/Cost\".",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi",
                        "uniqueItems": false
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The holdings and version of the specified transaction portfolio",
                        "schema": {
                            "$ref": "#/definitions/VersionedResourceListOfPortfolioHolding"
                        },
                        "examples": {
                            "application/json": {
                                "version": {
                                    "effectiveFrom": "2019-03-05T12:00:00+00:00",
                                    "asAtDate": "2019-03-05T12:00:00+00:00"
                                },
                                "values": [
                                    {
                                        "instrumentUid": "LUID_NG4VE9XM",
                                        "holdingType": "P",
                                        "units": 10.0,
                                        "settledUnits": 10.0,
                                        "cost": {
                                            "amount": 2.5,
                                            "currency": "GBP"
                                        },
                                        "costPortfolioCcy": {
                                            "amount": 2.5,
                                            "currency": "GBP"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    "400": {
                        "description": "The details of the input related failure",
                        "schema": {
                            "$ref": "#/definitions/LusidValidationProblemDetails"
                        }
                    },
                    "default": {
                        "description": "Error response",
                        "schema": {
                            "$ref": "#/definitions/LusidProblemDetails"
                        }
                    }
                },
                "x-fbn-apistatus": "EarlyAccess"
            }
        },
        "/api/transactionportfolios/{scope}/{code}/holdings/{effectiveAt}": {
            "put": {
                "tags": [
                    "Transaction Portfolios"
                ],
                "summary": "[EARLY ACCESS] Set holdings",
                "description": "Set the holdings of the specified transaction portfolio to the provided targets. LUSID will automatically\r\nconstruct adjustment transactions to ensure that the entire set of holdings for the transaction portfolio\r\nare always set to the provided targets for the specified effective datetime. Read more about the difference between\r\nadjusting and setting holdings here https://support.lusid.com/how-do-i-adjust-my-holdings.",
                "operationId": "SetHoldings",
                "consumes": [],
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ],
                "parameters": [
                    {
                        "name": "scope",
                        "in": "path",
                        "description": "The scope of the transaction portfolio.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "code",
                        "in": "path",
                        "description": "The code of the transaction portfolio. Together with the scope this uniquely identifies\r\n            the transaction portfolio.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "effectiveAt",
                        "in": "path",
                        "description": "The effective datetime or cut label at which the holdings should be set to the provided targets.",
                        "required": true,
                        "type": "string",
                        "format": "dateorcutlabel"
                    },
                    {
                        "name": "holdingAdjustments",
                        "in": "body",
                        "description": "The complete set of target holdings for the transaction portfolio.",
                        "required": false,
                        "schema": {
                            "uniqueItems": false,
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/AdjustHoldingRequest"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The version of the transaction portfolio that contains the newly set holdings",
                        "schema": {
                            "$ref": "#/definitions/AdjustHolding"
                        }
                    },
                    "400": {
                        "description": "The details of the input related failure",
                        "schema": {
                            "$ref": "#/definitions/LusidValidationProblemDetails"
                        }
                    },
                    "default": {
                        "description": "Error response",
                        "schema": {
                            "$ref": "#/definitions/LusidProblemDetails"
                        }
                    }
                },
                "x-fbn-apistatus": "EarlyAccess"
            },
            "post": {
                "tags": [
                    "Transaction Portfolios"
                ],
                "summary": "[EARLY ACCESS] Adjust holdings",
                "description": "Adjust one or more holdings of the specified transaction portfolio to the provided targets. LUSID will\r\nautomatically construct adjustment transactions to ensure that the holdings which have been adjusted are\r\nalways set to the provided targets for the specified effective datetime. Read more about the difference between\r\nadjusting and setting holdings here https://support.lusid.com/how-do-i-adjust-my-holdings.",
                "operationId": "AdjustHoldings",
                "consumes": [],
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ],
                "parameters": [
                    {
                        "name": "scope",
                        "in": "path",
                        "description": "The scope of the transaction portfolio.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "code",
                        "in": "path",
                        "description": "The code of the transaction portfolio. Together with the scope this uniquely identifies\r\n            the transaction portfolio.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "effectiveAt",
                        "in": "path",
                        "description": "The effective datetime or cut label at which the holdings should be set to the provided targets.",
                        "required": true,
                        "type": "string",
                        "format": "dateorcutlabel"
                    },
                    {
                        "name": "holdingAdjustments",
                        "in": "body",
                        "description": "The selected set of holdings to adjust to the provided targets for the\r\n            transaction portfolio.",
                        "required": false,
                        "schema": {
                            "uniqueItems": false,
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/AdjustHoldingRequest"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The version of the transaction portfolio that contains the newly adjusted holdings",
                        "schema": {
                            "$ref": "#/definitions/AdjustHolding"
                        }
                    },
                    "400": {
                        "description": "The details of the input related failure",
                        "schema": {
                            "$ref": "#/definitions/LusidValidationProblemDetails"
                        }
                    },
                    "default": {
                        "description": "Error response",
                        "schema": {
                            "$ref": "#/definitions/LusidProblemDetails"
                        }
                    }
                },
                "x-fbn-apistatus": "EarlyAccess"
            },
            "delete": {
                "tags": [
                    "Transaction Portfolios"
                ],
                "summary": "[EARLY ACCESS] Cancel adjust holdings",
                "description": "Cancel all previous holding adjustments made on the specified transaction portfolio for a specified effective\r\ndatetime. This should be used to undo holding adjustments made via set holdings or adjust holdings.",
                "operationId": "CancelAdjustHoldings",
                "consumes": [],
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ],
                "parameters": [
                    {
                        "name": "scope",
                        "in": "path",
                        "description": "The scope of the transaction portfolio.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "code",
                        "in": "path",
                        "description": "The code of the transaction portfolio. Together with the scope this uniquely identifies\r\n            the transaction portfolio.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "effectiveAt",
                        "in": "path",
                        "description": "The effective datetime or cut label at which the holding adjustments should be undone.",
                        "required": true,
                        "type": "string",
                        "format": "dateorcutlabel"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The datetime that the holding adjustments were cancelled",
                        "schema": {
                            "$ref": "#/definitions/DeletedEntityResponse"
                        }
                    },
                    "400": {
                        "description": "The details of the input related failure",
                        "schema": {
                            "$ref": "#/definitions/LusidValidationProblemDetails"
                        }
                    },
                    "default": {
                        "description": "Error response",
                        "schema": {
                            "$ref": "#/definitions/LusidProblemDetails"
                        }
                    }
                },
                "x-fbn-apistatus": "EarlyAccess"
            }
        },
        "/api/transactionportfolios/{scope}/{code}/holdingsadjustments": {
            "get": {
                "tags": [
                    "Transaction Portfolios"
                ],
                "summary": "[EARLY ACCESS] List holdings adjustments",
                "description": "List the holdings adjustments made to the specified transaction portfolio over a specified interval of effective time.",
                "operationId": "ListHoldingsAdjustments",
                "consumes": [],
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ],
                "parameters": [
                    {
                        "name": "scope",
                        "in": "path",
                        "description": "The scope of the transaction portfolio.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "code",
                        "in": "path",
                        "description": "The code of the transaction portfolio. Together with the scope this uniquely identifies\r\n            the transaction portfolio.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "fromEffectiveAt",
                        "in": "query",
                        "description": "The lower bound effective datetime or cut label (inclusive) from which to retrieve the holdings\r\n            adjustments. There is no lower bound if this is not specified.",
                        "required": false,
                        "type": "string",
                        "format": "dateorcutlabel"
                    },
                    {
                        "name": "toEffectiveAt",
                        "in": "query",
                        "description": "The upper bound effective datetime or cut label (inclusive) from which to retrieve the holdings\r\n            adjustments. There is no upper bound if this is not specified.",
                        "required": false,
                        "type": "string",
                        "format": "dateorcutlabel"
                    },
                    {
                        "name": "asAt",
                        "in": "query",
                        "description": "The asAt datetime at which to retrieve the holdings adjustments. Defaults to return the\r\n            latest version of each holding adjustment if not specified.",
                        "required": false,
                        "type": "string",
                        "format": "date-time"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The record of holdings adjustments made to the specified transaction portfolio",
                        "schema": {
                            "$ref": "#/definitions/ResourceListOfHoldingsAdjustmentHeader"
                        }
                    },
                    "400": {
                        "description": "The details of the input related failure",
                        "schema": {
                            "$ref": "#/definitions/LusidValidationProblemDetails"
                        }
                    },
                    "default": {
                        "description": "Error response",
                        "schema": {
                            "$ref": "#/definitions/LusidProblemDetails"
                        }
                    }
                },
                "x-fbn-apistatus": "EarlyAccess"
            }
        },
        "/api/transactionportfolios/{scope}/{code}/holdingsadjustments/{effectiveAt}": {
            "get": {
                "tags": [
                    "Transaction Portfolios"
                ],
                "summary": "[EARLY ACCESS] Get holdings adjustment",
                "description": "Get a holdings adjustment made to a transaction portfolio at a specific effective datetime. Note that a\r\nholdings adjustment will only be returned if one exists for the specified effective datetime.",
                "operationId": "GetHoldingsAdjustment",
                "consumes": [],
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ],
                "parameters": [
                    {
                        "name": "scope",
                        "in": "path",
                        "description": "The scope of the transaction portfolio.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "code",
                        "in": "path",
                        "description": "The code of the transaction portfolio. Together with the scope this uniquely identifies\r\n            the transaction portfolio.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "effectiveAt",
                        "in": "path",
                        "description": "The effective datetime or cut label of the holdings adjustment.",
                        "required": true,
                        "type": "string",
                        "format": "dateorcutlabel"
                    },
                    {
                        "name": "asAt",
                        "in": "query",
                        "description": "The asAt datetime at which to retrieve the holdings adjustment. Defaults to the return the latest\r\n            version of the holdings adjustment if not specified.",
                        "required": false,
                        "type": "string",
                        "format": "date-time"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The details of the requested holdings adjustment",
                        "schema": {
                            "$ref": "#/definitions/HoldingsAdjustment"
                        },
                        "examples": {
                            "application/json": {
                                "value": {
                                    "effectiveAt": "0001-01-01T00:00:00+00:00",
                                    "version": {
                                        "effectiveFrom": "2019-03-05T00:00:00+00:00",
                                        "asAtDate": "2019-03-08T00:00:00+00:00"
                                    },
                                    "unmatchedHoldingMethod": "KeepTheSame",
                                    "adjustments": [
                                        {
                                            "instrumentIdentifiers": {
                                                "Instrument/default/ClientInternal": "CLI-192836"
                                            },
                                            "instrumentUid": "LUID_NTCG81CK",
                                            "subHoldingKeys": {},
                                            "properties": {},
                                            "taxLots": [
                                                {
                                                    "units": 10.0,
                                                    "cost": {
                                                        "amount": 120.0,
                                                        "currency": "GBP"
                                                    }
                                                }
                                            ]
                                        },
                                        {
                                            "instrumentIdentifiers": {
                                                "Instrument/default/ClientInternal": "CLI-462810"
                                            },
                                            "instrumentUid": "LUID_5M66CYIV",
                                            "subHoldingKeys": {},
                                            "properties": {},
                                            "taxLots": [
                                                {
                                                    "units": 10.0,
                                                    "cost": {
                                                        "amount": 120.0,
                                                        "currency": "GBP"
                                                    }
                                                }
                                            ]
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "The details of the input related failure",
                        "schema": {
                            "$ref": "#/definitions/LusidValidationProblemDetails"
                        }
                    },
                    "default": {
                        "description": "Error response",
                        "schema": {
                            "$ref": "#/definitions/LusidProblemDetails"
                        }
                    }
                },
                "x-fbn-apistatus": "EarlyAccess"
            }
        },
        "/api/transactionportfolios/{scope}/{code}/transactions": {
            "get": {
                "tags": [
                    "Transaction Portfolios"
                ],
                "summary": "[EARLY ACCESS] Get transactions",
                "description": "Get transactions from the specified transaction portfolio over a given interval of effective time. \r\n\r\nWhen the specified portfolio is a derived transaction portfolio, the returned set of transactions is the\r\nunion set of all transactions of the parent (and any grandparents etc.) and the specified derived transaction portfolio itself.\n\nThe maximum number of transactions that this method can get per request is 2,000.",
                "operationId": "GetTransactions",
                "consumes": [],
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ],
                "parameters": [
                    {
                        "name": "scope",
                        "in": "path",
                        "description": "The scope of the transaction portfolio.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "code",
                        "in": "path",
                        "description": "The code of the transaction portfolio. Together with the scope this uniquely identifies\r\n            the transaction portfolio.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "fromTransactionDate",
                        "in": "query",
                        "description": "The lower bound effective datetime or cut label (inclusive) from which to retrieve the transactions.\r\n            There is no lower bound if this is not specified.",
                        "required": false,
                        "type": "string",
                        "format": "dateorcutlabel"
                    },
                    {
                        "name": "toTransactionDate",
                        "in": "query",
                        "description": "The upper bound effective datetime or cut label (inclusive) from which to retrieve transactions.\r\n            There is no upper bound if this is not specified.",
                        "required": false,
                        "type": "string",
                        "format": "dateorcutlabel"
                    },
                    {
                        "name": "asAt",
                        "in": "query",
                        "description": "The asAt datetime at which to retrieve the transactions. Defaults to return the latest version\r\n            of each transaction if not specified.",
                        "required": false,
                        "type": "string",
                        "format": "date-time"
                    },
                    {
                        "name": "propertyKeys",
                        "in": "query",
                        "description": "A list of property keys from the \"Instrument\" or \"Transaction\" domain to decorate onto\r\n            the transactions. These take the format {domain}/{scope}/{code} e.g. \"Instrument/system/Name\" or\r\n            \"Transaction/strategy/quantsignal\".",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi",
                        "uniqueItems": false
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Expression to filter the result set. Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The requested transactions from the specified transaction portfolio",
                        "schema": {
                            "$ref": "#/definitions/VersionedResourceListOfTransaction"
                        },
                        "examples": {
                            "application/json": {
                                "version": {
                                    "effectiveFrom": "2018-03-05T00:00:00+00:00",
                                    "asAtDate": "2018-03-04T23:50:00+00:00"
                                },
                                "values": [
                                    {
                                        "transactionId": "TXN-00001",
                                        "type": "Buy",
                                        "instrumentIdentifiers": {
                                            "Instrument/default/RIC": "RIC.L"
                                        },
                                        "instrumentUid": "LUID_SQTKNPF3",
                                        "transactionDate": "2018-08-04T00:00:00+00:00",
                                        "settlementDate": "2018-08-06T00:00:00+00:00",
                                        "units": 1000.0,
                                        "transactionPrice": {
                                            "price": 88.8,
                                            "type": "Price"
                                        },
                                        "totalConsideration": {
                                            "amount": 88800.0,
                                            "currency": "USD"
                                        },
                                        "properties": {
                                            "Transaction/default/TradeToPortfolioRate": {
                                                "key": "Transaction/default/TradeToPortfolioRate",
                                                "value": {
                                                    "metricValue": {
                                                        "value": 0.765
                                                    }
                                                }
                                            },
                                            "Transaction/default/SourcePortfolioId": {
                                                "key": "Transaction/default/SourcePortfolioId",
                                                "value": {
                                                    "labelValue": "DEMO-PORTFOLIO-ID"
                                                }
                                            },
                                            "Transaction/default/SourcePortfolioScope": {
                                                "key": "Transaction/default/SourcePortfolioScope",
                                                "value": {
                                                    "labelValue": "DEMO-SCOPE"
                                                }
                                            }
                                        },
                                        "source": ""
                                    }
                                ],
                                "href": "http://example.com"
                            }
                        }
                    },
                    "400": {
                        "description": "The details of the input related failure",
                        "schema": {
                            "$ref": "#/definitions/LusidValidationProblemDetails"
                        }
                    },
                    "default": {
                        "description": "Error response",
                        "schema": {
                            "$ref": "#/definitions/LusidProblemDetails"
                        }
                    }
                },
                "x-fbn-apistatus": "EarlyAccess"
            },
            "post": {
                "tags": [
                    "Transaction Portfolios"
                ],
                "summary": "[EARLY ACCESS] Upsert transactions",
                "description": "Update or insert transactions into the specified transaction portfolio. A transaction will be updated\r\nif it already exists and inserted if it does not.\n\nThe maximum number of transactions that this method can upsert per request is 10,000.",
                "operationId": "UpsertTransactions",
                "consumes": [],
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ],
                "parameters": [
                    {
                        "name": "scope",
                        "in": "path",
                        "description": "The scope of the transaction portfolio.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "code",
                        "in": "path",
                        "description": "The code of the transaction portfolio. Together with the scope this uniquely identifies\r\n            the transaction portfolio.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "transactions",
                        "in": "body",
                        "description": "The transactions to be updated or inserted.",
                        "required": false,
                        "schema": {
                            "uniqueItems": false,
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/TransactionRequest"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The version of the transaction portfolio that contains the newly updated or inserted transactions",
                        "schema": {
                            "$ref": "#/definitions/UpsertPortfolioTransactionsResponse"
                        }
                    },
                    "400": {
                        "description": "The details of the input related failure",
                        "schema": {
                            "$ref": "#/definitions/LusidValidationProblemDetails"
                        }
                    },
                    "default": {
                        "description": "Error response",
                        "schema": {
                            "$ref": "#/definitions/LusidProblemDetails"
                        }
                    }
                },
                "x-fbn-apistatus": "EarlyAccess"
            },
            "delete": {
                "tags": [
                    "Transaction Portfolios"
                ],
                "summary": "[EARLY ACCESS] Cancel transactions",
                "description": "Cancel one or more transactions from the specified transaction portfolio.",
                "operationId": "CancelTransactions",
                "consumes": [],
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ],
                "parameters": [
                    {
                        "name": "scope",
                        "in": "path",
                        "description": "The scope of the transaction portfolio.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "code",
                        "in": "path",
                        "description": "The code of the transaction portfolio. Together with the scope this uniquely identifies\r\n            the transaction portfolio.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "transactionIds",
                        "in": "query",
                        "description": "The ids of the transactions to cancel.",
                        "required": true,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi",
                        "uniqueItems": false
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The datetime that the transactions were cancelled",
                        "schema": {
                            "$ref": "#/definitions/DeletedEntityResponse"
                        }
                    },
                    "400": {
                        "description": "The details of the input related failure",
                        "schema": {
                            "$ref": "#/definitions/LusidValidationProblemDetails"
                        }
                    },
                    "default": {
                        "description": "Error response",
                        "schema": {
                            "$ref": "#/definitions/LusidProblemDetails"
                        }
                    }
                },
                "x-fbn-apistatus": "EarlyAccess"
            }
        },
        "/api/transactionportfolios/{scope}/{code}/transactions/{transactionId}/properties": {
            "post": {
                "tags": [
                    "Transaction Portfolios"
                ],
                "summary": "[EARLY ACCESS] Upsert transaction properties",
                "description": "Update or insert one or more transaction properties to a single transaction in a transaction portfolio.\r\nEach property will be updated if it already exists and inserted if it does not.\r\nBoth transaction and portfolio must exist at the time when properties are updated or inserted.",
                "operationId": "UpsertTransactionProperties",
                "consumes": [],
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ],
                "parameters": [
                    {
                        "name": "scope",
                        "in": "path",
                        "description": "The scope of the transaction portfolio.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "code",
                        "in": "path",
                        "description": "The code of the transaction portfolio. Together with the scope this uniquely identifies\r\n            the transaction portfolio.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "transactionId",
                        "in": "path",
                        "description": "The unique id of the transaction to update or insert properties against.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "transactionProperties",
                        "in": "body",
                        "description": "The properties with their associated values to update or insert onto the\r\n            transaction.",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "$ref": "#/definitions/PerpetualProperty"
                            },
                            "example": {
                                "Transaction/MyScope/MyPropertyName": {
                                    "key": "Transaction/MyScope/MyPropertyName",
                                    "value": {
                                        "metricValue": {
                                            "value": 12345.5672,
                                            "unit": "Unit"
                                        }
                                    }
                                },
                                "Transaction/MyScope/MyPropertyName2": {
                                    "key": "Transaction/MyScope/MyPropertyName2",
                                    "value": {
                                        "metricValue": {
                                            "value": 925.3,
                                            "unit": "Unit"
                                        }
                                    }
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The version of the transaction portfolio that contains the newly updated or inserted transaction property",
                        "schema": {
                            "$ref": "#/definitions/UpsertTransactionPropertiesResponse"
                        }
                    },
                    "400": {
                        "description": "The details of the input related failure",
                        "schema": {
                            "$ref": "#/definitions/LusidValidationProblemDetails"
                        }
                    },
                    "default": {
                        "description": "Error response",
                        "schema": {
                            "$ref": "#/definitions/LusidProblemDetails"
                        }
                    }
                },
                "x-fbn-apistatus": "EarlyAccess"
            },
            "delete": {
                "tags": [
                    "Transaction Portfolios"
                ],
                "summary": "[EARLY ACCESS] Delete property from transaction",
                "description": "Delete a single property value from a single transaction in a transaction portfolio.",
                "operationId": "DeletePropertyFromTransaction",
                "consumes": [],
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ],
                "parameters": [
                    {
                        "name": "scope",
                        "in": "path",
                        "description": "The scope of the transaction portfolio.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "code",
                        "in": "path",
                        "description": "The code of the transaction portfolio. Together with the scope this uniquely identifies\r\n            the transaction portfolio.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "transactionId",
                        "in": "path",
                        "description": "The unique id of the transaction to delete the property value from.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "transactionPropertyKey",
                        "in": "query",
                        "description": "The property key of the property value to delete from the transaction.\r\n            This must be from the \"Transaction\" domain and will have the format {domain}/{scope}/{code} e.g.\r\n            \"Transaction/strategy/quantsignal\".",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The datetime that the property was deleted",
                        "schema": {
                            "$ref": "#/definitions/DeletedEntityResponse"
                        }
                    },
                    "400": {
                        "description": "The details of the input related failure",
                        "schema": {
                            "$ref": "#/definitions/LusidValidationProblemDetails"
                        }
                    },
                    "default": {
                        "description": "Error response",
                        "schema": {
                            "$ref": "#/definitions/LusidProblemDetails"
                        }
                    }
                },
                "x-fbn-apistatus": "EarlyAccess"
            }
        },
        "/api/transactionportfolios/{scope}/{code}/transactions/$build": {
            "post": {
                "tags": [
                    "Transaction Portfolios"
                ],
                "summary": "[EARLY ACCESS] Build transactions",
                "description": "Builds and returns all transactions that affect the holdings of a portfolio over a given interval of\r\neffective time into a set of output transactions. This includes transactions automatically generated by\r\nLUSID such as holding adjustments.",
                "operationId": "BuildTransactions",
                "consumes": [],
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json"
                ],
                "parameters": [
                    {
                        "name": "scope",
                        "in": "path",
                        "description": "The scope of the transaction portfolio.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "code",
                        "in": "path",
                        "description": "The code of the transaction portfolio. Together with the scope this uniquely identifies\r\n            the transaction portfolio.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "asAt",
                        "in": "query",
                        "description": "The asAt datetime at which to build the transactions. Defaults to return the latest\r\n            version of each transaction if not specified.",
                        "required": false,
                        "type": "string",
                        "format": "date-time"
                    },
                    {
                        "name": "propertyKeys",
                        "in": "query",
                        "description": "A list of property keys from the \"Instrument\" or \"Transaction\" domain to decorate onto\r\n            the transactions. These take the format {domain}/{scope}/{code} e.g. \"Instrument/system/Name\" or\r\n            \"Transaction/strategy/quantsignal\".",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi",
                        "uniqueItems": false
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Expression to filter the result set. Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "parameters",
                        "in": "body",
                        "description": "The query parameters which control how the output transactions are built.",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/TransactionQueryParameters"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The requested transactions from the specified transaction portfolio",
                        "schema": {
                            "$ref": "#/definitions/VersionedResourceListOfOutputTransaction"
                        },
                        "examples": {
                            "application/json": {
                                "version": {
                                    "effectiveFrom": "2018-03-05T00:00:00+00:00",
                                    "asAtDate": "2018-03-04T23:50:00+00:00"
                                },
                                "values": [
                                    {
                                        "transactionId": "TXN-00001",
                                        "type": "Buy",
                                        "description": "Purchase",
                                        "instrumentIdentifiers": {
                                            "Instrument/default/RIC": "RIC.L"
                                        },
                                        "instrumentUid": "LUID_JLH24106",
                                        "transactionDate": "2018-08-04T00:00:00+00:00",
                                        "settlementDate": "2018-08-06T00:00:00+00:00",
                                        "units": 1000.0,
                                        "transactionAmount": 88800.0,
                                        "transactionPrice": {
                                            "price": 88.8,
                                            "type": "Price"
                                        },
                                        "totalConsideration": {
                                            "amount": 88800.0,
                                            "currency": "USD"
                                        },
                                        "exchangeRate": 1.0,
                                        "transactionToPortfolioRate": 0.7648,
                                        "transactionCurrency": "USD",
                                        "properties": {
                                            "Transaction/default/TradeToPortfolioRate": {
                                                "key": "Transaction/default/TradeToPortfolioRate",
                                                "value": {
                                                    "metricValue": {
                                                        "value": 0.765
                                                    }
                                                }
                                            },
                                            "Transaction/default/SourcePortfolioId": {
                                                "key": "Transaction/default/SourcePortfolioId",
                                                "value": {
                                                    "labelValue": "DEMO-PORTFOLIO-ID"
                                                }
                                            },
                                            "Transaction/default/SourcePortfolioScope": {
                                                "key": "Transaction/default/SourcePortfolioScope",
                                                "value": {
                                                    "labelValue": "DEMO-SCOPE"
                                                }
                                            }
                                        },
                                        "source": "",
                                        "transactionStatus": "Cancelled",
                                        "entryDateTime": "2018-08-04T12:22:06+00:00",
                                        "cancelDateTime": "2018-08-04T12:25:14+00:00"
                                    },
                                    {
                                        "transactionId": "TXN-00002",
                                        "type": "Sell",
                                        "description": "Sale",
                                        "instrumentIdentifiers": {
                                            "Instrument/default/ClientInternal": "INT:00024106"
                                        },
                                        "instrumentUid": "LUID_OI5JX1V7",
                                        "transactionDate": "2018-08-07T00:00:00+00:00",
                                        "settlementDate": "2018-08-10T00:00:00+00:00",
                                        "units": 10000.0,
                                        "transactionAmount": 1470100.0,
                                        "transactionPrice": {
                                            "price": 147.01,
                                            "type": "Price"
                                        },
                                        "totalConsideration": {
                                            "amount": 1470100.0,
                                            "currency": "USD"
                                        },
                                        "exchangeRate": 1.0,
                                        "transactionToPortfolioRate": 0.772,
                                        "transactionCurrency": "USD",
                                        "properties": {
                                            "Transaction/default/TradeToPortfolioRate": {
                                                "key": "Transaction/default/TradeToPortfolioRate",
                                                "value": {
                                                    "metricValue": {
                                                        "value": 0.772
                                                    }
                                                }
                                            },
                                            "Transaction/default/SourcePortfolioId": {
                                                "key": "Transaction/default/SourcePortfolioId",
                                                "value": {
                                                    "labelValue": "DEMO-PORTFOLIO-ID"
                                                }
                                            },
                                            "Transaction/default/SourcePortfolioScope": {
                                                "key": "Transaction/default/SourcePortfolioScope",
                                                "value": {
                                                    "labelValue": "DEMO-SCOPE"
                                                }
                                            },
                                            "Transaction/default/ResultantHolding": {
                                                "key": "Transaction/default/ResultantHolding",
                                                "value": {
                                                    "metricValue": {
                                                        "value": 3500.0
                                                    }
                                                }
                                            }
                                        },
                                        "source": "",
                                        "transactionStatus": "Active",
                                        "entryDateTime": "2018-08-07T10:30:12+00:00",
                                        "realisedGainLoss": [
                                            {
                                                "instrumentUid": "LUID_OI5JX1V7",
                                                "units": 4500.0,
                                                "purchaseTradeDate": "2018-08-02T00:00:00+00:00",
                                                "purchaseSettlementDate": "2018-08-05T00:00:00+00:00",
                                                "purchasePrice": 142.96,
                                                "costTradeCcy": {
                                                    "amount": 643320.0,
                                                    "currency": "USD"
                                                },
                                                "costPortfolioCcy": {
                                                    "amount": 493619.44,
                                                    "currency": "GBP"
                                                },
                                                "realisedTradeCcy": {
                                                    "amount": 18225.0,
                                                    "currency": "USD"
                                                },
                                                "realisedTotal": {
                                                    "amount": 17093.3,
                                                    "currency": "GBP"
                                                },
                                                "realisedMarket": {
                                                    "amount": 14069.7,
                                                    "currency": "GBP"
                                                },
                                                "realisedCurrency": {
                                                    "amount": 3023.6,
                                                    "currency": "GBP"
                                                }
                                            },
                                            {
                                                "instrumentUid": "LUID_OI5JX1V7",
                                                "units": 4500.0,
                                                "purchaseTradeDate": "2018-08-03T00:00:00+00:00",
                                                "purchaseSettlementDate": "2018-08-06T00:00:00+00:00",
                                                "purchasePrice": 147.7,
                                                "costTradeCcy": {
                                                    "amount": 664650.0,
                                                    "currency": "USD"
                                                },
                                                "costPortfolioCcy": {
                                                    "amount": 510517.67,
                                                    "currency": "GBP"
                                                },
                                                "realisedTradeCcy": {
                                                    "amount": -3105.0,
                                                    "currency": "USD"
                                                },
                                                "realisedTotal": {
                                                    "amount": 195.07,
                                                    "currency": "GBP"
                                                },
                                                "realisedMarket": {
                                                    "amount": -2397.06,
                                                    "currency": "GBP"
                                                },
                                                "realisedCurrency": {
                                                    "amount": 2592.13,
                                                    "currency": "GBP"
                                                }
                                            },
                                            {
                                                "instrumentUid": "LUID_OI5JX1V7",
                                                "units": 1000.0,
                                                "purchaseTradeDate": "2018-08-06T00:00:00+00:00",
                                                "purchaseSettlementDate": "2018-08-08T00:00:00+00:00",
                                                "purchasePrice": 146.03,
                                                "costTradeCcy": {
                                                    "amount": 146030.0,
                                                    "currency": "USD"
                                                },
                                                "costPortfolioCcy": {
                                                    "amount": 112851.98,
                                                    "currency": "GBP"
                                                },
                                                "realisedTradeCcy": {
                                                    "amount": 980.0,
                                                    "currency": "USD"
                                                },
                                                "realisedTotal": {
                                                    "amount": 639.74,
                                                    "currency": "GBP"
                                                },
                                                "realisedMarket": {
                                                    "amount": 756.56,
                                                    "currency": "GBP"
                                                },
                                                "realisedCurrency": {
                                                    "amount": -116.82,
                                                    "currency": "GBP"
                                                }
                                            }
                                        ]
                                    }
                                ],
                                "href": "http://example.com"
                            }
                        }
                    },
                    "400": {
                        "description": "The details of the input related failure",
                        "schema": {
                            "$ref": "#/definitions/LusidValidationProblemDetails"
                        }
                    },
                    "default": {
                        "description": "Error response",
                        "schema": {
                            "$ref": "#/definitions/LusidProblemDetails"
                        }
                    }
                },
                "x-fbn-apistatus": "EarlyAccess"
            }
        }
    },
    "definitions": {
        "Link": {
            "required": [
                "relation",
                "href",
                "method"
            ],
            "type": "object",
            "properties": {
                "relation": {
                    "enum": [
                        "Root",
                        "Properties",
                        "Transactions",
                        "Details",
                        "Constituents",
                        "Holdings",
                        "Commands",
                        "HoldingsAdjustments",
                        "Parent",
                        "PropertySchema",
                        "EntitySchema",
                        "NextPage",
                        "PreviousPage",
                        "Quote",
                        "ConstituentsAdjustments",
                        "Values"
                    ],
                    "type": "string"
                },
                "href": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "method": {
                    "enum": [
                        "POST",
                        "GET",
                        "PATCH",
                        "DELETE"
                    ],
                    "type": "string"
                }
            }
        },
        "LusidValidationProblemDetails": {
            "required": [
                "name",
                "code"
            ],
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "errorDetails": {
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    }
                },
                "code": {
                    "format": "int32",
                    "type": "integer"
                },
                "errors": {
                    "type": "object",
                    "additionalProperties": {
                        "uniqueItems": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "readOnly": true
                },
                "type": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "status": {
                    "format": "int32",
                    "type": "integer"
                },
                "detail": {
                    "type": "string"
                },
                "instance": {
                    "type": "string"
                }
            },
            "additionalProperties": {
                "type": "object"
            }
        },
        "LusidProblemDetails": {
            "required": [
                "name",
                "code"
            ],
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "errorDetails": {
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    }
                },
                "code": {
                    "format": "int32",
                    "type": "integer"
                },
                "type": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "status": {
                    "format": "int32",
                    "type": "integer"
                },
                "detail": {
                    "type": "string"
                },
                "instance": {
                    "type": "string"
                }
            },
            "additionalProperties": {
                "type": "object"
            }
        },
        "DeletedEntityResponse": {
            "required": [
                "asAt"
            ],
            "type": "object",
            "properties": {
                "href": {
                    "description": "The specifc Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.",
                    "type": "string"
                },
                "effectiveFrom": {
                    "format": "date-time",
                    "description": "The effective datetime at which the deletion became valid. May be null in the case where multiple date times are applicable.",
                    "type": "string"
                },
                "asAt": {
                    "format": "date-time",
                    "description": "The asAt datetime at which the deletion was committed to LUSID.",
                    "type": "string"
                },
                "links": {
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Link"
                    }
                }
            }
        },
        "ResourceId": {
            "type": "object",
            "properties": {
                "scope": {
                    "type": "string"
                },
                "code": {
                    "type": "string"
                }
            },
            "example": {
                "scope": "MyScope",
                "code": "MyCode"
            }
        },
        "Version": {
            "description": "The version metadata.",
            "required": [
                "effectiveFrom",
                "asAtDate"
            ],
            "type": "object",
            "properties": {
                "effectiveFrom": {
                    "format": "date-time",
                    "description": "The effective datetime at which this version became valid. Only applies when a single entity is being interacted with.",
                    "type": "string"
                },
                "asAtDate": {
                    "format": "date-time",
                    "description": "The asAt datetime at which the data was committed to LUSID.",
                    "type": "string"
                }
            }
        },
        "ErrorDetail": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "detail": {
                    "type": "string"
                }
            }
        },
        "DataType": {
            "required": [
                "typeValueRange",
                "id",
                "displayName",
                "description",
                "valueType"
            ],
            "type": "object",
            "properties": {
                "href": {
                    "type": "string"
                },
                "typeValueRange": {
                    "enum": [
                        "Open",
                        "Closed"
                    ],
                    "type": "string"
                },
                "id": {
                    "$ref": "#/definitions/ResourceId"
                },
                "displayName": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "valueType": {
                    "enum": [
                        "String",
                        "Int",
                        "Decimal",
                        "DateTime",
                        "Boolean",
                        "Map",
                        "List",
                        "PropertyArray",
                        "Percentage",
                        "BenchmarkType",
                        "Code",
                        "Id",
                        "Uri",
                        "ArrayOfIds",
                        "ArrayOfTransactionAliases",
                        "ArrayofTransactionMovements",
                        "ArrayofUnits",
                        "StringArray",
                        "CurrencyAndAmount",
                        "TradePrice",
                        "UnitCreation",
                        "Currency",
                        "UserId",
                        "MetricValue",
                        "QuoteId",
                        "QuoteSeriesId",
                        "ResourceId",
                        "ResultValue",
                        "CutLocalTime",
                        "DateOrCutLabel",
                        "Transition",
                        "StructuredData",
                        "StructuredDataId",
                        "ConfigurationRecipe",
                        "ConfigurationRecipeSnippet"
                    ],
                    "type": "string"
                },
                "acceptableValues": {
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "type": "object"
                    }
                },
                "unitSchema": {
                    "enum": [
                        "NoUnits",
                        "Basic",
                        "Iso4217Currency"
                    ],
                    "type": "string"
                },
                "acceptableUnits": {
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/IUnitDefinitionDto"
                    }
                },
                "links": {
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Link"
                    }
                }
            }
        },
        "IUnitDefinitionDto": {
            "type": "object",
            "properties": {
                "schema": {
                    "enum": [
                        "NoUnits",
                        "Basic",
                        "Iso4217Currency"
                    ],
                    "type": "string",
                    "readOnly": true
                },
                "code": {
                    "type": "string",
                    "readOnly": true
                },
                "displayName": {
                    "type": "string",
                    "readOnly": true
                },
                "description": {
                    "type": "string",
                    "readOnly": true
                }
            }
        },
        "ResourceListOfDataType": {
            "required": [
                "values"
            ],
            "type": "object",
            "properties": {
                "values": {
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/DataType"
                    }
                },
                "href": {
                    "type": "string"
                },
                "links": {
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Link"
                    }
                }
            }
        },
        "ResourceListOfIUnitDefinitionDto": {
            "required": [
                "values"
            ],
            "type": "object",
            "properties": {
                "values": {
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/IUnitDefinitionDto"
                    }
                },
                "href": {
                    "type": "string"
                },
                "links": {
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Link"
                    }
                }
            }
        },
        "CreateDerivedTransactionPortfolioRequest": {
            "required": [
                "displayName",
                "code",
                "parentPortfolioId"
            ],
            "type": "object",
            "properties": {
                "displayName": {
                    "description": "",
                    "type": "string"
                },
                "description": {
                    "description": "",
                    "type": "string"
                },
                "code": {
                    "description": "",
                    "type": "string"
                },
                "parentPortfolioId": {
                    "$ref": "#/definitions/ResourceId",
                    "description": ""
                },
                "created": {
                    "format": "date-time",
                    "description": "",
                    "type": "string"
                },
                "corporateActionSourceId": {
                    "$ref": "#/definitions/ResourceId",
                    "description": ""
                },
                "accountingMethod": {
                    "description": "",
                    "enum": [
                        "Default",
                        "AverageCost",
                        "FirstInFirstOut",
                        "LastInFirstOut",
                        "HighestCostFirst",
                        "LowestCostFirst"
                    ],
                    "type": "string"
                },
                "subHoldingKeys": {
                    "description": "",
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "example": {
                "displayName": "MyDerivedPortfolioName",
                "description": "Example long form portfolio description",
                "code": "MyDerivedPortfolioCode",
                "parentPortfolioId": {
                    "scope": "MyParentPortfolioScope",
                    "code": "MyParentPortfolioCode"
                },
                "created": "2018-03-05T00:00:00+00:00",
                "corporateActionSourceId": {
                    "scope": "MyScope",
                    "code": "MyCorporateActionSourceId"
                },
                "accountingMethod": "FirstInFirstOut",
                "subHoldingKeys": [
                    "Transaction/MyScope/Strategy",
                    "Transaction/MyScope/SubAccount"
                ]
            }
        },
        "Portfolio": {
            "description": "A list of portfolios.",
            "required": [
                "id",
                "type",
                "displayName",
                "created"
            ],
            "type": "object",
            "properties": {
                "href": {
                    "description": "The specifc Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.",
                    "type": "string"
                },
                "id": {
                    "$ref": "#/definitions/ResourceId",
                    "description": "The unique resource identifier for the portfolio."
                },
                "type": {
                    "description": "The type of the portfolio.",
                    "enum": [
                        "Transaction",
                        "Reference",
                        "DerivedTransaction"
                    ],
                    "type": "string"
                },
                "displayName": {
                    "description": "The name of the portfolio.",
                    "type": "string"
                },
                "description": {
                    "description": "The long form description of the portfolio.",
                    "type": "string"
                },
                "created": {
                    "format": "date-time",
                    "description": "The effective datetime at which the portfolio was created. No transactions or constituents can be added to the portfolio before this date.",
                    "type": "string"
                },
                "parentPortfolioId": {
                    "$ref": "#/definitions/ResourceId",
                    "description": "If the portfolio is a derived portfolio, this is the identifier of the parent portfoliofrom which it is derived."
                },
                "version": {
                    "$ref": "#/definitions/Version",
                    "description": "The version of the portfolio."
                },
                "isDerived": {
                    "description": "Whether or not this is a derived portfolio.",
                    "type": "boolean"
                },
                "properties": {
                    "description": "The requested portfolio properties. These will be from the 'Portfolio' domain.",
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/Property"
                    }
                },
                "links": {
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Link"
                    }
                }
            }
        },
        "Property": {
            "required": [
                "key",
                "value"
            ],
            "type": "object",
            "properties": {
                "key": {
                    "description": "The key of the property. This takes the format {domain}/{scope}/{code} e.g. 'Instrument/system/Name' or 'Transaction/strategy/quantsignal'.",
                    "type": "string"
                },
                "value": {
                    "$ref": "#/definitions/PropertyValue",
                    "description": "The value of the property."
                },
                "effectiveFrom": {
                    "format": "date-time",
                    "description": "The effective datetime from which the property is valid.",
                    "type": "string"
                }
            }
        },
        "PropertyValue": {
            "description": "The value of the property.",
            "type": "object",
            "properties": {
                "labelValue": {
                    "description": "The text value of a property defined as having the 'Label' type.",
                    "type": "string"
                },
                "metricValue": {
                    "$ref": "#/definitions/MetricValue",
                    "description": "The numerical value of a property defined as having the 'Metric' type."
                }
            }
        },
        "MetricValue": {
            "type": "object",
            "properties": {
                "value": {
                    "format": "double",
                    "description": "The numerical value of the property.",
                    "type": "number"
                },
                "unit": {
                    "type": "string"
                }
            }
        },
        "InstrumentDefinition": {
            "required": [
                "name",
                "identifiers"
            ],
            "type": "object",
            "properties": {
                "name": {
                    "description": "The name of the instrument.",
                    "type": "string"
                },
                "identifiers": {
                    "description": "A set of identifiers that can be used to identify the instrument. At least one of these must be configured to be a unique identifier.",
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/InstrumentIdValue"
                    }
                },
                "properties": {
                    "description": "Set of unique instrument properties and associated values to store with the instrument. Each property must be from the 'Instrument' domain.",
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Property"
                    }
                },
                "lookThroughPortfolioId": {
                    "$ref": "#/definitions/ResourceId",
                    "description": "The identifier of the portfolio that has been securitised to create this instrument."
                },
                "definition": {
                    "$ref": "#/definitions/InstrumentEconomicDefinition",
                    "description": "The economic definition of the instrument where an expanded definition exists. in the case of OTC instruments this contains the definition of the non-exchange traded instrument. There is no validation on the structure of this definition. However, in order to transparently use vendor libraries it must conform to a format that LUSID understands."
                }
            }
        },
        "InstrumentIdValue": {
            "required": [
                "value"
            ],
            "type": "object",
            "properties": {
                "value": {
                    "description": "The value of the identifier.",
                    "type": "string"
                },
                "effectiveAt": {
                    "format": "date-time",
                    "description": "The effective datetime from which the identifier will be valid. If left unspecified the default value is the beginning of time.",
                    "type": "string"
                }
            }
        },
        "InstrumentEconomicDefinition": {
            "description": "Expanded instrument definition - in the case of OTC instruments\r\nthis contains the definition of the non-exchange traded instrument.\r\nThe format for this can be client-defined, but in order to transparently use\r\nvendor libraries it must conform to a format that LUSID understands.",
            "required": [
                "instrumentFormat",
                "content"
            ],
            "type": "object",
            "properties": {
                "instrumentFormat": {
                    "description": "The format of the expanded definition.",
                    "type": "string"
                },
                "content": {
                    "description": "The content of the expanded definition. There is no validation on the format of this.",
                    "type": "string"
                }
            }
        },
        "UpsertInstrumentsResponse": {
            "type": "object",
            "properties": {
                "href": {
                    "description": "The specifc Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.",
                    "type": "string"
                },
                "values": {
                    "description": "The instruments which have been successfully updated or inserted.",
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/Instrument"
                    }
                },
                "failed": {
                    "description": "The instruments that could not be updated or inserted along with a reason for their failure.",
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/ErrorDetail"
                    }
                },
                "links": {
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Link"
                    }
                }
            }
        },
        "Instrument": {
            "description": "A list of instruments.",
            "required": [
                "lusidInstrumentId",
                "version",
                "name",
                "identifiers",
                "state"
            ],
            "type": "object",
            "properties": {
                "href": {
                    "description": "The specifc Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.",
                    "type": "string"
                },
                "lusidInstrumentId": {
                    "description": "The unique LUSID Instrument Identifier (LUID) of the instrument.",
                    "type": "string"
                },
                "version": {
                    "$ref": "#/definitions/Version",
                    "description": "The version of the instrument."
                },
                "name": {
                    "description": "The name of the instrument.",
                    "type": "string"
                },
                "identifiers": {
                    "description": "The set of identifiers that can be used to identify the instrument.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "properties": {
                    "description": "The requested instrument properties. These will be from the 'Instrument' domain.",
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Property"
                    }
                },
                "lookthroughPortfolio": {
                    "$ref": "#/definitions/ResourceId",
                    "description": "The lookthrough portfolio of the instrument (if any)."
                },
                "instrumentDefinition": {
                    "$ref": "#/definitions/InstrumentEconomicDefinition",
                    "description": "The economic definition of the instrument where an expanded definition exists."
                },
                "state": {
                    "description": "The state of of the instrument at the asAt datetime of this version of the instrument definition.",
                    "enum": [
                        "Active",
                        "Inactive"
                    ],
                    "type": "string"
                },
                "links": {
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Link"
                    }
                }
            }
        },
        "ResourceListOfInstrument": {
            "required": [
                "values"
            ],
            "type": "object",
            "properties": {
                "values": {
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Instrument"
                    }
                },
                "href": {
                    "type": "string"
                },
                "links": {
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Link"
                    }
                }
            }
        },
        "UpdateInstrumentIdentifierRequest": {
            "required": [
                "type"
            ],
            "type": "object",
            "properties": {
                "type": {
                    "description": "The allowable instrument identifier to update, insert or remove e.g. 'Figi'.",
                    "type": "string"
                },
                "value": {
                    "description": "The new value of the allowable instrument identifier. If unspecified the identifier will be removed from the instrument.",
                    "type": "string"
                },
                "effectiveAt": {
                    "format": "dateorcutlabel",
                    "description": "The effective datetime from which the identifier should be updated, inserted or removed. Defaults to the current LUSID system datetime if not specified.",
                    "type": "string"
                }
            },
            "example": {
                "type": "Figi",
                "value": "updated-figi",
                "effectiveAt": "2018-02-01T10:00:00+00:00"
            }
        },
        "DeleteInstrumentResponse": {
            "required": [
                "asAt"
            ],
            "type": "object",
            "properties": {
                "href": {
                    "description": "The specifc Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.",
                    "type": "string"
                },
                "asAt": {
                    "format": "date-time",
                    "description": "The asAt datetime at which the instrument was deleted.",
                    "type": "string"
                },
                "links": {
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Link"
                    }
                }
            }
        },
        "GetInstrumentsResponse": {
            "type": "object",
            "properties": {
                "href": {
                    "description": "The specifc Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.",
                    "type": "string"
                },
                "values": {
                    "description": "The instrument definitions, keyed by the identifier used to retrieve them. Only instruments that were found will be contained in this collection.",
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/Instrument"
                    }
                },
                "failed": {
                    "description": "The identifiers which did not resolve to an instrument along with the nature of the failure.",
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/ErrorDetail"
                    }
                },
                "links": {
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Link"
                    }
                }
            }
        },
        "UpsertInstrumentPropertyRequest": {
            "required": [
                "identifierType",
                "identifier"
            ],
            "type": "object",
            "properties": {
                "identifierType": {
                    "description": "The instrument identifier type.",
                    "type": "string"
                },
                "identifier": {
                    "description": "The unique instrument identifier of the instrument to update or insert properties on.",
                    "type": "string"
                },
                "properties": {
                    "description": "Set of unique instrument properties and associated values to store with the instrument. Each property must be from the 'Instrument' domain.",
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Property"
                    }
                }
            },
            "example": [
                {
                    "identifierType": "LusidInstrumentId",
                    "identifier": "LUID_00000000",
                    "properties": [
                        {
                            "key": "Instrument/MyScope/MyPropertyName",
                            "value": {
                                "labelValue": "MyValue"
                            },
                            "effectiveFrom": "2018-03-05T12:00:00+00:00"
                        }
                    ]
                }
            ]
        },
        "UpsertInstrumentPropertiesResponse": {
            "required": [
                "asAtDate"
            ],
            "type": "object",
            "properties": {
                "asAtDate": {
                    "format": "date-time",
                    "description": "The asAt datetime at which the properties were updated or inserted on the specified instruments.",
                    "type": "string"
                },
                "links": {
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Link"
                    }
                }
            }
        },
        "ResourceListOfInstrumentIdTypeDescriptor": {
            "required": [
                "values"
            ],
            "type": "object",
            "properties": {
                "values": {
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/InstrumentIdTypeDescriptor"
                    }
                },
                "href": {
                    "type": "string"
                },
                "links": {
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Link"
                    }
                }
            }
        },
        "InstrumentIdTypeDescriptor": {
            "description": "The description of an allowable instrument identifier.",
            "required": [
                "identifierType",
                "propertyKey",
                "isUniqueIdentifierType"
            ],
            "type": "object",
            "properties": {
                "identifierType": {
                    "description": "The name of the identifier type.",
                    "type": "string"
                },
                "propertyKey": {
                    "description": "The property key that corresponds to the identifier type.",
                    "type": "string"
                },
                "isUniqueIdentifierType": {
                    "description": "Whether or not the identifier type is enforced to be unique.",
                    "type": "boolean"
                }
            }
        },
        "ResourceListOfAccessControlledResource": {
            "required": [
                "values"
            ],
            "type": "object",
            "properties": {
                "values": {
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AccessControlledResource"
                    }
                },
                "href": {
                    "type": "string"
                },
                "links": {
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Link"
                    }
                }
            }
        },
        "AccessControlledResource": {
            "description": "A resource to which access can be controlled",
            "required": [
                "description",
                "actions"
            ],
            "type": "object",
            "properties": {
                "application": {
                    "description": "The application to which this resource belongs",
                    "type": "string"
                },
                "name": {
                    "description": "The display name of the resource",
                    "type": "string"
                },
                "description": {
                    "description": "The description of the resource",
                    "type": "string"
                },
                "actions": {
                    "description": "The actions acceptable for this type of resource",
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AccessControlledAction"
                    }
                },
                "identifierParts": {
                    "description": "The constituent parts of a valid identifier for this resource",
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/IdentifierPartSchema"
                    }
                },
                "links": {
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Link"
                    }
                }
            }
        },
        "AccessControlledAction": {
            "description": "An action on LUSID that can be access controlled",
            "required": [
                "description",
                "action"
            ],
            "type": "object",
            "properties": {
                "description": {
                    "description": "The description of the action",
                    "type": "string"
                },
                "action": {
                    "$ref": "#/definitions/ActionId",
                    "description": "The fully qualified ActionId that can be access controlled"
                },
                "limitedSet": {
                    "description": "When populated, the provided values are the limited set of resources that are allowed to be specified for\r\naccess control for this action",
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/IdSelectorDefinition"
                    }
                },
                "links": {
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Link"
                    }
                }
            }
        },
        "IdentifierPartSchema": {
            "description": "The schema of an contributing part of a valid LUSID resource identifier",
            "required": [
                "index",
                "name",
                "displayName",
                "description",
                "required"
            ],
            "type": "object",
            "properties": {
                "index": {
                    "format": "int32",
                    "description": "The typical index in the identifier in which this part appears",
                    "type": "integer",
                    "readOnly": true
                },
                "name": {
                    "description": "The name of the identifier part that can/should be provided for this resource type",
                    "type": "string",
                    "readOnly": true
                },
                "displayName": {
                    "description": "The display name of the identifier part",
                    "type": "string",
                    "readOnly": true
                },
                "description": {
                    "description": "A brief description of the point of this identifier part",
                    "type": "string",
                    "readOnly": true
                },
                "required": {
                    "description": "Whether a value is required to be provided",
                    "type": "boolean",
                    "readOnly": true
                },
                "links": {
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Link"
                    }
                }
            }
        },
        "ActionId": {
            "required": [
                "scope",
                "activity",
                "entity"
            ],
            "type": "object",
            "properties": {
                "scope": {
                    "maxLength": 100,
                    "minLength": 3,
                    "type": "string"
                },
                "activity": {
                    "maxLength": 25,
                    "minLength": 3,
                    "type": "string"
                },
                "entity": {
                    "maxLength": 25,
                    "minLength": 3,
                    "type": "string"
                }
            }
        },
        "IdSelectorDefinition": {
            "type": "object",
            "properties": {
                "identifier": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "actions": {
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ActionId"
                    }
                },
                "name": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                }
            }
        },
        "FileResponse": {
            "description": "Allows a file (represented as a stream) to be returned from an Api call",
            "type": "object",
            "properties": {
                "fileStream": {
                    "$ref": "#/definitions/Stream",
                    "readOnly": true
                },
                "contentType": {
                    "type": "string",
                    "readOnly": true
                },
                "downloadedFilename": {
                    "type": "string",
                    "readOnly": true
                }
            }
        },
        "Stream": {
            "type": "object",
            "properties": {
                "canRead": {
                    "type": "boolean",
                    "readOnly": true
                },
                "canSeek": {
                    "type": "boolean",
                    "readOnly": true
                },
                "canTimeout": {
                    "type": "boolean",
                    "readOnly": true
                },
                "canWrite": {
                    "type": "boolean",
                    "readOnly": true
                },
                "length": {
                    "format": "int64",
                    "type": "integer",
                    "readOnly": true
                },
                "position": {
                    "format": "int64",
                    "type": "integer"
                },
                "readTimeout": {
                    "format": "int32",
                    "type": "integer"
                },
                "writeTimeout": {
                    "format": "int32",
                    "type": "integer"
                }
            }
        },
        "VersionSummaryDto": {
            "type": "object",
            "properties": {
                "apiVersion": {
                    "type": "string",
                    "readOnly": true
                },
                "buildVersion": {
                    "type": "string",
                    "readOnly": true
                },
                "excelVersion": {
                    "type": "string",
                    "readOnly": true
                },
                "links": {
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Link"
                    }
                }
            }
        },
        "CreatePortfolioGroupRequest": {
            "required": [
                "code",
                "displayName"
            ],
            "type": "object",
            "properties": {
                "code": {
                    "description": "The code that the portfolio group will be created with. Together with the scope this uniquely identifies the portfolio group.",
                    "type": "string"
                },
                "values": {
                    "description": "The resource identifiers of the portfolios to be contained within the portfolio group.",
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ResourceId"
                    }
                },
                "subGroups": {
                    "description": "The resource identifiers of the portfolio groups to be contained within the portfolio group as sub groups.",
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ResourceId"
                    }
                },
                "displayName": {
                    "description": "The name of the portfolio group.",
                    "type": "string"
                },
                "description": {
                    "description": "A long form description of the portfolio group.",
                    "type": "string"
                }
            },
            "example": {
                "code": "MyGroupCode",
                "values": [
                    {
                        "scope": "MyScope",
                        "code": "MyPortfolioCode1"
                    },
                    {
                        "scope": "MyScope",
                        "code": "MyPortfolioCode2"
                    }
                ],
                "subGroups": [
                    {
                        "scope": "MyScope",
                        "code": "MySubGroupCode"
                    }
                ],
                "displayName": "MyGroupName",
                "description": "My group description"
            }
        },
        "PortfolioGroup": {
            "required": [
                "id",
                "displayName",
                "version"
            ],
            "type": "object",
            "properties": {
                "href": {
                    "description": "The specifc Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.",
                    "type": "string"
                },
                "id": {
                    "$ref": "#/definitions/ResourceId",
                    "description": "The resource identifier for the portfolio group."
                },
                "displayName": {
                    "description": "The name of the portfolio group.",
                    "type": "string"
                },
                "description": {
                    "description": "The long form description of the portfolio group.",
                    "type": "string"
                },
                "portfolios": {
                    "description": "The collection of resource identifiers for the portfolios contained in the portfolio group.",
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ResourceId"
                    }
                },
                "subGroups": {
                    "description": "The collection of resource identifiers for the portfolio groups contained in the portfolio group as sub groups.",
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ResourceId"
                    }
                },
                "version": {
                    "$ref": "#/definitions/Version",
                    "description": "The version of the portfolio group."
                },
                "links": {
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Link"
                    }
                }
            }
        },
        "ResourceListOfPortfolioGroup": {
            "required": [
                "values"
            ],
            "type": "object",
            "properties": {
                "values": {
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PortfolioGroup"
                    }
                },
                "href": {
                    "type": "string"
                },
                "links": {
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Link"
                    }
                }
            }
        },
        "UpdatePortfolioGroupRequest": {
            "required": [
                "displayName"
            ],
            "type": "object",
            "properties": {
                "displayName": {
                    "description": "The name of the portfolio group.",
                    "type": "string"
                },
                "description": {
                    "description": "A long form description of the portfolio group.",
                    "type": "string"
                }
            },
            "example": {
                "displayName": "MyGroupName",
                "description": "My Group Description"
            }
        },
        "ResourceListOfProcessedCommand": {
            "required": [
                "values"
            ],
            "type": "object",
            "properties": {
                "values": {
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ProcessedCommand"
                    }
                },
                "href": {
                    "type": "string"
                },
                "links": {
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Link"
                    }
                }
            }
        },
        "ProcessedCommand": {
            "description": "The list of commands.",
            "required": [
                "description",
                "userId",
                "processedTime"
            ],
            "type": "object",
            "properties": {
                "description": {
                    "description": "The description of the command issued.",
                    "type": "string"
                },
                "path": {
                    "description": "The unique identifier for the command including the request id.",
                    "type": "string"
                },
                "userId": {
                    "$ref": "#/definitions/User",
                    "description": "The unique id of the user that issued the command."
                },
                "processedTime": {
                    "description": "The asAt datetime that the events published by the processing of this command were committed to LUSID.",
                    "type": "object"
                }
            }
        },
        "User": {
            "description": "The unique id of the user that issued the command.",
            "type": "object",
            "properties": {
                "id": {
                    "description": "The unique id of the user.",
                    "type": "string",
                    "readOnly": true
                }
            }
        },
        "ExpandedGroup": {
            "required": [
                "id",
                "displayName"
            ],
            "type": "object",
            "properties": {
                "href": {
                    "description": "The specifc Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.",
                    "type": "string"
                },
                "id": {
                    "$ref": "#/definitions/ResourceId",
                    "description": "The resource identifier for the portfolio group."
                },
                "displayName": {
                    "description": "The name of the portfolio group.",
                    "type": "string"
                },
                "description": {
                    "description": "The long form description of the portfolio group.",
                    "type": "string"
                },
                "values": {
                    "description": "The collection of resource identifiers for the portfolios contained in the portfolio group.",
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/CompletePortfolio"
                    }
                },
                "subGroups": {
                    "description": "The collection of resource identifiers for the portfolio groups contained in the portfolio group as sub groups.",
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ExpandedGroup"
                    }
                },
                "version": {
                    "$ref": "#/definitions/Version",
                    "description": "The version of the portfolio group."
                },
                "links": {
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Link"
                    }
                }
            }
        },
        "CompletePortfolio": {
            "required": [
                "id",
                "version"
            ],
            "type": "object",
            "properties": {
                "id": {
                    "$ref": "#/definitions/ResourceId",
                    "description": "The resource identifier of the portfolio.",
                    "readOnly": true
                },
                "href": {
                    "description": "The specifc Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.",
                    "type": "string",
                    "readOnly": true
                },
                "description": {
                    "description": "The long form description of the portfolio.",
                    "type": "string",
                    "readOnly": true
                },
                "displayName": {
                    "description": "The name of the portfolio.",
                    "type": "string",
                    "readOnly": true
                },
                "created": {
                    "format": "date-time",
                    "description": "The effective datetime at which the portfolio was created. No transactions or constituents can be added to the portfolio before this date.",
                    "type": "string",
                    "readOnly": true
                },
                "parentPortfolioId": {
                    "$ref": "#/definitions/ResourceId",
                    "description": "If the portfolio is a derived portfolio, this is the identifier of the parent portfolio from which it is derived.",
                    "readOnly": true
                },
                "isDerived": {
                    "description": "Whether or not this is a derived portfolio.",
                    "type": "boolean",
                    "readOnly": true
                },
                "type": {
                    "description": "The type of the portfolio.",
                    "enum": [
                        "Transaction",
                        "Reference",
                        "DerivedTransaction"
                    ],
                    "type": "string",
                    "readOnly": true
                },
                "version": {
                    "$ref": "#/definitions/Version",
                    "description": "The version metadata."
                },
                "properties": {
                    "description": "The requested portfolio properties. These will be from the 'Portfolio' domain.",
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Property"
                    }
                },
                "baseCurrency": {
                    "description": "If the portfolio is a transaction portfolio or derived transaction portfolio, this is the base currency of the portfolio.",
                    "type": "string"
                },
                "links": {
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Link"
                    }
                }
            }
        },
        "ResourceListOfPortfolio": {
            "required": [
                "values"
            ],
            "type": "object",
            "properties": {
                "values": {
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Portfolio"
                    }
                },
                "href": {
                    "type": "string"
                },
                "links": {
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Link"
                    }
                }
            }
        },
        "UpdatePortfolioRequest": {
            "required": [
                "displayName"
            ],
            "type": "object",
            "properties": {
                "displayName": {
                    "description": "The name of the transaction portfolio.",
                    "type": "string"
                },
                "description": {
                    "description": "A long form description of the transaction portfolio.",
                    "type": "string"
                }
            },
            "example": {
                "displayName": "MyPortfolioName",
                "description": "Long form description of portfolio"
            }
        },
        "PortfolioProperties": {
            "type": "object",
            "properties": {
                "href": {
                    "description": "The specifc Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.",
                    "type": "string"
                },
                "properties": {
                    "description": "The portfolio properties. These will be from the 'Portfolio' domain.",
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/Property"
                    }
                },
                "version": {
                    "$ref": "#/definitions/Version",
                    "description": "The version of the portfolio."
                },
                "links": {
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Link"
                    }
                }
            }
        },
        "PortfoliosReconciliationRequest": {
            "required": [
                "left",
                "right",
                "instrumentPropertyKeys"
            ],
            "type": "object",
            "properties": {
                "left": {
                    "$ref": "#/definitions/PortfolioReconciliationRequest",
                    "description": "The specification of the left hand side of the portfolio reconciliation"
                },
                "right": {
                    "$ref": "#/definitions/PortfolioReconciliationRequest",
                    "description": "The specification of the right hand side of the portfolio reconciliation"
                },
                "instrumentPropertyKeys": {
                    "description": "Instrument properties to be included with any identified breaks. These properties will be in the effective and AsAt dates of the left portfolio",
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "example": {
                "left": {
                    "portfolioId": {
                        "scope": "MySourceScope",
                        "code": "MySourcePortfolioCode"
                    },
                    "effectiveAt": "2018-03-05T00:00:00+00:00",
                    "asAt": "2018-03-05T00:00:00+00:00"
                },
                "right": {
                    "portfolioId": {
                        "scope": "MyTargetScope",
                        "code": "MyTargetPortfolioCode"
                    },
                    "effectiveAt": "2018-03-05T00:00:00+00:00",
                    "asAt": "2018-03-05T00:00:00+00:00"
                },
                "instrumentPropertyKeys": [
                    "Instrument/default/Name"
                ]
            }
        },
        "PortfolioReconciliationRequest": {
            "required": [
                "portfolioId",
                "effectiveAt"
            ],
            "type": "object",
            "properties": {
                "portfolioId": {
                    "$ref": "#/definitions/ResourceId",
                    "description": "The id of the portfolio to be reconciled"
                },
                "effectiveAt": {
                    "format": "dateorcutlabel",
                    "description": "The effective date of the portfolio",
                    "type": "string"
                },
                "asAt": {
                    "format": "date-time",
                    "description": "Optional. The AsAt date of the portfolio",
                    "type": "string"
                }
            }
        },
        "ResourceListOfReconciliationBreak": {
            "required": [
                "values"
            ],
            "type": "object",
            "properties": {
                "values": {
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ReconciliationBreak"
                    }
                },
                "href": {
                    "type": "string"
                },
                "links": {
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Link"
                    }
                }
            }
        },
        "ReconciliationBreak": {
            "description": "A reconciliation break",
            "required": [
                "instrumentUid",
                "subHoldingKeys",
                "leftUnits",
                "rightUnits",
                "differenceUnits",
                "leftCost",
                "rightCost",
                "differenceCost",
                "instrumentProperties"
            ],
            "type": "object",
            "properties": {
                "instrumentUid": {
                    "description": "Unique instrument identifier",
                    "type": "string"
                },
                "subHoldingKeys": {
                    "description": "Any other properties that comprise the Sub-Holding Key",
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/PerpetualProperty"
                    }
                },
                "leftUnits": {
                    "format": "double",
                    "description": "Units from the left hand side",
                    "type": "number"
                },
                "rightUnits": {
                    "format": "double",
                    "description": "Units from the right hand side",
                    "type": "number"
                },
                "differenceUnits": {
                    "format": "double",
                    "description": "Difference in units",
                    "type": "number"
                },
                "leftCost": {
                    "$ref": "#/definitions/CurrencyAndAmount",
                    "description": "Cost from the left hand side"
                },
                "rightCost": {
                    "$ref": "#/definitions/CurrencyAndAmount",
                    "description": "Cost from the right hand side"
                },
                "differenceCost": {
                    "$ref": "#/definitions/CurrencyAndAmount",
                    "description": "Difference in cost"
                },
                "instrumentProperties": {
                    "description": "Additional features relating to the instrument",
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Property"
                    }
                }
            }
        },
        "PerpetualProperty": {
            "required": [
                "key",
                "value"
            ],
            "type": "object",
            "properties": {
                "key": {
                    "description": "The key of the property. This takes the format {domain}/{scope}/{code} e.g. 'Instrument/system/Name' or 'Transaction/strategy/quantsignal'.",
                    "type": "string"
                },
                "value": {
                    "$ref": "#/definitions/PropertyValue",
                    "description": "The value of the property."
                }
            }
        },
        "CurrencyAndAmount": {
            "description": "An amount of a specific currency, specifying a value and an associated unit",
            "type": "object",
            "properties": {
                "amount": {
                    "format": "double",
                    "type": "number"
                },
                "currency": {
                    "type": "string"
                }
            }
        },
        "CreatePropertyDefinitionRequest": {
            "required": [
                "domain",
                "scope",
                "code",
                "displayName",
                "dataTypeId"
            ],
            "type": "object",
            "properties": {
                "domain": {
                    "description": "The domain that the property will be created in.",
                    "enum": [
                        "NotDefined",
                        "Transaction",
                        "Portfolio",
                        "Holding",
                        "ReferenceHolding",
                        "TransactionConfiguration",
                        "Instrument",
                        "CutLabelDefinition",
                        "Analytic"
                    ],
                    "type": "string"
                },
                "scope": {
                    "description": "The scope that the property will be created in.",
                    "type": "string"
                },
                "code": {
                    "description": "The code that the property will be created with. Together with the domain and\r\nscope this uniquely identifies the property.",
                    "type": "string"
                },
                "valueRequired": {
                    "description": "Whether or not a value is always required for this property. Defaults to false if not specified.",
                    "type": "boolean"
                },
                "displayName": {
                    "description": "The display name of the property.",
                    "type": "string"
                },
                "dataTypeId": {
                    "$ref": "#/definitions/ResourceId",
                    "description": "The data type enforced against the property's values."
                },
                "lifeTime": {
                    "description": "Controls how the property's values can change over time. Defaults to \"Perpetual\" if not specified.",
                    "enum": [
                        "Perpetual",
                        "TimeVariant"
                    ],
                    "type": "string"
                }
            },
            "example": {
                "domain": "Portfolio",
                "scope": "MyScope",
                "code": "MyPropertyName",
                "valueRequired": false,
                "displayName": "My Property Display Name",
                "dataTypeId": {
                    "scope": "system",
                    "code": "string"
                },
                "lifeTime": "Perpetual"
            }
        },
        "PropertyDefinition": {
            "description": "A list of property definitions.",
            "type": "object",
            "properties": {
                "href": {
                    "description": "The specifc Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.",
                    "type": "string"
                },
                "key": {
                    "description": "The property key which uniquely identifies the property. The format for the property key is {domain}/{scope}/{code}, e.g. 'Portfolio/Manager/Id'.",
                    "type": "string"
                },
                "valueType": {
                    "description": "The type of values that can be associated with this property. This is defined by the property's data type.",
                    "enum": [
                        "String",
                        "Int",
                        "Decimal",
                        "DateTime",
                        "Boolean",
                        "Map",
                        "List",
                        "PropertyArray",
                        "Percentage",
                        "BenchmarkType",
                        "Code",
                        "Id",
                        "Uri",
                        "ArrayOfIds",
                        "ArrayOfTransactionAliases",
                        "ArrayofTransactionMovements",
                        "ArrayofUnits",
                        "StringArray",
                        "CurrencyAndAmount",
                        "TradePrice",
                        "UnitCreation",
                        "Currency",
                        "UserId",
                        "MetricValue",
                        "QuoteId",
                        "QuoteSeriesId",
                        "ResourceId",
                        "ResultValue",
                        "CutLocalTime",
                        "DateOrCutLabel",
                        "Transition",
                        "StructuredData",
                        "StructuredDataId",
                        "ConfigurationRecipe",
                        "ConfigurationRecipeSnippet"
                    ],
                    "type": "string"
                },
                "valueRequired": {
                    "description": "Whether or not a value is always required for this property.",
                    "type": "boolean"
                },
                "displayName": {
                    "description": "The display name of the property.",
                    "type": "string"
                },
                "dataTypeId": {
                    "$ref": "#/definitions/ResourceId",
                    "description": "The identifier for the data type that is enforced on the property's values."
                },
                "lifeTime": {
                    "description": "Describes how the property's values can change over time.",
                    "enum": [
                        "Perpetual",
                        "TimeVariant"
                    ],
                    "type": "string"
                },
                "type": {
                    "description": "The type of the property.",
                    "enum": [
                        "Label",
                        "Metric",
                        "Information"
                    ],
                    "type": "string"
                },
                "unitSchema": {
                    "description": "The units that can be associated with the property's values. This is defined by the property's data type.",
                    "enum": [
                        "NoUnits",
                        "Basic",
                        "Iso4217Currency"
                    ],
                    "type": "string"
                },
                "domain": {
                    "description": "The domain that the property exists in.",
                    "enum": [
                        "NotDefined",
                        "Transaction",
                        "Portfolio",
                        "Holding",
                        "ReferenceHolding",
                        "TransactionConfiguration",
                        "Instrument",
                        "CutLabelDefinition",
                        "Analytic"
                    ],
                    "type": "string",
                    "readOnly": true
                },
                "scope": {
                    "description": "The scope that the property exists in.",
                    "type": "string",
                    "readOnly": true
                },
                "code": {
                    "description": "The code of the property. Together with the domain and scope this uniquely identifies the property.",
                    "type": "string",
                    "readOnly": true
                },
                "links": {
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Link"
                    }
                }
            }
        },
        "ResourceListOfPropertyDefinition": {
            "required": [
                "values"
            ],
            "type": "object",
            "properties": {
                "values": {
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PropertyDefinition"
                    }
                },
                "href": {
                    "type": "string"
                },
                "links": {
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Link"
                    }
                }
            }
        },
        "UpdatePropertyDefinitionRequest": {
            "required": [
                "displayName"
            ],
            "type": "object",
            "properties": {
                "displayName": {
                    "description": "The display name of the property.",
                    "type": "string"
                }
            },
            "example": {
                "displayName": "MyPropertyName"
            }
        },
        "CreateReferencePortfolioRequest": {
            "required": [
                "displayName",
                "code"
            ],
            "type": "object",
            "properties": {
                "displayName": {
                    "description": "",
                    "type": "string"
                },
                "description": {
                    "description": "",
                    "type": "string"
                },
                "code": {
                    "description": "",
                    "type": "string"
                },
                "created": {
                    "format": "date-time",
                    "description": "",
                    "type": "string"
                },
                "properties": {
                    "description": "Portfolio properties to add to the portfolio",
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/Property"
                    }
                }
            },
            "example": {
                "displayName": "MyPortfolioName",
                "description": "Description of my portfolio",
                "code": "MyPortfolioCode",
                "created": "2018-03-05T00:00:00+00:00",
                "properties": {}
            }
        },
        "UpsertReferencePortfolioConstituentsRequest": {
            "required": [
                "effectiveFrom",
                "weightType",
                "constituents"
            ],
            "type": "object",
            "properties": {
                "effectiveFrom": {
                    "format": "date-time",
                    "description": "",
                    "type": "string"
                },
                "weightType": {
                    "description": "",
                    "enum": [
                        "Static",
                        "Floating",
                        "Periodical"
                    ],
                    "type": "string"
                },
                "periodType": {
                    "description": "",
                    "enum": [
                        "Daily",
                        "Weekly",
                        "Monthly",
                        "Quarterly",
                        "Annually"
                    ],
                    "type": "string"
                },
                "periodCount": {
                    "format": "int32",
                    "description": "",
                    "type": "integer"
                },
                "constituents": {
                    "description": "Set of constituents (instrument/weight pairings)",
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ReferencePortfolioConstituentRequest"
                    }
                }
            },
            "example": {
                "effectiveFrom": "2018-03-05T00:00:00+00:00",
                "weightType": "Periodical",
                "periodType": "Quarterly",
                "periodCount": 2,
                "constituents": [
                    {
                        "instrumentIdentifiers": {
                            "Instrument/default/Figi": "BBG0077GZM13",
                            "Instrument/default/Isin": "GB00BH4HKS39"
                        },
                        "properties": {
                            "Portfolio/MyScope/MyPropertyKey": {
                                "key": "Portfolio/MyScope/MyPropertyKey",
                                "value": {
                                    "metricValue": {
                                        "value": 12345.5672,
                                        "unit": "Unit"
                                    }
                                }
                            }
                        },
                        "weight": 100.0,
                        "currency": "GBP"
                    },
                    {
                        "instrumentIdentifiers": {
                            "Instrument/default/Figi": "BBG0077H2WN1",
                            "Instrument/default/Isin": "US0378331005"
                        },
                        "properties": {},
                        "weight": 50.0,
                        "currency": "USD"
                    }
                ]
            }
        },
        "ReferencePortfolioConstituentRequest": {
            "required": [
                "instrumentIdentifiers",
                "weight"
            ],
            "type": "object",
            "properties": {
                "instrumentIdentifiers": {
                    "description": "Unique instrument identifiers",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "properties": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/PerpetualProperty"
                    }
                },
                "weight": {
                    "format": "double",
                    "description": "",
                    "type": "number"
                },
                "currency": {
                    "description": "",
                    "type": "string"
                }
            }
        },
        "UpsertReferencePortfolioConstituentsResponse": {
            "type": "object",
            "properties": {
                "href": {
                    "type": "string"
                },
                "version": {
                    "$ref": "#/definitions/Version"
                },
                "links": {
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Link"
                    }
                }
            }
        },
        "GetReferencePortfolioConstituentsResponse": {
            "required": [
                "effectiveFrom",
                "weightType",
                "constituents"
            ],
            "type": "object",
            "properties": {
                "effectiveFrom": {
                    "format": "date-time",
                    "description": "",
                    "type": "string"
                },
                "weightType": {
                    "description": "",
                    "enum": [
                        "Static",
                        "Floating",
                        "Periodical"
                    ],
                    "type": "string"
                },
                "periodType": {
                    "description": "",
                    "enum": [
                        "Daily",
                        "Weekly",
                        "Monthly",
                        "Quarterly",
                        "Annually"
                    ],
                    "type": "string"
                },
                "periodCount": {
                    "format": "int32",
                    "description": "",
                    "type": "integer"
                },
                "constituents": {
                    "description": "Set of constituents (instrument/weight pairings)",
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ReferencePortfolioConstituent"
                    }
                },
                "href": {
                    "description": "The Uri that returns the same result as the original request,\r\nbut may include resolved as at time(s).",
                    "type": "string"
                },
                "links": {
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Link"
                    }
                }
            }
        },
        "ReferencePortfolioConstituent": {
            "required": [
                "instrumentUid",
                "currency",
                "weight"
            ],
            "type": "object",
            "properties": {
                "instrumentIdentifiers": {
                    "description": "Unique instrument identifiers",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "instrumentUid": {
                    "description": "LUSID's internal unique instrument identifier, resolved from the instrument identifiers",
                    "type": "string"
                },
                "currency": {
                    "description": "",
                    "type": "string"
                },
                "properties": {
                    "description": "Properties associated with the constituent",
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/PerpetualProperty"
                    }
                },
                "weight": {
                    "format": "double",
                    "description": "",
                    "type": "number"
                },
                "floatingWeight": {
                    "format": "double",
                    "description": "",
                    "type": "number"
                }
            }
        },
        "ResourceListOfConstituentsAdjustmentHeader": {
            "required": [
                "values"
            ],
            "type": "object",
            "properties": {
                "values": {
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ConstituentsAdjustmentHeader"
                    }
                },
                "href": {
                    "type": "string"
                },
                "links": {
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Link"
                    }
                }
            }
        },
        "ConstituentsAdjustmentHeader": {
            "type": "object",
            "properties": {
                "effectiveAt": {
                    "format": "date-time",
                    "description": "There can be at most one holdings adjustment for a portfolio at a\r\nspecific effective time so this uniquely identifies the adjustment.",
                    "type": "string"
                },
                "version": {
                    "$ref": "#/definitions/Version"
                },
                "links": {
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Link"
                    }
                }
            }
        },
        "ResourceListOfScopeDefinition": {
            "required": [
                "values"
            ],
            "type": "object",
            "properties": {
                "values": {
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ScopeDefinition"
                    }
                },
                "href": {
                    "type": "string"
                },
                "links": {
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Link"
                    }
                }
            }
        },
        "ScopeDefinition": {
            "description": "A list of scopes.",
            "required": [
                "scope"
            ],
            "type": "object",
            "properties": {
                "scope": {
                    "description": "The unique identifier for the scope.",
                    "type": "string"
                }
            }
        },
        "CreateCutLabelDefinitionRequest": {
            "description": "This request specifies a new Cut Label Definition",
            "required": [
                "code",
                "displayName",
                "cutLocalTime",
                "timeZone"
            ],
            "type": "object",
            "properties": {
                "code": {
                    "type": "string"
                },
                "displayName": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "cutLocalTime": {
                    "$ref": "#/definitions/CutLocalTime"
                },
                "timeZone": {
                    "type": "string"
                }
            },
            "example": {
                "code": "CutLabelCode",
                "displayName": "CutLabelDisplayName",
                "description": "description of cut label",
                "cutLocalTime": {
                    "hours": 17,
                    "minutes": 0
                },
                "timeZone": "GB"
            }
        },
        "CutLocalTime": {
            "type": "object",
            "properties": {
                "hours": {
                    "format": "int32",
                    "type": "integer"
                },
                "minutes": {
                    "format": "int32",
                    "type": "integer"
                }
            }
        },
        "CutLabelDefinition": {
            "type": "object",
            "properties": {
                "code": {
                    "description": "",
                    "type": "string"
                },
                "displayName": {
                    "description": "",
                    "type": "string"
                },
                "description": {
                    "description": "",
                    "type": "string"
                },
                "cutLocalTime": {
                    "$ref": "#/definitions/CutLocalTime",
                    "description": ""
                },
                "timeZone": {
                    "description": "",
                    "type": "string"
                },
                "href": {
                    "type": "string",
                    "readOnly": true
                },
                "links": {
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Link"
                    }
                }
            }
        },
        "ResourceListOfCutLabelDefinition": {
            "required": [
                "values"
            ],
            "type": "object",
            "properties": {
                "values": {
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/CutLabelDefinition"
                    }
                },
                "href": {
                    "type": "string"
                },
                "links": {
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Link"
                    }
                }
            }
        },
        "UpdateCutLabelDefinitionRequest": {
            "description": "This request specifies a new Cut Label Definition",
            "required": [
                "displayName",
                "cutLocalTime",
                "timeZone"
            ],
            "type": "object",
            "properties": {
                "displayName": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "cutLocalTime": {
                    "$ref": "#/definitions/CutLocalTime"
                },
                "timeZone": {
                    "type": "string"
                }
            },
            "example": {
                "displayName": "CutLabelDisplayName",
                "description": "description of cut label",
                "cutLocalTime": {
                    "hours": 17,
                    "minutes": 0
                },
                "timeZone": "GB"
            }
        },
        "TransactionConfigurationDataRequest": {
            "required": [
                "aliases",
                "movements"
            ],
            "type": "object",
            "properties": {
                "aliases": {
                    "description": "List of transaction codes that map to this specific transaction model",
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/TransactionConfigurationTypeAlias"
                    }
                },
                "movements": {
                    "description": "Movement data for the transaction code",
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/TransactionConfigurationMovementDataRequest"
                    }
                },
                "properties": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/PerpetualProperty"
                    }
                }
            },
            "example": {
                "aliases": [
                    {
                        "type": "Sell-FIFO",
                        "description": "Sale using FIFO logic",
                        "transactionClass": "FIFO",
                        "transactionGroup": "MyGroup",
                        "transactionRoles": "LongShorter"
                    }
                ],
                "movements": [
                    {
                        "movementTypes": "StockMovement",
                        "side": "Side1",
                        "direction": -1,
                        "properties": {
                            "TransactionConfiguration/default/TaxLotSelectionMethod": {
                                "key": "TransactionConfiguration/default/TaxLotSelectionMethod",
                                "value": {
                                    "labelValue": "FirstInFirstOut"
                                }
                            }
                        },
                        "mappings": []
                    },
                    {
                        "movementTypes": "CashCommitment",
                        "side": "Side2",
                        "direction": 1,
                        "properties": {},
                        "mappings": []
                    }
                ],
                "properties": {
                    "TransactionConfiguration/default/Example": {
                        "key": "TransactionConfiguration/default/Example",
                        "value": {
                            "labelValue": "Value"
                        }
                    }
                }
            }
        },
        "TransactionConfigurationTypeAlias": {
            "required": [
                "type",
                "description",
                "transactionClass",
                "transactionGroup",
                "transactionRoles"
            ],
            "type": "object",
            "properties": {
                "type": {
                    "description": "The transaction type",
                    "type": "string"
                },
                "description": {
                    "description": "Brief description of the transaction",
                    "type": "string"
                },
                "transactionClass": {
                    "description": "Relates types of a similar class. E.g. Buy/Sell, StockIn/StockOut",
                    "type": "string"
                },
                "transactionGroup": {
                    "description": "Group is a set of codes related to a source, or sync",
                    "type": "string"
                },
                "transactionRoles": {
                    "description": "Transactions role within a class. E.g. Increase a long position",
                    "enum": [
                        "None",
                        "LongLonger",
                        "LongShorter",
                        "ShortShorter",
                        "ShortLonger",
                        "Longer",
                        "Shorter",
                        "AllRoles"
                    ],
                    "type": "string"
                }
            }
        },
        "TransactionConfigurationMovementDataRequest": {
            "required": [
                "movementTypes",
                "side",
                "direction"
            ],
            "type": "object",
            "properties": {
                "movementTypes": {
                    "description": "The Movement Types",
                    "enum": [
                        "Settlement",
                        "Traded",
                        "FutureCash",
                        "Commitment",
                        "Receivable",
                        "CashSettlement",
                        "Accrual",
                        "ForwardFx",
                        "UnsettledCashTypes",
                        "StockMovement",
                        "CashCommitment",
                        "CashReceivable",
                        "CashForward",
                        "CashFxForward",
                        "CashAccrual"
                    ],
                    "type": "string"
                },
                "side": {
                    "description": "The Movement Side",
                    "enum": [
                        "Side1",
                        "Side2",
                        "Side2SeparateBondInterest",
                        "BondInt"
                    ],
                    "type": "string"
                },
                "direction": {
                    "format": "int32",
                    "description": "The Movement direction",
                    "type": "integer"
                },
                "properties": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/PerpetualProperty"
                    }
                },
                "mappings": {
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/TransactionPropertyMappingRequest"
                    }
                }
            }
        },
        "TransactionPropertyMappingRequest": {
            "required": [
                "propertyKey"
            ],
            "type": "object",
            "properties": {
                "propertyKey": {
                    "description": "The Side",
                    "type": "string"
                },
                "mapFrom": {
                    "description": "The Side",
                    "type": "string"
                },
                "setTo": {
                    "description": "The Side",
                    "type": "object"
                }
            }
        },
        "ResourceListOfTransactionConfigurationData": {
            "required": [
                "values"
            ],
            "type": "object",
            "properties": {
                "values": {
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/TransactionConfigurationData"
                    }
                },
                "href": {
                    "type": "string"
                },
                "links": {
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Link"
                    }
                }
            }
        },
        "TransactionConfigurationData": {
            "required": [
                "aliases",
                "movements"
            ],
            "type": "object",
            "properties": {
                "aliases": {
                    "description": "List of transaction codes that map to this specific transaction model",
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/TransactionConfigurationTypeAlias"
                    }
                },
                "movements": {
                    "description": "Movement data for the transaction code",
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/TransactionConfigurationMovementData"
                    }
                },
                "properties": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/PerpetualProperty"
                    }
                }
            }
        },
        "TransactionConfigurationMovementData": {
            "required": [
                "movementTypes",
                "side",
                "direction"
            ],
            "type": "object",
            "properties": {
                "movementTypes": {
                    "description": "The Movement Types",
                    "enum": [
                        "Settlement",
                        "Traded",
                        "FutureCash",
                        "Commitment",
                        "Receivable",
                        "CashSettlement",
                        "Accrual",
                        "ForwardFx",
                        "UnsettledCashTypes",
                        "StockMovement",
                        "CashCommitment",
                        "CashReceivable",
                        "CashForward",
                        "CashFxForward",
                        "CashAccrual"
                    ],
                    "type": "string"
                },
                "side": {
                    "description": "The Movement Side",
                    "enum": [
                        "Side1",
                        "Side2",
                        "Side2SeparateBondInterest",
                        "BondInt"
                    ],
                    "type": "string"
                },
                "direction": {
                    "format": "int32",
                    "description": "The Movement direction",
                    "type": "integer"
                },
                "properties": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/PerpetualProperty"
                    }
                },
                "mappings": {
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/TransactionPropertyMapping"
                    }
                }
            }
        },
        "TransactionPropertyMapping": {
            "required": [
                "propertyKey"
            ],
            "type": "object",
            "properties": {
                "propertyKey": {
                    "description": "The Side",
                    "type": "string"
                },
                "mapFrom": {
                    "description": "The Side",
                    "type": "string"
                },
                "setTo": {
                    "description": "The Side",
                    "type": "object"
                }
            }
        },
        "CreateTransactionPortfolioRequest": {
            "required": [
                "displayName",
                "code",
                "baseCurrency"
            ],
            "type": "object",
            "properties": {
                "displayName": {
                    "description": "The name of the transaction portfolio.",
                    "type": "string"
                },
                "description": {
                    "description": "A long form description of the transaction portfolio.",
                    "type": "string"
                },
                "code": {
                    "description": "The code that the transaction portfolio will be created with. Together with the scope this uniquely identifies the transaction portfolio.",
                    "type": "string"
                },
                "created": {
                    "format": "date-time",
                    "description": "The effective datetime at which the transaction portfolio will be created. No transactions can be added to the transaction portfolio before this date. Defaults to the current LUSID system datetime if not specified.",
                    "type": "string"
                },
                "baseCurrency": {
                    "description": "The base currency of the transaction portfolio.",
                    "type": "string"
                },
                "corporateActionSourceId": {
                    "$ref": "#/definitions/ResourceId",
                    "description": "The unique identifier of the corporate action source to attach to the transaction portfolio."
                },
                "accountingMethod": {
                    "description": "Determines the accounting treatment given to the transaction portfolio's tax lots.",
                    "enum": [
                        "Default",
                        "AverageCost",
                        "FirstInFirstOut",
                        "LastInFirstOut",
                        "HighestCostFirst",
                        "LowestCostFirst"
                    ],
                    "type": "string"
                },
                "subHoldingKeys": {
                    "description": "A set of unique transaction properties to group the transaction portfolio's holdings by. Each property must be from the 'Transaction' domain and should be identified by its key which has the format {domain}/{scope}/{code}, e.g. 'Transaction/strategies/quantsignal'.",
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "properties": {
                    "description": "A set of unique portfolio properties to add to the transaction portfolio. Each property must be from the 'Portfolio' domain and should be identified by its key which has the format {domain}/{scope}/{code}, e.g. 'Portfolio/Manager/Id'. These properties must be pre-defined.",
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/Property"
                    }
                }
            },
            "example": {
                "displayName": "Portfolio UK",
                "description": "Portfolio for UK market",
                "code": "PortfolioUk",
                "created": "2018-03-05T12:00:00+00:00",
                "baseCurrency": "GBP",
                "corporateActionSourceId": {
                    "scope": "Sources",
                    "code": "Vendor1"
                },
                "accountingMethod": "Default",
                "subHoldingKeys": [],
                "properties": {
                    "Portfolio/Manager/Name": {
                        "key": "Portfolio/Manager/Name",
                        "value": {
                            "labelValue": "Matt Smith"
                        },
                        "effectiveFrom": "2018-03-05T12:00:00+00:00"
                    },
                    "Portfolio/Manager/Id": {
                        "key": "Portfolio/Manager/Id",
                        "value": {
                            "metricValue": {
                                "value": 1628483.0,
                                "unit": "NoUnits"
                            }
                        },
                        "effectiveFrom": "2018-03-05T12:00:00+00:00"
                    }
                }
            }
        },
        "PortfolioDetails": {
            "required": [
                "originPortfolioId",
                "version",
                "baseCurrency"
            ],
            "type": "object",
            "properties": {
                "href": {
                    "description": "The specifc Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.",
                    "type": "string"
                },
                "originPortfolioId": {
                    "$ref": "#/definitions/ResourceId",
                    "description": "The origin of the portfolio's details. In the case of a derived transaction portfolio this may be a different portfolio."
                },
                "version": {
                    "$ref": "#/definitions/Version",
                    "description": "The version of the details."
                },
                "baseCurrency": {
                    "description": "The base currency of the transaction portfolio.",
                    "type": "string"
                },
                "corporateActionSourceId": {
                    "$ref": "#/definitions/ResourceId",
                    "description": "The unique identifier of the corporate action source to attach to the transaction portfolio."
                },
                "subHoldingKeys": {
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "links": {
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Link"
                    }
                }
            }
        },
        "CreatePortfolioDetails": {
            "required": [
                "baseCurrency"
            ],
            "type": "object",
            "properties": {
                "baseCurrency": {
                    "description": "The base currency of the transaction portfolio.",
                    "type": "string"
                },
                "corporateActionSourceId": {
                    "$ref": "#/definitions/ResourceId",
                    "description": "Unique identifier for the corporate action source to attach to the transaction portfolio."
                }
            },
            "example": {
                "baseCurrency": "GBP",
                "corporateActionSourceId": {
                    "scope": "Sources",
                    "code": "Vendor1"
                }
            }
        },
        "ExecutionRequest": {
            "required": [
                "executionId",
                "side",
                "instrumentIdentifiers",
                "transactionTime",
                "lastShares",
                "lastPx",
                "currency"
            ],
            "type": "object",
            "properties": {
                "executionId": {
                    "description": "The unique identifier of the Execution Report (8) message as assigned by sell-side. FIX field 17.",
                    "type": "string"
                },
                "side": {
                    "description": "The side of the order. FIX field 54.",
                    "type": "string"
                },
                "instrumentIdentifiers": {
                    "description": "A set of instrument identifiers to use to resolve the execution to a unique instrument.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "transactionTime": {
                    "format": "date-time",
                    "description": "Time of execution/order creation. FIX field 60.",
                    "type": "string"
                },
                "lastShares": {
                    "format": "double",
                    "description": "Quantity (e.g. shares) bought/sold on this (last) fill. FIX field 32.",
                    "type": "number"
                },
                "lastPx": {
                    "format": "double",
                    "description": "Price of this (last) fill. FIX field 31.",
                    "type": "number"
                },
                "currency": {
                    "description": "The currency used for the price. FIX field 15.",
                    "type": "string"
                }
            },
            "example": {
                "executionId": "ExecutionId-11111",
                "side": "SellShort",
                "instrumentIdentifiers": {
                    "ClientInternal": "CLI-183461"
                },
                "transactionTime": "2018-03-05T12:00:00+00:00",
                "lastShares": 1000.0,
                "lastPx": 1.23,
                "currency": "USD"
            }
        },
        "UpsertPortfolioExecutionsResponse": {
            "required": [
                "version"
            ],
            "type": "object",
            "properties": {
                "version": {
                    "$ref": "#/definitions/Version"
                },
                "href": {
                    "description": "The specifc Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.",
                    "type": "string"
                },
                "links": {
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Link"
                    }
                }
            }
        },
        "VersionedResourceListOfPortfolioHolding": {
            "required": [
                "version",
                "values"
            ],
            "type": "object",
            "properties": {
                "version": {
                    "$ref": "#/definitions/Version"
                },
                "values": {
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PortfolioHolding"
                    }
                },
                "href": {
                    "type": "string"
                },
                "links": {
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Link"
                    }
                }
            }
        },
        "PortfolioHolding": {
            "description": "A list of holdings.",
            "required": [
                "instrumentUid",
                "holdingType",
                "units",
                "settledUnits",
                "cost",
                "costPortfolioCcy"
            ],
            "type": "object",
            "properties": {
                "instrumentUid": {
                    "description": "The unqiue Lusid Instrument Id (LUID) of the instrument that the holding is in.",
                    "type": "string"
                },
                "subHoldingKeys": {
                    "description": "The sub-holding properties which identify the holding. Each property will be from the 'Transaction' domain. These are configured when a transaction portfolio is created.",
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/PerpetualProperty"
                    }
                },
                "properties": {
                    "description": "The properties which have been requested to be decorated onto the holding. These will be from the 'Instrument' or 'Holding' domain.",
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/Property"
                    }
                },
                "holdingType": {
                    "description": "The type of the holding e.g. Position, Balance, CashCommitment, Receivable, ForwardFX etc.",
                    "type": "string"
                },
                "units": {
                    "format": "double",
                    "description": "The total number of units of the holding.",
                    "type": "number"
                },
                "settledUnits": {
                    "format": "double",
                    "description": "The total number of settled units of the holding.",
                    "type": "number"
                },
                "cost": {
                    "$ref": "#/definitions/CurrencyAndAmount",
                    "description": "The total cost of the holding in the transaction currency."
                },
                "costPortfolioCcy": {
                    "$ref": "#/definitions/CurrencyAndAmount",
                    "description": "The total cost of the holding in the portfolio currency."
                },
                "transaction": {
                    "$ref": "#/definitions/Transaction",
                    "description": "The transaction associated with an unsettled holding."
                }
            }
        },
        "Transaction": {
            "description": "A list of transactions.",
            "required": [
                "transactionId",
                "type",
                "instrumentUid",
                "transactionDate",
                "settlementDate",
                "units",
                "transactionPrice",
                "totalConsideration"
            ],
            "type": "object",
            "properties": {
                "transactionId": {
                    "description": "The unique identifier for the transaction.",
                    "type": "string"
                },
                "type": {
                    "description": "The type of the transaction e.g. 'Buy', 'Sell'. The transaction type should have been pre-configured via the System Configuration API endpoint.",
                    "type": "string"
                },
                "instrumentIdentifiers": {
                    "description": "The set of instrument identifiers that can be used to resolve the transaction to a unique instrument.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "instrumentUid": {
                    "description": "The unqiue Lusid Instrument Id (LUID) of the instrument that the transaction is in.",
                    "type": "string"
                },
                "transactionDate": {
                    "format": "date-time",
                    "description": "The date of the transaction.",
                    "type": "string"
                },
                "settlementDate": {
                    "format": "date-time",
                    "description": "The settlement date of the transaction.",
                    "type": "string"
                },
                "units": {
                    "format": "double",
                    "description": "The number of units transacted in the associated instrument.",
                    "type": "number"
                },
                "transactionPrice": {
                    "$ref": "#/definitions/TransactionPrice",
                    "description": "The price for each unit of the transacted instrument in the transaction currency."
                },
                "totalConsideration": {
                    "$ref": "#/definitions/CurrencyAndAmount",
                    "description": "The total value of the transaction in the settlement currency."
                },
                "exchangeRate": {
                    "format": "double",
                    "description": "The exchange rate between the transaction and settlement currency. For example if the transaction currency is in USD and the settlement currency is in GBP this this the USD/GBP rate.",
                    "type": "number"
                },
                "transactionCurrency": {
                    "description": "The transaction currency.",
                    "type": "string"
                },
                "properties": {
                    "description": "Set of unique transaction properties and associated values to stored with the transaction. Each property will be from the 'Transaction' domain.",
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/PerpetualProperty"
                    }
                },
                "counterpartyId": {
                    "description": "The identifier for the counterparty of the transaction.",
                    "type": "string"
                },
                "source": {
                    "description": "The source of the transaction. This is used to look up the appropriate transaction group set in the transaction type configuration.",
                    "type": "string"
                }
            }
        },
        "TransactionPrice": {
            "type": "object",
            "properties": {
                "price": {
                    "format": "double",
                    "type": "number"
                },
                "type": {
                    "enum": [
                        "Price",
                        "Yield",
                        "Spread"
                    ],
                    "type": "string"
                }
            }
        },
        "AdjustHoldingRequest": {
            "description": "This request specifies target holdings. i.e. holding data that the\r\nsystem should match. When processed by the movement\r\nengine, it will create 'true-up' adjustments on the fly.",
            "required": [
                "instrumentIdentifiers",
                "taxLots"
            ],
            "type": "object",
            "properties": {
                "instrumentIdentifiers": {
                    "description": "A set of instrument identifiers to use to resolve the holding adjustment to a unique instrument.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "subHoldingKeys": {
                    "description": "Set of unique transaction properties and associated values to store with the holding adjustment transaction automatically created by LUSID. Each property must be from the 'Transaction' domain.",
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/PerpetualProperty"
                    }
                },
                "properties": {
                    "description": "Set of unique holding properties and associated values to store with the target holding. Each property must be from the 'Holding' domain.",
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/PerpetualProperty"
                    }
                },
                "taxLots": {
                    "description": "The tax-lots that together make up the target holding.",
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/TargetTaxLotRequest"
                    }
                }
            },
            "example": {
                "instrumentIdentifiers": {
                    "Instrument/default/Figi": "BBG000C6K6G9",
                    "Instrument/default/Isin": "GB00BH4HKS39"
                },
                "subHoldingKeys": {
                    "Transaction/Algo/Name": {
                        "key": "Transaction/Algo/Name",
                        "value": {
                            "labelValue": "Algo1"
                        }
                    }
                },
                "properties": {
                    "Holding/Entity/Name": {
                        "key": "Holding/Entity/Name",
                        "value": {
                            "labelValue": "Financial Entity"
                        }
                    }
                },
                "taxLots": [
                    {
                        "units": 100.0,
                        "cost": {
                            "amount": 10000.0,
                            "currency": "GBP"
                        },
                        "portfolioCost": 10000.0,
                        "price": 100.0,
                        "purchaseDate": "2018-03-05T00:00:00+00:00",
                        "settlementDate": "2018-03-08T00:00:00+00:00"
                    }
                ]
            }
        },
        "TargetTaxLotRequest": {
            "required": [
                "units"
            ],
            "type": "object",
            "properties": {
                "units": {
                    "format": "double",
                    "description": "The number of units of the instrument in this tax-lot.",
                    "type": "number"
                },
                "cost": {
                    "$ref": "#/definitions/CurrencyAndAmount",
                    "description": "The total cost of the tax-lot in the settlement currency."
                },
                "portfolioCost": {
                    "format": "double",
                    "description": "The total cost of the tax-lot in the transaction portfolio's base currency.",
                    "type": "number"
                },
                "price": {
                    "format": "double",
                    "description": "The purchase price of each unit of the instrument held in this tax-lot. This forms part of the unique key required for multiple tax-lots.",
                    "type": "number"
                },
                "purchaseDate": {
                    "format": "date-time",
                    "description": "The purchase date of this tax-lot. This forms part of the unique key required for multiple tax-lots.",
                    "type": "string"
                },
                "settlementDate": {
                    "format": "date-time",
                    "description": "The settlement date of the tax-lot's opening transaction.",
                    "type": "string"
                }
            }
        },
        "AdjustHolding": {
            "required": [
                "version"
            ],
            "type": "object",
            "properties": {
                "href": {
                    "description": "The specifc Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.",
                    "type": "string"
                },
                "version": {
                    "$ref": "#/definitions/Version",
                    "description": "The version of the transaction portfolio."
                },
                "links": {
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Link"
                    }
                }
            }
        },
        "ResourceListOfHoldingsAdjustmentHeader": {
            "required": [
                "values"
            ],
            "type": "object",
            "properties": {
                "values": {
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/HoldingsAdjustmentHeader"
                    }
                },
                "href": {
                    "type": "string"
                },
                "links": {
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Link"
                    }
                }
            }
        },
        "HoldingsAdjustmentHeader": {
            "description": "A record of holdings adjustments made on the transaction portfolio.",
            "required": [
                "effectiveAt",
                "version",
                "unmatchedHoldingMethod"
            ],
            "type": "object",
            "properties": {
                "effectiveAt": {
                    "format": "date-time",
                    "description": "The effective datetime from which the adjustment is valid. There can only be one holdings adjustment for a transaction portfolio at a specific effective datetime, so this uniquely identifies the adjustment.",
                    "type": "string"
                },
                "version": {
                    "$ref": "#/definitions/Version",
                    "description": "The version of the transaction portfolio that first contained the holdings adjustment."
                },
                "unmatchedHoldingMethod": {
                    "description": "Describes how the holdings were adjusted. If 'PositionToZero' the entire transaction portfolio's holdings were set via a call to 'Set holdings'. If 'KeepTheSame' only the specified holdings were adjusted via a call to 'Adjust holdings'.",
                    "enum": [
                        "PositionToZero",
                        "KeepTheSame"
                    ],
                    "type": "string"
                },
                "links": {
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Link"
                    }
                }
            }
        },
        "HoldingsAdjustment": {
            "description": "Full content of a holdings adjustment for a single portfolio and effective date.",
            "required": [
                "effectiveAt",
                "version",
                "unmatchedHoldingMethod",
                "adjustments"
            ],
            "type": "object",
            "properties": {
                "effectiveAt": {
                    "format": "date-time",
                    "description": "The effective datetime from which the adjustment is valid. There can only be one holdings adjustment for a transaction portfolio at a specific effective datetime, so this uniquely identifies the adjustment.",
                    "type": "string"
                },
                "version": {
                    "$ref": "#/definitions/Version",
                    "description": "The version of the transaction portfolio that first contained this holding adjustment."
                },
                "unmatchedHoldingMethod": {
                    "description": "Describes how the holdings were adjusted. If 'PositionToZero' the entire transaction portfolio's holdings were set via a call to 'Set holdings'. If 'KeepTheSame' only the specified holdings were adjusted via a call to 'Adjust holdings'.",
                    "enum": [
                        "PositionToZero",
                        "KeepTheSame"
                    ],
                    "type": "string"
                },
                "adjustments": {
                    "description": "The holding adjustments.",
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/HoldingAdjustment"
                    }
                },
                "links": {
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Link"
                    }
                }
            }
        },
        "HoldingAdjustment": {
            "description": "The target holdings.",
            "required": [
                "instrumentUid",
                "taxLots"
            ],
            "type": "object",
            "properties": {
                "instrumentIdentifiers": {
                    "description": "The set of instrument identifiers that can be used to resolve the holding adjustment to a unique instrument.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "instrumentUid": {
                    "description": "The unqiue Lusid Instrument Id (LUID) of the instrument that the holding adjustment is in.",
                    "type": "string"
                },
                "subHoldingKeys": {
                    "description": "The set of unique transaction properties and associated values stored with the holding adjustment transactions automatically created by LUSID. Each property will be from the 'Transaction' domain.",
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/PerpetualProperty"
                    }
                },
                "properties": {
                    "description": "The set of unique holding properties and associated values stored with the target holding. Each property will be from the 'Holding' domain.",
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/PerpetualProperty"
                    }
                },
                "taxLots": {
                    "description": "The tax-lots that together make up the target holding.",
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/TargetTaxLot"
                    }
                }
            }
        },
        "TargetTaxLot": {
            "description": "Used to specify holdings target amounts at the tax-lot level",
            "required": [
                "units"
            ],
            "type": "object",
            "properties": {
                "units": {
                    "format": "double",
                    "description": "The number of units of the instrument in this tax-lot.",
                    "type": "number"
                },
                "cost": {
                    "$ref": "#/definitions/CurrencyAndAmount",
                    "description": "The total cost of the tax-lot in the settlement currency."
                },
                "portfolioCost": {
                    "format": "double",
                    "description": "The total cost of the tax-lot in the transaction portfolio's base currency.",
                    "type": "number"
                },
                "price": {
                    "format": "double",
                    "description": "The purchase price of each unit of the instrument held in this tax-lot. This forms part of the unique key required for multiple tax-lots.",
                    "type": "number"
                },
                "purchaseDate": {
                    "format": "date-time",
                    "description": "The purchase date of this tax-lot. This forms part of the unique key required for multiple tax-lots.",
                    "type": "string"
                },
                "settlementDate": {
                    "format": "date-time",
                    "description": "The settlement date of the tax-lot's opening transaction.",
                    "type": "string"
                }
            }
        },
        "VersionedResourceListOfTransaction": {
            "required": [
                "version",
                "values"
            ],
            "type": "object",
            "properties": {
                "version": {
                    "$ref": "#/definitions/Version"
                },
                "values": {
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Transaction"
                    }
                },
                "href": {
                    "type": "string"
                },
                "links": {
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Link"
                    }
                }
            }
        },
        "TransactionRequest": {
            "required": [
                "transactionId",
                "type",
                "instrumentIdentifiers",
                "transactionDate",
                "settlementDate",
                "units",
                "transactionPrice",
                "totalConsideration"
            ],
            "type": "object",
            "properties": {
                "transactionId": {
                    "description": "The unique identifier for the transaction.",
                    "type": "string"
                },
                "type": {
                    "description": "The type of the transaction e.g. 'Buy', 'Sell'. The transaction type should have been pre-configured via the System Configuration API endpoint. If it hasn't been pre-configured the transaction will still be updated or inserted however you will be unable to generate the resultant holdings for the portfolio that contains this transaction as LUSID does not know how to process it.",
                    "type": "string"
                },
                "instrumentIdentifiers": {
                    "description": "A set of instrument identifiers to use to resolve the transaction to a unique instrument.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "transactionDate": {
                    "format": "dateorcutlabel",
                    "description": "The date of the transaction.",
                    "type": "string"
                },
                "settlementDate": {
                    "format": "dateorcutlabel",
                    "description": "The settlement date of the transaction.",
                    "type": "string"
                },
                "units": {
                    "format": "double",
                    "description": "The number of units transacted in the associated instrument.",
                    "type": "number"
                },
                "transactionPrice": {
                    "$ref": "#/definitions/TransactionPrice",
                    "description": "The price for each unit of the transacted instrument in the transaction currency."
                },
                "totalConsideration": {
                    "$ref": "#/definitions/CurrencyAndAmount",
                    "description": "The total value of the transaction in the settlement currency."
                },
                "exchangeRate": {
                    "format": "double",
                    "description": "The exchange rate between the transaction and settlement currency. For example if the transaction currency is in USD and the settlement currency is in GBP this this the USD/GBP rate.",
                    "type": "number"
                },
                "transactionCurrency": {
                    "description": "The transaction currency.",
                    "type": "string"
                },
                "properties": {
                    "description": "Set of unique transaction properties and associated values to store with the transaction. Each property must be from the 'Transaction' domain.",
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/PerpetualProperty"
                    }
                },
                "counterpartyId": {
                    "description": "The identifier for the counterparty of the transaction.",
                    "type": "string"
                },
                "source": {
                    "description": "The source of the transaction. This is used to look up the appropriate transaction group set in the transaction type configuration.",
                    "type": "string"
                }
            },
            "example": {
                "transactionId": "TransactionId-111111",
                "type": "StockIn",
                "instrumentIdentifiers": {
                    "Instrument/default/Figi": "BBG000C6K6G9",
                    "Instrument/default/Isin": "GB00BH4HKS39"
                },
                "transactionDate": "2018-03-05T00:00:00+00:00",
                "settlementDate": "2018-03-08T00:00:00+00:00",
                "units": 1000.0,
                "transactionPrice": {
                    "price": 123.0,
                    "type": "Price"
                },
                "totalConsideration": {
                    "amount": 123000.0,
                    "currency": "GBP"
                },
                "transactionCurrency": "GBP",
                "properties": {
                    "Transaction/Algo/Name": {
                        "key": "Transaction/Algo/Name",
                        "value": {
                            "labelValue": "Algo1"
                        }
                    }
                },
                "counterpartyId": "CounterpartyId-118263",
                "source": ""
            }
        },
        "UpsertPortfolioTransactionsResponse": {
            "required": [
                "version"
            ],
            "type": "object",
            "properties": {
                "version": {
                    "$ref": "#/definitions/Version",
                    "description": "The version of the transaction portfolio."
                },
                "href": {
                    "description": "The specifc Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.",
                    "type": "string"
                },
                "links": {
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Link"
                    }
                }
            }
        },
        "UpsertTransactionPropertiesResponse": {
            "type": "object",
            "properties": {
                "href": {
                    "description": "The specifc Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.",
                    "type": "string"
                },
                "version": {
                    "$ref": "#/definitions/Version"
                },
                "properties": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/PerpetualProperty"
                    }
                },
                "links": {
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Link"
                    }
                }
            }
        },
        "TransactionQueryParameters": {
            "required": [
                "startDate",
                "endDate"
            ],
            "type": "object",
            "properties": {
                "startDate": {
                    "format": "dateorcutlabel",
                    "description": "The lower bound effective datetime or cut label (inclusive) from which to build the transactions.",
                    "type": "string"
                },
                "endDate": {
                    "format": "dateorcutlabel",
                    "description": "The upper bound effective datetime or cut label (inclusive) from which to retrieve transactions.",
                    "type": "string"
                },
                "queryMode": {
                    "description": "The date to compare against the upper and lower bounds for the effective datetime or cut label. Defaults to 'TradeDate' if not specified.",
                    "enum": [
                        "TradeDate",
                        "SettleDate"
                    ],
                    "type": "string"
                },
                "showCancelledTransactions": {
                    "description": "Option to specify whether or not to include cancelled transactions in the output. Defaults to False if not specified.",
                    "type": "boolean"
                }
            },
            "example": {
                "startDate": "2018-03-05T00:00:00+00:00",
                "endDate": "2018-03-19T00:00:00+00:00",
                "queryMode": "TradeDate",
                "showCancelledTransactions": false
            }
        },
        "VersionedResourceListOfOutputTransaction": {
            "required": [
                "version",
                "values"
            ],
            "type": "object",
            "properties": {
                "version": {
                    "$ref": "#/definitions/Version"
                },
                "values": {
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/OutputTransaction"
                    }
                },
                "href": {
                    "type": "string"
                },
                "links": {
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Link"
                    }
                }
            }
        },
        "OutputTransaction": {
            "description": "A list of output transactions.",
            "required": [
                "transactionId",
                "type",
                "instrumentUid",
                "transactionDate",
                "settlementDate",
                "units"
            ],
            "type": "object",
            "properties": {
                "transactionId": {
                    "description": "The unique identifier for the transaction.",
                    "type": "string",
                    "readOnly": true
                },
                "type": {
                    "description": "The type of the transaction e.g. 'Buy', 'Sell'. The transaction type should have been pre-configured via the System Configuration API endpoint.",
                    "type": "string",
                    "readOnly": true
                },
                "description": {
                    "description": "The description of the transaction. This only exists on transactions generated by LUSID e.g. a holdings adjustment transaction.",
                    "type": "string",
                    "readOnly": true
                },
                "instrumentIdentifiers": {
                    "description": "The set of instrument identifiers that can be used to resolve the transaction to a unique instrument.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "instrumentUid": {
                    "description": "The unqiue Lusid Instrument Id (LUID) of the instrument that the transaction is in.",
                    "type": "string",
                    "readOnly": true
                },
                "transactionDate": {
                    "format": "date-time",
                    "description": "The date of the transaction.",
                    "type": "string",
                    "readOnly": true
                },
                "settlementDate": {
                    "format": "date-time",
                    "description": "The settlement date of the transaction.",
                    "type": "string",
                    "readOnly": true
                },
                "units": {
                    "format": "double",
                    "description": "The number of units transacted in the associated instrument.",
                    "type": "number",
                    "readOnly": true
                },
                "transactionAmount": {
                    "format": "double",
                    "description": "The total value of the transaction in the transaction currency.",
                    "type": "number",
                    "readOnly": true
                },
                "transactionPrice": {
                    "$ref": "#/definitions/TransactionPrice",
                    "description": "The price for each unit of the transacted instrument in the transaction currency.",
                    "readOnly": true
                },
                "totalConsideration": {
                    "$ref": "#/definitions/CurrencyAndAmount",
                    "description": "The total value of the transaction in the settlement currency.",
                    "readOnly": true
                },
                "exchangeRate": {
                    "format": "double",
                    "description": "The exchange rate between the transaction and settlement currency. For example if the transaction currency is in USD and the settlement currency is in GBP this this the USD/GBP rate.",
                    "type": "number",
                    "readOnly": true
                },
                "transactionToPortfolioRate": {
                    "format": "double",
                    "description": "The exchange rate between the transaction and portfolio currency. For example if the transaction currency is in USD and the portfolio currency is in GBP this this the USD/GBP rate.",
                    "type": "number",
                    "readOnly": true
                },
                "transactionCurrency": {
                    "description": "The transaction currency.",
                    "type": "string",
                    "readOnly": true
                },
                "properties": {
                    "description": "Set of unique transaction properties and associated values to stored with the transaction. Each property will be from the 'Transaction' domain.",
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/PerpetualProperty"
                    },
                    "readOnly": true
                },
                "counterpartyId": {
                    "description": "The identifier for the counterparty of the transaction.",
                    "type": "string",
                    "readOnly": true
                },
                "source": {
                    "description": "The source of the transaction. This is used to look up the appropriate transaction group set in the transaction type configuration.",
                    "type": "string",
                    "readOnly": true
                },
                "transactionStatus": {
                    "description": "The status of the transaction.",
                    "enum": [
                        "Active",
                        "Amended",
                        "Cancelled"
                    ],
                    "type": "string",
                    "readOnly": true
                },
                "entryDateTime": {
                    "format": "date-time",
                    "description": "The asAt datetime that the transaction was added to LUSID.",
                    "type": "string",
                    "readOnly": true
                },
                "cancelDateTime": {
                    "format": "date-time",
                    "description": "If the transaction has been cancelled, the asAt datetime that the transaction was cancelled.",
                    "type": "string",
                    "readOnly": true
                },
                "realisedGainLoss": {
                    "description": "The collection of realised gains or losses resulting from relevant transactions e.g. a sale transaction. The cost used in calculating the realised gain or loss is determined by the accounting method defined when the transaction portfolio is created.",
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/RealisedGainLoss"
                    },
                    "readOnly": true
                }
            }
        },
        "RealisedGainLoss": {
            "required": [
                "instrumentUid",
                "units",
                "costTradeCcy",
                "costPortfolioCcy",
                "realisedTradeCcy",
                "realisedTotal"
            ],
            "type": "object",
            "properties": {
                "instrumentUid": {
                    "description": "The unqiue Lusid Instrument Id (LUID) of the instrument that this gain or loss is associated with.",
                    "type": "string",
                    "readOnly": true
                },
                "units": {
                    "format": "double",
                    "description": "The number of units of the associated instrument against which the gain or loss has been realised.",
                    "type": "number",
                    "readOnly": true
                },
                "purchaseTradeDate": {
                    "format": "date-time",
                    "description": "The effective datetime that the units associated with this gain or loss where originally purchased.",
                    "type": "string",
                    "readOnly": true
                },
                "purchaseSettlementDate": {
                    "format": "date-time",
                    "description": "The effective datetime that the units associated with this gain or loss where originally settled.",
                    "type": "string",
                    "readOnly": true
                },
                "purchasePrice": {
                    "format": "double",
                    "description": "The purchase price of each unit associated with this gain or loss.",
                    "type": "number",
                    "readOnly": true
                },
                "costTradeCcy": {
                    "$ref": "#/definitions/CurrencyAndAmount",
                    "description": "The total purchase cost in the transaction currency of the units associated with this gain or loss.",
                    "readOnly": true
                },
                "costPortfolioCcy": {
                    "$ref": "#/definitions/CurrencyAndAmount",
                    "description": "The total purchase cost in the transaction portfolio's base currency of the units associated with this gain or loss.",
                    "readOnly": true
                },
                "realisedTradeCcy": {
                    "$ref": "#/definitions/CurrencyAndAmount",
                    "description": "The total realised gain or loss in the transaction currency.",
                    "readOnly": true
                },
                "realisedTotal": {
                    "$ref": "#/definitions/CurrencyAndAmount",
                    "description": "The total realised gain or loss in the transaction portfolio's base currency.",
                    "readOnly": true
                },
                "realisedMarket": {
                    "$ref": "#/definitions/CurrencyAndAmount",
                    "description": "The total realised market gain or loss in transaction portfolio's base currency. Together with the total realised currency gain or loss this makes up the total gain or loss.",
                    "readOnly": true
                },
                "realisedCurrency": {
                    "$ref": "#/definitions/CurrencyAndAmount",
                    "description": "The total realised currency gain or loss in transaction portfolio's base currency. Together with the total realised market gain or loss this makes up the total gain or loss.",
                    "readOnly": true
                }
            }
        }
    },
    "securityDefinitions": {
        "oauth2": {
            "flow": "implicit",
            "authorizationUrl": "https://lusid.okta.com/oauth2/aus5al5yopbHW2wJn2p6/v1/authorize",
            "type": "oauth2",
            "description": "OAuth2 Implicit Grant"
        }
    },
    "security": [
        {
            "oauth2": []
        }
    ],
    "tags": [
        {
            "name": "Aggregation",
            "description": "Methods for accessing aggregated data"
        },
        {
            "name": "Analytics Stores",
            "description": "Methods for interacting with Analytic Stores"
        },
        {
            "name": "Application Metadata",
            "description": "Methods for querying application metadata"
        },
        {
            "name": "Configuration Recipe",
            "description": "Methods for the storage and retrieval of Configuration Recipe documents. Read more about these in the LUSID Knowledge Base here https://support.lusid.com/configuratiorecipes."
        },
        {
            "name": "Corporate Action Sources",
            "description": "Methods for storage and retrieval of Corporate Action Sources"
        },
        {
            "name": "Cut Label Definitions",
            "description": "Methods for interacting with Cut Label Definitions"
        },
        {
            "name": "Data Types",
            "description": "Methods for administering data types"
        },
        {
            "name": "Derived Transaction Portfolios",
            "description": "Methods for interacting with derived transaction portfolios"
        },
        {
            "name": "Entities",
            "description": "Methods for querying data about entities"
        },
        {
            "name": "Instruments",
            "description": "Methods for interacting with instruments. Read more about instruments in the LUSID Knowledge Base here https://support.lusid.com/instruments."
        },
        {
            "name": "Login",
            "description": "Methods to handle login"
        },
        {
            "name": "Portfolio Groups",
            "description": "Methods for interacting with Portfolios Groups. Read more about Portfolio Groups in the LUSID Knowledge Base here https://support.lusid.com/how-do-you-group-and-aggregate-portfolios."
        },
        {
            "name": "Portfolios",
            "description": "Methods for interacting with Portfolios. Read more about Portfolios in LUSID here https://support.lusid.com/portfolios."
        },
        {
            "name": "Property Definitions",
            "description": "Methods for interacting with Properties. Read more about Properties in the LUSID Knowledge Base here https://support.lusid.com/properties."
        },
        {
            "name": "Quotes",
            "description": "Methods for the storage and retrieval of Quotes. Read more about Quotes in the LUSID Knowledge Base here https://support.lusid.com/quotes."
        },
        {
            "name": "Reconciliations",
            "description": "Endpoints for performing reconciliations"
        },
        {
            "name": "Reference Portfolio",
            "description": "Methods for interacting with Reference Portfolios"
        },
        {
            "name": "Results",
            "description": "Methods for storage and retrieval of Calculation Results"
        },
        {
            "name": "Schemas",
            "description": "Methods for retrieval of Schemas"
        },
        {
            "name": "Scopes",
            "description": "Methods for interacting with Scopes. Read more about Scopes in the LUSID Knowledge Base here https://support.lusid.com/what-is-a-scope-in-lusid-and-how-is-it-used."
        },
        {
            "name": "Search",
            "description": "Methods providing Search capability."
        },
        {
            "name": "Structured Market Data",
            "description": "Methods for the storage and retrieval of structured market data documents. Read more about these in the LUSID Knowledge Base here https://support.lusid.com/structuredmarketdata."
        },
        {
            "name": "System Configuration",
            "description": "Methods for updating system configuration with Portfolios"
        },
        {
            "name": "Transaction Portfolios",
            "description": "Methods for interacting with Transaction Portfolios. Read more about Transaction Portfolios in the LUSID Knowledge Base here https://support.lusid.com/what-is-a-transaction-portfolio."
        }
    ],
    "x-tagGroups": [
        {
            "name": "API",
            "tags": [
                "Aggregation",
                "Analytics Stores",
                "Application Metadata",
                "Configuration Recipe",
                "Corporate Action Sources",
                "Cut Label Definitions",
                "Data Types",
                "Derived Transaction Portfolios",
                "Entities",
                "Instruments",
                "Login",
                "Portfolio Groups",
                "Portfolios",
                "Property Definitions",
                "Quotes",
                "Reconciliations",
                "Reference Portfolio",
                "Results",
                "Schemas",
                "Scopes",
                "Search",
                "Structured Market Data",
                "System Configuration",
                "Transaction Portfolios"
            ]
        }
    ]
}