{
  "openapi": "3.0.1",
  "info": {
    "title": "LUSID API",
    "description": "FINBOURNE Technology",
    "termsOfService": "https://www.finbourne.com/legal/terms-conditions",
    "contact": {
      "name": "FINBOURNE Technology",
      "url": "https://www.finbourne.com",
      "email": "info@finbourne.com"
    },
    "version": "0.11.2875",
    "x-logo": {
      "url": "https://content.finbourne.com/LUSID-header.png",
      "backgroundColor": "#415464"
    }
  },
  "servers": [
    {
      "url": "http://local-unit-test-server.lusid.com:62185"
    }
  ],
  "paths": {
    "/api/datatypes/{scope}": {
      "get": {
        "tags": [
          "Data Types"
        ],
        "summary": "[EARLY ACCESS] List data types",
        "description": "List all data types in a specified scope",
        "operationId": "ListDataTypes",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The requested scope of the data types",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The requested scope of the data types",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The as at of the requested data types",
            "schema": {
              "type": "string",
              "description": "The as at of the requested data types",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "includeSystem",
            "in": "query",
            "description": "Whether to additionally include those data types in the \"system\" scope",
            "schema": {
              "type": "boolean",
              "description": "Whether to additionally include those data types in the \"system\" scope",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "Optional. Order the results by these fields. Use use the '-' sign to denote descending order e.g. -MyFieldName",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Optional. Order the results by these fields. Use use the '-' sign to denote descending order e.g. -MyFieldName",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "start",
            "in": "query",
            "description": "Optional. When paginating, skip this number of results",
            "schema": {
              "type": "integer",
              "description": "Optional. When paginating, skip this number of results",
              "format": "int32",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Optional. When paginating, limit the number of returned results to this many.",
            "schema": {
              "type": "integer",
              "description": "Optional. When paginating, limit the number of returned results to this many.",
              "format": "int32",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Optional. Expression to filter the result set.\r\n            For example, to filter on the Display Name, use \"displayName eq 'string'\"\r\n            Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "maxLength": 2147483647,
              "minLength": 0,
              "pattern": "(?s).*",
              "type": "string",
              "description": "Optional. Expression to filter the result set.\r\n            For example, to filter on the Display Name, use \"displayName eq 'string'\"\r\n            Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfDataType"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfDataType"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfDataType"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/datatypes/{scope}/{code}": {
      "get": {
        "tags": [
          "Data Types"
        ],
        "summary": "[EARLY ACCESS] Get data type definition",
        "description": "Get the definition of a specified data type",
        "operationId": "GetDataType",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the data type",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the data type",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the data type",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the data type",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the data type definition. Defaults to\r\n            return the latest version of the instrument definition if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to retrieve the data type definition. Defaults to\r\n            return the latest version of the instrument definition if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DataType"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataType"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataType"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/datatypes/{scope}/{code}/units": {
      "get": {
        "tags": [
          "Data Types"
        ],
        "summary": "[EARLY ACCESS] Get units from data type",
        "description": "Get the definitions of the specified units associated bound to a specific data type",
        "operationId": "GetUnitsFromDataType",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the data type",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the data type",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the data type",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the data type",
              "nullable": true
            }
          },
          {
            "name": "units",
            "in": "query",
            "description": "One or more unit identifiers for which the definition is being requested",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "One or more unit identifiers for which the definition is being requested",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Optional. Expression to filter the result set. \r\n            For example, to filter on the Schema, use \"schema eq 'string'\"\r\n            Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "maxLength": 2147483647,
              "minLength": 0,
              "pattern": "(?s).*",
              "type": "string",
              "description": "Optional. Expression to filter the result set. \r\n            For example, to filter on the Schema, use \"schema eq 'string'\"\r\n            Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "Optional. The as at of the requested data type",
            "schema": {
              "type": "string",
              "description": "Optional. The as at of the requested data type",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfIUnitDefinitionDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfIUnitDefinitionDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfIUnitDefinitionDto"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/derivedtransactionportfolios/{scope}": {
      "post": {
        "tags": [
          "Derived Transaction Portfolios"
        ],
        "summary": "[EARLY ACCESS] Create derived transaction portfolio",
        "description": "Creates a transaction portfolio that derives from an existing transaction portfolio. In a derived portfolio, parts of the portfolio can either be specific to this portfolio, or can be inherited from a \"parent\". Different parts of the portfolio (e.g. transactions or properties) are combined in different ways. The portfolio details are either overridden in entirety, or not at all. The same is true for properties. Transactions on a derived portfolio are merged with its parent portfolio's transactions. If the parent portfolio is itself a derived portfolio, transactions from that parent are also merged (and that parent's portfolio's, if it is also a derived portfolio, and so on).",
        "operationId": "CreateDerivedPortfolio",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope into which to create the new derived portfolio",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope into which to create the new derived portfolio",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "The root object of the new derived portfolio, containing a populated reference portfolio id and reference scope",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateDerivedTransactionPortfolioRequest"
              },
              "example": {
                "displayName": "MyDerivedPortfolioName",
                "description": "Example long form portfolio description",
                "code": "MyDerivedPortfolioCode",
                "parentPortfolioId": {
                  "scope": "MyParentPortfolioScope",
                  "code": "MyParentPortfolioCode"
                },
                "created": "2018-03-05T00:00:00.0000000+00:00",
                "corporateActionSourceId": {
                  "scope": "MyScope",
                  "code": "MyCorporateActionSourceId"
                },
                "accountingMethod": "FirstInFirstOut",
                "subHoldingKeys": [
                  "Transaction/MyScope/Strategy",
                  "Transaction/MyScope/SubAccount"
                ]
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateDerivedTransactionPortfolioRequest"
              },
              "example": {
                "displayName": "MyDerivedPortfolioName",
                "description": "Example long form portfolio description",
                "code": "MyDerivedPortfolioCode",
                "parentPortfolioId": {
                  "scope": "MyParentPortfolioScope",
                  "code": "MyParentPortfolioCode"
                },
                "created": "2018-03-05T00:00:00.0000000+00:00",
                "corporateActionSourceId": {
                  "scope": "MyScope",
                  "code": "MyCorporateActionSourceId"
                },
                "accountingMethod": "FirstInFirstOut",
                "subHoldingKeys": [
                  "Transaction/MyScope/Strategy",
                  "Transaction/MyScope/SubAccount"
                ]
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateDerivedTransactionPortfolioRequest"
              },
              "example": {
                "displayName": "MyDerivedPortfolioName",
                "description": "Example long form portfolio description",
                "code": "MyDerivedPortfolioCode",
                "parentPortfolioId": {
                  "scope": "MyParentPortfolioScope",
                  "code": "MyParentPortfolioCode"
                },
                "created": "2018-03-05T00:00:00.0000000+00:00",
                "corporateActionSourceId": {
                  "scope": "MyScope",
                  "code": "MyCorporateActionSourceId"
                },
                "accountingMethod": "FirstInFirstOut",
                "subHoldingKeys": [
                  "Transaction/MyScope/Strategy",
                  "Transaction/MyScope/SubAccount"
                ]
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateDerivedTransactionPortfolioRequest"
              },
              "example": {
                "displayName": "MyDerivedPortfolioName",
                "description": "Example long form portfolio description",
                "code": "MyDerivedPortfolioCode",
                "parentPortfolioId": {
                  "scope": "MyParentPortfolioScope",
                  "code": "MyParentPortfolioCode"
                },
                "created": "2018-03-05T00:00:00.0000000+00:00",
                "corporateActionSourceId": {
                  "scope": "MyScope",
                  "code": "MyCorporateActionSourceId"
                },
                "accountingMethod": "FirstInFirstOut",
                "subHoldingKeys": [
                  "Transaction/MyScope/Strategy",
                  "Transaction/MyScope/SubAccount"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The created derived portfolio, with populated id",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Portfolio"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Portfolio"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Portfolio"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/derivedtransactionportfolios/{scope}/{code}/details": {
      "delete": {
        "tags": [
          "Derived Transaction Portfolios"
        ],
        "summary": "[EARLY ACCESS] Delete portfolio details",
        "description": "Deletes the portfolio details for the specified derived transaction portfolio",
        "operationId": "DeleteDerivedPortfolioDetails",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the portfolio",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the portfolio",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the portfolio",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the portfolio",
              "nullable": true
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective date of the change",
            "schema": {
              "maxLength": 256,
              "minLength": 0,
              "pattern": "^[a-zA-Z0-9\\-_\\+:\\.]+$",
              "type": "string",
              "description": "The effective date of the change",
              "format": "dateorcutlabel",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/entities/changes/portfolios": {
      "get": {
        "tags": [
          "Entities"
        ],
        "summary": "[EARLY ACCESS] Get the next change to each portfolio in a scope.",
        "description": "Gets the time of the next (earliest effective at) modification (correction and/or amendment) to each portfolio in a scope relative to a point in bitemporal time.\r\nIncludes changes from parent portfolios in different scopes.\r\nExcludes changes from subcriptions (e.g corporate actions).",
        "operationId": "GetPortfolioChanges",
        "parameters": [
          {
            "name": "scope",
            "in": "query",
            "description": "The scope",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope"
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective date of the origin.",
            "required": true,
            "schema": {
              "maxLength": 256,
              "minLength": 0,
              "pattern": "^[a-zA-Z0-9\\-_\\+:\\.]+$",
              "type": "string",
              "description": "The effective date of the origin.",
              "format": "dateorcutlabel"
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The as-at date of the origin.",
            "schema": {
              "type": "string",
              "description": "The as-at date of the origin.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "A list of portfolio changes in the requested scope relative to the specified time.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfChange"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfChange"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfChange"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/instruments": {
      "post": {
        "tags": [
          "Instruments"
        ],
        "summary": "Upsert instruments",
        "description": "Update or insert one or more instruments into the LUSID instrument master. An instrument will be updated\r\nif it already exists and inserted if it does not.\r\n            \r\nIn the request each instrument definition should be keyed by a unique correlation id. This id is ephemeral\r\nand is not stored by LUSID. It serves only as a way to easily identify each instrument in the response.\r\n            \r\nThe response will return both the collection of successfully updated or inserted instruments, as well as those that failed.\r\nFor the failures a reason will be provided explaining why the instrument could not be updated or inserted.\r\n            \r\nIt is important to always check the failed set for any unsuccessful results.\n\nThe maximum number of instruments that this method can upsert per request is 2,000.",
        "operationId": "UpsertInstruments",
        "requestBody": {
          "description": "The definitions of the instruments to update or insert.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/InstrumentDefinition"
                },
                "description": "The definitions of the instruments to update or insert."
              },
              "example": {
                "request_id_1": {
                  "name": "Instrument name",
                  "identifiers": {
                    "clientInternal": {
                      "value": "some-identifier",
                      "effectiveAt": "0001-01-01T00:00:00.0000000+00:00"
                    },
                    "figi": {
                      "value": "some-figi-code",
                      "effectiveAt": "0001-01-01T00:00:00.0000000+00:00"
                    },
                    "isin": {
                      "value": "some-isin-code",
                      "effectiveAt": "0001-01-01T00:00:00.0000000+00:00"
                    }
                  },
                  "properties": [
                    {
                      "key": "Instrument/someScope/somePropertyName",
                      "value": {
                        "labelValue": "some-property-value"
                      },
                      "effectiveFrom": "2018-06-18T09:00:00.0000000+00:00"
                    }
                  ],
                  "lookThroughPortfolioId": {
                    "scope": "MyScope",
                    "code": "portfolio-code"
                  },
                  "definition": {
                    "instrumentFormat": {
                      "sourceSystem": "systemA",
                      "vendor": "Unknown",
                      "version": "1.0.0"
                    },
                    "content": "{\"some-key\": \"some-value\"}",
                    "instrumentType": "ExoticInstrument"
                  }
                },
                "request_id_2": {
                  "name": "Instrument name",
                  "identifiers": {
                    "clientInternal": {
                      "value": "some-identifier-2",
                      "effectiveAt": "0001-01-01T00:00:00.0000000+00:00"
                    },
                    "figi": {
                      "value": "some-figi-code-2",
                      "effectiveAt": "0001-01-01T00:00:00.0000000+00:00"
                    }
                  },
                  "properties": [],
                  "lookThroughPortfolioId": {
                    "scope": "MyScope",
                    "code": "portfolio-code"
                  },
                  "definition": {
                    "instrumentFormat": {
                      "sourceSystem": "systemA",
                      "vendor": "Unknown",
                      "version": "1.0.0"
                    },
                    "content": "{\"some-key\": \"some-value\"}",
                    "instrumentType": "ExoticInstrument"
                  }
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/InstrumentDefinition"
                },
                "description": "The definitions of the instruments to update or insert."
              },
              "example": {
                "request_id_1": {
                  "name": "Instrument name",
                  "identifiers": {
                    "clientInternal": {
                      "value": "some-identifier",
                      "effectiveAt": "0001-01-01T00:00:00.0000000+00:00"
                    },
                    "figi": {
                      "value": "some-figi-code",
                      "effectiveAt": "0001-01-01T00:00:00.0000000+00:00"
                    },
                    "isin": {
                      "value": "some-isin-code",
                      "effectiveAt": "0001-01-01T00:00:00.0000000+00:00"
                    }
                  },
                  "properties": [
                    {
                      "key": "Instrument/someScope/somePropertyName",
                      "value": {
                        "labelValue": "some-property-value"
                      },
                      "effectiveFrom": "2018-06-18T09:00:00.0000000+00:00"
                    }
                  ],
                  "lookThroughPortfolioId": {
                    "scope": "MyScope",
                    "code": "portfolio-code"
                  },
                  "definition": {
                    "instrumentFormat": {
                      "sourceSystem": "systemA",
                      "vendor": "Unknown",
                      "version": "1.0.0"
                    },
                    "content": "{\"some-key\": \"some-value\"}",
                    "instrumentType": "ExoticInstrument"
                  }
                },
                "request_id_2": {
                  "name": "Instrument name",
                  "identifiers": {
                    "clientInternal": {
                      "value": "some-identifier-2",
                      "effectiveAt": "0001-01-01T00:00:00.0000000+00:00"
                    },
                    "figi": {
                      "value": "some-figi-code-2",
                      "effectiveAt": "0001-01-01T00:00:00.0000000+00:00"
                    }
                  },
                  "properties": [],
                  "lookThroughPortfolioId": {
                    "scope": "MyScope",
                    "code": "portfolio-code"
                  },
                  "definition": {
                    "instrumentFormat": {
                      "sourceSystem": "systemA",
                      "vendor": "Unknown",
                      "version": "1.0.0"
                    },
                    "content": "{\"some-key\": \"some-value\"}",
                    "instrumentType": "ExoticInstrument"
                  }
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/InstrumentDefinition"
                },
                "description": "The definitions of the instruments to update or insert."
              },
              "example": {
                "request_id_1": {
                  "name": "Instrument name",
                  "identifiers": {
                    "clientInternal": {
                      "value": "some-identifier",
                      "effectiveAt": "0001-01-01T00:00:00.0000000+00:00"
                    },
                    "figi": {
                      "value": "some-figi-code",
                      "effectiveAt": "0001-01-01T00:00:00.0000000+00:00"
                    },
                    "isin": {
                      "value": "some-isin-code",
                      "effectiveAt": "0001-01-01T00:00:00.0000000+00:00"
                    }
                  },
                  "properties": [
                    {
                      "key": "Instrument/someScope/somePropertyName",
                      "value": {
                        "labelValue": "some-property-value"
                      },
                      "effectiveFrom": "2018-06-18T09:00:00.0000000+00:00"
                    }
                  ],
                  "lookThroughPortfolioId": {
                    "scope": "MyScope",
                    "code": "portfolio-code"
                  },
                  "definition": {
                    "instrumentFormat": {
                      "sourceSystem": "systemA",
                      "vendor": "Unknown",
                      "version": "1.0.0"
                    },
                    "content": "{\"some-key\": \"some-value\"}",
                    "instrumentType": "ExoticInstrument"
                  }
                },
                "request_id_2": {
                  "name": "Instrument name",
                  "identifiers": {
                    "clientInternal": {
                      "value": "some-identifier-2",
                      "effectiveAt": "0001-01-01T00:00:00.0000000+00:00"
                    },
                    "figi": {
                      "value": "some-figi-code-2",
                      "effectiveAt": "0001-01-01T00:00:00.0000000+00:00"
                    }
                  },
                  "properties": [],
                  "lookThroughPortfolioId": {
                    "scope": "MyScope",
                    "code": "portfolio-code"
                  },
                  "definition": {
                    "instrumentFormat": {
                      "sourceSystem": "systemA",
                      "vendor": "Unknown",
                      "version": "1.0.0"
                    },
                    "content": "{\"some-key\": \"some-value\"}",
                    "instrumentType": "ExoticInstrument"
                  }
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/InstrumentDefinition"
                },
                "description": "The definitions of the instruments to update or insert."
              },
              "example": {
                "request_id_1": {
                  "name": "Instrument name",
                  "identifiers": {
                    "clientInternal": {
                      "value": "some-identifier",
                      "effectiveAt": "0001-01-01T00:00:00.0000000+00:00"
                    },
                    "figi": {
                      "value": "some-figi-code",
                      "effectiveAt": "0001-01-01T00:00:00.0000000+00:00"
                    },
                    "isin": {
                      "value": "some-isin-code",
                      "effectiveAt": "0001-01-01T00:00:00.0000000+00:00"
                    }
                  },
                  "properties": [
                    {
                      "key": "Instrument/someScope/somePropertyName",
                      "value": {
                        "labelValue": "some-property-value"
                      },
                      "effectiveFrom": "2018-06-18T09:00:00.0000000+00:00"
                    }
                  ],
                  "lookThroughPortfolioId": {
                    "scope": "MyScope",
                    "code": "portfolio-code"
                  },
                  "definition": {
                    "instrumentFormat": {
                      "sourceSystem": "systemA",
                      "vendor": "Unknown",
                      "version": "1.0.0"
                    },
                    "content": "{\"some-key\": \"some-value\"}",
                    "instrumentType": "ExoticInstrument"
                  }
                },
                "request_id_2": {
                  "name": "Instrument name",
                  "identifiers": {
                    "clientInternal": {
                      "value": "some-identifier-2",
                      "effectiveAt": "0001-01-01T00:00:00.0000000+00:00"
                    },
                    "figi": {
                      "value": "some-figi-code-2",
                      "effectiveAt": "0001-01-01T00:00:00.0000000+00:00"
                    }
                  },
                  "properties": [],
                  "lookThroughPortfolioId": {
                    "scope": "MyScope",
                    "code": "portfolio-code"
                  },
                  "definition": {
                    "instrumentFormat": {
                      "sourceSystem": "systemA",
                      "vendor": "Unknown",
                      "version": "1.0.0"
                    },
                    "content": "{\"some-key\": \"some-value\"}",
                    "instrumentType": "ExoticInstrument"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "The successfully updated or inserted instruments along with any failures",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertInstrumentsResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertInstrumentsResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertInstrumentsResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      },
      "get": {
        "tags": [
          "Instruments"
        ],
        "summary": "[EARLY ACCESS] List instruments",
        "description": "List all the instruments that have been mastered in the LUSID instrument master.\n\nThe maximum number of instruments that this method can list per request is 2,000.",
        "operationId": "ListInstruments",
        "parameters": [
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to list the instruments. Defaults to return the latest\r\n            version of each instruments if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to list the instruments. Defaults to return the latest\r\n            version of each instruments if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime or cut label at which to list the instruments.\r\n            Defaults to the current LUSID system datetime if not specified.",
            "schema": {
              "type": "string",
              "description": "The effective datetime or cut label at which to list the instruments.\r\n            Defaults to the current LUSID system datetime if not specified.",
              "format": "dateorcutlabel",
              "nullable": true
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "The pagination token to use to continue listing instruments from a previous call to list instruments.\r\n            This value is returned from the previous call. If a pagination token is provided the sortBy, filter, effectiveAt, and asAt fields\r\n            must not have changed since the original request. Also, if set, a start value cannot be provided.",
            "schema": {
              "type": "string",
              "description": "The pagination token to use to continue listing instruments from a previous call to list instruments.\r\n            This value is returned from the previous call. If a pagination token is provided the sortBy, filter, effectiveAt, and asAt fields\r\n            must not have changed since the original request. Also, if set, a start value cannot be provided.",
              "nullable": true
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "Order the results by these fields. Use use the '-' sign to denote descending order e.g. -MyFieldName.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Order the results by these fields. Use use the '-' sign to denote descending order e.g. -MyFieldName.",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "start",
            "in": "query",
            "description": "When paginating, skip this number of results.",
            "schema": {
              "type": "integer",
              "description": "When paginating, skip this number of results.",
              "format": "int32",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "limit",
            "in": "query",
            "description": "When paginating, limit the number of returned results to this many.",
            "schema": {
              "maximum": 5000,
              "minimum": 1,
              "type": "integer",
              "description": "When paginating, limit the number of returned results to this many.",
              "format": "int32",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the result set. Defaults to filter down to active instruments only, i.e. those\r\n            that have not been deleted. Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "type": "string",
              "description": "Expression to filter the result set. Defaults to filter down to active instruments only, i.e. those\r\n            that have not been deleted. Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
              "default": "State eq 'Active'",
              "nullable": true
            }
          },
          {
            "name": "instrumentPropertyKeys",
            "in": "query",
            "description": "A list of property keys from the \"Instrument\" domain to decorate onto each instrument. These take the format {domain}/{scope}/{code} e.g. \"Instrument/system/Name\".",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
              },
              "description": "A list of property keys from the \"Instrument\" domain to decorate onto each instrument. These take the format {domain}/{scope}/{code} e.g. \"Instrument/system/Name\".",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The requested instruments",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfInstrument"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfInstrument"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfInstrument"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/instruments/{identifierType}/{identifier}": {
      "get": {
        "tags": [
          "Instruments"
        ],
        "summary": "Get instrument",
        "description": "Get the definition of a single instrument identified by a unique instrument identifier.",
        "operationId": "GetInstrument",
        "parameters": [
          {
            "name": "identifierType",
            "in": "path",
            "description": "The identifier being supplied e.g. \"Figi\".",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The identifier being supplied e.g. \"Figi\".",
              "nullable": true
            }
          },
          {
            "name": "identifier",
            "in": "path",
            "description": "The value of the identifier for the requested instrument.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The value of the identifier for the requested instrument.",
              "nullable": true
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime or cut label at which to retrieve the instrument definition.\r\n            Defaults to the current LUSID system datetime if not specified.",
            "schema": {
              "type": "string",
              "description": "The effective datetime or cut label at which to retrieve the instrument definition.\r\n            Defaults to the current LUSID system datetime if not specified.",
              "format": "dateorcutlabel",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the instrument definition. Defaults to\r\n            return the latest version of the instrument definition if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to retrieve the instrument definition. Defaults to\r\n            return the latest version of the instrument definition if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "propertyKeys",
            "in": "query",
            "description": "A list of property keys from the \"Instrument\" domain to decorate onto the instrument.\r\n            These take the format {domain}/{scope}/{code} e.g. \"Instrument/system/Name\".",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
              },
              "description": "A list of property keys from the \"Instrument\" domain to decorate onto the instrument.\r\n            These take the format {domain}/{scope}/{code} e.g. \"Instrument/system/Name\".",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The requested instrument",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Instrument"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Instrument"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Instrument"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      },
      "post": {
        "tags": [
          "Instruments"
        ],
        "summary": "[EARLY ACCESS] Update instrument identifier",
        "description": "Update, insert or delete a single instrument identifier for a single instrument. If it is not being deleted\r\nthe identifier will be updated if it already exists and inserted if it does not.",
        "operationId": "UpdateInstrumentIdentifier",
        "parameters": [
          {
            "name": "identifierType",
            "in": "path",
            "description": "The identifier to use to resolve the instrument e.g. \"Figi\".",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The identifier to use to resolve the instrument e.g. \"Figi\".",
              "nullable": true
            }
          },
          {
            "name": "identifier",
            "in": "path",
            "description": "The original value of the identifier for the requested instrument.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The original value of the identifier for the requested instrument.",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "The identifier to update or remove. This may or may not be the same identifier used\r\n            to resolve the instrument.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateInstrumentIdentifierRequest"
              },
              "example": {
                "type": "Figi",
                "value": "updated-figi",
                "effectiveAt": "2018-02-01T10:00:00.0000000+00:00"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateInstrumentIdentifierRequest"
              },
              "example": {
                "type": "Figi",
                "value": "updated-figi",
                "effectiveAt": "2018-02-01T10:00:00.0000000+00:00"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateInstrumentIdentifierRequest"
              },
              "example": {
                "type": "Figi",
                "value": "updated-figi",
                "effectiveAt": "2018-02-01T10:00:00.0000000+00:00"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateInstrumentIdentifierRequest"
              },
              "example": {
                "type": "Figi",
                "value": "updated-figi",
                "effectiveAt": "2018-02-01T10:00:00.0000000+00:00"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The updated instrument definition with the identifier updated, inserted or deleted",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Instrument"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Instrument"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Instrument"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      },
      "delete": {
        "tags": [
          "Instruments"
        ],
        "summary": "[EARLY ACCESS] Delete instrument",
        "description": "Delete a single instrument identified by a unique instrument identifier. Once an instrument has been\r\ndeleted it will be marked as 'inactive' and it can no longer be used when updating or inserting transactions or holdings.\r\nYou can still query existing transactions and holdings related to the deleted instrument.",
        "operationId": "DeleteInstrument",
        "parameters": [
          {
            "name": "identifierType",
            "in": "path",
            "description": "The identifier being supplied e.g. \"Figi\".",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The identifier being supplied e.g. \"Figi\".",
              "nullable": true
            }
          },
          {
            "name": "identifier",
            "in": "path",
            "description": "The value of the identifier that resolves to the instrument to delete.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The value of the identifier that resolves to the instrument to delete.",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The datetime that the instrument was deleted",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteInstrumentResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteInstrumentResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteInstrumentResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/instruments/{identifierType}/{identifier}/properties/time-series": {
      "get": {
        "tags": [
          "Instruments"
        ],
        "summary": "[EARLY ACCESS] Get the time series of an instrument property",
        "description": "List the complete time series of an instrument property.",
        "operationId": "GetInstrumentPropertyTimeSeries",
        "parameters": [
          {
            "name": "identifierType",
            "in": "path",
            "description": "The identifier type of the instrument, e.g., \"Figi\"",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The identifier type of the instrument, e.g., \"Figi\"",
              "nullable": true
            }
          },
          {
            "name": "identifier",
            "in": "path",
            "description": "The value of the identifier for the requested instrument.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The value of the identifier for the requested instrument.",
              "nullable": true
            }
          },
          {
            "name": "propertyKey",
            "in": "query",
            "description": "The property key of the property that will have its history shown. These must be in the format {domain}/{scope}/{code} e.g. \"Instrument/system/Name\".\r\n            Each property must be from the \"Instrument\" domain.",
            "schema": {
              "type": "string",
              "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}.",
              "nullable": true
            }
          },
          {
            "name": "identifierEffectiveAt",
            "in": "query",
            "description": "The effective datetime used to resolve the instrument from the provided identifier. Defaults to the current LUSID system datetime if not specified.",
            "schema": {
              "type": "string",
              "description": "The effective datetime used to resolve the instrument from the provided identifier. Defaults to the current LUSID system datetime if not specified.",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to list the instrument's property history. Defaults to return the current datetime if not supplied.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to list the instrument's property history. Defaults to return the current datetime if not supplied.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the result set. Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "type": "string",
              "description": "Expression to filter the result set. Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
              "nullable": true
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "The pagination token to use to continue listing properties from a previous call to get property time series.\r\n            This value is returned from the previous call. If a pagination token is provided the filter, effectiveAt, and asAt fields\r\n            must not have changed since the original request.",
            "schema": {
              "type": "string",
              "description": "The pagination token to use to continue listing properties from a previous call to get property time series.\r\n            This value is returned from the previous call. If a pagination token is provided the filter, effectiveAt, and asAt fields\r\n            must not have changed since the original request.",
              "nullable": true
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "When paginating, limit the number of returned results to this many.",
            "schema": {
              "maximum": 5000,
              "minimum": 1,
              "type": "integer",
              "description": "When paginating, limit the number of returned results to this many.",
              "format": "int32",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The time series of the property",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfPropertyInterval"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfPropertyInterval"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfPropertyInterval"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/instruments/$get": {
      "post": {
        "tags": [
          "Instruments"
        ],
        "summary": "Get instruments",
        "description": "Get the definition of one or more instruments identified by a collection of unique instrument identifiers.",
        "operationId": "GetInstruments",
        "parameters": [
          {
            "name": "identifierType",
            "in": "query",
            "description": "The identifier being supplied e.g. \"Figi\".",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The identifier being supplied e.g. \"Figi\"."
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime or cut label at which to retrieve the instrument definitions.\r\n            Defaults to the current LUSID system datetime if not specified.",
            "schema": {
              "type": "string",
              "description": "The effective datetime or cut label at which to retrieve the instrument definitions.\r\n            Defaults to the current LUSID system datetime if not specified.",
              "format": "dateorcutlabel",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the instrument definitions.\r\n            Defaults to return the latest version of each instrument definition if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to retrieve the instrument definitions.\r\n            Defaults to return the latest version of each instrument definition if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "propertyKeys",
            "in": "query",
            "description": "A list of property keys from the \"Instrument\" domain to decorate onto the instrument.\r\n            These take the format {domain}/{scope}/{code} e.g. \"Instrument/system/Name\".",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
              },
              "description": "A list of property keys from the \"Instrument\" domain to decorate onto the instrument.\r\n            These take the format {domain}/{scope}/{code} e.g. \"Instrument/system/Name\".",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "requestBody": {
          "description": "The values of the identifier for the requested instruments.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "The values of the identifier for the requested instruments."
              },
              "example": [
                "instrument-identifier-1",
                "instrument-identifier-2"
              ]
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "The values of the identifier for the requested instruments."
              },
              "example": [
                "instrument-identifier-1",
                "instrument-identifier-2"
              ]
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "The values of the identifier for the requested instruments."
              },
              "example": [
                "instrument-identifier-1",
                "instrument-identifier-2"
              ]
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "The values of the identifier for the requested instruments."
              },
              "example": [
                "instrument-identifier-1",
                "instrument-identifier-2"
              ]
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The requested instruments which could be identified along with any failures",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GetInstrumentsResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetInstrumentsResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetInstrumentsResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      }
    },
    "/api/instruments/$upsertproperties": {
      "post": {
        "tags": [
          "Instruments"
        ],
        "summary": "Upsert instruments properties",
        "description": "Update or insert one or more instrument properties for one or more instruments. Each instrument property will be updated\r\nif it already exists and inserted if it does not. If any properties fail to be updated or inserted, none will be updated or inserted and\r\nthe reason for the failure will be returned.\r\n            \r\nProperties have an <i>effectiveFrom</i> datetime for which the property is valid, and an <i>effectiveUntil</i>\r\ndatetime until which the property is valid. Not supplying an <i>effectiveUntil</i> datetime results in the property being\r\nvalid indefinitely, or until the next <i>effectiveFrom</i> datetime of the property.",
        "operationId": "UpsertInstrumentsProperties",
        "requestBody": {
          "description": "A collection of instruments and associated instrument properties to update or insert.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/UpsertInstrumentPropertyRequest"
                },
                "description": "A collection of instruments and associated instrument properties to update or insert."
              },
              "example": [
                {
                  "identifierType": "LusidInstrumentId",
                  "identifier": "LUID_00000000",
                  "properties": [
                    {
                      "key": "Instrument/MyScope/SomePropertyName",
                      "value": {
                        "labelValue": "SomeValue1"
                      },
                      "effectiveFrom": "2016-09-15T12:00:00.0000000+00:00"
                    },
                    {
                      "key": "Instrument/MyScope/SomePropertyName",
                      "value": {
                        "labelValue": "SomeValue2"
                      },
                      "effectiveFrom": "2017-08-10T12:00:00.0000000+00:00"
                    },
                    {
                      "key": "Instrument/MyScope/AnotherPropertyName",
                      "value": {
                        "labelValue": "AnotherValue1"
                      },
                      "effectiveFrom": "2018-03-05T12:00:00.0000000+00:00",
                      "effectiveUntil": "2019-06-01T12:00:00.0000000+00:00"
                    },
                    {
                      "key": "Instrument/MyScope/AnotherPropertyName",
                      "value": {
                        "labelValue": "AnotherValue2"
                      },
                      "effectiveFrom": "2020-03-15T12:00:00.0000000+00:00",
                      "effectiveUntil": "2021-01-15T12:00:00.0000000+00:00"
                    }
                  ]
                }
              ]
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/UpsertInstrumentPropertyRequest"
                },
                "description": "A collection of instruments and associated instrument properties to update or insert."
              },
              "example": [
                {
                  "identifierType": "LusidInstrumentId",
                  "identifier": "LUID_00000000",
                  "properties": [
                    {
                      "key": "Instrument/MyScope/SomePropertyName",
                      "value": {
                        "labelValue": "SomeValue1"
                      },
                      "effectiveFrom": "2016-09-15T12:00:00.0000000+00:00"
                    },
                    {
                      "key": "Instrument/MyScope/SomePropertyName",
                      "value": {
                        "labelValue": "SomeValue2"
                      },
                      "effectiveFrom": "2017-08-10T12:00:00.0000000+00:00"
                    },
                    {
                      "key": "Instrument/MyScope/AnotherPropertyName",
                      "value": {
                        "labelValue": "AnotherValue1"
                      },
                      "effectiveFrom": "2018-03-05T12:00:00.0000000+00:00",
                      "effectiveUntil": "2019-06-01T12:00:00.0000000+00:00"
                    },
                    {
                      "key": "Instrument/MyScope/AnotherPropertyName",
                      "value": {
                        "labelValue": "AnotherValue2"
                      },
                      "effectiveFrom": "2020-03-15T12:00:00.0000000+00:00",
                      "effectiveUntil": "2021-01-15T12:00:00.0000000+00:00"
                    }
                  ]
                }
              ]
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/UpsertInstrumentPropertyRequest"
                },
                "description": "A collection of instruments and associated instrument properties to update or insert."
              },
              "example": [
                {
                  "identifierType": "LusidInstrumentId",
                  "identifier": "LUID_00000000",
                  "properties": [
                    {
                      "key": "Instrument/MyScope/SomePropertyName",
                      "value": {
                        "labelValue": "SomeValue1"
                      },
                      "effectiveFrom": "2016-09-15T12:00:00.0000000+00:00"
                    },
                    {
                      "key": "Instrument/MyScope/SomePropertyName",
                      "value": {
                        "labelValue": "SomeValue2"
                      },
                      "effectiveFrom": "2017-08-10T12:00:00.0000000+00:00"
                    },
                    {
                      "key": "Instrument/MyScope/AnotherPropertyName",
                      "value": {
                        "labelValue": "AnotherValue1"
                      },
                      "effectiveFrom": "2018-03-05T12:00:00.0000000+00:00",
                      "effectiveUntil": "2019-06-01T12:00:00.0000000+00:00"
                    },
                    {
                      "key": "Instrument/MyScope/AnotherPropertyName",
                      "value": {
                        "labelValue": "AnotherValue2"
                      },
                      "effectiveFrom": "2020-03-15T12:00:00.0000000+00:00",
                      "effectiveUntil": "2021-01-15T12:00:00.0000000+00:00"
                    }
                  ]
                }
              ]
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/UpsertInstrumentPropertyRequest"
                },
                "description": "A collection of instruments and associated instrument properties to update or insert."
              },
              "example": [
                {
                  "identifierType": "LusidInstrumentId",
                  "identifier": "LUID_00000000",
                  "properties": [
                    {
                      "key": "Instrument/MyScope/SomePropertyName",
                      "value": {
                        "labelValue": "SomeValue1"
                      },
                      "effectiveFrom": "2016-09-15T12:00:00.0000000+00:00"
                    },
                    {
                      "key": "Instrument/MyScope/SomePropertyName",
                      "value": {
                        "labelValue": "SomeValue2"
                      },
                      "effectiveFrom": "2017-08-10T12:00:00.0000000+00:00"
                    },
                    {
                      "key": "Instrument/MyScope/AnotherPropertyName",
                      "value": {
                        "labelValue": "AnotherValue1"
                      },
                      "effectiveFrom": "2018-03-05T12:00:00.0000000+00:00",
                      "effectiveUntil": "2019-06-01T12:00:00.0000000+00:00"
                    },
                    {
                      "key": "Instrument/MyScope/AnotherPropertyName",
                      "value": {
                        "labelValue": "AnotherValue2"
                      },
                      "effectiveFrom": "2020-03-15T12:00:00.0000000+00:00",
                      "effectiveUntil": "2021-01-15T12:00:00.0000000+00:00"
                    }
                  ]
                }
              ]
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "The asAt time at which the properties were updated, inserted or deleted",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertInstrumentPropertiesResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertInstrumentPropertiesResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertInstrumentPropertiesResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      }
    },
    "/api/instruments/identifierTypes": {
      "get": {
        "tags": [
          "Instruments"
        ],
        "summary": "[EARLY ACCESS] Get instrument identifier types",
        "description": "Get the allowable instrument identifier types and their descriptions.",
        "operationId": "GetInstrumentIdentifierTypes",
        "responses": {
          "200": {
            "description": "The allowable instrument identifier types",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfInstrumentIdTypeDescriptor"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfInstrumentIdTypeDescriptor"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfInstrumentIdTypeDescriptor"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/legalentities": {
      "post": {
        "tags": [
          "Legal Entities"
        ],
        "summary": "[EARLY ACCESS] Upsert Legal Entity",
        "description": "Create or update a legal entity",
        "operationId": "UpsertLegalEntity",
        "requestBody": {
          "description": "Request to create or update a legal entity.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertLegalEntityRequest"
              },
              "example": {
                "identifiers": {
                  "legalEntity/ExternalIdentifier/LEI": {
                    "key": "LegalEntity/ExternalIdentifier/LEI",
                    "value": {
                      "labelValue": "LEI_12345678"
                    }
                  },
                  "legalEntity/InternalIdentifier/InternalLeiId": {
                    "key": "LegalEntity/InternalIdentifier/InternalLeiId",
                    "value": {
                      "labelValue": "Internal_XHSP2038"
                    }
                  }
                },
                "properties": {
                  "legalEntity/Details/Name": {
                    "key": "LegalEntity/Details/Name",
                    "value": {
                      "labelValue": "Legal Entity Inc."
                    }
                  },
                  "legalEntity/Details/Country": {
                    "key": "LegalEntity/Details/Country",
                    "value": {
                      "labelValue": "United Kingdom"
                    },
                    "effectiveFrom": "2016-01-01T00:00:00.0000000+00:00"
                  },
                  "legalEntity/Status/Active": {
                    "key": "LegalEntity/Status/Active",
                    "value": {
                      "labelValue": "Active"
                    },
                    "effectiveFrom": "2016-07-01T00:00:00.0000000+00:00"
                  }
                },
                "displayName": "LegalEntity1DisplayName",
                "description": "LegalEntity1Description"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertLegalEntityRequest"
              },
              "example": {
                "identifiers": {
                  "legalEntity/ExternalIdentifier/LEI": {
                    "key": "LegalEntity/ExternalIdentifier/LEI",
                    "value": {
                      "labelValue": "LEI_12345678"
                    }
                  },
                  "legalEntity/InternalIdentifier/InternalLeiId": {
                    "key": "LegalEntity/InternalIdentifier/InternalLeiId",
                    "value": {
                      "labelValue": "Internal_XHSP2038"
                    }
                  }
                },
                "properties": {
                  "legalEntity/Details/Name": {
                    "key": "LegalEntity/Details/Name",
                    "value": {
                      "labelValue": "Legal Entity Inc."
                    }
                  },
                  "legalEntity/Details/Country": {
                    "key": "LegalEntity/Details/Country",
                    "value": {
                      "labelValue": "United Kingdom"
                    },
                    "effectiveFrom": "2016-01-01T00:00:00.0000000+00:00"
                  },
                  "legalEntity/Status/Active": {
                    "key": "LegalEntity/Status/Active",
                    "value": {
                      "labelValue": "Active"
                    },
                    "effectiveFrom": "2016-07-01T00:00:00.0000000+00:00"
                  }
                },
                "displayName": "LegalEntity1DisplayName",
                "description": "LegalEntity1Description"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertLegalEntityRequest"
              },
              "example": {
                "identifiers": {
                  "legalEntity/ExternalIdentifier/LEI": {
                    "key": "LegalEntity/ExternalIdentifier/LEI",
                    "value": {
                      "labelValue": "LEI_12345678"
                    }
                  },
                  "legalEntity/InternalIdentifier/InternalLeiId": {
                    "key": "LegalEntity/InternalIdentifier/InternalLeiId",
                    "value": {
                      "labelValue": "Internal_XHSP2038"
                    }
                  }
                },
                "properties": {
                  "legalEntity/Details/Name": {
                    "key": "LegalEntity/Details/Name",
                    "value": {
                      "labelValue": "Legal Entity Inc."
                    }
                  },
                  "legalEntity/Details/Country": {
                    "key": "LegalEntity/Details/Country",
                    "value": {
                      "labelValue": "United Kingdom"
                    },
                    "effectiveFrom": "2016-01-01T00:00:00.0000000+00:00"
                  },
                  "legalEntity/Status/Active": {
                    "key": "LegalEntity/Status/Active",
                    "value": {
                      "labelValue": "Active"
                    },
                    "effectiveFrom": "2016-07-01T00:00:00.0000000+00:00"
                  }
                },
                "displayName": "LegalEntity1DisplayName",
                "description": "LegalEntity1Description"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertLegalEntityRequest"
              },
              "example": {
                "identifiers": {
                  "legalEntity/ExternalIdentifier/LEI": {
                    "key": "LegalEntity/ExternalIdentifier/LEI",
                    "value": {
                      "labelValue": "LEI_12345678"
                    }
                  },
                  "legalEntity/InternalIdentifier/InternalLeiId": {
                    "key": "LegalEntity/InternalIdentifier/InternalLeiId",
                    "value": {
                      "labelValue": "Internal_XHSP2038"
                    }
                  }
                },
                "properties": {
                  "legalEntity/Details/Name": {
                    "key": "LegalEntity/Details/Name",
                    "value": {
                      "labelValue": "Legal Entity Inc."
                    }
                  },
                  "legalEntity/Details/Country": {
                    "key": "LegalEntity/Details/Country",
                    "value": {
                      "labelValue": "United Kingdom"
                    },
                    "effectiveFrom": "2016-01-01T00:00:00.0000000+00:00"
                  },
                  "legalEntity/Status/Active": {
                    "key": "LegalEntity/Status/Active",
                    "value": {
                      "labelValue": "Active"
                    },
                    "effectiveFrom": "2016-07-01T00:00:00.0000000+00:00"
                  }
                },
                "displayName": "LegalEntity1DisplayName",
                "description": "LegalEntity1Description"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "The newly created or updated legal entity",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LegalEntity"
                },
                "example": {
                  "displayName": "LegalEntity1DisplayName",
                  "description": "LegalEntity1Description",
                  "href": "https://example.com",
                  "lusidLegalEntityId": "UniqueLusidLegalEntityId1",
                  "identifiers": {
                    "legalEntity/ExternalIdentifier/LEI": {
                      "key": "LegalEntity/ExternalIdentifier/LEI",
                      "value": {
                        "labelValue": "LEI_12345678"
                      }
                    },
                    "legalEntity/InternalIdentifier/InternalLeiId": {
                      "key": "LegalEntity/InternalIdentifier/InternalLeiId",
                      "value": {
                        "labelValue": "Internal_XHSP2038"
                      }
                    }
                  },
                  "properties": {
                    "legalEntity/Details/Name": {
                      "key": "LegalEntity/Details/Name",
                      "value": {
                        "labelValue": "Legal Entity Inc."
                      }
                    },
                    "legalEntity/Details/Country": {
                      "key": "LegalEntity/Details/Country",
                      "value": {
                        "labelValue": "United Kingdom"
                      },
                      "effectiveFrom": "2016-01-01T00:00:00.0000000+00:00"
                    },
                    "legalEntity/Status/Active": {
                      "key": "LegalEntity/Status/Active",
                      "value": {
                        "labelValue": "Active"
                      },
                      "effectiveFrom": "2016-07-01T00:00:00.0000000+00:00"
                    }
                  },
                  "version": {
                    "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                    "asAtDate": "2019-01-01T12:00:00.0100000+00:00"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LegalEntity"
                },
                "example": {
                  "displayName": "LegalEntity1DisplayName",
                  "description": "LegalEntity1Description",
                  "href": "https://example.com",
                  "lusidLegalEntityId": "UniqueLusidLegalEntityId1",
                  "identifiers": {
                    "legalEntity/ExternalIdentifier/LEI": {
                      "key": "LegalEntity/ExternalIdentifier/LEI",
                      "value": {
                        "labelValue": "LEI_12345678"
                      }
                    },
                    "legalEntity/InternalIdentifier/InternalLeiId": {
                      "key": "LegalEntity/InternalIdentifier/InternalLeiId",
                      "value": {
                        "labelValue": "Internal_XHSP2038"
                      }
                    }
                  },
                  "properties": {
                    "legalEntity/Details/Name": {
                      "key": "LegalEntity/Details/Name",
                      "value": {
                        "labelValue": "Legal Entity Inc."
                      }
                    },
                    "legalEntity/Details/Country": {
                      "key": "LegalEntity/Details/Country",
                      "value": {
                        "labelValue": "United Kingdom"
                      },
                      "effectiveFrom": "2016-01-01T00:00:00.0000000+00:00"
                    },
                    "legalEntity/Status/Active": {
                      "key": "LegalEntity/Status/Active",
                      "value": {
                        "labelValue": "Active"
                      },
                      "effectiveFrom": "2016-07-01T00:00:00.0000000+00:00"
                    }
                  },
                  "version": {
                    "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                    "asAtDate": "2019-01-01T12:00:00.0100000+00:00"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LegalEntity"
                },
                "example": {
                  "displayName": "LegalEntity1DisplayName",
                  "description": "LegalEntity1Description",
                  "href": "https://example.com",
                  "lusidLegalEntityId": "UniqueLusidLegalEntityId1",
                  "identifiers": {
                    "legalEntity/ExternalIdentifier/LEI": {
                      "key": "LegalEntity/ExternalIdentifier/LEI",
                      "value": {
                        "labelValue": "LEI_12345678"
                      }
                    },
                    "legalEntity/InternalIdentifier/InternalLeiId": {
                      "key": "LegalEntity/InternalIdentifier/InternalLeiId",
                      "value": {
                        "labelValue": "Internal_XHSP2038"
                      }
                    }
                  },
                  "properties": {
                    "legalEntity/Details/Name": {
                      "key": "LegalEntity/Details/Name",
                      "value": {
                        "labelValue": "Legal Entity Inc."
                      }
                    },
                    "legalEntity/Details/Country": {
                      "key": "LegalEntity/Details/Country",
                      "value": {
                        "labelValue": "United Kingdom"
                      },
                      "effectiveFrom": "2016-01-01T00:00:00.0000000+00:00"
                    },
                    "legalEntity/Status/Active": {
                      "key": "LegalEntity/Status/Active",
                      "value": {
                        "labelValue": "Active"
                      },
                      "effectiveFrom": "2016-07-01T00:00:00.0000000+00:00"
                    }
                  },
                  "version": {
                    "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                    "asAtDate": "2019-01-01T12:00:00.0100000+00:00"
                  }
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/legalentities/{idTypeScope}/{idTypeCode}": {
      "get": {
        "tags": [
          "Legal Entities"
        ],
        "summary": "[EARLY ACCESS] List Legal Entities",
        "description": "List legal entities which has identifier of specific identifier type's scope and code, and satisfies filter criteria.",
        "operationId": "ListLegalEntities",
        "parameters": [
          {
            "name": "idTypeScope",
            "in": "path",
            "description": "Scope of the legal entity identifier type.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "Scope of the legal entity identifier type.",
              "nullable": true
            }
          },
          {
            "name": "idTypeCode",
            "in": "path",
            "description": "Code of the legal entity identifier type.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "Code of the legal entity identifier type.",
              "nullable": true
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime or cut label at which to list the people. Defaults to the current LUSID\r\n            system datetime if not specified.",
            "schema": {
              "maxLength": 256,
              "minLength": 0,
              "pattern": "^[a-zA-Z0-9\\-_\\+:\\.]+$",
              "type": "string",
              "description": "The effective datetime or cut label at which to list the people. Defaults to the current LUSID\r\n            system datetime if not specified.",
              "format": "dateorcutlabel",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to list the people. Defaults to return the latest version\r\n            of each people if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to list the people. Defaults to return the latest version\r\n            of each people if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "page",
            "in": "query",
            "description": "The pagination token to use to continue listing legal entities from a previous call to list legal entities. This\r\nvalue is returned from the previous call. If a pagination token is provided the filter, effectiveAt\r\nand asAt fields must not have changed since the original request.",
            "schema": {
              "maxLength": 500,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\+/]*={0,3}$",
              "type": "string",
              "description": "The pagination token to use to continue listing legal entities from a previous call to list legal entities. This\r\nvalue is returned from the previous call. If a pagination token is provided the filter, effectiveAt\r\nand asAt fields must not have changed since the original request.",
              "nullable": true
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "When paginating, limit the number of returned results to this many. Defaults to 65,535 if not specified.",
            "schema": {
              "maximum": 5000,
              "minimum": 1,
              "type": "integer",
              "description": "When paginating, limit the number of returned results to this many. Defaults to 65,535 if not specified.",
              "format": "int32",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the result set. \r\n            Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "maxLength": 2147483647,
              "minLength": 0,
              "pattern": "(?s).*",
              "type": "string",
              "description": "Expression to filter the result set. \r\n            Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
              "nullable": true
            }
          },
          {
            "name": "propertyKeys",
            "in": "query",
            "description": "A list of property keys or identifier types (as property keys) from the \"LegalEntity\" domain to include for each legal entity.\r\n            These take the format {domain}/{scope}/{code} e.g. \"LegalEntity/ContactDetails/Address\".",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
              },
              "description": "A list of property keys or identifier types (as property keys) from the \"LegalEntity\" domain to include for each legal entity.\r\n            These take the format {domain}/{scope}/{code} e.g. \"LegalEntity/ContactDetails/Address\".",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "Legal Entities with specified identifier type",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfLegalEntity"
                },
                "example": {
                  "values": [
                    {
                      "displayName": "LegalEntity1DisplayName",
                      "description": "LegalEntity1Description",
                      "href": "https://example.com",
                      "lusidLegalEntityId": "UniqueLusidLegalEntityId1",
                      "identifiers": {
                        "legalEntity/ExternalIdentifier/LEI": {
                          "key": "LegalEntity/ExternalIdentifier/LEI",
                          "value": {
                            "labelValue": "LEI_12345678"
                          }
                        },
                        "legalEntity/InternalIdentifier/InternalLeiId": {
                          "key": "LegalEntity/InternalIdentifier/InternalLeiId",
                          "value": {
                            "labelValue": "Internal_XHSP2038"
                          }
                        }
                      },
                      "properties": {
                        "legalEntity/Details/Name": {
                          "key": "LegalEntity/Details/Name",
                          "value": {
                            "labelValue": "Legal Entity Inc."
                          }
                        },
                        "legalEntity/Details/Country": {
                          "key": "LegalEntity/Details/Country",
                          "value": {
                            "labelValue": "United Kingdom"
                          },
                          "effectiveFrom": "2016-01-01T00:00:00.0000000+00:00"
                        },
                        "legalEntity/Status/Active": {
                          "key": "LegalEntity/Status/Active",
                          "value": {
                            "labelValue": "Active"
                          },
                          "effectiveFrom": "2016-07-01T00:00:00.0000000+00:00"
                        }
                      },
                      "version": {
                        "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                        "asAtDate": "2019-01-01T12:00:00.0100000+00:00"
                      }
                    },
                    {
                      "displayName": "LegalEntity2DisplayName",
                      "description": "LegalEntity2Description",
                      "href": "https://example.com",
                      "lusidLegalEntityId": "UniqueLusidLegalEntityId2",
                      "identifiers": {
                        "legalEntity/ExternalIdentifier/LEI": {
                          "key": "LegalEntity/ExternalIdentifier/LEI",
                          "value": {
                            "labelValue": "LEI_22345678"
                          }
                        },
                        "legalEntity/InternalIdentifier/InternalLeiId": {
                          "key": "LegalEntity/InternalIdentifier/InternalLeiId",
                          "value": {
                            "labelValue": "Internal_XHSP2038"
                          }
                        }
                      },
                      "properties": {
                        "legalEntity/Details/Name": {
                          "key": "LegalEntity/Details/Name",
                          "value": {
                            "labelValue": "Legal Entity 2 Inc."
                          }
                        },
                        "legalEntity/Details/Country": {
                          "key": "LegalEntity/Details/Country",
                          "value": {
                            "labelValue": "Germany"
                          },
                          "effectiveFrom": "2016-01-01T00:00:00.0000000+00:00"
                        },
                        "legalEntity/Status/Active": {
                          "key": "LegalEntity/Status/Active",
                          "value": {
                            "labelValue": "Active"
                          },
                          "effectiveFrom": "2016-04-01T00:00:00.0000000+00:00"
                        }
                      },
                      "version": {
                        "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                        "asAtDate": "2019-01-01T12:00:00.0100000+00:00"
                      }
                    }
                  ],
                  "href": "http://example.com",
                  "links": []
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfLegalEntity"
                },
                "example": {
                  "values": [
                    {
                      "displayName": "LegalEntity1DisplayName",
                      "description": "LegalEntity1Description",
                      "href": "https://example.com",
                      "lusidLegalEntityId": "UniqueLusidLegalEntityId1",
                      "identifiers": {
                        "legalEntity/ExternalIdentifier/LEI": {
                          "key": "LegalEntity/ExternalIdentifier/LEI",
                          "value": {
                            "labelValue": "LEI_12345678"
                          }
                        },
                        "legalEntity/InternalIdentifier/InternalLeiId": {
                          "key": "LegalEntity/InternalIdentifier/InternalLeiId",
                          "value": {
                            "labelValue": "Internal_XHSP2038"
                          }
                        }
                      },
                      "properties": {
                        "legalEntity/Details/Name": {
                          "key": "LegalEntity/Details/Name",
                          "value": {
                            "labelValue": "Legal Entity Inc."
                          }
                        },
                        "legalEntity/Details/Country": {
                          "key": "LegalEntity/Details/Country",
                          "value": {
                            "labelValue": "United Kingdom"
                          },
                          "effectiveFrom": "2016-01-01T00:00:00.0000000+00:00"
                        },
                        "legalEntity/Status/Active": {
                          "key": "LegalEntity/Status/Active",
                          "value": {
                            "labelValue": "Active"
                          },
                          "effectiveFrom": "2016-07-01T00:00:00.0000000+00:00"
                        }
                      },
                      "version": {
                        "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                        "asAtDate": "2019-01-01T12:00:00.0100000+00:00"
                      }
                    },
                    {
                      "displayName": "LegalEntity2DisplayName",
                      "description": "LegalEntity2Description",
                      "href": "https://example.com",
                      "lusidLegalEntityId": "UniqueLusidLegalEntityId2",
                      "identifiers": {
                        "legalEntity/ExternalIdentifier/LEI": {
                          "key": "LegalEntity/ExternalIdentifier/LEI",
                          "value": {
                            "labelValue": "LEI_22345678"
                          }
                        },
                        "legalEntity/InternalIdentifier/InternalLeiId": {
                          "key": "LegalEntity/InternalIdentifier/InternalLeiId",
                          "value": {
                            "labelValue": "Internal_XHSP2038"
                          }
                        }
                      },
                      "properties": {
                        "legalEntity/Details/Name": {
                          "key": "LegalEntity/Details/Name",
                          "value": {
                            "labelValue": "Legal Entity 2 Inc."
                          }
                        },
                        "legalEntity/Details/Country": {
                          "key": "LegalEntity/Details/Country",
                          "value": {
                            "labelValue": "Germany"
                          },
                          "effectiveFrom": "2016-01-01T00:00:00.0000000+00:00"
                        },
                        "legalEntity/Status/Active": {
                          "key": "LegalEntity/Status/Active",
                          "value": {
                            "labelValue": "Active"
                          },
                          "effectiveFrom": "2016-04-01T00:00:00.0000000+00:00"
                        }
                      },
                      "version": {
                        "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                        "asAtDate": "2019-01-01T12:00:00.0100000+00:00"
                      }
                    }
                  ],
                  "href": "http://example.com",
                  "links": []
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfLegalEntity"
                },
                "example": {
                  "values": [
                    {
                      "displayName": "LegalEntity1DisplayName",
                      "description": "LegalEntity1Description",
                      "href": "https://example.com",
                      "lusidLegalEntityId": "UniqueLusidLegalEntityId1",
                      "identifiers": {
                        "legalEntity/ExternalIdentifier/LEI": {
                          "key": "LegalEntity/ExternalIdentifier/LEI",
                          "value": {
                            "labelValue": "LEI_12345678"
                          }
                        },
                        "legalEntity/InternalIdentifier/InternalLeiId": {
                          "key": "LegalEntity/InternalIdentifier/InternalLeiId",
                          "value": {
                            "labelValue": "Internal_XHSP2038"
                          }
                        }
                      },
                      "properties": {
                        "legalEntity/Details/Name": {
                          "key": "LegalEntity/Details/Name",
                          "value": {
                            "labelValue": "Legal Entity Inc."
                          }
                        },
                        "legalEntity/Details/Country": {
                          "key": "LegalEntity/Details/Country",
                          "value": {
                            "labelValue": "United Kingdom"
                          },
                          "effectiveFrom": "2016-01-01T00:00:00.0000000+00:00"
                        },
                        "legalEntity/Status/Active": {
                          "key": "LegalEntity/Status/Active",
                          "value": {
                            "labelValue": "Active"
                          },
                          "effectiveFrom": "2016-07-01T00:00:00.0000000+00:00"
                        }
                      },
                      "version": {
                        "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                        "asAtDate": "2019-01-01T12:00:00.0100000+00:00"
                      }
                    },
                    {
                      "displayName": "LegalEntity2DisplayName",
                      "description": "LegalEntity2Description",
                      "href": "https://example.com",
                      "lusidLegalEntityId": "UniqueLusidLegalEntityId2",
                      "identifiers": {
                        "legalEntity/ExternalIdentifier/LEI": {
                          "key": "LegalEntity/ExternalIdentifier/LEI",
                          "value": {
                            "labelValue": "LEI_22345678"
                          }
                        },
                        "legalEntity/InternalIdentifier/InternalLeiId": {
                          "key": "LegalEntity/InternalIdentifier/InternalLeiId",
                          "value": {
                            "labelValue": "Internal_XHSP2038"
                          }
                        }
                      },
                      "properties": {
                        "legalEntity/Details/Name": {
                          "key": "LegalEntity/Details/Name",
                          "value": {
                            "labelValue": "Legal Entity 2 Inc."
                          }
                        },
                        "legalEntity/Details/Country": {
                          "key": "LegalEntity/Details/Country",
                          "value": {
                            "labelValue": "Germany"
                          },
                          "effectiveFrom": "2016-01-01T00:00:00.0000000+00:00"
                        },
                        "legalEntity/Status/Active": {
                          "key": "LegalEntity/Status/Active",
                          "value": {
                            "labelValue": "Active"
                          },
                          "effectiveFrom": "2016-04-01T00:00:00.0000000+00:00"
                        }
                      },
                      "version": {
                        "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                        "asAtDate": "2019-01-01T12:00:00.0100000+00:00"
                      }
                    }
                  ],
                  "href": "http://example.com",
                  "links": []
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/legalentities/{idTypeScope}/{idTypeCode}/{code}": {
      "get": {
        "tags": [
          "Legal Entities"
        ],
        "summary": "[EARLY ACCESS] Get Legal Entity",
        "description": "Retrieve the definition of a legal entity.",
        "operationId": "GetLegalEntity",
        "parameters": [
          {
            "name": "idTypeScope",
            "in": "path",
            "description": "Scope of the legal entity identifier type.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "Scope of the legal entity identifier type.",
              "nullable": true
            }
          },
          {
            "name": "idTypeCode",
            "in": "path",
            "description": "Code of the legal entity identifier type.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "Code of the legal entity identifier type.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "Code of the legal entity under specified identifier type's scope and code. This together with stated identifier type uniquely\r\n            identifies the legal entity.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "Code of the legal entity under specified identifier type's scope and code. This together with stated identifier type uniquely\r\n            identifies the legal entity.",
              "nullable": true
            }
          },
          {
            "name": "propertyKeys",
            "in": "query",
            "description": "A list of property keys or identifier types (as property keys) from the \"LegalEntity\" domain to include for found legal entity.\r\n            These take the format {domain}/{scope}/{code} e.g. \"LegalEntity/ContactDetails/Address\".",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
              },
              "description": "A list of property keys or identifier types (as property keys) from the \"LegalEntity\" domain to include for found legal entity.\r\n            These take the format {domain}/{scope}/{code} e.g. \"LegalEntity/ContactDetails/Address\".",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime or cut label at which to retrieve the legal entity. Defaults to the current LUSID system datetime if not specified.",
            "schema": {
              "maxLength": 256,
              "minLength": 0,
              "pattern": "^[a-zA-Z0-9\\-_\\+:\\.]+$",
              "type": "string",
              "description": "The effective datetime or cut label at which to retrieve the legal entity. Defaults to the current LUSID system datetime if not specified.",
              "format": "dateorcutlabel",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the legal entity. Defaults to return the latest version of the legal entity if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to retrieve the legal entity. Defaults to return the latest version of the legal entity if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The requested legal entity",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LegalEntity"
                },
                "example": {
                  "displayName": "LegalEntity1DisplayName",
                  "description": "LegalEntity1Description",
                  "href": "https://example.com",
                  "lusidLegalEntityId": "UniqueLusidLegalEntityId1",
                  "identifiers": {
                    "legalEntity/ExternalIdentifier/LEI": {
                      "key": "LegalEntity/ExternalIdentifier/LEI",
                      "value": {
                        "labelValue": "LEI_12345678"
                      }
                    },
                    "legalEntity/InternalIdentifier/InternalLeiId": {
                      "key": "LegalEntity/InternalIdentifier/InternalLeiId",
                      "value": {
                        "labelValue": "Internal_XHSP2038"
                      }
                    }
                  },
                  "properties": {
                    "legalEntity/Details/Name": {
                      "key": "LegalEntity/Details/Name",
                      "value": {
                        "labelValue": "Legal Entity Inc."
                      }
                    },
                    "legalEntity/Details/Country": {
                      "key": "LegalEntity/Details/Country",
                      "value": {
                        "labelValue": "United Kingdom"
                      },
                      "effectiveFrom": "2016-01-01T00:00:00.0000000+00:00"
                    },
                    "legalEntity/Status/Active": {
                      "key": "LegalEntity/Status/Active",
                      "value": {
                        "labelValue": "Active"
                      },
                      "effectiveFrom": "2016-07-01T00:00:00.0000000+00:00"
                    }
                  },
                  "version": {
                    "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                    "asAtDate": "2019-01-01T12:00:00.0100000+00:00"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LegalEntity"
                },
                "example": {
                  "displayName": "LegalEntity1DisplayName",
                  "description": "LegalEntity1Description",
                  "href": "https://example.com",
                  "lusidLegalEntityId": "UniqueLusidLegalEntityId1",
                  "identifiers": {
                    "legalEntity/ExternalIdentifier/LEI": {
                      "key": "LegalEntity/ExternalIdentifier/LEI",
                      "value": {
                        "labelValue": "LEI_12345678"
                      }
                    },
                    "legalEntity/InternalIdentifier/InternalLeiId": {
                      "key": "LegalEntity/InternalIdentifier/InternalLeiId",
                      "value": {
                        "labelValue": "Internal_XHSP2038"
                      }
                    }
                  },
                  "properties": {
                    "legalEntity/Details/Name": {
                      "key": "LegalEntity/Details/Name",
                      "value": {
                        "labelValue": "Legal Entity Inc."
                      }
                    },
                    "legalEntity/Details/Country": {
                      "key": "LegalEntity/Details/Country",
                      "value": {
                        "labelValue": "United Kingdom"
                      },
                      "effectiveFrom": "2016-01-01T00:00:00.0000000+00:00"
                    },
                    "legalEntity/Status/Active": {
                      "key": "LegalEntity/Status/Active",
                      "value": {
                        "labelValue": "Active"
                      },
                      "effectiveFrom": "2016-07-01T00:00:00.0000000+00:00"
                    }
                  },
                  "version": {
                    "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                    "asAtDate": "2019-01-01T12:00:00.0100000+00:00"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LegalEntity"
                },
                "example": {
                  "displayName": "LegalEntity1DisplayName",
                  "description": "LegalEntity1Description",
                  "href": "https://example.com",
                  "lusidLegalEntityId": "UniqueLusidLegalEntityId1",
                  "identifiers": {
                    "legalEntity/ExternalIdentifier/LEI": {
                      "key": "LegalEntity/ExternalIdentifier/LEI",
                      "value": {
                        "labelValue": "LEI_12345678"
                      }
                    },
                    "legalEntity/InternalIdentifier/InternalLeiId": {
                      "key": "LegalEntity/InternalIdentifier/InternalLeiId",
                      "value": {
                        "labelValue": "Internal_XHSP2038"
                      }
                    }
                  },
                  "properties": {
                    "legalEntity/Details/Name": {
                      "key": "LegalEntity/Details/Name",
                      "value": {
                        "labelValue": "Legal Entity Inc."
                      }
                    },
                    "legalEntity/Details/Country": {
                      "key": "LegalEntity/Details/Country",
                      "value": {
                        "labelValue": "United Kingdom"
                      },
                      "effectiveFrom": "2016-01-01T00:00:00.0000000+00:00"
                    },
                    "legalEntity/Status/Active": {
                      "key": "LegalEntity/Status/Active",
                      "value": {
                        "labelValue": "Active"
                      },
                      "effectiveFrom": "2016-07-01T00:00:00.0000000+00:00"
                    }
                  },
                  "version": {
                    "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                    "asAtDate": "2019-01-01T12:00:00.0100000+00:00"
                  }
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      },
      "delete": {
        "tags": [
          "Legal Entities"
        ],
        "summary": "[EARLY ACCESS] Delete Legal Entity",
        "description": "Delete a legal entity. Deletion will be valid from the legal entity's creation datetime.\r\nThis means that the legal entity will no longer exist at any effective datetime from the asAt datetime of deletion.",
        "operationId": "DeleteLegalEntity",
        "parameters": [
          {
            "name": "idTypeScope",
            "in": "path",
            "description": "The scope of the legal entity identifier type.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the legal entity identifier type."
            }
          },
          {
            "name": "idTypeCode",
            "in": "path",
            "description": "The code of the legal entity identifier type.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the legal entity identifier type."
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "Code of the legal entity under specified identifier type's scope and code. This together with defined\r\n            identifier type uniquely identifies the legal entity to delete.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "Code of the legal entity under specified identifier type's scope and code. This together with defined\r\n            identifier type uniquely identifies the legal entity to delete."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The response from deleting legal entity.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/legalentities/{idTypeScope}/{idTypeCode}/{code}/relations": {
      "get": {
        "tags": [
          "Legal Entities"
        ],
        "summary": "[DEPRECATED] Get Relations for Legal Entity",
        "description": "Get relations for the specified Legal Entity",
        "operationId": "GetLegalEntityRelations",
        "parameters": [
          {
            "name": "idTypeScope",
            "in": "path",
            "description": "Scope of the legal entity identifier type.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "Scope of the legal entity identifier type.",
              "nullable": true
            }
          },
          {
            "name": "idTypeCode",
            "in": "path",
            "description": "Code of the legal entity identifier type.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "Code of the legal entity identifier type.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "Code of the legal entity under specified identifier type's scope and code. This together with stated identifier type uniquely\r\n            identifies the legal entity.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "Code of the legal entity under specified identifier type's scope and code. This together with stated identifier type uniquely\r\n            identifies the legal entity.",
              "nullable": true
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime or cut label at which to get relations. Defaults to the current LUSID system datetime if not specified.",
            "schema": {
              "maxLength": 256,
              "minLength": 0,
              "pattern": "^[a-zA-Z0-9\\-_\\+:\\.]+$",
              "type": "string",
              "description": "The effective datetime or cut label at which to get relations. Defaults to the current LUSID system datetime if not specified.",
              "format": "dateorcutlabel",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the legal entity's relations. Defaults to return the latest LUSID AsAt time if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to retrieve the legal entity's relations. Defaults to return the latest LUSID AsAt time if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the relations. Users should provide null or empty string for this field until further notice.",
            "schema": {
              "maxLength": 2147483647,
              "minLength": 0,
              "pattern": "(?s).*",
              "type": "string",
              "description": "Expression to filter the relations. Users should provide null or empty string for this field until further notice.",
              "nullable": true
            }
          },
          {
            "name": "identifierTypes",
            "in": "query",
            "description": "Identifiers types (as property keys) used for referencing Persons or Legal Entities. These take the format\r\n            {domain}/{scope}/{code} e.g. \"Person/CompanyDetails/Role\". They must be from the \"Person\" or \"LegalEntity\" domain.\r\n            Only identifier types stated will be used to look up relevant entities in relations. If not applicable, provide an empty array.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
              },
              "description": "Identifiers types (as property keys) used for referencing Persons or Legal Entities. These take the format\r\n            {domain}/{scope}/{code} e.g. \"Person/CompanyDetails/Role\". They must be from the \"Person\" or \"LegalEntity\" domain.\r\n            Only identifier types stated will be used to look up relevant entities in relations. If not applicable, provide an empty array.",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The relations for the specific legal entity.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfRelation"
                },
                "example": {
                  "values": [
                    {
                      "relationDefinitionId": {
                        "scope": "PortfolioManagementTeam",
                        "code": "Traders"
                      },
                      "relatedEntityId": {
                        "entityType": "Person",
                        "idTypeScope": "HrSystem1",
                        "idTypeCode": "InternalId",
                        "code": "XY10001111"
                      },
                      "traversalDirection": "Out",
                      "traversalDescription": "is legal representative for",
                      "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00"
                    }
                  ],
                  "href": "https://example.com",
                  "links": []
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfRelation"
                },
                "example": {
                  "values": [
                    {
                      "relationDefinitionId": {
                        "scope": "PortfolioManagementTeam",
                        "code": "Traders"
                      },
                      "relatedEntityId": {
                        "entityType": "Person",
                        "idTypeScope": "HrSystem1",
                        "idTypeCode": "InternalId",
                        "code": "XY10001111"
                      },
                      "traversalDirection": "Out",
                      "traversalDescription": "is legal representative for",
                      "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00"
                    }
                  ],
                  "href": "https://example.com",
                  "links": []
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfRelation"
                },
                "example": {
                  "values": [
                    {
                      "relationDefinitionId": {
                        "scope": "PortfolioManagementTeam",
                        "code": "Traders"
                      },
                      "relatedEntityId": {
                        "entityType": "Person",
                        "idTypeScope": "HrSystem1",
                        "idTypeCode": "InternalId",
                        "code": "XY10001111"
                      },
                      "traversalDirection": "Out",
                      "traversalDescription": "is legal representative for",
                      "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00"
                    }
                  ],
                  "href": "https://example.com",
                  "links": []
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Deprecated"
      }
    },
    "/api/login/saml/{domain}": {
      "get": {
        "tags": [
          "Login"
        ],
        "summary": "Get SAML Identity Provider",
        "description": "Get the unique identifier for the SAML 2.0 Identity Provider to be used for domain.",
        "operationId": "GetSamlIdentityProviderId",
        "parameters": [
          {
            "name": "domain",
            "in": "path",
            "description": "The domain that the user will be logging in to",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The domain that the user will be logging in to",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The ID of the SAML Identity Provider to be used (may be null)",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      }
    },
    "/api/metadata/access/resources": {
      "get": {
        "tags": [
          "Application Metadata"
        ],
        "summary": "[EARLY ACCESS] Get resources available for access control",
        "description": "Get the comprehensive set of resources that are available for access control",
        "operationId": "ListAccessControlledResources",
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "description": "Optional. Expression to filter the result set. \r\n            For example, to filter on the Application, use \"application eq 'string'\"\r\n            Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "type": "string",
              "description": "Optional. Expression to filter the result set. \r\n            For example, to filter on the Application, use \"application eq 'string'\"\r\n            Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfAccessControlledResource"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfAccessControlledResource"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfAccessControlledResource"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/metadata/downloads/exceladdin": {
      "get": {
        "tags": [
          "Application Metadata"
        ],
        "summary": "[EARLY ACCESS] Download Excel Addin",
        "description": "Download the LUSID Excel Addin for Microsoft Excel. Not providing a specific value will return the latest version being returned",
        "operationId": "GetExcelAddin",
        "parameters": [
          {
            "name": "version",
            "in": "query",
            "description": "The requested version of the Excel plugin",
            "schema": {
              "type": "string",
              "description": "The requested version of the Excel plugin",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/FileResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/metadata/versions": {
      "get": {
        "tags": [
          "Application Metadata"
        ],
        "summary": "[EARLY ACCESS] Get LUSID versions",
        "description": "Get the semantic versions associated with LUSID and its ecosystem",
        "operationId": "GetLusidVersions",
        "responses": {
          "200": {
            "description": "Collection of versions associated with LUSID",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/VersionSummaryDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VersionSummaryDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/VersionSummaryDto"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/persons/{idTypeScope}/{idTypeCode}/{code}/relations": {
      "get": {
        "tags": [
          "Persons"
        ],
        "summary": "[DEPRECATED] Get Relations for Person",
        "description": "Get relations for the specified person.",
        "operationId": "GetPersonRelations",
        "parameters": [
          {
            "name": "idTypeScope",
            "in": "path",
            "description": "Scope of the person identifier type.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Scope of the person identifier type.",
              "nullable": true
            }
          },
          {
            "name": "idTypeCode",
            "in": "path",
            "description": "Code of the person identifier type.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Code of the person identifier type.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "Code of the person under specified identifier type's scope and code. This together with stated identifier type uniquely\r\n            identifies the person.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "Code of the person under specified identifier type's scope and code. This together with stated identifier type uniquely\r\n            identifies the person.",
              "nullable": true
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime or cut label at which to get relations. Defaults to the current LUSID system datetime if not specified.",
            "schema": {
              "type": "string",
              "description": "The effective datetime or cut label at which to get relations. Defaults to the current LUSID system datetime if not specified.",
              "format": "dateorcutlabel",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the person's relations. Defaults to return the latest LUSID AsAt time if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to retrieve the person's relations. Defaults to return the latest LUSID AsAt time if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the relations. Users should provide null or empty string for this field until further notice.",
            "schema": {
              "type": "string",
              "description": "Expression to filter the relations. Users should provide null or empty string for this field until further notice.",
              "nullable": true
            }
          },
          {
            "name": "identifierTypes",
            "in": "query",
            "description": "Identifiers types (as property keys) used for referencing Persons or Legal Entities. These take the format\r\n            {domain}/{scope}/{code} e.g. \"Person/CompanyDetails/Role\". They must be from the \"Person\" or \"LegalEntity\" domain.\r\n            Only identifier types stated will be used to look up relevant entities in relations. If not applicable, provide an empty array.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
              },
              "description": "Identifiers types (as property keys) used for referencing Persons or Legal Entities. These take the format\r\n            {domain}/{scope}/{code} e.g. \"Person/CompanyDetails/Role\". They must be from the \"Person\" or \"LegalEntity\" domain.\r\n            Only identifier types stated will be used to look up relevant entities in relations. If not applicable, provide an empty array.",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The relations for the specified person.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfRelation"
                },
                "example": {
                  "values": [
                    {
                      "relationDefinitionId": {
                        "scope": "PortfolioManagementTeam",
                        "code": "Traders"
                      },
                      "relatedEntityId": {
                        "scope": "UkPortfolio",
                        "code": "PortfolioId-148176"
                      },
                      "traversalDirection": "In",
                      "traversalDescription": "can trade with portfolio",
                      "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00"
                    }
                  ],
                  "links": []
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfRelation"
                },
                "example": {
                  "values": [
                    {
                      "relationDefinitionId": {
                        "scope": "PortfolioManagementTeam",
                        "code": "Traders"
                      },
                      "relatedEntityId": {
                        "scope": "UkPortfolio",
                        "code": "PortfolioId-148176"
                      },
                      "traversalDirection": "In",
                      "traversalDescription": "can trade with portfolio",
                      "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00"
                    }
                  ],
                  "links": []
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfRelation"
                },
                "example": {
                  "values": [
                    {
                      "relationDefinitionId": {
                        "scope": "PortfolioManagementTeam",
                        "code": "Traders"
                      },
                      "relatedEntityId": {
                        "scope": "UkPortfolio",
                        "code": "PortfolioId-148176"
                      },
                      "traversalDirection": "In",
                      "traversalDescription": "can trade with portfolio",
                      "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00"
                    }
                  ],
                  "links": []
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Deprecated"
      }
    },
    "/api/portfoliogroups/{scope}": {
      "post": {
        "tags": [
          "Portfolio Groups"
        ],
        "summary": "[EARLY ACCESS] Create portfolio group",
        "description": "Create a portfolio group in a specific scope.",
        "operationId": "CreatePortfolioGroup",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope that the portfolio group will be created in.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The scope that the portfolio group will be created in.",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "The definition and details of the portfolio group.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePortfolioGroupRequest"
              },
              "example": {
                "code": "MyGroupCode",
                "created": "2019-10-04T00:00:00.0000000+00:00",
                "values": [
                  {
                    "scope": "MyScope",
                    "code": "MyPortfolioCode1"
                  },
                  {
                    "scope": "MyScope",
                    "code": "MyPortfolioCode2"
                  }
                ],
                "subGroups": [
                  {
                    "scope": "MyScope",
                    "code": "MySubGroupCode"
                  }
                ],
                "properties": {},
                "displayName": "MyGroupName",
                "description": "My group description"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePortfolioGroupRequest"
              },
              "example": {
                "code": "MyGroupCode",
                "created": "2019-10-04T00:00:00.0000000+00:00",
                "values": [
                  {
                    "scope": "MyScope",
                    "code": "MyPortfolioCode1"
                  },
                  {
                    "scope": "MyScope",
                    "code": "MyPortfolioCode2"
                  }
                ],
                "subGroups": [
                  {
                    "scope": "MyScope",
                    "code": "MySubGroupCode"
                  }
                ],
                "properties": {},
                "displayName": "MyGroupName",
                "description": "My group description"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePortfolioGroupRequest"
              },
              "example": {
                "code": "MyGroupCode",
                "created": "2019-10-04T00:00:00.0000000+00:00",
                "values": [
                  {
                    "scope": "MyScope",
                    "code": "MyPortfolioCode1"
                  },
                  {
                    "scope": "MyScope",
                    "code": "MyPortfolioCode2"
                  }
                ],
                "subGroups": [
                  {
                    "scope": "MyScope",
                    "code": "MySubGroupCode"
                  }
                ],
                "properties": {},
                "displayName": "MyGroupName",
                "description": "My group description"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePortfolioGroupRequest"
              },
              "example": {
                "code": "MyGroupCode",
                "created": "2019-10-04T00:00:00.0000000+00:00",
                "values": [
                  {
                    "scope": "MyScope",
                    "code": "MyPortfolioCode1"
                  },
                  {
                    "scope": "MyScope",
                    "code": "MyPortfolioCode2"
                  }
                ],
                "subGroups": [
                  {
                    "scope": "MyScope",
                    "code": "MySubGroupCode"
                  }
                ],
                "properties": {},
                "displayName": "MyGroupName",
                "description": "My group description"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The newly created portfolio group",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioGroup"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioGroup"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioGroup"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      },
      "get": {
        "tags": [
          "Portfolio Groups"
        ],
        "summary": "[EARLY ACCESS] List portfolio groups",
        "description": "List all the portfolio groups in a single scope.",
        "operationId": "ListPortfolioGroups",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope to list the portfolio groups in.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The scope to list the portfolio groups in.",
              "nullable": true
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime at which to list the portfolio groups. Defaults to the current LUSID system datetime if not specified.",
            "schema": {
              "type": "string",
              "description": "The effective datetime at which to list the portfolio groups. Defaults to the current LUSID system datetime if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to list the portfolio groups. Defaults to return the latest version of each portfolio group if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to list the portfolio groups. Defaults to return the latest version of each portfolio group if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the result set.\r\n            For example, to filter on the Display Name, use \"displayName eq 'string'\"\r\n            Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "type": "string",
              "description": "Expression to filter the result set.\r\n            For example, to filter on the Display Name, use \"displayName eq 'string'\"\r\n            Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The portfolio groups in the specified scope",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfPortfolioGroup"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfPortfolioGroup"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfPortfolioGroup"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/portfoliogroups/{scope}/{code}": {
      "put": {
        "tags": [
          "Portfolio Groups"
        ],
        "summary": "[EARLY ACCESS] Update portfolio group",
        "description": "Update the definition of a single portfolio group. Not all elements within a portfolio group definition are modifiable\r\ndue to the potential implications for data already stored against the portfolio group.",
        "operationId": "UpdatePortfolioGroup",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the portfolio group to update the definition for.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the portfolio group to update the definition for.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the portfolio group to update the definition for. Together with the scope this uniquely identifies the portfolio group.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the portfolio group to update the definition for. Together with the scope this uniquely identifies the portfolio group.",
              "nullable": true
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime at which to update the definition.",
            "schema": {
              "type": "string",
              "description": "The effective datetime at which to update the definition.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "requestBody": {
          "description": "The updated portfolio group definition.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePortfolioGroupRequest"
              },
              "example": {
                "displayName": "MyGroupName",
                "description": "My Group Description"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePortfolioGroupRequest"
              },
              "example": {
                "displayName": "MyGroupName",
                "description": "My Group Description"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePortfolioGroupRequest"
              },
              "example": {
                "displayName": "MyGroupName",
                "description": "My Group Description"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePortfolioGroupRequest"
              },
              "example": {
                "displayName": "MyGroupName",
                "description": "My Group Description"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The updated definition of the portfolio group",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioGroup"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioGroup"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioGroup"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      },
      "delete": {
        "tags": [
          "Portfolio Groups"
        ],
        "summary": "[EARLY ACCESS] Delete portfolio group",
        "description": "Delete a single portfolio group. A portfolio group can be deleted while it still contains portfolios or sub groups.\r\nIn this case any portfolios or sub groups contained in this group will not be deleted, however they will no longer be grouped together by this portfolio group.\r\nThe deletion will be valid from the portfolio group's creation datetime, ie. the portfolio group will no longer exist at any effective datetime from the asAt datetime of deletion.",
        "operationId": "DeletePortfolioGroup",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the portfolio group to delete.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the portfolio group to delete.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the portfolio group to delete. Together with the scope this uniquely identifies the portfolio group to delete.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the portfolio group to delete. Together with the scope this uniquely identifies the portfolio group to delete.",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The datetime that the portfolio group was deleted",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      },
      "get": {
        "tags": [
          "Portfolio Groups"
        ],
        "summary": "[EARLY ACCESS] Get portfolio group",
        "description": "Retrieve the definition of a single portfolio group.",
        "operationId": "GetPortfolioGroup",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the portfolio group to retrieve the definition for.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the portfolio group to retrieve the definition for.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the portfolio group to retrieve the definition for. Together with the scope\r\n            this uniquely identifies the portfolio group.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the portfolio group to retrieve the definition for. Together with the scope\r\n            this uniquely identifies the portfolio group.",
              "nullable": true
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime at which to retrieve the portfolio group definition. Defaults to the current LUSID system datetime if not specified.",
            "schema": {
              "type": "string",
              "description": "The effective datetime at which to retrieve the portfolio group definition. Defaults to the current LUSID system datetime if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the portfolio group definition. Defaults to return\r\n            the latest version of the portfolio group definition if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to retrieve the portfolio group definition. Defaults to return\r\n            the latest version of the portfolio group definition if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The requested portfolio group definition",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioGroup"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioGroup"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioGroup"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/portfoliogroups/{scope}/{code}/commands": {
      "get": {
        "tags": [
          "Portfolio Groups"
        ],
        "summary": "[EARLY ACCESS] Get portfolio group commands",
        "description": "Gets all the commands that modified a single portfolio group.",
        "operationId": "GetPortfolioGroupCommands",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the portfolio group to retrieve the commands for.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The scope of the portfolio group to retrieve the commands for.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the portfolio group to retrieve the commands for. Together with the scope this uniquely identifies the portfolio group.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The code of the portfolio group to retrieve the commands for. Together with the scope this uniquely identifies the portfolio group.",
              "nullable": true
            }
          },
          {
            "name": "fromAsAt",
            "in": "query",
            "description": "The lower bound asAt datetime (inclusive) from which to retrieve commands. There is no lower bound if this is not specified.",
            "schema": {
              "type": "string",
              "description": "The lower bound asAt datetime (inclusive) from which to retrieve commands. There is no lower bound if this is not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "toAsAt",
            "in": "query",
            "description": "The upper bound asAt datetime (inclusive) from which to retrieve commands. There is no upper bound if this is not specified.",
            "schema": {
              "type": "string",
              "description": "The upper bound asAt datetime (inclusive) from which to retrieve commands. There is no upper bound if this is not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the result set. \r\n             For example, to filter on the User ID, use \"userId.id eq 'string'\"\r\n            Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "type": "string",
              "description": "Expression to filter the result set. \r\n             For example, to filter on the User ID, use \"userId.id eq 'string'\"\r\n            Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The commands that modified the specified portfolio group",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfProcessedCommand"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfProcessedCommand"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfProcessedCommand"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/portfoliogroups/{scope}/{code}/expansion": {
      "get": {
        "tags": [
          "Portfolio Groups"
        ],
        "summary": "[EARLY ACCESS] Get portfolio group expansion",
        "description": "List all the portfolios in a group, including all portfolios within sub groups in the group. Each portfolio will be decorated with all of its properties unless a property filter is specified.",
        "operationId": "GetPortfolioGroupExpansion",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the portfolio group to expand.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the portfolio group to expand.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the portfolio group to expand. Together with the scope this uniquely identifies the portfolio\r\n            group to expand.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the portfolio group to expand. Together with the scope this uniquely identifies the portfolio\r\n            group to expand.",
              "nullable": true
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime at which to expand the portfolio group. Defaults to the current LUSID system datetime if not specified.",
            "schema": {
              "type": "string",
              "description": "The effective datetime at which to expand the portfolio group. Defaults to the current LUSID system datetime if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to expand the portfolio group. Defaults to return the latest version of each portfolio in the group if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to expand the portfolio group. Defaults to return the latest version of each portfolio in the group if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "propertyFilter",
            "in": "query",
            "description": "The restricted list of property keys from the \"Portfolio\" domain which will be decorated onto each portfolio. These take the format {domain}/{scope}/{code} e.g. \"Portfolio/Manager/Id\".",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
              },
              "description": "The restricted list of property keys from the \"Portfolio\" domain which will be decorated onto each portfolio. These take the format {domain}/{scope}/{code} e.g. \"Portfolio/Manager/Id\".",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The expanded portfolio group",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ExpandedGroup"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExpandedGroup"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExpandedGroup"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/portfoliogroups/{scope}/{code}/holdings": {
      "get": {
        "tags": [
          "Portfolio Groups"
        ],
        "summary": "[EARLY ACCESS] Get holdings for transaction portfolios in portfolio group",
        "description": "Get the holdings of transaction portfolios in specified portfolio group.",
        "operationId": "GetHoldingsForPortfolioGroup",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the portfolio group.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the portfolio group.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the portfolio group. Together with the scope this uniquely identifies\r\n            the portfolio group.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the portfolio group. Together with the scope this uniquely identifies\r\n            the portfolio group.",
              "nullable": true
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime or cut label at which to retrieve the holdings of transaction\r\n            portfolios in the portfolio group. Defaults to the current LUSID system datetime if not specified.",
            "schema": {
              "type": "string",
              "description": "The effective datetime or cut label at which to retrieve the holdings of transaction\r\n            portfolios in the portfolio group. Defaults to the current LUSID system datetime if not specified.",
              "format": "dateorcutlabel",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the holdings of transaction portfolios in the portfolio group. Defaults\r\n            to return the latest version of the holdings if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to retrieve the holdings of transaction portfolios in the portfolio group. Defaults\r\n            to return the latest version of the holdings if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the result set. Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "type": "string",
              "description": "Expression to filter the result set. Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
              "nullable": true
            }
          },
          {
            "name": "propertyKeys",
            "in": "query",
            "description": "A list of property keys from the \"Instrument\" or \"Holding\" domain to decorate onto\r\n            the holdings. These take the format {domain}/{scope}/{code} e.g. \"Instrument/system/Name\" or \"Holding/system/Cost\".",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
              },
              "description": "A list of property keys from the \"Instrument\" or \"Holding\" domain to decorate onto\r\n            the holdings. These take the format {domain}/{scope}/{code} e.g. \"Instrument/system/Name\" or \"Holding/system/Cost\".",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "byTaxlots",
            "in": "query",
            "description": "Whether or not to expand the holdings to return the underlying tax-lots. Defaults to\r\n            False.",
            "schema": {
              "type": "boolean",
              "description": "Whether or not to expand the holdings to return the underlying tax-lots. Defaults to\r\n            False.",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The holdings of transaction portfolios in a specific version of portfolio group",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/VersionedResourceListOfPortfolioHolding"
                },
                "example": {
                  "version": {
                    "effectiveFrom": "2019-03-05T12:00:00.0000000+00:00",
                    "asAtDate": "2019-03-05T12:00:00.0000000+00:00"
                  },
                  "values": [
                    {
                      "instrumentUid": "LUID_XH4GNUEX",
                      "holdingType": "P",
                      "units": 10,
                      "settledUnits": 10,
                      "cost": {
                        "amount": 2.5,
                        "currency": "GBP"
                      },
                      "costPortfolioCcy": {
                        "amount": 2.5,
                        "currency": "GBP"
                      },
                      "currency": "ZZZ"
                    }
                  ],
                  "links": []
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VersionedResourceListOfPortfolioHolding"
                },
                "example": {
                  "version": {
                    "effectiveFrom": "2019-03-05T12:00:00.0000000+00:00",
                    "asAtDate": "2019-03-05T12:00:00.0000000+00:00"
                  },
                  "values": [
                    {
                      "instrumentUid": "LUID_XH4GNUEX",
                      "holdingType": "P",
                      "units": 10,
                      "settledUnits": 10,
                      "cost": {
                        "amount": 2.5,
                        "currency": "GBP"
                      },
                      "costPortfolioCcy": {
                        "amount": 2.5,
                        "currency": "GBP"
                      },
                      "currency": "ZZZ"
                    }
                  ],
                  "links": []
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/VersionedResourceListOfPortfolioHolding"
                },
                "example": {
                  "version": {
                    "effectiveFrom": "2019-03-05T12:00:00.0000000+00:00",
                    "asAtDate": "2019-03-05T12:00:00.0000000+00:00"
                  },
                  "values": [
                    {
                      "instrumentUid": "LUID_XH4GNUEX",
                      "holdingType": "P",
                      "units": 10,
                      "settledUnits": 10,
                      "cost": {
                        "amount": 2.5,
                        "currency": "GBP"
                      },
                      "costPortfolioCcy": {
                        "amount": 2.5,
                        "currency": "GBP"
                      },
                      "currency": "ZZZ"
                    }
                  ],
                  "links": []
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/portfoliogroups/{scope}/{code}/portfolios": {
      "post": {
        "tags": [
          "Portfolio Groups"
        ],
        "summary": "[EARLY ACCESS] Add portfolio to group",
        "description": "Add a single portfolio to a portfolio group.",
        "operationId": "AddPortfolioToGroup",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the portfolio group to add a portfolio to.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the portfolio group to add a portfolio to.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the portfolio group to add a portfolio to. Together with the scope this uniquely identifies the portfolio group.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the portfolio group to add a portfolio to. Together with the scope this uniquely identifies the portfolio group.",
              "nullable": true
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime from which the portfolio will be added to the group.",
            "schema": {
              "type": "string",
              "description": "The effective datetime from which the portfolio will be added to the group.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "requestBody": {
          "description": "The resource identifier of the portfolio to add to the portfolio group.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/ResourceId"
              },
              "example": {
                "scope": "MyScope",
                "code": "MyCode"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResourceId"
              },
              "example": {
                "scope": "MyScope",
                "code": "MyCode"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ResourceId"
              },
              "example": {
                "scope": "MyScope",
                "code": "MyCode"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ResourceId"
              },
              "example": {
                "scope": "MyScope",
                "code": "MyCode"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The portfolio group containing the newly added portfolio",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioGroup"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioGroup"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioGroup"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/portfoliogroups/{scope}/{code}/portfolios/{portfolioScope}/{portfolioCode}": {
      "delete": {
        "tags": [
          "Portfolio Groups"
        ],
        "summary": "[EARLY ACCESS] Delete portfolio from group",
        "description": "Remove a single portfolio from a portfolio group.",
        "operationId": "DeletePortfolioFromGroup",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the portfolio group to remove the portfolio from.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the portfolio group to remove the portfolio from.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the portfolio group to remove the portfolio from. Together with the scope this uniquely identifies the portfolio group.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the portfolio group to remove the portfolio from. Together with the scope this uniquely identifies the portfolio group.",
              "nullable": true
            }
          },
          {
            "name": "portfolioScope",
            "in": "path",
            "description": "The scope of the portfolio being removed from the portfolio group.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The scope of the portfolio being removed from the portfolio group.",
              "nullable": true
            }
          },
          {
            "name": "portfolioCode",
            "in": "path",
            "description": "The code of the portfolio being removed from the portfolio group. Together with the scope this uniquely identifies the portfolio to remove.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The code of the portfolio being removed from the portfolio group. Together with the scope this uniquely identifies the portfolio to remove.",
              "nullable": true
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime from which the portfolio will be removed from the portfolio group.",
            "schema": {
              "type": "string",
              "description": "The effective datetime from which the portfolio will be removed from the portfolio group.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The portfolio group with the portfolio removed from the group",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioGroup"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioGroup"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioGroup"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/portfoliogroups/{scope}/{code}/properties": {
      "get": {
        "tags": [
          "Portfolio Groups"
        ],
        "summary": "[EARLY ACCESS] Get group properties",
        "description": "List all the properties of a single portfolio group.",
        "operationId": "GetGroupProperties",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the group to list the properties for.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the group to list the properties for.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the group to list the properties for. Together with the scope this uniquely identifies the group.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the group to list the properties for. Together with the scope this uniquely identifies the group.",
              "nullable": true
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective date time or cut label at which to list the group's properties. Defaults to the current LUSID system datetime if not specified.",
            "schema": {
              "type": "string",
              "description": "The effective date time or cut label at which to list the group's properties. Defaults to the current LUSID system datetime if not specified.",
              "format": "dateorcutlabel",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt date time at which to list the group's properties. Defaults to return the latest version of each property if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt date time at which to list the group's properties. Defaults to return the latest version of each property if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The properties of the specified group",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioGroupProperties"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioGroupProperties"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioGroupProperties"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/portfoliogroups/{scope}/{code}/properties/$delete": {
      "post": {
        "tags": [
          "Portfolio Groups"
        ],
        "summary": "[EARLY ACCESS] Delete group properties",
        "description": "Delete one or more properties from a single portfolio group. If the properties are time variant then an effective date time from which the properties\r\nwill be deleted must be specified. If the properties are perpetual then it is invalid to specify an effective date time for deletion.",
        "operationId": "DeleteGroupProperties",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the group to delete properties from.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the group to delete properties from.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the group to delete properties from. Together with the scope this uniquely identifies the group.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the group to delete properties from. Together with the scope this uniquely identifies the group.",
              "nullable": true
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime or cut label at which to delete the properties.",
            "schema": {
              "type": "string",
              "description": "The effective datetime or cut label at which to delete the properties.",
              "format": "dateorcutlabel",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "The property keys of the properties to delete. These take the format\r\n            {domain}/{scope}/{code} e.g. \"PortfolioGroup/Manager/Id\". Each property must be from the \"PortfolioGroup\" domain.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
                },
                "description": "The property keys of the properties to delete. These take the format\r\n            {domain}/{scope}/{code} e.g. \"PortfolioGroup/Manager/Id\". Each property must be from the \"PortfolioGroup\" domain."
              },
              "example": [
                "PortfolioGroup/MyScope/MyPropertyName",
                "PortfolioGroup/MyScope/MyPropertyName2"
              ]
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
                },
                "description": "The property keys of the properties to delete. These take the format\r\n            {domain}/{scope}/{code} e.g. \"PortfolioGroup/Manager/Id\". Each property must be from the \"PortfolioGroup\" domain."
              },
              "example": [
                "PortfolioGroup/MyScope/MyPropertyName",
                "PortfolioGroup/MyScope/MyPropertyName2"
              ]
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
                },
                "description": "The property keys of the properties to delete. These take the format\r\n            {domain}/{scope}/{code} e.g. \"PortfolioGroup/Manager/Id\". Each property must be from the \"PortfolioGroup\" domain."
              },
              "example": [
                "PortfolioGroup/MyScope/MyPropertyName",
                "PortfolioGroup/MyScope/MyPropertyName2"
              ]
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
                },
                "description": "The property keys of the properties to delete. These take the format\r\n            {domain}/{scope}/{code} e.g. \"PortfolioGroup/Manager/Id\". Each property must be from the \"PortfolioGroup\" domain."
              },
              "example": [
                "PortfolioGroup/MyScope/MyPropertyName",
                "PortfolioGroup/MyScope/MyPropertyName2"
              ]
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The datetime that the properties were deleted from the specified group",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/portfoliogroups/{scope}/{code}/properties/$upsert": {
      "post": {
        "tags": [
          "Portfolio Groups"
        ],
        "summary": "[EARLY ACCESS] Upsert group properties",
        "description": "Update or insert one or more properties onto a single group. A property will be updated if it\r\nalready exists and inserted if it does not. All properties must be of the domain 'PortfolioGroup'.\r\n            \r\nProperties have an <i>effectiveFrom</i> datetime for which the property is valid, and an <i>effectiveUntil</i>\r\ndatetime until which the property is valid. Not supplying an <i>effectiveUntil</i> datetime results in the property being\r\nvalid indefinitely, or until the next <i>effectiveFrom</i> datetime of the property.",
        "operationId": "UpsertGroupProperties",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the group to update or insert the properties onto.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the group to update or insert the properties onto.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the group to update or insert the properties onto. Together with the scope this uniquely identifies the group.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the group to update or insert the properties onto. Together with the scope this uniquely identifies the group.",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "The properties to be updated or inserted onto the group. Each property in\r\n             the request must be keyed by its unique property key. This has the format {domain}/{scope}/{code} e.g. \"PortfolioGroup/Manager/Id\".",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/Property"
                },
                "description": "The properties to be updated or inserted onto the group. Each property in\r\n             the request must be keyed by its unique property key. This has the format {domain}/{scope}/{code} e.g. \"PortfolioGroup/Manager/Id\".",
                "nullable": true
              },
              "example": {
                "portfolioGroup/MyScope/FundManagerName": {
                  "key": "PortfolioGroup/MyScope/FundManagerName",
                  "value": {
                    "labelValue": "Smith"
                  },
                  "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00"
                },
                "portfolioGroup/MyScope/SomeProperty": {
                  "key": "PortfolioGroup/MyScope/SomeProperty",
                  "value": {
                    "labelValue": "SomeValue"
                  },
                  "effectiveFrom": "2016-01-01T00:00:00.0000000+00:00"
                },
                "portfolioGroup/MyScope/AnotherProperty": {
                  "key": "PortfolioGroup/MyScope/AnotherProperty",
                  "value": {
                    "labelValue": "AnotherValue"
                  },
                  "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00",
                  "effectiveUntil": "2020-01-01T00:00:00.0000000+00:00"
                },
                "portfolioGroup/MyScope/ReBalanceInterval": {
                  "key": "PortfolioGroup/MyScope/ReBalanceInterval",
                  "value": {
                    "metricValue": {
                      "value": 30,
                      "unit": "Days"
                    }
                  }
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/Property"
                },
                "description": "The properties to be updated or inserted onto the group. Each property in\r\n             the request must be keyed by its unique property key. This has the format {domain}/{scope}/{code} e.g. \"PortfolioGroup/Manager/Id\".",
                "nullable": true
              },
              "example": {
                "portfolioGroup/MyScope/FundManagerName": {
                  "key": "PortfolioGroup/MyScope/FundManagerName",
                  "value": {
                    "labelValue": "Smith"
                  },
                  "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00"
                },
                "portfolioGroup/MyScope/SomeProperty": {
                  "key": "PortfolioGroup/MyScope/SomeProperty",
                  "value": {
                    "labelValue": "SomeValue"
                  },
                  "effectiveFrom": "2016-01-01T00:00:00.0000000+00:00"
                },
                "portfolioGroup/MyScope/AnotherProperty": {
                  "key": "PortfolioGroup/MyScope/AnotherProperty",
                  "value": {
                    "labelValue": "AnotherValue"
                  },
                  "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00",
                  "effectiveUntil": "2020-01-01T00:00:00.0000000+00:00"
                },
                "portfolioGroup/MyScope/ReBalanceInterval": {
                  "key": "PortfolioGroup/MyScope/ReBalanceInterval",
                  "value": {
                    "metricValue": {
                      "value": 30,
                      "unit": "Days"
                    }
                  }
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/Property"
                },
                "description": "The properties to be updated or inserted onto the group. Each property in\r\n             the request must be keyed by its unique property key. This has the format {domain}/{scope}/{code} e.g. \"PortfolioGroup/Manager/Id\".",
                "nullable": true
              },
              "example": {
                "portfolioGroup/MyScope/FundManagerName": {
                  "key": "PortfolioGroup/MyScope/FundManagerName",
                  "value": {
                    "labelValue": "Smith"
                  },
                  "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00"
                },
                "portfolioGroup/MyScope/SomeProperty": {
                  "key": "PortfolioGroup/MyScope/SomeProperty",
                  "value": {
                    "labelValue": "SomeValue"
                  },
                  "effectiveFrom": "2016-01-01T00:00:00.0000000+00:00"
                },
                "portfolioGroup/MyScope/AnotherProperty": {
                  "key": "PortfolioGroup/MyScope/AnotherProperty",
                  "value": {
                    "labelValue": "AnotherValue"
                  },
                  "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00",
                  "effectiveUntil": "2020-01-01T00:00:00.0000000+00:00"
                },
                "portfolioGroup/MyScope/ReBalanceInterval": {
                  "key": "PortfolioGroup/MyScope/ReBalanceInterval",
                  "value": {
                    "metricValue": {
                      "value": 30,
                      "unit": "Days"
                    }
                  }
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/Property"
                },
                "description": "The properties to be updated or inserted onto the group. Each property in\r\n             the request must be keyed by its unique property key. This has the format {domain}/{scope}/{code} e.g. \"PortfolioGroup/Manager/Id\".",
                "nullable": true
              },
              "example": {
                "portfolioGroup/MyScope/FundManagerName": {
                  "key": "PortfolioGroup/MyScope/FundManagerName",
                  "value": {
                    "labelValue": "Smith"
                  },
                  "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00"
                },
                "portfolioGroup/MyScope/SomeProperty": {
                  "key": "PortfolioGroup/MyScope/SomeProperty",
                  "value": {
                    "labelValue": "SomeValue"
                  },
                  "effectiveFrom": "2016-01-01T00:00:00.0000000+00:00"
                },
                "portfolioGroup/MyScope/AnotherProperty": {
                  "key": "PortfolioGroup/MyScope/AnotherProperty",
                  "value": {
                    "labelValue": "AnotherValue"
                  },
                  "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00",
                  "effectiveUntil": "2020-01-01T00:00:00.0000000+00:00"
                },
                "portfolioGroup/MyScope/ReBalanceInterval": {
                  "key": "PortfolioGroup/MyScope/ReBalanceInterval",
                  "value": {
                    "metricValue": {
                      "value": 30,
                      "unit": "Days"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The updated or inserted properties",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioGroupProperties"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioGroupProperties"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioGroupProperties"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/portfoliogroups/{scope}/{code}/relations": {
      "get": {
        "tags": [
          "Portfolio Groups"
        ],
        "summary": "[DEPRECATED] Get Relations for Portfolio Group",
        "description": "Get relations for the specified Portfolio Group",
        "operationId": "GetPortfolioGroupRelations",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the portfolio group.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the portfolio group.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the portfolio group. Together with the scope this uniquely identifies\r\n            the portfolio group.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the portfolio group. Together with the scope this uniquely identifies\r\n            the portfolio group.",
              "nullable": true
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime or cut label at which to retrieve relations. Defaults to the current LUSID system datetime if not specified.",
            "schema": {
              "type": "string",
              "description": "The effective datetime or cut label at which to retrieve relations. Defaults to the current LUSID system datetime if not specified.",
              "format": "dateorcutlabel",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve relations. Defaults to return the latest LUSID AsAt time if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to retrieve relations. Defaults to return the latest LUSID AsAt time if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the relations. Users should provide null or empty string for this field until further notice.",
            "schema": {
              "type": "string",
              "description": "Expression to filter the relations. Users should provide null or empty string for this field until further notice.",
              "nullable": true
            }
          },
          {
            "name": "identifierTypes",
            "in": "query",
            "description": "Identifiers types (as property keys) used for referencing Persons or Legal Entities. These take the format\r\n            {domain}/{scope}/{code} e.g. \"Person/CompanyDetails/Role\". They must be from the \"Person\" or \"LegalEntity\" domain.\r\n            Only identifier types stated will be used to look up relevant entities in relations. If not applicable, provide an empty array.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
              },
              "description": "Identifiers types (as property keys) used for referencing Persons or Legal Entities. These take the format\r\n            {domain}/{scope}/{code} e.g. \"Person/CompanyDetails/Role\". They must be from the \"Person\" or \"LegalEntity\" domain.\r\n            Only identifier types stated will be used to look up relevant entities in relations. If not applicable, provide an empty array.",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The relations for the specific portfolio group.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfRelation"
                },
                "example": {
                  "values": [
                    {
                      "relationDefinitionId": {
                        "scope": "PortfolioManagementTeam",
                        "code": "Traders"
                      },
                      "relatedEntityId": {
                        "entityType": "Person",
                        "idTypeScope": "HrSystem1",
                        "idTypeCode": "InternalId",
                        "code": "XY10001111"
                      },
                      "traversalDirection": "Out",
                      "traversalDescription": "can be traded by",
                      "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00"
                    }
                  ],
                  "links": []
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfRelation"
                },
                "example": {
                  "values": [
                    {
                      "relationDefinitionId": {
                        "scope": "PortfolioManagementTeam",
                        "code": "Traders"
                      },
                      "relatedEntityId": {
                        "entityType": "Person",
                        "idTypeScope": "HrSystem1",
                        "idTypeCode": "InternalId",
                        "code": "XY10001111"
                      },
                      "traversalDirection": "Out",
                      "traversalDescription": "can be traded by",
                      "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00"
                    }
                  ],
                  "links": []
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfRelation"
                },
                "example": {
                  "values": [
                    {
                      "relationDefinitionId": {
                        "scope": "PortfolioManagementTeam",
                        "code": "Traders"
                      },
                      "relatedEntityId": {
                        "entityType": "Person",
                        "idTypeScope": "HrSystem1",
                        "idTypeCode": "InternalId",
                        "code": "XY10001111"
                      },
                      "traversalDirection": "Out",
                      "traversalDescription": "can be traded by",
                      "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00"
                    }
                  ],
                  "links": []
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Deprecated"
      }
    },
    "/api/portfoliogroups/{scope}/{code}/subgroups": {
      "post": {
        "tags": [
          "Portfolio Groups"
        ],
        "summary": "[EARLY ACCESS] Add sub group to group",
        "description": "Add a portfolio group to a portfolio group as a sub group.",
        "operationId": "AddSubGroupToGroup",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the portfolio group to add a portfolio group to.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the portfolio group to add a portfolio group to.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the portfolio group to add a portfolio group to. Together with the scope this uniquely identifies the portfolio group.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the portfolio group to add a portfolio group to. Together with the scope this uniquely identifies the portfolio group.",
              "nullable": true
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime from which the sub group will be added to the group.",
            "schema": {
              "type": "string",
              "description": "The effective datetime from which the sub group will be added to the group.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "requestBody": {
          "description": "The resource identifier of the portfolio group to add to the portfolio group as a sub group.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/ResourceId"
              },
              "example": {
                "scope": "MyScope",
                "code": "MyCode"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResourceId"
              },
              "example": {
                "scope": "MyScope",
                "code": "MyCode"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ResourceId"
              },
              "example": {
                "scope": "MyScope",
                "code": "MyCode"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ResourceId"
              },
              "example": {
                "scope": "MyScope",
                "code": "MyCode"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The portfolio group containing the newly added portfolio group as a sub group",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioGroup"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioGroup"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioGroup"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/portfoliogroups/{scope}/{code}/subgroups/{subgroupScope}/{subgroupCode}": {
      "delete": {
        "tags": [
          "Portfolio Groups"
        ],
        "summary": "[EARLY ACCESS] Delete sub group from group",
        "description": "Remove a single portfolio group (sub group) from a portfolio group.",
        "operationId": "DeleteSubGroupFromGroup",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the portfolio group to remove the sub group from.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the portfolio group to remove the sub group from.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the portfolio group to remove the sub group from. Together with the scope this uniquely identifies the portfolio group.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the portfolio group to remove the sub group from. Together with the scope this uniquely identifies the portfolio group.",
              "nullable": true
            }
          },
          {
            "name": "subgroupScope",
            "in": "path",
            "description": "The scope of the sub group to remove from the portfolio group.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The scope of the sub group to remove from the portfolio group.",
              "nullable": true
            }
          },
          {
            "name": "subgroupCode",
            "in": "path",
            "description": "The code of the sub group to remove from the portfolio group. Together with the scope this uniquely identifies the sub group.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The code of the sub group to remove from the portfolio group. Together with the scope this uniquely identifies the sub group.",
              "nullable": true
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime from which the sub group will be removed from the portfolio group.",
            "schema": {
              "type": "string",
              "description": "The effective datetime from which the sub group will be removed from the portfolio group.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The portfolio group with the sub group removed from the group",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioGroup"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioGroup"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioGroup"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/portfoliogroups/{scope}/{code}/transactions": {
      "get": {
        "tags": [
          "Portfolio Groups"
        ],
        "summary": "[EARLY ACCESS] Get transactions for transaction portfolios in a portfolio group",
        "description": "Get transactions for transaction portfolios in a portfolio group over a given interval of effective time. \r\n\r\nWhen the specified portfolio in a portfolio group is a derived transaction portfolio, the returned set of transactions is the\r\nunion set of all transactions of the parent (and any grandparents etc.) and the specified derived transaction portfolio itself.",
        "operationId": "GetTransactionsForPortfolioGroup",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the portfolio group.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the portfolio group.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the portfolio group. Together with the scope this uniquely identifies\r\n            the portfolio group.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the portfolio group. Together with the scope this uniquely identifies\r\n            the portfolio group.",
              "nullable": true
            }
          },
          {
            "name": "fromTransactionDate",
            "in": "query",
            "description": "The lower bound effective datetime or cut label (inclusive) from which to retrieve the transactions.\r\n            There is no lower bound if this is not specified.",
            "schema": {
              "type": "string",
              "description": "The lower bound effective datetime or cut label (inclusive) from which to retrieve the transactions.\r\n            There is no lower bound if this is not specified.",
              "format": "dateorcutlabel",
              "nullable": true
            }
          },
          {
            "name": "toTransactionDate",
            "in": "query",
            "description": "The upper bound effective datetime or cut label (inclusive) from which to retrieve transactions.\r\n            There is no upper bound if this is not specified.",
            "schema": {
              "type": "string",
              "description": "The upper bound effective datetime or cut label (inclusive) from which to retrieve transactions.\r\n            There is no upper bound if this is not specified.",
              "format": "dateorcutlabel",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the transactions. Defaults to return the latest version\r\n            of each transaction if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to retrieve the transactions. Defaults to return the latest version\r\n            of each transaction if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the result set. \r\n            For example, to filter on the Transaction Type, use \"type eq 'Buy'\"\r\n            Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "type": "string",
              "description": "Expression to filter the result set. \r\n            For example, to filter on the Transaction Type, use \"type eq 'Buy'\"\r\n            Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
              "nullable": true
            }
          },
          {
            "name": "propertyKeys",
            "in": "query",
            "description": "A list of property keys from the \"Instrument\" or \"Transaction\" domain to decorate onto\r\n            the transactions. These take the format {domain}/{scope}/{code} e.g. \"Instrument/system/Name\" or\r\n            \"Transaction/strategy/quantsignal\".",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
              },
              "description": "A list of property keys from the \"Instrument\" or \"Transaction\" domain to decorate onto\r\n            the transactions. These take the format {domain}/{scope}/{code} e.g. \"Instrument/system/Name\" or\r\n            \"Transaction/strategy/quantsignal\".",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The requested transactions from transaction portfolios in the specified portfolio group",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/VersionedResourceListOfTransaction"
                },
                "example": {
                  "version": {
                    "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00",
                    "asAtDate": "2018-03-04T23:50:00.0000000+00:00"
                  },
                  "values": [
                    {
                      "transactionId": "TXN-00001",
                      "type": "Buy",
                      "instrumentIdentifiers": {
                        "instrument/default/RIC": "RIC.L"
                      },
                      "instrumentUid": "LUID_1C7YTL5M",
                      "transactionDate": "2018-08-04T00:00:00.0000000+00:00",
                      "settlementDate": "2018-08-06T00:00:00.0000000+00:00",
                      "units": 1000,
                      "transactionPrice": {
                        "price": 88.8,
                        "type": "Price"
                      },
                      "totalConsideration": {
                        "amount": 88800,
                        "currency": "USD"
                      },
                      "properties": {
                        "transaction/default/TradeToPortfolioRate": {
                          "key": "Transaction/default/TradeToPortfolioRate",
                          "value": {
                            "metricValue": {
                              "value": 0.765
                            }
                          }
                        },
                        "transaction/default/SourcePortfolioId": {
                          "key": "Transaction/default/SourcePortfolioId",
                          "value": {
                            "labelValue": "DEMO-PORTFOLIO-ID"
                          }
                        },
                        "transaction/default/SourcePortfolioScope": {
                          "key": "Transaction/default/SourcePortfolioScope",
                          "value": {
                            "labelValue": "DEMO-SCOPE"
                          }
                        }
                      },
                      "source": "",
                      "entryDateTime": "2018-03-04T23:50:00.0000000+00:00"
                    }
                  ],
                  "href": "http://example.com",
                  "links": []
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VersionedResourceListOfTransaction"
                },
                "example": {
                  "version": {
                    "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00",
                    "asAtDate": "2018-03-04T23:50:00.0000000+00:00"
                  },
                  "values": [
                    {
                      "transactionId": "TXN-00001",
                      "type": "Buy",
                      "instrumentIdentifiers": {
                        "instrument/default/RIC": "RIC.L"
                      },
                      "instrumentUid": "LUID_1C7YTL5M",
                      "transactionDate": "2018-08-04T00:00:00.0000000+00:00",
                      "settlementDate": "2018-08-06T00:00:00.0000000+00:00",
                      "units": 1000,
                      "transactionPrice": {
                        "price": 88.8,
                        "type": "Price"
                      },
                      "totalConsideration": {
                        "amount": 88800,
                        "currency": "USD"
                      },
                      "properties": {
                        "transaction/default/TradeToPortfolioRate": {
                          "key": "Transaction/default/TradeToPortfolioRate",
                          "value": {
                            "metricValue": {
                              "value": 0.765
                            }
                          }
                        },
                        "transaction/default/SourcePortfolioId": {
                          "key": "Transaction/default/SourcePortfolioId",
                          "value": {
                            "labelValue": "DEMO-PORTFOLIO-ID"
                          }
                        },
                        "transaction/default/SourcePortfolioScope": {
                          "key": "Transaction/default/SourcePortfolioScope",
                          "value": {
                            "labelValue": "DEMO-SCOPE"
                          }
                        }
                      },
                      "source": "",
                      "entryDateTime": "2018-03-04T23:50:00.0000000+00:00"
                    }
                  ],
                  "href": "http://example.com",
                  "links": []
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/VersionedResourceListOfTransaction"
                },
                "example": {
                  "version": {
                    "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00",
                    "asAtDate": "2018-03-04T23:50:00.0000000+00:00"
                  },
                  "values": [
                    {
                      "transactionId": "TXN-00001",
                      "type": "Buy",
                      "instrumentIdentifiers": {
                        "instrument/default/RIC": "RIC.L"
                      },
                      "instrumentUid": "LUID_1C7YTL5M",
                      "transactionDate": "2018-08-04T00:00:00.0000000+00:00",
                      "settlementDate": "2018-08-06T00:00:00.0000000+00:00",
                      "units": 1000,
                      "transactionPrice": {
                        "price": 88.8,
                        "type": "Price"
                      },
                      "totalConsideration": {
                        "amount": 88800,
                        "currency": "USD"
                      },
                      "properties": {
                        "transaction/default/TradeToPortfolioRate": {
                          "key": "Transaction/default/TradeToPortfolioRate",
                          "value": {
                            "metricValue": {
                              "value": 0.765
                            }
                          }
                        },
                        "transaction/default/SourcePortfolioId": {
                          "key": "Transaction/default/SourcePortfolioId",
                          "value": {
                            "labelValue": "DEMO-PORTFOLIO-ID"
                          }
                        },
                        "transaction/default/SourcePortfolioScope": {
                          "key": "Transaction/default/SourcePortfolioScope",
                          "value": {
                            "labelValue": "DEMO-SCOPE"
                          }
                        }
                      },
                      "source": "",
                      "entryDateTime": "2018-03-04T23:50:00.0000000+00:00"
                    }
                  ],
                  "href": "http://example.com",
                  "links": []
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/portfoliogroups/{scope}/{code}/transactions/$build": {
      "post": {
        "tags": [
          "Portfolio Groups"
        ],
        "summary": "[EARLY ACCESS] Build transactions for transaction portfolios in a portfolio group",
        "description": "Build transactions for transaction portfolios in a portfolio group over a given interval of effective time. \r\n\r\nWhen the specified portfolio in a portfolio group is a derived transaction portfolio, the returned set of transactions is the\r\nunion set of all transactions of the parent (and any grandparents etc.) and the specified derived transaction portfolio itself.",
        "operationId": "BuildTransactionsForPortfolioGroup",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the portfolio group.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the portfolio group.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the portfolio group. Together with the scope this uniquely identifies\r\n            the portfolio group.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the portfolio group. Together with the scope this uniquely identifies\r\n            the portfolio group.",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to build the transactions. Defaults to return the latest\r\n            version of each transaction if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to build the transactions. Defaults to return the latest\r\n            version of each transaction if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the result set.\r\n            For example, to filter on the Transaction Type, use \"type eq 'Buy'\"\r\n            Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "type": "string",
              "description": "Expression to filter the result set.\r\n            For example, to filter on the Transaction Type, use \"type eq 'Buy'\"\r\n            Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
              "nullable": true
            }
          },
          {
            "name": "propertyKeys",
            "in": "query",
            "description": "A list of property keys from the \"Instrument\" or \"Transaction\" domain to decorate onto\r\n            the transactions. These take the format {domain}/{scope}/{code} e.g. \"Instrument/system/Name\" or\r\n            \"Transaction/strategy/quantsignal\".",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
              },
              "description": "A list of property keys from the \"Instrument\" or \"Transaction\" domain to decorate onto\r\n            the transactions. These take the format {domain}/{scope}/{code} e.g. \"Instrument/system/Name\" or\r\n            \"Transaction/strategy/quantsignal\".",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "requestBody": {
          "description": "The query queryParameters which control how the output transactions are built.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/TransactionQueryParameters"
              },
              "example": {
                "startDate": "2018-03-05T00:00:00.0000000+00:00",
                "endDate": "2018-03-19T00:00:00.0000000+00:00",
                "queryMode": "TradeDate",
                "showCancelledTransactions": false
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TransactionQueryParameters"
              },
              "example": {
                "startDate": "2018-03-05T00:00:00.0000000+00:00",
                "endDate": "2018-03-19T00:00:00.0000000+00:00",
                "queryMode": "TradeDate",
                "showCancelledTransactions": false
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/TransactionQueryParameters"
              },
              "example": {
                "startDate": "2018-03-05T00:00:00.0000000+00:00",
                "endDate": "2018-03-19T00:00:00.0000000+00:00",
                "queryMode": "TradeDate",
                "showCancelledTransactions": false
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/TransactionQueryParameters"
              },
              "example": {
                "startDate": "2018-03-05T00:00:00.0000000+00:00",
                "endDate": "2018-03-19T00:00:00.0000000+00:00",
                "queryMode": "TradeDate",
                "showCancelledTransactions": false
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The requested transactions from transaction portfolios in the specified portfolio group",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/VersionedResourceListOfOutputTransaction"
                },
                "example": {
                  "version": {
                    "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00",
                    "asAtDate": "2018-03-04T23:50:00.0000000+00:00"
                  },
                  "values": [
                    {
                      "transactionId": "TXN-00001",
                      "type": "Buy",
                      "description": "Purchase",
                      "instrumentIdentifiers": {
                        "instrument/default/RIC": "RIC.L"
                      },
                      "instrumentUid": "LUID_JLH24106",
                      "transactionDate": "2018-08-04T00:00:00.0000000+00:00",
                      "settlementDate": "2018-08-06T00:00:00.0000000+00:00",
                      "units": 1000,
                      "transactionAmount": 88800,
                      "transactionPrice": {
                        "price": 88.8,
                        "type": "Price"
                      },
                      "totalConsideration": {
                        "amount": 88800,
                        "currency": "USD"
                      },
                      "exchangeRate": 1,
                      "transactionToPortfolioRate": 0.7648,
                      "transactionCurrency": "USD",
                      "properties": {
                        "transaction/default/TradeToPortfolioRate": {
                          "key": "Transaction/default/TradeToPortfolioRate",
                          "value": {
                            "metricValue": {
                              "value": 0.765
                            }
                          }
                        },
                        "transaction/default/SourcePortfolioId": {
                          "key": "Transaction/default/SourcePortfolioId",
                          "value": {
                            "labelValue": "DEMO-PORTFOLIO-ID"
                          }
                        },
                        "transaction/default/SourcePortfolioScope": {
                          "key": "Transaction/default/SourcePortfolioScope",
                          "value": {
                            "labelValue": "DEMO-SCOPE"
                          }
                        }
                      },
                      "source": "",
                      "transactionStatus": "Cancelled",
                      "entryDateTime": "2018-08-04T12:22:06.0000000+00:00",
                      "cancelDateTime": "2018-08-04T12:25:14.0000000+00:00"
                    },
                    {
                      "transactionId": "TXN-00002",
                      "type": "Sell",
                      "description": "Sale",
                      "instrumentIdentifiers": {
                        "instrument/default/ClientInternal": "INT:00024106"
                      },
                      "instrumentUid": "LUID_OI5JX1V7",
                      "transactionDate": "2018-08-07T00:00:00.0000000+00:00",
                      "settlementDate": "2018-08-10T00:00:00.0000000+00:00",
                      "units": 10000,
                      "transactionAmount": 1470100,
                      "transactionPrice": {
                        "price": 147.01,
                        "type": "Price"
                      },
                      "totalConsideration": {
                        "amount": 1470100,
                        "currency": "USD"
                      },
                      "exchangeRate": 1,
                      "transactionToPortfolioRate": 0.772,
                      "transactionCurrency": "USD",
                      "properties": {
                        "transaction/default/TradeToPortfolioRate": {
                          "key": "Transaction/default/TradeToPortfolioRate",
                          "value": {
                            "metricValue": {
                              "value": 0.772
                            }
                          }
                        },
                        "transaction/default/SourcePortfolioId": {
                          "key": "Transaction/default/SourcePortfolioId",
                          "value": {
                            "labelValue": "DEMO-PORTFOLIO-ID"
                          }
                        },
                        "transaction/default/SourcePortfolioScope": {
                          "key": "Transaction/default/SourcePortfolioScope",
                          "value": {
                            "labelValue": "DEMO-SCOPE"
                          }
                        },
                        "transaction/default/ResultantHolding": {
                          "key": "Transaction/default/ResultantHolding",
                          "value": {
                            "metricValue": {
                              "value": 3500
                            }
                          }
                        }
                      },
                      "source": "",
                      "transactionStatus": "Active",
                      "entryDateTime": "2018-08-07T10:30:12.0000000+00:00",
                      "realisedGainLoss": [
                        {
                          "instrumentUid": "LUID_OI5JX1V7",
                          "units": 4500,
                          "purchaseTradeDate": "2018-08-02T00:00:00.0000000+00:00",
                          "purchaseSettlementDate": "2018-08-05T00:00:00.0000000+00:00",
                          "purchasePrice": 142.96,
                          "costTradeCcy": {
                            "amount": 643320,
                            "currency": "USD"
                          },
                          "costPortfolioCcy": {
                            "amount": 493619.44,
                            "currency": "GBP"
                          },
                          "realisedTradeCcy": {
                            "amount": 18225,
                            "currency": "USD"
                          },
                          "realisedTotal": {
                            "amount": 17093.3,
                            "currency": "GBP"
                          },
                          "realisedMarket": {
                            "amount": 14069.7,
                            "currency": "GBP"
                          },
                          "realisedCurrency": {
                            "amount": 3023.6,
                            "currency": "GBP"
                          }
                        },
                        {
                          "instrumentUid": "LUID_OI5JX1V7",
                          "units": 4500,
                          "purchaseTradeDate": "2018-08-03T00:00:00.0000000+00:00",
                          "purchaseSettlementDate": "2018-08-06T00:00:00.0000000+00:00",
                          "purchasePrice": 147.7,
                          "costTradeCcy": {
                            "amount": 664650,
                            "currency": "USD"
                          },
                          "costPortfolioCcy": {
                            "amount": 510517.67,
                            "currency": "GBP"
                          },
                          "realisedTradeCcy": {
                            "amount": -3105,
                            "currency": "USD"
                          },
                          "realisedTotal": {
                            "amount": 195.07,
                            "currency": "GBP"
                          },
                          "realisedMarket": {
                            "amount": -2397.06,
                            "currency": "GBP"
                          },
                          "realisedCurrency": {
                            "amount": 2592.13,
                            "currency": "GBP"
                          }
                        },
                        {
                          "instrumentUid": "LUID_OI5JX1V7",
                          "units": 1000,
                          "purchaseTradeDate": "2018-08-06T00:00:00.0000000+00:00",
                          "purchaseSettlementDate": "2018-08-08T00:00:00.0000000+00:00",
                          "purchasePrice": 146.03,
                          "costTradeCcy": {
                            "amount": 146030,
                            "currency": "USD"
                          },
                          "costPortfolioCcy": {
                            "amount": 112851.98,
                            "currency": "GBP"
                          },
                          "realisedTradeCcy": {
                            "amount": 980,
                            "currency": "USD"
                          },
                          "realisedTotal": {
                            "amount": 639.74,
                            "currency": "GBP"
                          },
                          "realisedMarket": {
                            "amount": 756.56,
                            "currency": "GBP"
                          },
                          "realisedCurrency": {
                            "amount": -116.82,
                            "currency": "GBP"
                          }
                        }
                      ]
                    }
                  ],
                  "href": "http://example.com",
                  "links": []
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VersionedResourceListOfOutputTransaction"
                },
                "example": {
                  "version": {
                    "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00",
                    "asAtDate": "2018-03-04T23:50:00.0000000+00:00"
                  },
                  "values": [
                    {
                      "transactionId": "TXN-00001",
                      "type": "Buy",
                      "description": "Purchase",
                      "instrumentIdentifiers": {
                        "instrument/default/RIC": "RIC.L"
                      },
                      "instrumentUid": "LUID_JLH24106",
                      "transactionDate": "2018-08-04T00:00:00.0000000+00:00",
                      "settlementDate": "2018-08-06T00:00:00.0000000+00:00",
                      "units": 1000,
                      "transactionAmount": 88800,
                      "transactionPrice": {
                        "price": 88.8,
                        "type": "Price"
                      },
                      "totalConsideration": {
                        "amount": 88800,
                        "currency": "USD"
                      },
                      "exchangeRate": 1,
                      "transactionToPortfolioRate": 0.7648,
                      "transactionCurrency": "USD",
                      "properties": {
                        "transaction/default/TradeToPortfolioRate": {
                          "key": "Transaction/default/TradeToPortfolioRate",
                          "value": {
                            "metricValue": {
                              "value": 0.765
                            }
                          }
                        },
                        "transaction/default/SourcePortfolioId": {
                          "key": "Transaction/default/SourcePortfolioId",
                          "value": {
                            "labelValue": "DEMO-PORTFOLIO-ID"
                          }
                        },
                        "transaction/default/SourcePortfolioScope": {
                          "key": "Transaction/default/SourcePortfolioScope",
                          "value": {
                            "labelValue": "DEMO-SCOPE"
                          }
                        }
                      },
                      "source": "",
                      "transactionStatus": "Cancelled",
                      "entryDateTime": "2018-08-04T12:22:06.0000000+00:00",
                      "cancelDateTime": "2018-08-04T12:25:14.0000000+00:00"
                    },
                    {
                      "transactionId": "TXN-00002",
                      "type": "Sell",
                      "description": "Sale",
                      "instrumentIdentifiers": {
                        "instrument/default/ClientInternal": "INT:00024106"
                      },
                      "instrumentUid": "LUID_OI5JX1V7",
                      "transactionDate": "2018-08-07T00:00:00.0000000+00:00",
                      "settlementDate": "2018-08-10T00:00:00.0000000+00:00",
                      "units": 10000,
                      "transactionAmount": 1470100,
                      "transactionPrice": {
                        "price": 147.01,
                        "type": "Price"
                      },
                      "totalConsideration": {
                        "amount": 1470100,
                        "currency": "USD"
                      },
                      "exchangeRate": 1,
                      "transactionToPortfolioRate": 0.772,
                      "transactionCurrency": "USD",
                      "properties": {
                        "transaction/default/TradeToPortfolioRate": {
                          "key": "Transaction/default/TradeToPortfolioRate",
                          "value": {
                            "metricValue": {
                              "value": 0.772
                            }
                          }
                        },
                        "transaction/default/SourcePortfolioId": {
                          "key": "Transaction/default/SourcePortfolioId",
                          "value": {
                            "labelValue": "DEMO-PORTFOLIO-ID"
                          }
                        },
                        "transaction/default/SourcePortfolioScope": {
                          "key": "Transaction/default/SourcePortfolioScope",
                          "value": {
                            "labelValue": "DEMO-SCOPE"
                          }
                        },
                        "transaction/default/ResultantHolding": {
                          "key": "Transaction/default/ResultantHolding",
                          "value": {
                            "metricValue": {
                              "value": 3500
                            }
                          }
                        }
                      },
                      "source": "",
                      "transactionStatus": "Active",
                      "entryDateTime": "2018-08-07T10:30:12.0000000+00:00",
                      "realisedGainLoss": [
                        {
                          "instrumentUid": "LUID_OI5JX1V7",
                          "units": 4500,
                          "purchaseTradeDate": "2018-08-02T00:00:00.0000000+00:00",
                          "purchaseSettlementDate": "2018-08-05T00:00:00.0000000+00:00",
                          "purchasePrice": 142.96,
                          "costTradeCcy": {
                            "amount": 643320,
                            "currency": "USD"
                          },
                          "costPortfolioCcy": {
                            "amount": 493619.44,
                            "currency": "GBP"
                          },
                          "realisedTradeCcy": {
                            "amount": 18225,
                            "currency": "USD"
                          },
                          "realisedTotal": {
                            "amount": 17093.3,
                            "currency": "GBP"
                          },
                          "realisedMarket": {
                            "amount": 14069.7,
                            "currency": "GBP"
                          },
                          "realisedCurrency": {
                            "amount": 3023.6,
                            "currency": "GBP"
                          }
                        },
                        {
                          "instrumentUid": "LUID_OI5JX1V7",
                          "units": 4500,
                          "purchaseTradeDate": "2018-08-03T00:00:00.0000000+00:00",
                          "purchaseSettlementDate": "2018-08-06T00:00:00.0000000+00:00",
                          "purchasePrice": 147.7,
                          "costTradeCcy": {
                            "amount": 664650,
                            "currency": "USD"
                          },
                          "costPortfolioCcy": {
                            "amount": 510517.67,
                            "currency": "GBP"
                          },
                          "realisedTradeCcy": {
                            "amount": -3105,
                            "currency": "USD"
                          },
                          "realisedTotal": {
                            "amount": 195.07,
                            "currency": "GBP"
                          },
                          "realisedMarket": {
                            "amount": -2397.06,
                            "currency": "GBP"
                          },
                          "realisedCurrency": {
                            "amount": 2592.13,
                            "currency": "GBP"
                          }
                        },
                        {
                          "instrumentUid": "LUID_OI5JX1V7",
                          "units": 1000,
                          "purchaseTradeDate": "2018-08-06T00:00:00.0000000+00:00",
                          "purchaseSettlementDate": "2018-08-08T00:00:00.0000000+00:00",
                          "purchasePrice": 146.03,
                          "costTradeCcy": {
                            "amount": 146030,
                            "currency": "USD"
                          },
                          "costPortfolioCcy": {
                            "amount": 112851.98,
                            "currency": "GBP"
                          },
                          "realisedTradeCcy": {
                            "amount": 980,
                            "currency": "USD"
                          },
                          "realisedTotal": {
                            "amount": 639.74,
                            "currency": "GBP"
                          },
                          "realisedMarket": {
                            "amount": 756.56,
                            "currency": "GBP"
                          },
                          "realisedCurrency": {
                            "amount": -116.82,
                            "currency": "GBP"
                          }
                        }
                      ]
                    }
                  ],
                  "href": "http://example.com",
                  "links": []
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/VersionedResourceListOfOutputTransaction"
                },
                "example": {
                  "version": {
                    "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00",
                    "asAtDate": "2018-03-04T23:50:00.0000000+00:00"
                  },
                  "values": [
                    {
                      "transactionId": "TXN-00001",
                      "type": "Buy",
                      "description": "Purchase",
                      "instrumentIdentifiers": {
                        "instrument/default/RIC": "RIC.L"
                      },
                      "instrumentUid": "LUID_JLH24106",
                      "transactionDate": "2018-08-04T00:00:00.0000000+00:00",
                      "settlementDate": "2018-08-06T00:00:00.0000000+00:00",
                      "units": 1000,
                      "transactionAmount": 88800,
                      "transactionPrice": {
                        "price": 88.8,
                        "type": "Price"
                      },
                      "totalConsideration": {
                        "amount": 88800,
                        "currency": "USD"
                      },
                      "exchangeRate": 1,
                      "transactionToPortfolioRate": 0.7648,
                      "transactionCurrency": "USD",
                      "properties": {
                        "transaction/default/TradeToPortfolioRate": {
                          "key": "Transaction/default/TradeToPortfolioRate",
                          "value": {
                            "metricValue": {
                              "value": 0.765
                            }
                          }
                        },
                        "transaction/default/SourcePortfolioId": {
                          "key": "Transaction/default/SourcePortfolioId",
                          "value": {
                            "labelValue": "DEMO-PORTFOLIO-ID"
                          }
                        },
                        "transaction/default/SourcePortfolioScope": {
                          "key": "Transaction/default/SourcePortfolioScope",
                          "value": {
                            "labelValue": "DEMO-SCOPE"
                          }
                        }
                      },
                      "source": "",
                      "transactionStatus": "Cancelled",
                      "entryDateTime": "2018-08-04T12:22:06.0000000+00:00",
                      "cancelDateTime": "2018-08-04T12:25:14.0000000+00:00"
                    },
                    {
                      "transactionId": "TXN-00002",
                      "type": "Sell",
                      "description": "Sale",
                      "instrumentIdentifiers": {
                        "instrument/default/ClientInternal": "INT:00024106"
                      },
                      "instrumentUid": "LUID_OI5JX1V7",
                      "transactionDate": "2018-08-07T00:00:00.0000000+00:00",
                      "settlementDate": "2018-08-10T00:00:00.0000000+00:00",
                      "units": 10000,
                      "transactionAmount": 1470100,
                      "transactionPrice": {
                        "price": 147.01,
                        "type": "Price"
                      },
                      "totalConsideration": {
                        "amount": 1470100,
                        "currency": "USD"
                      },
                      "exchangeRate": 1,
                      "transactionToPortfolioRate": 0.772,
                      "transactionCurrency": "USD",
                      "properties": {
                        "transaction/default/TradeToPortfolioRate": {
                          "key": "Transaction/default/TradeToPortfolioRate",
                          "value": {
                            "metricValue": {
                              "value": 0.772
                            }
                          }
                        },
                        "transaction/default/SourcePortfolioId": {
                          "key": "Transaction/default/SourcePortfolioId",
                          "value": {
                            "labelValue": "DEMO-PORTFOLIO-ID"
                          }
                        },
                        "transaction/default/SourcePortfolioScope": {
                          "key": "Transaction/default/SourcePortfolioScope",
                          "value": {
                            "labelValue": "DEMO-SCOPE"
                          }
                        },
                        "transaction/default/ResultantHolding": {
                          "key": "Transaction/default/ResultantHolding",
                          "value": {
                            "metricValue": {
                              "value": 3500
                            }
                          }
                        }
                      },
                      "source": "",
                      "transactionStatus": "Active",
                      "entryDateTime": "2018-08-07T10:30:12.0000000+00:00",
                      "realisedGainLoss": [
                        {
                          "instrumentUid": "LUID_OI5JX1V7",
                          "units": 4500,
                          "purchaseTradeDate": "2018-08-02T00:00:00.0000000+00:00",
                          "purchaseSettlementDate": "2018-08-05T00:00:00.0000000+00:00",
                          "purchasePrice": 142.96,
                          "costTradeCcy": {
                            "amount": 643320,
                            "currency": "USD"
                          },
                          "costPortfolioCcy": {
                            "amount": 493619.44,
                            "currency": "GBP"
                          },
                          "realisedTradeCcy": {
                            "amount": 18225,
                            "currency": "USD"
                          },
                          "realisedTotal": {
                            "amount": 17093.3,
                            "currency": "GBP"
                          },
                          "realisedMarket": {
                            "amount": 14069.7,
                            "currency": "GBP"
                          },
                          "realisedCurrency": {
                            "amount": 3023.6,
                            "currency": "GBP"
                          }
                        },
                        {
                          "instrumentUid": "LUID_OI5JX1V7",
                          "units": 4500,
                          "purchaseTradeDate": "2018-08-03T00:00:00.0000000+00:00",
                          "purchaseSettlementDate": "2018-08-06T00:00:00.0000000+00:00",
                          "purchasePrice": 147.7,
                          "costTradeCcy": {
                            "amount": 664650,
                            "currency": "USD"
                          },
                          "costPortfolioCcy": {
                            "amount": 510517.67,
                            "currency": "GBP"
                          },
                          "realisedTradeCcy": {
                            "amount": -3105,
                            "currency": "USD"
                          },
                          "realisedTotal": {
                            "amount": 195.07,
                            "currency": "GBP"
                          },
                          "realisedMarket": {
                            "amount": -2397.06,
                            "currency": "GBP"
                          },
                          "realisedCurrency": {
                            "amount": 2592.13,
                            "currency": "GBP"
                          }
                        },
                        {
                          "instrumentUid": "LUID_OI5JX1V7",
                          "units": 1000,
                          "purchaseTradeDate": "2018-08-06T00:00:00.0000000+00:00",
                          "purchaseSettlementDate": "2018-08-08T00:00:00.0000000+00:00",
                          "purchasePrice": 146.03,
                          "costTradeCcy": {
                            "amount": 146030,
                            "currency": "USD"
                          },
                          "costPortfolioCcy": {
                            "amount": 112851.98,
                            "currency": "GBP"
                          },
                          "realisedTradeCcy": {
                            "amount": 980,
                            "currency": "USD"
                          },
                          "realisedTotal": {
                            "amount": 639.74,
                            "currency": "GBP"
                          },
                          "realisedMarket": {
                            "amount": 756.56,
                            "currency": "GBP"
                          },
                          "realisedCurrency": {
                            "amount": -116.82,
                            "currency": "GBP"
                          }
                        }
                      ]
                    }
                  ],
                  "href": "http://example.com",
                  "links": []
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/portfolios": {
      "get": {
        "tags": [
          "Portfolios"
        ],
        "summary": "List portfolios",
        "description": "List all the portfolios matching the specified criteria.",
        "operationId": "ListPortfolios",
        "parameters": [
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime or cut label at which to list the portfolios. Defaults to the current LUSID\r\n            system datetime if not specified.",
            "schema": {
              "type": "string",
              "description": "The effective datetime or cut label at which to list the portfolios. Defaults to the current LUSID\r\n            system datetime if not specified.",
              "format": "dateorcutlabel",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to list the portfolios. Defaults to return the latest version\r\n            of each portfolio if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to list the portfolios. Defaults to return the latest version\r\n            of each portfolio if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "page",
            "in": "query",
            "description": "The pagination token to use to continue listing portfolios from a previous call to list portfolios. This\r\nvalue is returned from the previous call. If a pagination token is provided the filter, effectiveAt\r\nand asAt fields must not have changed since the original request. Also, if set, a start value cannot be provided.",
            "schema": {
              "type": "string",
              "description": "The pagination token to use to continue listing portfolios from a previous call to list portfolios. This\r\nvalue is returned from the previous call. If a pagination token is provided the filter, effectiveAt\r\nand asAt fields must not have changed since the original request. Also, if set, a start value cannot be provided.",
              "nullable": true
            }
          },
          {
            "name": "start",
            "in": "query",
            "description": "When paginating, skip this number of results.",
            "schema": {
              "type": "integer",
              "description": "When paginating, skip this number of results.",
              "format": "int32",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "limit",
            "in": "query",
            "description": "When paginating, limit the number of returned results to this many. Defaults to 65,535 if not specified.",
            "schema": {
              "maximum": 5000,
              "minimum": 1,
              "type": "integer",
              "description": "When paginating, limit the number of returned results to this many. Defaults to 65,535 if not specified.",
              "format": "int32",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the result set.\r\n            For example, to filter on the Type, use \"type eq 'Transaction'\"\r\n            Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "type": "string",
              "description": "Expression to filter the result set.\r\n            For example, to filter on the Type, use \"type eq 'Transaction'\"\r\n            Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
              "nullable": true
            }
          },
          {
            "name": "query",
            "in": "query",
            "description": "Expression specifying the criteria that the returned portfolios must meet e.g. to see which\r\n            portfolios have holdings in the instruments with a Lusid Instrument Id (LUID) of 'LUID_PPA8HI6M' or a Figi of 'BBG000BLNNH6'\r\n            you would specify \"instrument.identifiers in (('LusidInstrumentId', 'LUID_PPA8HI6M'), ('Figi', 'BBG000BLNNH6'))\".",
            "schema": {
              "type": "string",
              "description": "Expression specifying the criteria that the returned portfolios must meet e.g. to see which\r\n            portfolios have holdings in the instruments with a Lusid Instrument Id (LUID) of 'LUID_PPA8HI6M' or a Figi of 'BBG000BLNNH6'\r\n            you would specify \"instrument.identifiers in (('LusidInstrumentId', 'LUID_PPA8HI6M'), ('Figi', 'BBG000BLNNH6'))\".",
              "nullable": true
            }
          },
          {
            "name": "propertyKeys",
            "in": "query",
            "description": "A list of property keys from the \"Portfolio\" domain to decorate onto each portfolio.\r\n            These take the format {domain}/{scope}/{code} e.g. \"Portfolio/Manager/Id\".",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
              },
              "description": "A list of property keys from the \"Portfolio\" domain to decorate onto each portfolio.\r\n            These take the format {domain}/{scope}/{code} e.g. \"Portfolio/Manager/Id\".",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The requested portfolios",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfPortfolio"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfPortfolio"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfPortfolio"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      }
    },
    "/api/portfolios/{scope}": {
      "get": {
        "tags": [
          "Portfolios"
        ],
        "summary": "List portfolios for scope",
        "description": "List all the portfolios in a single scope.",
        "operationId": "ListPortfoliosForScope",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the portfolios.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the portfolios.",
              "nullable": true
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime or cut label at which to list the portfolios. Defaults to the current LUSID\r\n            system datetime if not specified.",
            "schema": {
              "type": "string",
              "description": "The effective datetime or cut label at which to list the portfolios. Defaults to the current LUSID\r\n            system datetime if not specified.",
              "format": "dateorcutlabel",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to list the portfolios. Defaults to return the latest version\r\n            of each portfolio if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to list the portfolios. Defaults to return the latest version\r\n            of each portfolio if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "page",
            "in": "query",
            "description": "The pagination token to use to continue listing portfolios from a previous call to list portfolios. This\r\nvalue is returned from the previous call. If a pagination token is provided the filter, effectiveAt\r\nand asAt fields must not have changed since the original request. Also, if set, a start value cannot be provided.",
            "schema": {
              "type": "string",
              "description": "The pagination token to use to continue listing portfolios from a previous call to list portfolios. This\r\nvalue is returned from the previous call. If a pagination token is provided the filter, effectiveAt\r\nand asAt fields must not have changed since the original request. Also, if set, a start value cannot be provided.",
              "nullable": true
            }
          },
          {
            "name": "start",
            "in": "query",
            "description": "When paginating, skip this number of results.",
            "schema": {
              "type": "integer",
              "description": "When paginating, skip this number of results.",
              "format": "int32",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "limit",
            "in": "query",
            "description": "When paginating, limit the number of returned results to this many. Defaults to 65,535 if not specified.",
            "schema": {
              "maximum": 5000,
              "minimum": 1,
              "type": "integer",
              "description": "When paginating, limit the number of returned results to this many. Defaults to 65,535 if not specified.",
              "format": "int32",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the result set.\r\n            For example, to filter on the Type, use \"type eq 'Transaction'\"\r\n            Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "type": "string",
              "description": "Expression to filter the result set.\r\n            For example, to filter on the Type, use \"type eq 'Transaction'\"\r\n            Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
              "nullable": true
            }
          },
          {
            "name": "propertyKeys",
            "in": "query",
            "description": "A list of property keys from the \"Portfolio\" domain to decorate onto each portfolio.\r\n            These take the format {domain}/{scope}/{code} e.g. \"Portfolio/Manager/Id\".",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
              },
              "description": "A list of property keys from the \"Portfolio\" domain to decorate onto each portfolio.\r\n            These take the format {domain}/{scope}/{code} e.g. \"Portfolio/Manager/Id\".",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The portfolios in the specified scope",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfPortfolio"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfPortfolio"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfPortfolio"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      }
    },
    "/api/portfolios/{scope}/{code}": {
      "get": {
        "tags": [
          "Portfolios"
        ],
        "summary": "Get portfolio",
        "description": "Retrieve the definition of a single portfolio.",
        "operationId": "GetPortfolio",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the portfolio to retrieve the definition for.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the portfolio to retrieve the definition for.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the portfolio to retrieve the definition for. Together with the scope this\r\n            uniquely identifies the portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the portfolio to retrieve the definition for. Together with the scope this\r\n            uniquely identifies the portfolio.",
              "nullable": true
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime or cut label at which to retrieve the portfolio definition. Defaults to the current LUSID system datetime if not specified.",
            "schema": {
              "type": "string",
              "description": "The effective datetime or cut label at which to retrieve the portfolio definition. Defaults to the current LUSID system datetime if not specified.",
              "format": "dateorcutlabel",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the portfolio definition. Defaults to return the latest version of the portfolio definition if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to retrieve the portfolio definition. Defaults to return the latest version of the portfolio definition if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "propertyKeys",
            "in": "query",
            "description": "A list of property keys from the \"Portfolio\" domain to decorate onto the portfolio.\r\n            These take the format {domain}/{scope}/{code} e.g. \"Portfolio/Manager/Id\".",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
              },
              "description": "A list of property keys from the \"Portfolio\" domain to decorate onto the portfolio.\r\n            These take the format {domain}/{scope}/{code} e.g. \"Portfolio/Manager/Id\".",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The requested portfolio definition",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Portfolio"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Portfolio"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Portfolio"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      },
      "delete": {
        "tags": [
          "Portfolios"
        ],
        "summary": "Delete portfolio",
        "description": "Delete a single portfolio. The deletion of the portfolio will be valid from the portfolio's creation datetime. This means that the portfolio will no longer exist at any effective datetime from the asAt datetime of deletion.",
        "operationId": "DeletePortfolio",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the portfolio.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the portfolio.",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The datetime that the portfolio was deleted",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      },
      "put": {
        "tags": [
          "Portfolios"
        ],
        "summary": "Update portfolio",
        "description": "Update the definition of a single portfolio. Not all elements within a portfolio definition are\r\nmodifiable due to the potential implications for data already stored against the portfolio.",
        "operationId": "UpdatePortfolio",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the portfolio to update the definition for.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the portfolio to update the definition for.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the portfolio to update the definition for. Together with the scope this uniquely\r\n            identifies the portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the portfolio to update the definition for. Together with the scope this uniquely\r\n            identifies the portfolio.",
              "nullable": true
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime or cut label at which to update the definition. Defaults to the current\r\n            LUSID system datetime if not specified.",
            "schema": {
              "type": "string",
              "description": "The effective datetime or cut label at which to update the definition. Defaults to the current\r\n            LUSID system datetime if not specified.",
              "format": "dateorcutlabel",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "The updated portfolio definition.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePortfolioRequest"
              },
              "example": {
                "displayName": "MyPortfolioName",
                "description": "Long form description of portfolio"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePortfolioRequest"
              },
              "example": {
                "displayName": "MyPortfolioName",
                "description": "Long form description of portfolio"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePortfolioRequest"
              },
              "example": {
                "displayName": "MyPortfolioName",
                "description": "Long form description of portfolio"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePortfolioRequest"
              },
              "example": {
                "displayName": "MyPortfolioName",
                "description": "Long form description of portfolio"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The updated definition of the portfolio",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Portfolio"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Portfolio"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Portfolio"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      }
    },
    "/api/portfolios/{scope}/{code}/commands": {
      "get": {
        "tags": [
          "Portfolios"
        ],
        "summary": "[EARLY ACCESS] Get portfolio commands",
        "description": "Gets all the commands that modified a single portfolio, including any input transactions.",
        "operationId": "GetPortfolioCommands",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the portfolio to retrieve the commands for.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the portfolio to retrieve the commands for.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the portfolio to retrieve the commands for. Together with the scope this uniquely identifies\r\n            the portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the portfolio to retrieve the commands for. Together with the scope this uniquely identifies\r\n            the portfolio.",
              "nullable": true
            }
          },
          {
            "name": "fromAsAt",
            "in": "query",
            "description": "The lower bound asAt datetime (inclusive) from which to retrieve commands. There is no lower bound if this is not specified.",
            "schema": {
              "type": "string",
              "description": "The lower bound asAt datetime (inclusive) from which to retrieve commands. There is no lower bound if this is not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "toAsAt",
            "in": "query",
            "description": "The upper bound asAt datetime (inclusive) from which to retrieve commands. There is no upper bound if this is not specified.",
            "schema": {
              "type": "string",
              "description": "The upper bound asAt datetime (inclusive) from which to retrieve commands. There is no upper bound if this is not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the result set.\r\n            For example, to filter on the User ID, use \"userId.id eq 'string'\"\r\n            Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "type": "string",
              "description": "Expression to filter the result set.\r\n            For example, to filter on the User ID, use \"userId.id eq 'string'\"\r\n            Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The commands that modified the specified portfolio.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfProcessedCommand"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfProcessedCommand"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfProcessedCommand"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/portfolios/{scope}/{code}/properties": {
      "get": {
        "tags": [
          "Portfolios"
        ],
        "summary": "Get portfolio properties",
        "description": "List all the properties of a single portfolio.",
        "operationId": "GetPortfolioProperties",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the portfolio to list the properties for.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the portfolio to list the properties for.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the portfolio to list the properties for. Together with the scope this uniquely\r\n            identifies the portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the portfolio to list the properties for. Together with the scope this uniquely\r\n            identifies the portfolio.",
              "nullable": true
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime or cut label at which to list the portfolio's properties. Defaults to the current LUSID system datetime if not specified.",
            "schema": {
              "type": "string",
              "description": "The effective datetime or cut label at which to list the portfolio's properties. Defaults to the current LUSID system datetime if not specified.",
              "format": "dateorcutlabel",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to list the portfolio's properties. Defaults to return the latest version of each property if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to list the portfolio's properties. Defaults to return the latest version of each property if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The properties of the specified portfolio",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioProperties"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioProperties"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioProperties"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      },
      "delete": {
        "tags": [
          "Portfolios"
        ],
        "summary": "Delete portfolio properties",
        "description": "Delete one or more properties from a single portfolio. If the properties are time variant then an effective date time from which the properties\r\nwill be deleted must be specified. If the properties are perpetual then it is invalid to specify an effective date time for deletion.",
        "operationId": "DeletePortfolioProperties",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the portfolio to delete properties from.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the portfolio to delete properties from.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the portfolio to delete properties from. Together with the scope this uniquely\r\n            identifies the portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the portfolio to delete properties from. Together with the scope this uniquely\r\n            identifies the portfolio.",
              "nullable": true
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime or cut label at which to delete the properties.",
            "schema": {
              "type": "string",
              "description": "The effective datetime or cut label at which to delete the properties.",
              "format": "dateorcutlabel",
              "nullable": true
            }
          },
          {
            "name": "propertyKeys",
            "in": "query",
            "description": "The property keys of the properties to delete. These take the format\r\n            {domain}/{scope}/{code} e.g. \"Portfolio/Manager/Id\". Each property must be from the \"Portfolio\" domain.",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
              },
              "description": "The property keys of the properties to delete. These take the format\r\n            {domain}/{scope}/{code} e.g. \"Portfolio/Manager/Id\". Each property must be from the \"Portfolio\" domain."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The datetime that the properties were deleted from the specified portfolio",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      },
      "post": {
        "tags": [
          "Portfolios"
        ],
        "summary": "Upsert portfolio properties",
        "description": "Update or insert one or more properties onto a single portfolio. A property will be updated if it\r\nalready exists and inserted if it does not. All properties must be of the domain 'Portfolio'.\r\n            \r\nProperties have an <i>effectiveFrom</i> datetime for which the property is valid, and an <i>effectiveUntil</i>\r\ndatetime until which the property is valid. Not supplying an <i>effectiveUntil</i> datetime results in the property being\r\nvalid indefinitely, or until the next <i>effectiveFrom</i> datetime of the property.",
        "operationId": "UpsertPortfolioProperties",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the portfolio to update or insert the properties onto.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the portfolio to update or insert the properties onto.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the portfolio to update or insert the properties onto. Together with the scope\r\n             this uniquely identifies the portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the portfolio to update or insert the properties onto. Together with the scope\r\n             this uniquely identifies the portfolio.",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "The properties to be updated or inserted onto the portfolio. Each property in\r\n             the request must be keyed by its unique property key. This has the format {domain}/{scope}/{code} e.g. \"Portfolio/Manager/Id\".",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/Property"
                },
                "description": "The properties to be updated or inserted onto the portfolio. Each property in\r\n             the request must be keyed by its unique property key. This has the format {domain}/{scope}/{code} e.g. \"Portfolio/Manager/Id\"."
              },
              "example": {
                "portfolio/MyScope/FundManagerName": {
                  "key": "Portfolio/MyScope/FundManagerName",
                  "value": {
                    "labelValue": "Smith"
                  },
                  "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00"
                },
                "portfolio/MyScope/SomeProperty": {
                  "key": "Portfolio/MyScope/SomeProperty",
                  "value": {
                    "labelValue": "SomeValue"
                  },
                  "effectiveFrom": "2016-01-01T00:00:00.0000000+00:00"
                },
                "portfolio/MyScope/AnotherProperty": {
                  "key": "Portfolio/MyScope/AnotherProperty",
                  "value": {
                    "labelValue": "AnotherValue"
                  },
                  "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00",
                  "effectiveUntil": "2020-01-01T00:00:00.0000000+00:00"
                },
                "portfolio/MyScope/ReBalanceInterval": {
                  "key": "Portfolio/MyScope/ReBalanceInterval",
                  "value": {
                    "metricValue": {
                      "value": 30,
                      "unit": "Days"
                    }
                  }
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/Property"
                },
                "description": "The properties to be updated or inserted onto the portfolio. Each property in\r\n             the request must be keyed by its unique property key. This has the format {domain}/{scope}/{code} e.g. \"Portfolio/Manager/Id\"."
              },
              "example": {
                "portfolio/MyScope/FundManagerName": {
                  "key": "Portfolio/MyScope/FundManagerName",
                  "value": {
                    "labelValue": "Smith"
                  },
                  "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00"
                },
                "portfolio/MyScope/SomeProperty": {
                  "key": "Portfolio/MyScope/SomeProperty",
                  "value": {
                    "labelValue": "SomeValue"
                  },
                  "effectiveFrom": "2016-01-01T00:00:00.0000000+00:00"
                },
                "portfolio/MyScope/AnotherProperty": {
                  "key": "Portfolio/MyScope/AnotherProperty",
                  "value": {
                    "labelValue": "AnotherValue"
                  },
                  "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00",
                  "effectiveUntil": "2020-01-01T00:00:00.0000000+00:00"
                },
                "portfolio/MyScope/ReBalanceInterval": {
                  "key": "Portfolio/MyScope/ReBalanceInterval",
                  "value": {
                    "metricValue": {
                      "value": 30,
                      "unit": "Days"
                    }
                  }
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/Property"
                },
                "description": "The properties to be updated or inserted onto the portfolio. Each property in\r\n             the request must be keyed by its unique property key. This has the format {domain}/{scope}/{code} e.g. \"Portfolio/Manager/Id\"."
              },
              "example": {
                "portfolio/MyScope/FundManagerName": {
                  "key": "Portfolio/MyScope/FundManagerName",
                  "value": {
                    "labelValue": "Smith"
                  },
                  "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00"
                },
                "portfolio/MyScope/SomeProperty": {
                  "key": "Portfolio/MyScope/SomeProperty",
                  "value": {
                    "labelValue": "SomeValue"
                  },
                  "effectiveFrom": "2016-01-01T00:00:00.0000000+00:00"
                },
                "portfolio/MyScope/AnotherProperty": {
                  "key": "Portfolio/MyScope/AnotherProperty",
                  "value": {
                    "labelValue": "AnotherValue"
                  },
                  "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00",
                  "effectiveUntil": "2020-01-01T00:00:00.0000000+00:00"
                },
                "portfolio/MyScope/ReBalanceInterval": {
                  "key": "Portfolio/MyScope/ReBalanceInterval",
                  "value": {
                    "metricValue": {
                      "value": 30,
                      "unit": "Days"
                    }
                  }
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/Property"
                },
                "description": "The properties to be updated or inserted onto the portfolio. Each property in\r\n             the request must be keyed by its unique property key. This has the format {domain}/{scope}/{code} e.g. \"Portfolio/Manager/Id\"."
              },
              "example": {
                "portfolio/MyScope/FundManagerName": {
                  "key": "Portfolio/MyScope/FundManagerName",
                  "value": {
                    "labelValue": "Smith"
                  },
                  "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00"
                },
                "portfolio/MyScope/SomeProperty": {
                  "key": "Portfolio/MyScope/SomeProperty",
                  "value": {
                    "labelValue": "SomeValue"
                  },
                  "effectiveFrom": "2016-01-01T00:00:00.0000000+00:00"
                },
                "portfolio/MyScope/AnotherProperty": {
                  "key": "Portfolio/MyScope/AnotherProperty",
                  "value": {
                    "labelValue": "AnotherValue"
                  },
                  "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00",
                  "effectiveUntil": "2020-01-01T00:00:00.0000000+00:00"
                },
                "portfolio/MyScope/ReBalanceInterval": {
                  "key": "Portfolio/MyScope/ReBalanceInterval",
                  "value": {
                    "metricValue": {
                      "value": 30,
                      "unit": "Days"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The updated or inserted properties",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioProperties"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioProperties"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioProperties"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      }
    },
    "/api/portfolios/{scope}/{code}/relations": {
      "get": {
        "tags": [
          "Portfolios"
        ],
        "summary": "[DEPRECATED] Get Relations for Portfolio",
        "description": "Get relations for the specified Portfolio",
        "operationId": "GetPortfolioRelations",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the portfolio.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the portfolio. Together with the scope this uniquely identifies\r\n            the portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the portfolio. Together with the scope this uniquely identifies\r\n            the portfolio.",
              "nullable": true
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime or cut label at which to retrieve relations. Defaults to the current LUSID system datetime if not specified.",
            "schema": {
              "type": "string",
              "description": "The effective datetime or cut label at which to retrieve relations. Defaults to the current LUSID system datetime if not specified.",
              "format": "dateorcutlabel",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve relations. Defaults to return the latest LUSID AsAt time if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to retrieve relations. Defaults to return the latest LUSID AsAt time if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the relations. Users should provide null or empty string for this field until further notice.",
            "schema": {
              "type": "string",
              "description": "Expression to filter the relations. Users should provide null or empty string for this field until further notice.",
              "nullable": true
            }
          },
          {
            "name": "identifierTypes",
            "in": "query",
            "description": "Identifiers types (as property keys) used for referencing Persons or Legal Entities. These take the format\r\n            {domain}/{scope}/{code} e.g. \"Person/CompanyDetails/Role\". They must be from the \"Person\" or \"LegalEntity\" domain.\r\n            Only identifier types stated will be used to look up relevant entities in relations. If not applicable, provide an empty array.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
              },
              "description": "Identifiers types (as property keys) used for referencing Persons or Legal Entities. These take the format\r\n            {domain}/{scope}/{code} e.g. \"Person/CompanyDetails/Role\". They must be from the \"Person\" or \"LegalEntity\" domain.\r\n            Only identifier types stated will be used to look up relevant entities in relations. If not applicable, provide an empty array.",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The relations for the specified portfolio.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfRelation"
                },
                "example": {
                  "values": [
                    {
                      "relationDefinitionId": {
                        "scope": "PortfolioManagementTeam",
                        "code": "Traders"
                      },
                      "relatedEntityId": {
                        "idTypeScope": "HrSystem1",
                        "idTypeCode": "InternalId",
                        "code": "XY10001111"
                      },
                      "traversalDirection": "Out",
                      "traversalDescription": "can be traded by",
                      "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00"
                    },
                    {
                      "relationDefinitionId": {
                        "scope": "PortfolioManagementTeam",
                        "code": "Traders"
                      },
                      "relatedEntityId": {
                        "entityType": "PortfolioGroup",
                        "scope": "PortfolioGroupEmea",
                        "code": "PortfolioGroupId-867312"
                      },
                      "traversalDirection": "In",
                      "traversalDescription": "can trade with portfolio",
                      "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00"
                    }
                  ],
                  "links": []
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfRelation"
                },
                "example": {
                  "values": [
                    {
                      "relationDefinitionId": {
                        "scope": "PortfolioManagementTeam",
                        "code": "Traders"
                      },
                      "relatedEntityId": {
                        "idTypeScope": "HrSystem1",
                        "idTypeCode": "InternalId",
                        "code": "XY10001111"
                      },
                      "traversalDirection": "Out",
                      "traversalDescription": "can be traded by",
                      "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00"
                    },
                    {
                      "relationDefinitionId": {
                        "scope": "PortfolioManagementTeam",
                        "code": "Traders"
                      },
                      "relatedEntityId": {
                        "entityType": "PortfolioGroup",
                        "scope": "PortfolioGroupEmea",
                        "code": "PortfolioGroupId-867312"
                      },
                      "traversalDirection": "In",
                      "traversalDescription": "can trade with portfolio",
                      "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00"
                    }
                  ],
                  "links": []
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfRelation"
                },
                "example": {
                  "values": [
                    {
                      "relationDefinitionId": {
                        "scope": "PortfolioManagementTeam",
                        "code": "Traders"
                      },
                      "relatedEntityId": {
                        "idTypeScope": "HrSystem1",
                        "idTypeCode": "InternalId",
                        "code": "XY10001111"
                      },
                      "traversalDirection": "Out",
                      "traversalDescription": "can be traded by",
                      "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00"
                    },
                    {
                      "relationDefinitionId": {
                        "scope": "PortfolioManagementTeam",
                        "code": "Traders"
                      },
                      "relatedEntityId": {
                        "entityType": "PortfolioGroup",
                        "scope": "PortfolioGroupEmea",
                        "code": "PortfolioGroupId-867312"
                      },
                      "traversalDirection": "In",
                      "traversalDescription": "can trade with portfolio",
                      "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00"
                    }
                  ],
                  "links": []
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Deprecated"
      }
    },
    "/api/portfolios/$reconcileholdings": {
      "post": {
        "tags": [
          "Reconciliations"
        ],
        "summary": "[EARLY ACCESS] Reconcile portfolio holdings",
        "description": "Reconcile the holdings of two portfolios.",
        "operationId": "ReconcileHoldings",
        "parameters": [
          {
            "name": "sortBy",
            "in": "query",
            "description": "Optional. Order the results by these fields. Use use the '-' sign to denote descending order e.g. -MyFieldName",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Optional. Order the results by these fields. Use use the '-' sign to denote descending order e.g. -MyFieldName",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "start",
            "in": "query",
            "description": "Optional. When paginating, skip this number of results",
            "schema": {
              "type": "integer",
              "description": "Optional. When paginating, skip this number of results",
              "format": "int32",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Optional. When paginating, limit the number of returned results to this many.",
            "schema": {
              "type": "integer",
              "description": "Optional. When paginating, limit the number of returned results to this many.",
              "format": "int32",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Optional. Expression to filter the result set.\r\n            For example, to filter on the left portfolio Code, use \"left.portfolioId.code eq 'string'\"\r\n            Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "type": "string",
              "description": "Optional. Expression to filter the result set.\r\n            For example, to filter on the left portfolio Code, use \"left.portfolioId.code eq 'string'\"\r\n            Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "The specifications of the inputs to the reconciliation",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/PortfoliosReconciliationRequest"
              },
              "example": {
                "left": {
                  "portfolioId": {
                    "scope": "MySourceScope",
                    "code": "MySourcePortfolioCode"
                  },
                  "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                  "asAt": "2018-03-05T00:00:00.0000000+00:00"
                },
                "right": {
                  "portfolioId": {
                    "scope": "MyTargetScope",
                    "code": "MyTargetPortfolioCode"
                  },
                  "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                  "asAt": "2018-03-05T00:00:00.0000000+00:00"
                },
                "instrumentPropertyKeys": [
                  "Instrument/default/Name"
                ]
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PortfoliosReconciliationRequest"
              },
              "example": {
                "left": {
                  "portfolioId": {
                    "scope": "MySourceScope",
                    "code": "MySourcePortfolioCode"
                  },
                  "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                  "asAt": "2018-03-05T00:00:00.0000000+00:00"
                },
                "right": {
                  "portfolioId": {
                    "scope": "MyTargetScope",
                    "code": "MyTargetPortfolioCode"
                  },
                  "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                  "asAt": "2018-03-05T00:00:00.0000000+00:00"
                },
                "instrumentPropertyKeys": [
                  "Instrument/default/Name"
                ]
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/PortfoliosReconciliationRequest"
              },
              "example": {
                "left": {
                  "portfolioId": {
                    "scope": "MySourceScope",
                    "code": "MySourcePortfolioCode"
                  },
                  "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                  "asAt": "2018-03-05T00:00:00.0000000+00:00"
                },
                "right": {
                  "portfolioId": {
                    "scope": "MyTargetScope",
                    "code": "MyTargetPortfolioCode"
                  },
                  "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                  "asAt": "2018-03-05T00:00:00.0000000+00:00"
                },
                "instrumentPropertyKeys": [
                  "Instrument/default/Name"
                ]
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/PortfoliosReconciliationRequest"
              },
              "example": {
                "left": {
                  "portfolioId": {
                    "scope": "MySourceScope",
                    "code": "MySourcePortfolioCode"
                  },
                  "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                  "asAt": "2018-03-05T00:00:00.0000000+00:00"
                },
                "right": {
                  "portfolioId": {
                    "scope": "MyTargetScope",
                    "code": "MyTargetPortfolioCode"
                  },
                  "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                  "asAt": "2018-03-05T00:00:00.0000000+00:00"
                },
                "instrumentPropertyKeys": [
                  "Instrument/default/Name"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The requested reconciliation",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfReconciliationBreak"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfReconciliationBreak"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfReconciliationBreak"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/propertydefinitions": {
      "post": {
        "tags": [
          "Property Definitions"
        ],
        "summary": "Create property definition",
        "description": "Define a new property.",
        "operationId": "CreatePropertyDefinition",
        "requestBody": {
          "description": "The definition of the new property.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePropertyDefinitionRequest"
              },
              "example": {
                "domain": "Portfolio",
                "scope": "MyScope",
                "code": "MyPropertyName",
                "valueRequired": false,
                "displayName": "My Property Display Name",
                "dataTypeId": {
                  "scope": "system",
                  "code": "string"
                },
                "lifeTime": "Perpetual",
                "constraintStyle": "Property",
                "propertyDescription": "Optional property description"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePropertyDefinitionRequest"
              },
              "example": {
                "domain": "Portfolio",
                "scope": "MyScope",
                "code": "MyPropertyName",
                "valueRequired": false,
                "displayName": "My Property Display Name",
                "dataTypeId": {
                  "scope": "system",
                  "code": "string"
                },
                "lifeTime": "Perpetual",
                "constraintStyle": "Property",
                "propertyDescription": "Optional property description"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePropertyDefinitionRequest"
              },
              "example": {
                "domain": "Portfolio",
                "scope": "MyScope",
                "code": "MyPropertyName",
                "valueRequired": false,
                "displayName": "My Property Display Name",
                "dataTypeId": {
                  "scope": "system",
                  "code": "string"
                },
                "lifeTime": "Perpetual",
                "constraintStyle": "Property",
                "propertyDescription": "Optional property description"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePropertyDefinitionRequest"
              },
              "example": {
                "domain": "Portfolio",
                "scope": "MyScope",
                "code": "MyPropertyName",
                "valueRequired": false,
                "displayName": "My Property Display Name",
                "dataTypeId": {
                  "scope": "system",
                  "code": "string"
                },
                "lifeTime": "Perpetual",
                "constraintStyle": "Property",
                "propertyDescription": "Optional property description"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "The newly created property definition",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PropertyDefinition"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PropertyDefinition"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PropertyDefinition"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      },
      "get": {
        "tags": [
          "Property Definitions"
        ],
        "summary": "Get multiple property definitions",
        "description": "Retrieve the definition of one or more specified properties.",
        "operationId": "GetMultiplePropertyDefinitions",
        "parameters": [
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the property definitions. Defaults to return\r\n            the latest version of each definition if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to retrieve the property definitions. Defaults to return\r\n            the latest version of each definition if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the result set. \r\n            For example, to filter on the Lifetime, use \"lifeTime eq 'Perpetual'\"\r\n            Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "type": "string",
              "description": "Expression to filter the result set. \r\n            For example, to filter on the Lifetime, use \"lifeTime eq 'Perpetual'\"\r\n            Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
              "nullable": true
            }
          },
          {
            "name": "propertyKeys",
            "in": "query",
            "description": "One or more property keys which identify each property that a definition should\r\n            be retrieved for. The format for each property key is {domain}/{scope}/{code}, e.g. 'Portfolio/Manager/Id'.",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
              },
              "description": "One or more property keys which identify each property that a definition should\r\n            be retrieved for. The format for each property key is {domain}/{scope}/{code}, e.g. 'Portfolio/Manager/Id'."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested property definitions",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfPropertyDefinition"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfPropertyDefinition"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfPropertyDefinition"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      }
    },
    "/api/propertydefinitions/{domain}/{scope}/{code}": {
      "put": {
        "tags": [
          "Property Definitions"
        ],
        "summary": "Update property definition",
        "description": "Update the definition of a specified existing property. Not all elements within a property definition\r\nare modifiable due to the potential implications for values already stored against the property.",
        "operationId": "UpdatePropertyDefinition",
        "parameters": [
          {
            "name": "domain",
            "in": "path",
            "description": "The domain of the property being updated.",
            "required": true,
            "schema": {
              "enum": [
                "NotDefined",
                "Transaction",
                "Portfolio",
                "Holding",
                "ReferenceHolding",
                "TransactionConfiguration",
                "Instrument",
                "CutLabelDefinition",
                "Analytic",
                "PortfolioGroup",
                "Person",
                "AccessMetadata",
                "Order",
                "UnitResult",
                "MarketData",
                "ConfigurationRecipe",
                "Allocation",
                "Calendar",
                "LegalEntity"
              ],
              "type": "string",
              "description": "The available values are: NotDefined, Transaction, Portfolio, Holding, ReferenceHolding, TransactionConfiguration, Instrument, CutLabelDefinition, Analytic, PortfolioGroup, Person, AccessMetadata, Order, UnitResult, MarketData, ConfigurationRecipe, Allocation, Calendar, LegalEntity"
            }
          },
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the property being updated.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the property being updated.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the property being updated. Together with the domain and scope this uniquely\r\n            identifies the property.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the property being updated. Together with the domain and scope this uniquely\r\n            identifies the property.",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "The updated definition of the property.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePropertyDefinitionRequest"
              },
              "example": {
                "displayName": "MyPropertyName",
                "propertyDescription": "Option Property description"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePropertyDefinitionRequest"
              },
              "example": {
                "displayName": "MyPropertyName",
                "propertyDescription": "Option Property description"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePropertyDefinitionRequest"
              },
              "example": {
                "displayName": "MyPropertyName",
                "propertyDescription": "Option Property description"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePropertyDefinitionRequest"
              },
              "example": {
                "displayName": "MyPropertyName",
                "propertyDescription": "Option Property description"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The updated property definition",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PropertyDefinition"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PropertyDefinition"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PropertyDefinition"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      },
      "delete": {
        "tags": [
          "Property Definitions"
        ],
        "summary": "Delete property definition",
        "description": "Delete the definition of the specified property.",
        "operationId": "DeletePropertyDefinition",
        "parameters": [
          {
            "name": "domain",
            "in": "path",
            "description": "The domain of the property to be deleted.",
            "required": true,
            "schema": {
              "enum": [
                "NotDefined",
                "Transaction",
                "Portfolio",
                "Holding",
                "ReferenceHolding",
                "TransactionConfiguration",
                "Instrument",
                "CutLabelDefinition",
                "Analytic",
                "PortfolioGroup",
                "Person",
                "AccessMetadata",
                "Order",
                "UnitResult",
                "MarketData",
                "ConfigurationRecipe",
                "Allocation",
                "Calendar",
                "LegalEntity"
              ],
              "type": "string",
              "description": "The available values are: NotDefined, Transaction, Portfolio, Holding, ReferenceHolding, TransactionConfiguration, Instrument, CutLabelDefinition, Analytic, PortfolioGroup, Person, AccessMetadata, Order, UnitResult, MarketData, ConfigurationRecipe, Allocation, Calendar, LegalEntity"
            }
          },
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the property to be deleted.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the property to be deleted.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the property to be deleted. Together with the domain and scope this uniquely\r\n            identifies the property.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the property to be deleted. Together with the domain and scope this uniquely\r\n            identifies the property.",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The time that the property definition was deleted",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      },
      "get": {
        "tags": [
          "Property Definitions"
        ],
        "summary": "Get property definition",
        "description": "Retrieve the definition of a specified property.",
        "operationId": "GetPropertyDefinition",
        "parameters": [
          {
            "name": "domain",
            "in": "path",
            "description": "The domain of the specified property.",
            "required": true,
            "schema": {
              "enum": [
                "NotDefined",
                "Transaction",
                "Portfolio",
                "Holding",
                "ReferenceHolding",
                "TransactionConfiguration",
                "Instrument",
                "CutLabelDefinition",
                "Analytic",
                "PortfolioGroup",
                "Person",
                "AccessMetadata",
                "Order",
                "UnitResult",
                "MarketData",
                "ConfigurationRecipe",
                "Allocation",
                "Calendar",
                "LegalEntity"
              ],
              "type": "string",
              "description": "The available values are: NotDefined, Transaction, Portfolio, Holding, ReferenceHolding, TransactionConfiguration, Instrument, CutLabelDefinition, Analytic, PortfolioGroup, Person, AccessMetadata, Order, UnitResult, MarketData, ConfigurationRecipe, Allocation, Calendar, LegalEntity"
            }
          },
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the specified property.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the specified property.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the specified property. Together with the domain and scope this uniquely\r\n            identifies the property.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the specified property. Together with the domain and scope this uniquely\r\n            identifies the property.",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the property definition. Defaults to return\r\n            the latest version of the definition if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to retrieve the property definition. Defaults to return\r\n            the latest version of the definition if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The requested property definition",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PropertyDefinition"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PropertyDefinition"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PropertyDefinition"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      }
    },
    "/api/quotes/{scope}": {
      "post": {
        "tags": [
          "Quotes"
        ],
        "summary": "[EARLY ACCESS] Upsert quotes",
        "description": "Update or insert one or more quotes in a single scope. A quote will be updated if it already exists\r\nand inserted if it does not.\r\n            \r\nIn the request each quote must be keyed by a unique correlation id. This id is ephemeral and is not stored by LUSID.\r\nIt serves only as a way to easily identify each quote in the response.\r\n            \r\nThe response will return both the collection of successfully updated or inserted quotes, as well as those that failed.\r\nFor the failures a reason will be provided explaining why the quote could not be updated or inserted.\r\n            \r\nIt is important to always check the failed set for any unsuccessful results.\n\nThe maximum number of quotes that this method can upsert per request is 2,000.",
        "operationId": "UpsertQuotes",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope to use when updating or inserting the quotes.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope to use when updating or inserting the quotes.",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "The quotes to update or insert keyed by a unique correlation id.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/UpsertQuoteRequest"
                },
                "description": "The quotes to update or insert keyed by a unique correlation id.",
                "nullable": true
              },
              "example": {
                "dS-VOD-PRICE-MID": {
                  "quoteId": {
                    "quoteSeriesId": {
                      "provider": "DataScope",
                      "priceSource": "",
                      "instrumentId": "GB00BH4HKS39",
                      "instrumentIdType": "Isin",
                      "quoteType": "Price",
                      "field": "mid"
                    },
                    "effectiveAt": "2018-03-05T00:00:00.0000000+00:00"
                  },
                  "metricValue": {
                    "value": 1460,
                    "unit": "CNY"
                  }
                },
                "o-C-EURUSD-PRICE-BID": {
                  "quoteId": {
                    "quoteSeriesId": {
                      "provider": "Oanda",
                      "priceSource": "Citi",
                      "instrumentId": "EUR/USD",
                      "instrumentIdType": "CurrencyPair",
                      "quoteType": "Price",
                      "field": "bid"
                    },
                    "effectiveAt": "2018-03-05T00:00:00.0000000+00:00"
                  },
                  "metricValue": {
                    "value": 1.367,
                    "unit": "EUR/USD"
                  },
                  "lineage": "Oanda/FxRates_2018-10-22T00:00:00.0000000+00:00.csv"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/UpsertQuoteRequest"
                },
                "description": "The quotes to update or insert keyed by a unique correlation id.",
                "nullable": true
              },
              "example": {
                "dS-VOD-PRICE-MID": {
                  "quoteId": {
                    "quoteSeriesId": {
                      "provider": "DataScope",
                      "priceSource": "",
                      "instrumentId": "GB00BH4HKS39",
                      "instrumentIdType": "Isin",
                      "quoteType": "Price",
                      "field": "mid"
                    },
                    "effectiveAt": "2018-03-05T00:00:00.0000000+00:00"
                  },
                  "metricValue": {
                    "value": 1460,
                    "unit": "CNY"
                  }
                },
                "o-C-EURUSD-PRICE-BID": {
                  "quoteId": {
                    "quoteSeriesId": {
                      "provider": "Oanda",
                      "priceSource": "Citi",
                      "instrumentId": "EUR/USD",
                      "instrumentIdType": "CurrencyPair",
                      "quoteType": "Price",
                      "field": "bid"
                    },
                    "effectiveAt": "2018-03-05T00:00:00.0000000+00:00"
                  },
                  "metricValue": {
                    "value": 1.367,
                    "unit": "EUR/USD"
                  },
                  "lineage": "Oanda/FxRates_2018-10-22T00:00:00.0000000+00:00.csv"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/UpsertQuoteRequest"
                },
                "description": "The quotes to update or insert keyed by a unique correlation id.",
                "nullable": true
              },
              "example": {
                "dS-VOD-PRICE-MID": {
                  "quoteId": {
                    "quoteSeriesId": {
                      "provider": "DataScope",
                      "priceSource": "",
                      "instrumentId": "GB00BH4HKS39",
                      "instrumentIdType": "Isin",
                      "quoteType": "Price",
                      "field": "mid"
                    },
                    "effectiveAt": "2018-03-05T00:00:00.0000000+00:00"
                  },
                  "metricValue": {
                    "value": 1460,
                    "unit": "CNY"
                  }
                },
                "o-C-EURUSD-PRICE-BID": {
                  "quoteId": {
                    "quoteSeriesId": {
                      "provider": "Oanda",
                      "priceSource": "Citi",
                      "instrumentId": "EUR/USD",
                      "instrumentIdType": "CurrencyPair",
                      "quoteType": "Price",
                      "field": "bid"
                    },
                    "effectiveAt": "2018-03-05T00:00:00.0000000+00:00"
                  },
                  "metricValue": {
                    "value": 1.367,
                    "unit": "EUR/USD"
                  },
                  "lineage": "Oanda/FxRates_2018-10-22T00:00:00.0000000+00:00.csv"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/UpsertQuoteRequest"
                },
                "description": "The quotes to update or insert keyed by a unique correlation id.",
                "nullable": true
              },
              "example": {
                "dS-VOD-PRICE-MID": {
                  "quoteId": {
                    "quoteSeriesId": {
                      "provider": "DataScope",
                      "priceSource": "",
                      "instrumentId": "GB00BH4HKS39",
                      "instrumentIdType": "Isin",
                      "quoteType": "Price",
                      "field": "mid"
                    },
                    "effectiveAt": "2018-03-05T00:00:00.0000000+00:00"
                  },
                  "metricValue": {
                    "value": 1460,
                    "unit": "CNY"
                  }
                },
                "o-C-EURUSD-PRICE-BID": {
                  "quoteId": {
                    "quoteSeriesId": {
                      "provider": "Oanda",
                      "priceSource": "Citi",
                      "instrumentId": "EUR/USD",
                      "instrumentIdType": "CurrencyPair",
                      "quoteType": "Price",
                      "field": "bid"
                    },
                    "effectiveAt": "2018-03-05T00:00:00.0000000+00:00"
                  },
                  "metricValue": {
                    "value": 1.367,
                    "unit": "EUR/USD"
                  },
                  "lineage": "Oanda/FxRates_2018-10-22T00:00:00.0000000+00:00.csv"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The successfully updated or inserted quotes along with any failures",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertQuotesResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertQuotesResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertQuotesResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      },
      "get": {
        "tags": [
          "Quotes"
        ],
        "summary": "[EARLY ACCESS] List quotes for scope",
        "description": "List all the quotes from a single scope at the specified date/time",
        "operationId": "ListQuotesForScope",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the quotes to list.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The scope of the quotes to list.",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to list the quotes. Defaults to latest if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to list the quotes. Defaults to latest if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "page",
            "in": "query",
            "description": "The pagination token to use to continue listing quotes from a previous call to list quotes.\r\n            This value is returned from the previous call. If a pagination token is provided the sortBy, filter, effectiveAt, and asAt fields\r\n            must not have changed since the original request. Also, if set, a start value cannot be provided.",
            "schema": {
              "type": "string",
              "description": "The pagination token to use to continue listing quotes from a previous call to list quotes.\r\n            This value is returned from the previous call. If a pagination token is provided the sortBy, filter, effectiveAt, and asAt fields\r\n            must not have changed since the original request. Also, if set, a start value cannot be provided.",
              "nullable": true
            }
          },
          {
            "name": "start",
            "in": "query",
            "description": "When paginating, skip this number of results.",
            "schema": {
              "type": "integer",
              "description": "When paginating, skip this number of results.",
              "format": "int32",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "limit",
            "in": "query",
            "description": "When paginating, limit the number of returned results to this many.",
            "schema": {
              "type": "integer",
              "description": "When paginating, limit the number of returned results to this many.",
              "format": "int32",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the result set.\r\n            Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "type": "string",
              "description": "Expression to filter the result set.\r\n            Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested quotes",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfQuote"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfQuote"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfQuote"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/quotes/{scope}/$delete": {
      "post": {
        "tags": [
          "Quotes"
        ],
        "summary": "[EARLY ACCESS] Delete quotes",
        "description": "Delete one or more specified quotes from a single scope. A quote is identified by its unique id which includes information about\r\nthe type of quote as well as the exact effective datetime (to the microsecond) from which it became valid.\r\n            \r\nIn the request each quote must be keyed by a unique correlation id. This id is ephemeral and is not stored by LUSID.\r\nIt serves only as a way to easily identify each quote in the response.\r\n            \r\nThe response will return both the collection of successfully deleted quotes, as well as those that failed.\r\nFor the failures a reason will be provided explaining why the quote could not be deleted.\r\n            \r\nIt is important to always check the failed set for any unsuccessful results.",
        "operationId": "DeleteQuotes",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the quotes to delete.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the quotes to delete.",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "The quotes to delete keyed by a unique correlation id.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/QuoteId"
                },
                "description": "The quotes to delete keyed by a unique correlation id.",
                "nullable": true
              },
              "example": {
                "dS-VOD-PRICE-MID": {
                  "quoteSeriesId": {
                    "provider": "DataScope",
                    "priceSource": "",
                    "instrumentId": "GB00BH4HKS39",
                    "instrumentIdType": "Isin",
                    "quoteType": "Price",
                    "field": "mid"
                  },
                  "effectiveAt": "2018-03-05T00:00:00.0000000+00:00"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/QuoteId"
                },
                "description": "The quotes to delete keyed by a unique correlation id.",
                "nullable": true
              },
              "example": {
                "dS-VOD-PRICE-MID": {
                  "quoteSeriesId": {
                    "provider": "DataScope",
                    "priceSource": "",
                    "instrumentId": "GB00BH4HKS39",
                    "instrumentIdType": "Isin",
                    "quoteType": "Price",
                    "field": "mid"
                  },
                  "effectiveAt": "2018-03-05T00:00:00.0000000+00:00"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/QuoteId"
                },
                "description": "The quotes to delete keyed by a unique correlation id.",
                "nullable": true
              },
              "example": {
                "dS-VOD-PRICE-MID": {
                  "quoteSeriesId": {
                    "provider": "DataScope",
                    "priceSource": "",
                    "instrumentId": "GB00BH4HKS39",
                    "instrumentIdType": "Isin",
                    "quoteType": "Price",
                    "field": "mid"
                  },
                  "effectiveAt": "2018-03-05T00:00:00.0000000+00:00"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/QuoteId"
                },
                "description": "The quotes to delete keyed by a unique correlation id.",
                "nullable": true
              },
              "example": {
                "dS-VOD-PRICE-MID": {
                  "quoteSeriesId": {
                    "provider": "DataScope",
                    "priceSource": "",
                    "instrumentId": "GB00BH4HKS39",
                    "instrumentIdType": "Isin",
                    "quoteType": "Price",
                    "field": "mid"
                  },
                  "effectiveAt": "2018-03-05T00:00:00.0000000+00:00"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The successfully deleted quotes along with any failures",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AnnulQuotesResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnnulQuotesResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnnulQuotesResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/quotes/{scope}/$deprecated": {
      "get": {
        "tags": [
          "Quotes"
        ],
        "summary": "[DEPRECATED] List quotes",
        "description": "List all the quotes from a single scope at the specified date/time\r\nPlease use M:Finbourne.WebApi.Controllers.QuotesController.ListQuotesForScope(System.String,System.Nullable{System.DateTimeOffset},System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.String) - the signature and behaviour of this endpoint will be changing to omit scope",
        "operationId": "ListQuotes",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the quotes to list.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The scope of the quotes to list.",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to list the quotes. Defaults to latest if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to list the quotes. Defaults to latest if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "page",
            "in": "query",
            "description": "The pagination token to use to continue listing quotes from a previous call to list quotes.\r\n            This value is returned from the previous call. If a pagination token is provided the sortBy, filter, effectiveAt, and asAt fields\r\n            must not have changed since the original request. Also, if set, a start value cannot be provided.",
            "schema": {
              "type": "string",
              "description": "The pagination token to use to continue listing quotes from a previous call to list quotes.\r\n            This value is returned from the previous call. If a pagination token is provided the sortBy, filter, effectiveAt, and asAt fields\r\n            must not have changed since the original request. Also, if set, a start value cannot be provided.",
              "nullable": true
            }
          },
          {
            "name": "start",
            "in": "query",
            "description": "When paginating, skip this number of results.",
            "schema": {
              "type": "integer",
              "description": "When paginating, skip this number of results.",
              "format": "int32",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "limit",
            "in": "query",
            "description": "When paginating, limit the number of returned results to this many.",
            "schema": {
              "type": "integer",
              "description": "When paginating, limit the number of returned results to this many.",
              "format": "int32",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the result set.\r\n            Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "type": "string",
              "description": "Expression to filter the result set.\r\n            Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested quotes",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfQuote"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfQuote"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfQuote"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Deprecated"
      }
    },
    "/api/quotes/{scope}/$get": {
      "post": {
        "tags": [
          "Quotes"
        ],
        "summary": "[EARLY ACCESS] Get quotes",
        "description": "Get one or more quotes from a single scope.\r\n            \r\nEach quote can be identified by its time invariant quote series id.\r\n            \r\nFor each quote series id LUSID will return the most recent quote with respect to the provided (or default) effective datetime. \r\n            \r\nAn optional maximum age range window can be specified which defines how far back to look back for a quote from the specified effective datetime.\r\nLUSID will return the most recent quote within this window.\r\n            \r\nIn the request each quote series id must be keyed by a unique correlation id. This id is ephemeral and is not stored by LUSID.\r\nIt serves only as a way to easily identify each quote in the response.\r\n            \r\nThe response will return three collections. One, the successfully retrieved quotes. Two, those that had a\r\nvalid quote series id but could not be found. Three, those that failed because LUSID could not construct a valid quote series id from the request.\r\n\r\nFor the quotes that failed or could not be found a reason will be provided explaining why the quote could not be retrieved.\r\n            \r\nIt is important to always check the failed and not found sets for any unsuccessful results.\n\nThe maximum number of quotes that this method can get per request is 2,000.",
        "operationId": "GetQuotes",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the quotes to retrieve.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the quotes to retrieve.",
              "nullable": true
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime or cut label at which to retrieve the quotes. Defaults to the current LUSID system datetime if not specified.",
            "schema": {
              "type": "string",
              "description": "The effective datetime or cut label at which to retrieve the quotes. Defaults to the current LUSID system datetime if not specified.",
              "format": "dateorcutlabel",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the quotes. Defaults to return the latest version of each quote if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to retrieve the quotes. Defaults to return the latest version of each quote if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "maxAge",
            "in": "query",
            "description": "The duration of the look back window in an ISO8601 time interval format e.g. P1Y2M3DT4H30M (1 year, 2 months, 3 days, 4 hours and 30 minutes).\r\n             This is subtracted from the provided effectiveAt datetime or cut label to generate a effective datetime window inside which a quote must exist to be retrieved.",
            "schema": {
              "type": "string",
              "description": "The duration of the look back window in an ISO8601 time interval format e.g. P1Y2M3DT4H30M (1 year, 2 months, 3 days, 4 hours and 30 minutes).\r\n             This is subtracted from the provided effectiveAt datetime or cut label to generate a effective datetime window inside which a quote must exist to be retrieved.",
              "format": "date-span",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "The time invariant quote series ids of the quotes to retrieve. These need to be\r\n             keyed by a unique correlation id allowing the retrieved quote to be identified in the response.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/QuoteSeriesId"
                },
                "description": "The time invariant quote series ids of the quotes to retrieve. These need to be\r\n             keyed by a unique correlation id allowing the retrieved quote to be identified in the response.",
                "nullable": true
              },
              "example": {
                "dS-VOD-PRICE-MID": {
                  "provider": "DataScope",
                  "priceSource": "",
                  "instrumentId": "GB00BH4HKS39",
                  "instrumentIdType": "Isin",
                  "quoteType": "Price",
                  "field": "mid"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/QuoteSeriesId"
                },
                "description": "The time invariant quote series ids of the quotes to retrieve. These need to be\r\n             keyed by a unique correlation id allowing the retrieved quote to be identified in the response.",
                "nullable": true
              },
              "example": {
                "dS-VOD-PRICE-MID": {
                  "provider": "DataScope",
                  "priceSource": "",
                  "instrumentId": "GB00BH4HKS39",
                  "instrumentIdType": "Isin",
                  "quoteType": "Price",
                  "field": "mid"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/QuoteSeriesId"
                },
                "description": "The time invariant quote series ids of the quotes to retrieve. These need to be\r\n             keyed by a unique correlation id allowing the retrieved quote to be identified in the response.",
                "nullable": true
              },
              "example": {
                "dS-VOD-PRICE-MID": {
                  "provider": "DataScope",
                  "priceSource": "",
                  "instrumentId": "GB00BH4HKS39",
                  "instrumentIdType": "Isin",
                  "quoteType": "Price",
                  "field": "mid"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/QuoteSeriesId"
                },
                "description": "The time invariant quote series ids of the quotes to retrieve. These need to be\r\n             keyed by a unique correlation id allowing the retrieved quote to be identified in the response.",
                "nullable": true
              },
              "example": {
                "dS-VOD-PRICE-MID": {
                  "provider": "DataScope",
                  "priceSource": "",
                  "instrumentId": "GB00BH4HKS39",
                  "instrumentIdType": "Isin",
                  "quoteType": "Price",
                  "field": "mid"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The successfully retrieved quotes along with any failures",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GetQuotesResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetQuotesResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetQuotesResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/referenceportfolios/{scope}": {
      "post": {
        "tags": [
          "Reference Portfolio"
        ],
        "summary": "Create reference portfolio",
        "description": "Create a new reference portfolio.",
        "operationId": "CreateReferencePortfolio",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The intended scope of the portfolio",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The intended scope of the portfolio",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "The portfolio creation request object",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateReferencePortfolioRequest"
              },
              "example": {
                "displayName": "MyPortfolioName",
                "description": "Description of my portfolio",
                "code": "MyPortfolioCode",
                "created": "2018-03-05T00:00:00.0000000+00:00",
                "properties": {}
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateReferencePortfolioRequest"
              },
              "example": {
                "displayName": "MyPortfolioName",
                "description": "Description of my portfolio",
                "code": "MyPortfolioCode",
                "created": "2018-03-05T00:00:00.0000000+00:00",
                "properties": {}
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateReferencePortfolioRequest"
              },
              "example": {
                "displayName": "MyPortfolioName",
                "description": "Description of my portfolio",
                "code": "MyPortfolioCode",
                "created": "2018-03-05T00:00:00.0000000+00:00",
                "properties": {}
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateReferencePortfolioRequest"
              },
              "example": {
                "displayName": "MyPortfolioName",
                "description": "Description of my portfolio",
                "code": "MyPortfolioCode",
                "created": "2018-03-05T00:00:00.0000000+00:00",
                "properties": {}
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "The created reference portfolio, with populated id",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Portfolio"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Portfolio"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Portfolio"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      }
    },
    "/api/referenceportfolios/{scope}/{code}/constituents": {
      "post": {
        "tags": [
          "Reference Portfolio"
        ],
        "summary": "Add constituents",
        "description": "Add constituents to the specified reference portfolio.",
        "operationId": "UpsertReferencePortfolioConstituents",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the portfolio",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the portfolio",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the portfolio",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the portfolio",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "The constituents to upload to the portfolio",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertReferencePortfolioConstituentsRequest"
              },
              "example": {
                "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00",
                "weightType": "Periodical",
                "periodType": "Quarterly",
                "periodCount": 2,
                "constituents": [
                  {
                    "instrumentIdentifiers": {
                      "instrument/default/Figi": "BBG0077GZM13",
                      "instrument/default/Isin": "GB00BH4HKS39"
                    },
                    "properties": {
                      "portfolio/MyScope/MyPropertyKey": {
                        "key": "Portfolio/MyScope/MyPropertyKey",
                        "value": {
                          "metricValue": {
                            "value": 12345.5672,
                            "unit": "Unit"
                          }
                        }
                      }
                    },
                    "weight": 100,
                    "currency": "GBP"
                  },
                  {
                    "instrumentIdentifiers": {
                      "instrument/default/Figi": "BBG0077H2WN1",
                      "instrument/default/Isin": "US0378331005"
                    },
                    "properties": {},
                    "weight": 50,
                    "currency": "USD"
                  }
                ]
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertReferencePortfolioConstituentsRequest"
              },
              "example": {
                "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00",
                "weightType": "Periodical",
                "periodType": "Quarterly",
                "periodCount": 2,
                "constituents": [
                  {
                    "instrumentIdentifiers": {
                      "instrument/default/Figi": "BBG0077GZM13",
                      "instrument/default/Isin": "GB00BH4HKS39"
                    },
                    "properties": {
                      "portfolio/MyScope/MyPropertyKey": {
                        "key": "Portfolio/MyScope/MyPropertyKey",
                        "value": {
                          "metricValue": {
                            "value": 12345.5672,
                            "unit": "Unit"
                          }
                        }
                      }
                    },
                    "weight": 100,
                    "currency": "GBP"
                  },
                  {
                    "instrumentIdentifiers": {
                      "instrument/default/Figi": "BBG0077H2WN1",
                      "instrument/default/Isin": "US0378331005"
                    },
                    "properties": {},
                    "weight": 50,
                    "currency": "USD"
                  }
                ]
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertReferencePortfolioConstituentsRequest"
              },
              "example": {
                "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00",
                "weightType": "Periodical",
                "periodType": "Quarterly",
                "periodCount": 2,
                "constituents": [
                  {
                    "instrumentIdentifiers": {
                      "instrument/default/Figi": "BBG0077GZM13",
                      "instrument/default/Isin": "GB00BH4HKS39"
                    },
                    "properties": {
                      "portfolio/MyScope/MyPropertyKey": {
                        "key": "Portfolio/MyScope/MyPropertyKey",
                        "value": {
                          "metricValue": {
                            "value": 12345.5672,
                            "unit": "Unit"
                          }
                        }
                      }
                    },
                    "weight": 100,
                    "currency": "GBP"
                  },
                  {
                    "instrumentIdentifiers": {
                      "instrument/default/Figi": "BBG0077H2WN1",
                      "instrument/default/Isin": "US0378331005"
                    },
                    "properties": {},
                    "weight": 50,
                    "currency": "USD"
                  }
                ]
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertReferencePortfolioConstituentsRequest"
              },
              "example": {
                "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00",
                "weightType": "Periodical",
                "periodType": "Quarterly",
                "periodCount": 2,
                "constituents": [
                  {
                    "instrumentIdentifiers": {
                      "instrument/default/Figi": "BBG0077GZM13",
                      "instrument/default/Isin": "GB00BH4HKS39"
                    },
                    "properties": {
                      "portfolio/MyScope/MyPropertyKey": {
                        "key": "Portfolio/MyScope/MyPropertyKey",
                        "value": {
                          "metricValue": {
                            "value": 12345.5672,
                            "unit": "Unit"
                          }
                        }
                      }
                    },
                    "weight": 100,
                    "currency": "GBP"
                  },
                  {
                    "instrumentIdentifiers": {
                      "instrument/default/Figi": "BBG0077H2WN1",
                      "instrument/default/Isin": "US0378331005"
                    },
                    "properties": {},
                    "weight": 50,
                    "currency": "USD"
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertReferencePortfolioConstituentsResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertReferencePortfolioConstituentsResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertReferencePortfolioConstituentsResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      },
      "get": {
        "tags": [
          "Reference Portfolio"
        ],
        "summary": "Get constituents",
        "description": "Get constituents from the specified reference portfolio at an effective time.",
        "operationId": "GetReferencePortfolioConstituents",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the reference portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the reference portfolio.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the reference portfolio. Together with the scope this uniquely identifies\r\n            the reference portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the reference portfolio. Together with the scope this uniquely identifies\r\n            the reference portfolio.",
              "nullable": true
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective date of the constituents to retrieve. Defaults to the current LUSID system datetime if not specified.",
            "schema": {
              "type": "string",
              "description": "The effective date of the constituents to retrieve. Defaults to the current LUSID system datetime if not specified.",
              "format": "dateorcutlabel",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve constituents. Defaults to return the latest version\r\n            of each constituent if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to retrieve constituents. Defaults to return the latest version\r\n            of each constituent if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "propertyKeys",
            "in": "query",
            "description": "A list of property keys from the \"Instrument\" or \"ReferenceHolding\" domain to decorate onto\r\n            the constituents. These take the format {domain}/{scope}/{code} e.g. \"Instrument/system/Name\" or\r\n            \"ReferenceHolding/strategy/quantsignal\". Defaults to return all available instrument and reference holding properties if not specified.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
              },
              "description": "A list of property keys from the \"Instrument\" or \"ReferenceHolding\" domain to decorate onto\r\n            the constituents. These take the format {domain}/{scope}/{code} e.g. \"Instrument/system/Name\" or\r\n            \"ReferenceHolding/strategy/quantsignal\". Defaults to return all available instrument and reference holding properties if not specified.",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The requested reference portfolio constituents",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GetReferencePortfolioConstituentsResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetReferencePortfolioConstituentsResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetReferencePortfolioConstituentsResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      }
    },
    "/api/referenceportfolios/{scope}/{code}/constituentsadjustments": {
      "get": {
        "tags": [
          "Reference Portfolio"
        ],
        "summary": "List constituents adjustments",
        "description": "List the constituent adjustments made to the specified reference portfolio over a specified interval of effective time.",
        "operationId": "ListConstituentsAdjustments",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the portfolio",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the portfolio",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "Code for the portfolio",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "Code for the portfolio",
              "nullable": true
            }
          },
          {
            "name": "fromEffectiveAt",
            "in": "query",
            "description": "Events between this time (inclusive) and the toEffectiveAt are returned.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Events between this time (inclusive) and the toEffectiveAt are returned.",
              "format": "dateorcutlabel"
            }
          },
          {
            "name": "toEffectiveAt",
            "in": "query",
            "description": "Events between this time (inclusive) and the fromEffectiveAt are returned.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Events between this time (inclusive) and the fromEffectiveAt are returned.",
              "format": "dateorcutlabel"
            }
          },
          {
            "name": "asAtTime",
            "in": "query",
            "description": "The as-at time for which the result is valid.",
            "schema": {
              "type": "string",
              "description": "The as-at time for which the result is valid.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfConstituentsAdjustmentHeader"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfConstituentsAdjustmentHeader"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfConstituentsAdjustmentHeader"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      }
    },
    "/api/relationdefinitions": {
      "post": {
        "tags": [
          "Relation Definitions"
        ],
        "summary": "[DEPRECATED] Create a relation definition",
        "description": "Define a new relation.",
        "operationId": "CreateRelationDefinition",
        "requestBody": {
          "description": "The definition of the new relation.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRelationDefinitionRequest"
              },
              "example": {
                "scope": "PortfolioManagementTeam",
                "code": "Traders",
                "sourceEntityDomain": "Portfolio",
                "targetEntityDomain": "Person",
                "displayName": "Authorised traders to trade for specific portfolio ",
                "outwardDescription": "can be traded by",
                "inwardDescription": "can trade with portfolio",
                "lifeTime": "TimeVariant",
                "constraintStyle": "Collection"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRelationDefinitionRequest"
              },
              "example": {
                "scope": "PortfolioManagementTeam",
                "code": "Traders",
                "sourceEntityDomain": "Portfolio",
                "targetEntityDomain": "Person",
                "displayName": "Authorised traders to trade for specific portfolio ",
                "outwardDescription": "can be traded by",
                "inwardDescription": "can trade with portfolio",
                "lifeTime": "TimeVariant",
                "constraintStyle": "Collection"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRelationDefinitionRequest"
              },
              "example": {
                "scope": "PortfolioManagementTeam",
                "code": "Traders",
                "sourceEntityDomain": "Portfolio",
                "targetEntityDomain": "Person",
                "displayName": "Authorised traders to trade for specific portfolio ",
                "outwardDescription": "can be traded by",
                "inwardDescription": "can trade with portfolio",
                "lifeTime": "TimeVariant",
                "constraintStyle": "Collection"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRelationDefinitionRequest"
              },
              "example": {
                "scope": "PortfolioManagementTeam",
                "code": "Traders",
                "sourceEntityDomain": "Portfolio",
                "targetEntityDomain": "Person",
                "displayName": "Authorised traders to trade for specific portfolio ",
                "outwardDescription": "can be traded by",
                "inwardDescription": "can trade with portfolio",
                "lifeTime": "TimeVariant",
                "constraintStyle": "Collection"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "The newly created relation definition",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/RelationDefinition"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RelationDefinition"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/RelationDefinition"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Deprecated"
      }
    },
    "/api/relationdefinitions/{scope}/{code}": {
      "get": {
        "tags": [
          "Relation Definitions"
        ],
        "summary": "[DEPRECATED] Get relation definition",
        "description": "Retrieve the definition of a specified relation.",
        "operationId": "GetRelationDefinition",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the specified relation.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the specified relation.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the specified relation. Together with the domain and scope this uniquely\r\n            identifies the relation.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the specified relation. Together with the domain and scope this uniquely\r\n            identifies the relation.",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the relation definition. Defaults to return\r\n            the latest version of the definition if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to retrieve the relation definition. Defaults to return\r\n            the latest version of the definition if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The requested relation definition",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/RelationDefinition"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RelationDefinition"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/RelationDefinition"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Deprecated"
      }
    },
    "/api/relations/{scope}/{code}": {
      "post": {
        "tags": [
          "Relations"
        ],
        "summary": "[DEPRECATED] Create Relation",
        "description": "Create a relation between two entity objects by their identifiers",
        "operationId": "CreateRelation",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the relation definition",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the relation definition",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the relation definition",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the relation definition",
              "nullable": true
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime or cut label at which the relation should be effective from. Defaults to the current LUSID system datetime if not specified.",
            "schema": {
              "type": "string",
              "description": "The effective datetime or cut label at which the relation should be effective from. Defaults to the current LUSID system datetime if not specified.",
              "format": "dateorcutlabel",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "The details of the relation to create.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRelationRequest"
              },
              "example": {
                "sourceEntityId": {
                  "idTypeScope": "HrSystem1",
                  "idTypeCode": "InternalId",
                  "code": "XY10001111"
                },
                "targetEntityId": {
                  "idTypeScope": "HrSystem1",
                  "idTypeCode": "InternalId",
                  "code": "XY10001111"
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRelationRequest"
              },
              "example": {
                "sourceEntityId": {
                  "idTypeScope": "HrSystem1",
                  "idTypeCode": "InternalId",
                  "code": "XY10001111"
                },
                "targetEntityId": {
                  "idTypeScope": "HrSystem1",
                  "idTypeCode": "InternalId",
                  "code": "XY10001111"
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRelationRequest"
              },
              "example": {
                "sourceEntityId": {
                  "idTypeScope": "HrSystem1",
                  "idTypeCode": "InternalId",
                  "code": "XY10001111"
                },
                "targetEntityId": {
                  "idTypeScope": "HrSystem1",
                  "idTypeCode": "InternalId",
                  "code": "XY10001111"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRelationRequest"
              },
              "example": {
                "sourceEntityId": {
                  "idTypeScope": "HrSystem1",
                  "idTypeCode": "InternalId",
                  "code": "XY10001111"
                },
                "targetEntityId": {
                  "idTypeScope": "HrSystem1",
                  "idTypeCode": "InternalId",
                  "code": "XY10001111"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The newly created relation.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CompleteRelation"
                },
                "example": {
                  "relationDefinitionId": {
                    "scope": "PortfolioManagementTeam",
                    "code": "Traders"
                  },
                  "sourceEntityId": {
                    "entityType": "PortfolioGroup",
                    "scope": "UkPortfolio",
                    "code": "PortfolioId-148176"
                  },
                  "targetEntityId": {
                    "entityType": "Person",
                    "idTypeScope": "HrSystem1",
                    "idTypeCode": "InternalId",
                    "code": "XY10001111"
                  },
                  "outwardDescription": "can be traded by",
                  "inwardDescription": "can trade with portfolio",
                  "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompleteRelation"
                },
                "example": {
                  "relationDefinitionId": {
                    "scope": "PortfolioManagementTeam",
                    "code": "Traders"
                  },
                  "sourceEntityId": {
                    "entityType": "PortfolioGroup",
                    "scope": "UkPortfolio",
                    "code": "PortfolioId-148176"
                  },
                  "targetEntityId": {
                    "entityType": "Person",
                    "idTypeScope": "HrSystem1",
                    "idTypeCode": "InternalId",
                    "code": "XY10001111"
                  },
                  "outwardDescription": "can be traded by",
                  "inwardDescription": "can trade with portfolio",
                  "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompleteRelation"
                },
                "example": {
                  "relationDefinitionId": {
                    "scope": "PortfolioManagementTeam",
                    "code": "Traders"
                  },
                  "sourceEntityId": {
                    "entityType": "PortfolioGroup",
                    "scope": "UkPortfolio",
                    "code": "PortfolioId-148176"
                  },
                  "targetEntityId": {
                    "entityType": "Person",
                    "idTypeScope": "HrSystem1",
                    "idTypeCode": "InternalId",
                    "code": "XY10001111"
                  },
                  "outwardDescription": "can be traded by",
                  "inwardDescription": "can trade with portfolio",
                  "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Deprecated"
      }
    },
    "/api/relations/{scope}/{code}/$delete": {
      "post": {
        "tags": [
          "Relations"
        ],
        "summary": "[DEPRECATED] Delete a relation",
        "description": "Delete a relation between two entity objects represented by their identifiers",
        "operationId": "DeleteRelation",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the relation definition",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the relation definition",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the relation definition",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the relation definition",
              "nullable": true
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime or cut label at which the relation should the deletion be effective from. Defaults to the current LUSID system datetime if not specified.",
            "schema": {
              "type": "string",
              "description": "The effective datetime or cut label at which the relation should the deletion be effective from. Defaults to the current LUSID system datetime if not specified.",
              "format": "dateorcutlabel",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "The details of the relation to delete.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteRelationRequest"
              },
              "example": {
                "sourceEntityId": {
                  "entityType": "PortfolioGroup",
                  "scope": "UkPortfolio",
                  "code": "PortfolioId-148176"
                },
                "targetEntityId": {
                  "entityType": "Person",
                  "idTypeScope": "HrSystem1",
                  "idTypeCode": "InternalId",
                  "code": "XY10001111"
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteRelationRequest"
              },
              "example": {
                "sourceEntityId": {
                  "entityType": "PortfolioGroup",
                  "scope": "UkPortfolio",
                  "code": "PortfolioId-148176"
                },
                "targetEntityId": {
                  "entityType": "Person",
                  "idTypeScope": "HrSystem1",
                  "idTypeCode": "InternalId",
                  "code": "XY10001111"
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteRelationRequest"
              },
              "example": {
                "sourceEntityId": {
                  "entityType": "PortfolioGroup",
                  "scope": "UkPortfolio",
                  "code": "PortfolioId-148176"
                },
                "targetEntityId": {
                  "entityType": "Person",
                  "idTypeScope": "HrSystem1",
                  "idTypeCode": "InternalId",
                  "code": "XY10001111"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteRelationRequest"
              },
              "example": {
                "sourceEntityId": {
                  "entityType": "PortfolioGroup",
                  "scope": "UkPortfolio",
                  "code": "PortfolioId-148176"
                },
                "targetEntityId": {
                  "entityType": "Person",
                  "idTypeScope": "HrSystem1",
                  "idTypeCode": "InternalId",
                  "code": "XY10001111"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The datetime that the relation is deleted",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Deprecated"
      }
    },
    "/api/scopes": {
      "get": {
        "tags": [
          "Scopes"
        ],
        "summary": "[EARLY ACCESS] List Scopes",
        "description": "List all the scopes that contain data.",
        "operationId": "ListScopes",
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the result set.\r\n            For example, to filter on the Scope, use \"scope eq 'string'\"\r\n            Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "maxLength": 2147483647,
              "minLength": 0,
              "pattern": "(?s).*",
              "type": "string",
              "description": "Expression to filter the result set.\r\n            For example, to filter on the Scope, use \"scope eq 'string'\"\r\n            Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of scopes",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfScopeDefinition"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfScopeDefinition"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfScopeDefinition"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/search/portfoliogroups": {
      "get": {
        "tags": [
          "Search"
        ],
        "summary": "[EARLY ACCESS] Search Portfolio Groups",
        "description": "Search through all portfolio groups",
        "operationId": "SearchPortfolioGroups",
        "parameters": [
          {
            "name": "search",
            "in": "query",
            "description": "A parameter used for searching any portfolio group field. Wildcards(*) are supported at the end of words (e.g. 'Port*'). Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "type": "string",
              "description": "A parameter used for searching any portfolio group field. Wildcards(*) are supported at the end of words (e.g. 'Port*'). Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
              "nullable": true
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the result set. \r\nFor example, to filter on the Scope, use \"id.scope eq 'string'\"\r\nRead more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "type": "string",
              "description": "Expression to filter the result set. \r\nFor example, to filter on the Scope, use \"id.scope eq 'string'\"\r\nRead more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
              "nullable": true
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "Order the results by these fields. Use use the '-' sign to denote descending order e.g. -MyFieldName. Multiple fields can be denoted by a comma e.g. -MyFieldName,AnotherFieldName,-AFurtherFieldName",
            "schema": {
              "type": "string",
              "description": "Order the results by these fields. Use use the '-' sign to denote descending order e.g. -MyFieldName. Multiple fields can be denoted by a comma e.g. -MyFieldName,AnotherFieldName,-AFurtherFieldName",
              "nullable": true
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "When paginating, only return this number of records",
            "schema": {
              "type": "integer",
              "description": "When paginating, only return this number of records",
              "format": "int32"
            },
            "x-nullable": true
          },
          {
            "name": "page",
            "in": "query",
            "description": "Encoded page string returned from a previous search result that will retrieve the next page of data. When this field is supplied, filter, sortby and search fields should not be supplied.",
            "schema": {
              "type": "string",
              "description": "Encoded page string returned from a previous search result that will retrieve the next page of data. When this field is supplied, filter, sortby and search fields should not be supplied.",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfPortfolioGroupSearchResult"
                },
                "example": {
                  "values": [
                    {
                      "href": "https://example.lusid.com/api/portfoliogroups/demo-scope/demo-code",
                      "id": {
                        "scope": "demo-scope",
                        "code": "demo-group-code"
                      },
                      "displayName": "Test portfolio group",
                      "description": "UK Portfolio",
                      "created": "2020-03-28T00:00:00.0000000+00:00",
                      "portfolios": [
                        {
                          "scope": "demo-scope",
                          "code": "demo-portfolio"
                        }
                      ],
                      "subGroups": [
                        {
                          "scope": "demo-scope",
                          "code": "demo-sub-group"
                        }
                      ]
                    }
                  ],
                  "href": "https://example.lusid.com/api/portfoliogroups",
                  "links": []
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfPortfolioGroupSearchResult"
                },
                "example": {
                  "values": [
                    {
                      "href": "https://example.lusid.com/api/portfoliogroups/demo-scope/demo-code",
                      "id": {
                        "scope": "demo-scope",
                        "code": "demo-group-code"
                      },
                      "displayName": "Test portfolio group",
                      "description": "UK Portfolio",
                      "created": "2020-03-28T00:00:00.0000000+00:00",
                      "portfolios": [
                        {
                          "scope": "demo-scope",
                          "code": "demo-portfolio"
                        }
                      ],
                      "subGroups": [
                        {
                          "scope": "demo-scope",
                          "code": "demo-sub-group"
                        }
                      ]
                    }
                  ],
                  "href": "https://example.lusid.com/api/portfoliogroups",
                  "links": []
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfPortfolioGroupSearchResult"
                },
                "example": {
                  "values": [
                    {
                      "href": "https://example.lusid.com/api/portfoliogroups/demo-scope/demo-code",
                      "id": {
                        "scope": "demo-scope",
                        "code": "demo-group-code"
                      },
                      "displayName": "Test portfolio group",
                      "description": "UK Portfolio",
                      "created": "2020-03-28T00:00:00.0000000+00:00",
                      "portfolios": [
                        {
                          "scope": "demo-scope",
                          "code": "demo-portfolio"
                        }
                      ],
                      "subGroups": [
                        {
                          "scope": "demo-scope",
                          "code": "demo-sub-group"
                        }
                      ]
                    }
                  ],
                  "href": "https://example.lusid.com/api/portfoliogroups",
                  "links": []
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      },
      "post": {
        "tags": [
          "Search"
        ],
        "summary": "[DEPRECATED] Portfolio groups search",
        "description": "Search across all portfolio groups across all scopes.",
        "operationId": "PortfolioGroupsSearch",
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the result set. Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "type": "string",
              "description": "Expression to filter the result set. Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "The search query to use. Read more about search queries in LUSID here https://support.lusid.com/constructing-a-search-request.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "description": "The search query to use. Read more about search queries in LUSID here https://support.lusid.com/constructing-a-search-request."
              }
            },
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "description": "The search query to use. Read more about search queries in LUSID here https://support.lusid.com/constructing-a-search-request."
              }
            },
            "text/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "description": "The search query to use. Read more about search queries in LUSID here https://support.lusid.com/constructing-a-search-request."
              }
            },
            "application/*+json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "description": "The search query to use. Read more about search queries in LUSID here https://support.lusid.com/constructing-a-search-request."
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The portfolio groups found by the search",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfPortfolioGroup"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfPortfolioGroup"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfPortfolioGroup"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Deprecated"
      }
    },
    "/api/search/portfolios": {
      "get": {
        "tags": [
          "Search"
        ],
        "summary": "[EARLY ACCESS] Search Portfolios",
        "description": "Search through all portfolios",
        "operationId": "SearchPortfolios",
        "parameters": [
          {
            "name": "search",
            "in": "query",
            "description": "A parameter used for searching any portfolio field. Wildcards(*) are supported at the end of words (e.g. 'Port*'). Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "type": "string",
              "description": "A parameter used for searching any portfolio field. Wildcards(*) are supported at the end of words (e.g. 'Port*'). Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
              "nullable": true
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the result set. \r\nFor example, to filter on the portfolio Type, use \"type eq 'Transaction'\"\r\nRead more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "type": "string",
              "description": "Expression to filter the result set. \r\nFor example, to filter on the portfolio Type, use \"type eq 'Transaction'\"\r\nRead more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
              "nullable": true
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "Order the results by these fields. Use use the '-' sign to denote descending order e.g. -MyFieldName. Multiple fields can be denoted by a comma e.g. -MyFieldName,AnotherFieldName,-AFurtherFieldName",
            "schema": {
              "type": "string",
              "description": "Order the results by these fields. Use use the '-' sign to denote descending order e.g. -MyFieldName. Multiple fields can be denoted by a comma e.g. -MyFieldName,AnotherFieldName,-AFurtherFieldName",
              "nullable": true
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "When paginating, only return this number of records",
            "schema": {
              "type": "integer",
              "description": "When paginating, only return this number of records",
              "format": "int32"
            },
            "x-nullable": true
          },
          {
            "name": "page",
            "in": "query",
            "description": "Encoded page string returned from a previous search result that will retrieve the next page of data. When this field is supplied, filter, sortby and search fields should not be supplied.",
            "schema": {
              "type": "string",
              "description": "Encoded page string returned from a previous search result that will retrieve the next page of data. When this field is supplied, filter, sortby and search fields should not be supplied.",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfPortfolioSearchResult"
                },
                "example": {
                  "values": [
                    {
                      "id": {
                        "scope": "demo-scope",
                        "code": "demo-code"
                      },
                      "type": "Transaction",
                      "href": "https://example.lusid.com/api/portfolios/demo-scope/demo-code",
                      "description": "UK Holidings",
                      "displayName": "UK Portfolio",
                      "isDerived": true,
                      "created": "2019-04-06T12:00:05.0000000+00:00",
                      "parentPortfolioId": {
                        "scope": "demo-parent",
                        "code": "demo-parent"
                      },
                      "baseCurrency": "GBP",
                      "properties": [
                        {
                          "key": "Portfolio/default/Country",
                          "value": {
                            "labelValue": "UK"
                          },
                          "effectiveFrom": "2019-04-06T12:00:05.0000000+00:00"
                        }
                      ]
                    }
                  ],
                  "href": "https://example.lusid.com/api/portfolios",
                  "links": []
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfPortfolioSearchResult"
                },
                "example": {
                  "values": [
                    {
                      "id": {
                        "scope": "demo-scope",
                        "code": "demo-code"
                      },
                      "type": "Transaction",
                      "href": "https://example.lusid.com/api/portfolios/demo-scope/demo-code",
                      "description": "UK Holidings",
                      "displayName": "UK Portfolio",
                      "isDerived": true,
                      "created": "2019-04-06T12:00:05.0000000+00:00",
                      "parentPortfolioId": {
                        "scope": "demo-parent",
                        "code": "demo-parent"
                      },
                      "baseCurrency": "GBP",
                      "properties": [
                        {
                          "key": "Portfolio/default/Country",
                          "value": {
                            "labelValue": "UK"
                          },
                          "effectiveFrom": "2019-04-06T12:00:05.0000000+00:00"
                        }
                      ]
                    }
                  ],
                  "href": "https://example.lusid.com/api/portfolios",
                  "links": []
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfPortfolioSearchResult"
                },
                "example": {
                  "values": [
                    {
                      "id": {
                        "scope": "demo-scope",
                        "code": "demo-code"
                      },
                      "type": "Transaction",
                      "href": "https://example.lusid.com/api/portfolios/demo-scope/demo-code",
                      "description": "UK Holidings",
                      "displayName": "UK Portfolio",
                      "isDerived": true,
                      "created": "2019-04-06T12:00:05.0000000+00:00",
                      "parentPortfolioId": {
                        "scope": "demo-parent",
                        "code": "demo-parent"
                      },
                      "baseCurrency": "GBP",
                      "properties": [
                        {
                          "key": "Portfolio/default/Country",
                          "value": {
                            "labelValue": "UK"
                          },
                          "effectiveFrom": "2019-04-06T12:00:05.0000000+00:00"
                        }
                      ]
                    }
                  ],
                  "href": "https://example.lusid.com/api/portfolios",
                  "links": []
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      },
      "post": {
        "tags": [
          "Search"
        ],
        "summary": "[DEPRECATED] Portfolios search",
        "description": "Search across all portfolios across all scopes.",
        "operationId": "PortfoliosSearch",
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the result set. Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "type": "string",
              "description": "Expression to filter the result set. Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "The search query to use. Read more about search queries in LUSID here https://support.lusid.com/constructing-a-search-request.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "description": "The search query to use. Read more about search queries in LUSID here https://support.lusid.com/constructing-a-search-request."
              }
            },
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "description": "The search query to use. Read more about search queries in LUSID here https://support.lusid.com/constructing-a-search-request."
              }
            },
            "text/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "description": "The search query to use. Read more about search queries in LUSID here https://support.lusid.com/constructing-a-search-request."
              }
            },
            "application/*+json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "description": "The search query to use. Read more about search queries in LUSID here https://support.lusid.com/constructing-a-search-request."
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The portfolios found by the search",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfPortfolioSearchResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfPortfolioSearchResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfPortfolioSearchResult"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Deprecated"
      }
    },
    "/api/search/propertydefinitions": {
      "get": {
        "tags": [
          "Search"
        ],
        "summary": "[EARLY ACCESS] Search Property Definitions",
        "description": "Search through all Property Definitions",
        "operationId": "SearchProperties",
        "parameters": [
          {
            "name": "search",
            "in": "query",
            "description": "A parameter used for searching any field. Wildcards(*) are supported at the end of words (e.g. 'Port*'). Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "type": "string",
              "description": "A parameter used for searching any field. Wildcards(*) are supported at the end of words (e.g. 'Port*'). Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
              "nullable": true
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the result set. \r\nFor example, to filter on the Value Type, use \"valueType eq 'string'\"\r\nRead more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "type": "string",
              "description": "Expression to filter the result set. \r\nFor example, to filter on the Value Type, use \"valueType eq 'string'\"\r\nRead more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
              "nullable": true
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "Order the results by these fields. Use use the '-' sign to denote descending order e.g. -MyFieldName. Multiple fields can be denoted by a comma e.g. -MyFieldName,AnotherFieldName,-AFurtherFieldName",
            "schema": {
              "type": "string",
              "description": "Order the results by these fields. Use use the '-' sign to denote descending order e.g. -MyFieldName. Multiple fields can be denoted by a comma e.g. -MyFieldName,AnotherFieldName,-AFurtherFieldName",
              "nullable": true
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "When paginating, only return this number of records",
            "schema": {
              "type": "integer",
              "description": "When paginating, only return this number of records",
              "format": "int32"
            },
            "x-nullable": true
          },
          {
            "name": "page",
            "in": "query",
            "description": "Encoded page string returned from a previous search result that will retrieve the next page of data. When this field is supplied, filter, sortby and search fields should not be supplied.",
            "schema": {
              "type": "string",
              "description": "Encoded page string returned from a previous search result that will retrieve the next page of data. When this field is supplied, filter, sortby and search fields should not be supplied.",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfPropertyDefinitionSearchResult"
                },
                "example": {
                  "values": [
                    {
                      "href": "https://example.lusid.com/api/properties/demo-scope/demo-code",
                      "key": "Portfolio/default/Country",
                      "valueType": "String",
                      "displayName": "Country",
                      "dataTypeId": {
                        "scope": "demo-scope",
                        "code": "demo-code"
                      },
                      "type": "Information",
                      "unitSchema": "Basic",
                      "domain": "Portfolio",
                      "scope": "default",
                      "code": "Country",
                      "valueRequired": false,
                      "lifeTime": "Perpetual",
                      "constraintStyle": "Property",
                      "propertyDefinitionType": "ValueProperty",
                      "propertyDescription": "A demonstration property definition search result"
                    }
                  ],
                  "href": "https://example.lusid.com/api/properties",
                  "links": []
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfPropertyDefinitionSearchResult"
                },
                "example": {
                  "values": [
                    {
                      "href": "https://example.lusid.com/api/properties/demo-scope/demo-code",
                      "key": "Portfolio/default/Country",
                      "valueType": "String",
                      "displayName": "Country",
                      "dataTypeId": {
                        "scope": "demo-scope",
                        "code": "demo-code"
                      },
                      "type": "Information",
                      "unitSchema": "Basic",
                      "domain": "Portfolio",
                      "scope": "default",
                      "code": "Country",
                      "valueRequired": false,
                      "lifeTime": "Perpetual",
                      "constraintStyle": "Property",
                      "propertyDefinitionType": "ValueProperty",
                      "propertyDescription": "A demonstration property definition search result"
                    }
                  ],
                  "href": "https://example.lusid.com/api/properties",
                  "links": []
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfPropertyDefinitionSearchResult"
                },
                "example": {
                  "values": [
                    {
                      "href": "https://example.lusid.com/api/properties/demo-scope/demo-code",
                      "key": "Portfolio/default/Country",
                      "valueType": "String",
                      "displayName": "Country",
                      "dataTypeId": {
                        "scope": "demo-scope",
                        "code": "demo-code"
                      },
                      "type": "Information",
                      "unitSchema": "Basic",
                      "domain": "Portfolio",
                      "scope": "default",
                      "code": "Country",
                      "valueRequired": false,
                      "lifeTime": "Perpetual",
                      "constraintStyle": "Property",
                      "propertyDefinitionType": "ValueProperty",
                      "propertyDescription": "A demonstration property definition search result"
                    }
                  ],
                  "href": "https://example.lusid.com/api/properties",
                  "links": []
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      },
      "post": {
        "tags": [
          "Search"
        ],
        "summary": "[DEPRECATED] Search property definitions",
        "description": "Search across all user defined property definitions across all scopes.",
        "operationId": "PropertiesSearch",
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the result set. Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "type": "string",
              "description": "Expression to filter the result set. Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "The search query to use. Read more about search queries in LUSID here https://support.lusid.com/constructing-a-search-request.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "description": "The search query to use. Read more about search queries in LUSID here https://support.lusid.com/constructing-a-search-request."
              }
            },
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "description": "The search query to use. Read more about search queries in LUSID here https://support.lusid.com/constructing-a-search-request."
              }
            },
            "text/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "description": "The search query to use. Read more about search queries in LUSID here https://support.lusid.com/constructing-a-search-request."
              }
            },
            "application/*+json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "description": "The search query to use. Read more about search queries in LUSID here https://support.lusid.com/constructing-a-search-request."
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The property definitions found by the search",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfPropertyDefinition"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfPropertyDefinition"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfPropertyDefinition"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Deprecated"
      }
    },
    "/api/systemconfiguration/cutlabels": {
      "post": {
        "tags": [
          "Cut Label Definitions"
        ],
        "summary": "[EARLY ACCESS] Create a Cut Label",
        "description": "Create a Cut Label valid in all scopes",
        "operationId": "CreateCutLabelDefinition",
        "requestBody": {
          "description": "The cut label definition",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCutLabelDefinitionRequest"
              },
              "example": {
                "code": "CutLabelCode",
                "displayName": "CutLabelDisplayName",
                "description": "description of cut label",
                "cutLocalTime": {
                  "hours": 17,
                  "minutes": 0
                },
                "timeZone": "GB"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCutLabelDefinitionRequest"
              },
              "example": {
                "code": "CutLabelCode",
                "displayName": "CutLabelDisplayName",
                "description": "description of cut label",
                "cutLocalTime": {
                  "hours": 17,
                  "minutes": 0
                },
                "timeZone": "GB"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCutLabelDefinitionRequest"
              },
              "example": {
                "code": "CutLabelCode",
                "displayName": "CutLabelDisplayName",
                "description": "description of cut label",
                "cutLocalTime": {
                  "hours": 17,
                  "minutes": 0
                },
                "timeZone": "GB"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCutLabelDefinitionRequest"
              },
              "example": {
                "code": "CutLabelCode",
                "displayName": "CutLabelDisplayName",
                "description": "description of cut label",
                "cutLocalTime": {
                  "hours": 17,
                  "minutes": 0
                },
                "timeZone": "GB"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The created cut label",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CutLabelDefinition"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CutLabelDefinition"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CutLabelDefinition"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      },
      "get": {
        "tags": [
          "Cut Label Definitions"
        ],
        "summary": "[EARLY ACCESS] List Existing Cut Labels",
        "description": "List all the Cut Label Definitions that are valid at the given AsAt time",
        "operationId": "ListCutLabelDefinitions",
        "parameters": [
          {
            "name": "asAt",
            "in": "query",
            "description": "Optional. The As At time at which listed Cut Labels are valid",
            "schema": {
              "type": "string",
              "description": "Optional. The As At time at which listed Cut Labels are valid",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "Optional. Order the results by these fields. Use use the '-' sign to denote descending order e.g. -MyFieldName",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Optional. Order the results by these fields. Use use the '-' sign to denote descending order e.g. -MyFieldName",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "start",
            "in": "query",
            "description": "Optional. When paginating, skip this number of results",
            "schema": {
              "type": "integer",
              "description": "Optional. When paginating, skip this number of results",
              "format": "int32",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Optional. When paginating, limit the number of returned results to this many.",
            "schema": {
              "type": "integer",
              "description": "Optional. When paginating, limit the number of returned results to this many.",
              "format": "int32",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Optional. Expression to filter the result set.\r\n            For example, to filter on code, use \"code eq 'string'\"\r\n            Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "type": "string",
              "description": "Optional. Expression to filter the result set.\r\n            For example, to filter on code, use \"code eq 'string'\"\r\n            Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
              "nullable": true
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "The pagination token to use to continue listing cut labels from a previous call This value is returned from the previous call.\r\nIf a pagination token is provided the sortBy, filter, and asAt fields\r\nmust not have changed since the original request. Also, if set, a start value cannot be provided.",
            "schema": {
              "type": "string",
              "description": "The pagination token to use to continue listing cut labels from a previous call This value is returned from the previous call.\r\nIf a pagination token is provided the sortBy, filter, and asAt fields\r\nmust not have changed since the original request. Also, if set, a start value cannot be provided.",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of cut labels",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfCutLabelDefinition"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfCutLabelDefinition"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfCutLabelDefinition"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/systemconfiguration/cutlabels/{code}": {
      "put": {
        "tags": [
          "Cut Label Definitions"
        ],
        "summary": "[EARLY ACCESS] Update a Cut Label",
        "description": "Update a specified cut label",
        "operationId": "UpdateCutLabelDefinition",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "description": "The Code of the Cut Label that is being updated",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The Code of the Cut Label that is being updated",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "The cut label update definition",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCutLabelDefinitionRequest"
              },
              "example": {
                "displayName": "CutLabelDisplayName",
                "description": "description of cut label",
                "cutLocalTime": {
                  "hours": 17,
                  "minutes": 0
                },
                "timeZone": "GB"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCutLabelDefinitionRequest"
              },
              "example": {
                "displayName": "CutLabelDisplayName",
                "description": "description of cut label",
                "cutLocalTime": {
                  "hours": 17,
                  "minutes": 0
                },
                "timeZone": "GB"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCutLabelDefinitionRequest"
              },
              "example": {
                "displayName": "CutLabelDisplayName",
                "description": "description of cut label",
                "cutLocalTime": {
                  "hours": 17,
                  "minutes": 0
                },
                "timeZone": "GB"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCutLabelDefinitionRequest"
              },
              "example": {
                "displayName": "CutLabelDisplayName",
                "description": "description of cut label",
                "cutLocalTime": {
                  "hours": 17,
                  "minutes": 0
                },
                "timeZone": "GB"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The updated cut label",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CutLabelDefinition"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CutLabelDefinition"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CutLabelDefinition"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      },
      "get": {
        "tags": [
          "Cut Label Definitions"
        ],
        "summary": "[EARLY ACCESS] Get a Cut Label",
        "description": "Get a specified cut label at a given time",
        "operationId": "GetCutLabelDefinition",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "description": "The Code of the Cut Label that is being queried",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The Code of the Cut Label that is being queried",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The time at which to get the Cut Label",
            "schema": {
              "type": "string",
              "description": "The time at which to get the Cut Label",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The requested cut label",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CutLabelDefinition"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CutLabelDefinition"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CutLabelDefinition"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      },
      "delete": {
        "tags": [
          "Cut Label Definitions"
        ],
        "summary": "[EARLY ACCESS] Delete a Cut Label",
        "description": "Delete a specified cut label",
        "operationId": "DeleteCutLabelDefinition",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "description": "The Code of the Cut Label that is being Deleted",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The Code of the Cut Label that is being Deleted",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The time of deletion",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "format": "date-time"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "date-time"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/systemconfiguration/transactions": {
      "get": {
        "tags": [
          "System Configuration"
        ],
        "summary": "[EARLY ACCESS] List transaction types",
        "description": "Get the list of persisted transaction types",
        "operationId": "ListConfigurationTransactionTypes",
        "parameters": [
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the Transaction configuration types. Defaults\r\n            to return the latest version of the holdings if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to retrieve the Transaction configuration types. Defaults\r\n            to return the latest version of the holdings if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionSetConfigurationData"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionSetConfigurationData"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionSetConfigurationData"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/systemconfiguration/transactions/type": {
      "post": {
        "tags": [
          "System Configuration"
        ],
        "summary": "[EARLY ACCESS] Create transaction type",
        "description": "Create a new transaction type by specifying a definition and the mappings to movements",
        "operationId": "CreateConfigurationTransactionType",
        "requestBody": {
          "description": "A transaction type definition",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/TransactionConfigurationDataRequest"
              },
              "example": {
                "aliases": [
                  {
                    "type": "Another-Sell",
                    "description": "Sale",
                    "transactionClass": "MyDefault",
                    "transactionGroup": "MyGroup",
                    "transactionRoles": "LongShorter"
                  }
                ],
                "movements": [
                  {
                    "movementTypes": "StockMovement",
                    "side": "Side1",
                    "direction": -1,
                    "properties": {},
                    "mappings": []
                  },
                  {
                    "movementTypes": "CashCommitment",
                    "side": "Side2",
                    "direction": 1,
                    "properties": {},
                    "mappings": []
                  }
                ],
                "properties": {}
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TransactionConfigurationDataRequest"
              },
              "example": {
                "aliases": [
                  {
                    "type": "Another-Sell",
                    "description": "Sale",
                    "transactionClass": "MyDefault",
                    "transactionGroup": "MyGroup",
                    "transactionRoles": "LongShorter"
                  }
                ],
                "movements": [
                  {
                    "movementTypes": "StockMovement",
                    "side": "Side1",
                    "direction": -1,
                    "properties": {},
                    "mappings": []
                  },
                  {
                    "movementTypes": "CashCommitment",
                    "side": "Side2",
                    "direction": 1,
                    "properties": {},
                    "mappings": []
                  }
                ],
                "properties": {}
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/TransactionConfigurationDataRequest"
              },
              "example": {
                "aliases": [
                  {
                    "type": "Another-Sell",
                    "description": "Sale",
                    "transactionClass": "MyDefault",
                    "transactionGroup": "MyGroup",
                    "transactionRoles": "LongShorter"
                  }
                ],
                "movements": [
                  {
                    "movementTypes": "StockMovement",
                    "side": "Side1",
                    "direction": -1,
                    "properties": {},
                    "mappings": []
                  },
                  {
                    "movementTypes": "CashCommitment",
                    "side": "Side2",
                    "direction": 1,
                    "properties": {},
                    "mappings": []
                  }
                ],
                "properties": {}
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/TransactionConfigurationDataRequest"
              },
              "example": {
                "aliases": [
                  {
                    "type": "Another-Sell",
                    "description": "Sale",
                    "transactionClass": "MyDefault",
                    "transactionGroup": "MyGroup",
                    "transactionRoles": "LongShorter"
                  }
                ],
                "movements": [
                  {
                    "movementTypes": "StockMovement",
                    "side": "Side1",
                    "direction": -1,
                    "properties": {},
                    "mappings": []
                  },
                  {
                    "movementTypes": "CashCommitment",
                    "side": "Side2",
                    "direction": 1,
                    "properties": {},
                    "mappings": []
                  }
                ],
                "properties": {}
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionSetConfigurationData"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionSetConfigurationData"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionSetConfigurationData"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/transactionportfolios/{scope}": {
      "post": {
        "tags": [
          "Transaction Portfolios"
        ],
        "summary": "Create portfolio",
        "description": "Create a transaction portfolio in a specific scope.",
        "operationId": "CreatePortfolio",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope in which to create the transaction portfolio.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The scope in which to create the transaction portfolio.",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "The definition and details of the transaction portfolio.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTransactionPortfolioRequest"
              },
              "example": {
                "displayName": "Portfolio UK",
                "description": "Portfolio for UK market",
                "code": "PortfolioUk",
                "created": "2018-03-05T12:00:00.0000000+00:00",
                "baseCurrency": "GBP",
                "corporateActionSourceId": {
                  "scope": "Sources",
                  "code": "Vendor1"
                },
                "accountingMethod": "Default",
                "subHoldingKeys": [],
                "properties": {
                  "portfolio/Manager/Name": {
                    "key": "Portfolio/Manager/Name",
                    "value": {
                      "labelValue": "Matt Smith"
                    },
                    "effectiveFrom": "2018-03-05T12:00:00.0000000+00:00"
                  },
                  "portfolio/Manager/Id": {
                    "key": "Portfolio/Manager/Id",
                    "value": {
                      "metricValue": {
                        "value": 1628483,
                        "unit": "NoUnits"
                      }
                    },
                    "effectiveFrom": "2018-03-05T12:00:00.0000000+00:00"
                  }
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTransactionPortfolioRequest"
              },
              "example": {
                "displayName": "Portfolio UK",
                "description": "Portfolio for UK market",
                "code": "PortfolioUk",
                "created": "2018-03-05T12:00:00.0000000+00:00",
                "baseCurrency": "GBP",
                "corporateActionSourceId": {
                  "scope": "Sources",
                  "code": "Vendor1"
                },
                "accountingMethod": "Default",
                "subHoldingKeys": [],
                "properties": {
                  "portfolio/Manager/Name": {
                    "key": "Portfolio/Manager/Name",
                    "value": {
                      "labelValue": "Matt Smith"
                    },
                    "effectiveFrom": "2018-03-05T12:00:00.0000000+00:00"
                  },
                  "portfolio/Manager/Id": {
                    "key": "Portfolio/Manager/Id",
                    "value": {
                      "metricValue": {
                        "value": 1628483,
                        "unit": "NoUnits"
                      }
                    },
                    "effectiveFrom": "2018-03-05T12:00:00.0000000+00:00"
                  }
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTransactionPortfolioRequest"
              },
              "example": {
                "displayName": "Portfolio UK",
                "description": "Portfolio for UK market",
                "code": "PortfolioUk",
                "created": "2018-03-05T12:00:00.0000000+00:00",
                "baseCurrency": "GBP",
                "corporateActionSourceId": {
                  "scope": "Sources",
                  "code": "Vendor1"
                },
                "accountingMethod": "Default",
                "subHoldingKeys": [],
                "properties": {
                  "portfolio/Manager/Name": {
                    "key": "Portfolio/Manager/Name",
                    "value": {
                      "labelValue": "Matt Smith"
                    },
                    "effectiveFrom": "2018-03-05T12:00:00.0000000+00:00"
                  },
                  "portfolio/Manager/Id": {
                    "key": "Portfolio/Manager/Id",
                    "value": {
                      "metricValue": {
                        "value": 1628483,
                        "unit": "NoUnits"
                      }
                    },
                    "effectiveFrom": "2018-03-05T12:00:00.0000000+00:00"
                  }
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTransactionPortfolioRequest"
              },
              "example": {
                "displayName": "Portfolio UK",
                "description": "Portfolio for UK market",
                "code": "PortfolioUk",
                "created": "2018-03-05T12:00:00.0000000+00:00",
                "baseCurrency": "GBP",
                "corporateActionSourceId": {
                  "scope": "Sources",
                  "code": "Vendor1"
                },
                "accountingMethod": "Default",
                "subHoldingKeys": [],
                "properties": {
                  "portfolio/Manager/Name": {
                    "key": "Portfolio/Manager/Name",
                    "value": {
                      "labelValue": "Matt Smith"
                    },
                    "effectiveFrom": "2018-03-05T12:00:00.0000000+00:00"
                  },
                  "portfolio/Manager/Id": {
                    "key": "Portfolio/Manager/Id",
                    "value": {
                      "metricValue": {
                        "value": 1628483,
                        "unit": "NoUnits"
                      }
                    },
                    "effectiveFrom": "2018-03-05T12:00:00.0000000+00:00"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "The newly created transaction portfolio",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Portfolio"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Portfolio"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Portfolio"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      }
    },
    "/api/transactionportfolios/{scope}/{code}/$resolve": {
      "post": {
        "tags": [
          "Transaction Portfolios"
        ],
        "summary": "[EARLY ACCESS] Resolve Instrument",
        "description": "Try to resolve the instrument for transaction and holdings for a given instrument identifier and a specified  \r\nperiod of time. Also update the instrument identifiers with the given instrument identifiers collection.",
        "operationId": "ResolveInstrument",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the transaction portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the transaction portfolio.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the transaction portfolio. Together with the scope this uniquely identifies\r\n            the transaction portfolio.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The code of the transaction portfolio. Together with the scope this uniquely identifies\r\n            the transaction portfolio.",
              "nullable": true
            }
          },
          {
            "name": "instrumentIdentifierType",
            "in": "query",
            "description": "The instrument identifier type.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
            }
          },
          {
            "name": "instrumentIdentifierValue",
            "in": "query",
            "description": "The value for the given instrument identifier.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The value for the given instrument identifier."
            }
          },
          {
            "name": "fromEffectiveAt",
            "in": "query",
            "description": "The lower bound effective datetime or cut label (inclusive) from which to retrieve the data.\r\n            There is no lower bound if this is not specified.",
            "schema": {
              "type": "string",
              "description": "The lower bound effective datetime or cut label (inclusive) from which to retrieve the data.\r\n            There is no lower bound if this is not specified.",
              "format": "dateorcutlabel",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "The dictionary with the instrument identifiers to be updated on the \r\n           transaction and holdings.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                },
                "description": "The dictionary with the instrument identifiers to be updated on the \r\n           transaction and holdings.",
                "nullable": true
              },
              "example": {
                "instrument/default/Figi": "BBG000C6K6G9",
                "instrument/default/Isin": "GB00BH4HKS39"
              }
            },
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                },
                "description": "The dictionary with the instrument identifiers to be updated on the \r\n           transaction and holdings.",
                "nullable": true
              },
              "example": {
                "instrument/default/Figi": "BBG000C6K6G9",
                "instrument/default/Isin": "GB00BH4HKS39"
              }
            },
            "text/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                },
                "description": "The dictionary with the instrument identifiers to be updated on the \r\n           transaction and holdings.",
                "nullable": true
              },
              "example": {
                "instrument/default/Figi": "BBG000C6K6G9",
                "instrument/default/Isin": "GB00BH4HKS39"
              }
            },
            "application/*+json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                },
                "description": "The dictionary with the instrument identifiers to be updated on the \r\n           transaction and holdings.",
                "nullable": true
              },
              "example": {
                "instrument/default/Figi": "BBG000C6K6G9",
                "instrument/default/Isin": "GB00BH4HKS39"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The version of the transaction portfolio that contains the newly updated or inserted transactions",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertPortfolioTransactionsResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertPortfolioTransactionsResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertPortfolioTransactionsResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/transactionportfolios/{scope}/{code}/cashstatement": {
      "get": {
        "tags": [
          "Transaction Portfolios"
        ],
        "summary": "[EARLY ACCESS] Get CashStatement for the given portfolio.",
        "description": "Get CashStatement for the given portfolio.",
        "operationId": "GetPortfolioCashStatement",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the portfolio to retrieve the CashStatement for.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the portfolio to retrieve the CashStatement for.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the portfolio to retrieve the CashStatement for. Together with the scope this\r\n            uniquely identifies the portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the portfolio to retrieve the CashStatement for. Together with the scope this\r\n            uniquely identifies the portfolio.",
              "nullable": true
            }
          },
          {
            "name": "fromEffectiveAt",
            "in": "query",
            "description": "The lower bound effective datetime or cut label (inclusive) from which to retrieve the data.\r\n            There is no lower bound if this is not specified.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The lower bound effective datetime or cut label (inclusive) from which to retrieve the data.\r\n            There is no lower bound if this is not specified.",
              "format": "dateorcutlabel"
            }
          },
          {
            "name": "toEffectiveAt",
            "in": "query",
            "description": "The upper bound effective datetime or cut label (inclusive) from which to retrieve the data.\r\n            There is no upper bound if this is not specified.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The upper bound effective datetime or cut label (inclusive) from which to retrieve the data.\r\n            There is no upper bound if this is not specified.",
              "format": "dateorcutlabel"
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the portfolio. Defaults to return the latest version\r\n            of each transaction if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to retrieve the portfolio. Defaults to return the latest version\r\n            of each transaction if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the result set. \r\n            For example, to filter on the Transaction Type, use \"type eq 'Buy'\"\r\n            Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "type": "string",
              "description": "Expression to filter the result set. \r\n            For example, to filter on the Transaction Type, use \"type eq 'Buy'\"\r\n            Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
              "nullable": true
            }
          },
          {
            "name": "recipeIdScope",
            "in": "query",
            "description": "The scope of the given recipeId",
            "schema": {
              "type": "string",
              "description": "The scope of the given recipeId",
              "nullable": true
            }
          },
          {
            "name": "recipeIdCode",
            "in": "query",
            "description": "The code of the given recipeID",
            "schema": {
              "type": "string",
              "description": "The code of the given recipeID",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested portfolio cash flow data",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfPortfolioCashFlow"
                },
                "example": {
                  "values": [
                    {
                      "groupById": 1,
                      "sequenceNumber": 0,
                      "effectiveDate": "2020-06-01T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "ABC"
                          }
                        }
                      },
                      "type": "Open",
                      "movementName": "",
                      "cashflow": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "balance": {
                        "amount": 128347,
                        "currency": "USD"
                      },
                      "fxRate": 1,
                      "cashflowReportingCurrency": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 128347,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 128347,
                        "currency": "USD"
                      }
                    },
                    {
                      "groupById": 1,
                      "sequenceNumber": 1,
                      "effectiveDate": "2020-06-13T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "ABC"
                          }
                        }
                      },
                      "type": "Activity",
                      "movementName": "principal",
                      "cashflow": {
                        "amount": 73494,
                        "currency": "USD"
                      },
                      "balance": {
                        "amount": 54853,
                        "currency": "USD"
                      },
                      "fxRate": 1,
                      "cashflowReportingCurrency": {
                        "amount": 73494,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 54853,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 54853,
                        "currency": "USD"
                      },
                      "transaction": {
                        "transactionId": "tid_234942982496001",
                        "type": "Buy",
                        "instrumentIdentifiers": {},
                        "instrumentUid": "LUID_1C7YTL5M",
                        "transactionDate": "2020-06-10T00:00:00.0000000+00:00",
                        "settlementDate": "2020-06-13T00:00:00.0000000+00:00",
                        "units": 1517.8,
                        "transactionPrice": {
                          "price": 48.4213,
                          "type": "Price"
                        },
                        "totalConsideration": {
                          "amount": 48.4213,
                          "currency": "USD"
                        },
                        "properties": {},
                        "source": "",
                        "entryDateTime": "0001-01-01T00:00:00.0000000+00:00"
                      }
                    },
                    {
                      "groupById": 1,
                      "sequenceNumber": 2,
                      "effectiveDate": "2020-06-14T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "ABC"
                          }
                        }
                      },
                      "type": "Activity",
                      "movementName": "principal",
                      "cashflow": {
                        "amount": 33731.44,
                        "currency": "USD"
                      },
                      "balance": {
                        "amount": 21121.56,
                        "currency": "USD"
                      },
                      "fxRate": 1,
                      "cashflowReportingCurrency": {
                        "amount": 33731.44,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 21121.56,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 21121.56,
                        "currency": "USD"
                      },
                      "transaction": {
                        "transactionId": "tid_234295929052090",
                        "type": "Buy",
                        "instrumentIdentifiers": {},
                        "instrumentUid": "LUID_1C7YTL5M",
                        "transactionDate": "2020-06-11T00:00:00.0000000+00:00",
                        "settlementDate": "2020-06-14T00:00:00.0000000+00:00",
                        "units": 696.97,
                        "transactionPrice": {
                          "price": 48.3974,
                          "type": "Price"
                        },
                        "totalConsideration": {
                          "amount": 48.3974,
                          "currency": "USD"
                        },
                        "properties": {},
                        "source": "",
                        "entryDateTime": "0001-01-01T00:00:00.0000000+00:00"
                      }
                    },
                    {
                      "groupById": 1,
                      "sequenceNumber": 3,
                      "effectiveDate": "2020-06-15T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "ABC"
                          }
                        }
                      },
                      "type": "Activity",
                      "movementName": "payment",
                      "cashflow": {
                        "amount": 20.68,
                        "currency": "USD"
                      },
                      "balance": {
                        "amount": 21142.24,
                        "currency": "USD"
                      },
                      "fxRate": 1,
                      "cashflowReportingCurrency": {
                        "amount": 20.68,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 21142.24,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 21142.24,
                        "currency": "USD"
                      },
                      "transaction": {
                        "transactionId": "tid_325452342424500",
                        "type": "Dividend",
                        "instrumentIdentifiers": {},
                        "instrumentUid": "LUID_1C7YTL5M",
                        "transactionDate": "2020-06-15T00:00:00.0000000+00:00",
                        "settlementDate": "2020-06-15T00:00:00.0000000+00:00",
                        "units": 0,
                        "transactionPrice": {
                          "price": 0,
                          "type": "Price"
                        },
                        "totalConsideration": {
                          "amount": 0,
                          "currency": "USD"
                        },
                        "properties": {},
                        "source": "",
                        "entryDateTime": "0001-01-01T00:00:00.0000000+00:00"
                      }
                    },
                    {
                      "groupById": 1,
                      "sequenceNumber": 4,
                      "effectiveDate": "2020-06-20T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "ABC"
                          }
                        }
                      },
                      "type": "Activity",
                      "movementName": "principal",
                      "cashflow": {
                        "amount": 10374,
                        "currency": "USD"
                      },
                      "balance": {
                        "amount": 31516.24,
                        "currency": "USD"
                      },
                      "fxRate": 1,
                      "cashflowReportingCurrency": {
                        "amount": 10374,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 31516.24,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 31516.24,
                        "currency": "USD"
                      },
                      "transaction": {
                        "transactionId": "tid_329432525234324",
                        "type": "Sell",
                        "instrumentIdentifiers": {},
                        "instrumentUid": "LUID_1C7YTL5M",
                        "transactionDate": "2020-06-17T00:00:00.0000000+00:00",
                        "settlementDate": "2020-06-20T00:00:00.0000000+00:00",
                        "units": 211.63,
                        "transactionPrice": {
                          "price": 49.0192,
                          "type": "Price"
                        },
                        "totalConsideration": {
                          "amount": 49.0192,
                          "currency": "USD"
                        },
                        "properties": {},
                        "source": "",
                        "entryDateTime": "0001-01-01T00:00:00.0000000+00:00"
                      }
                    },
                    {
                      "groupById": 1,
                      "sequenceNumber": 5,
                      "effectiveDate": "2020-06-20T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "ABC"
                          }
                        }
                      },
                      "type": "Activity",
                      "movementName": "bond accrual",
                      "cashflow": {
                        "amount": 10373,
                        "currency": "USD"
                      },
                      "balance": {
                        "amount": 41889.24,
                        "currency": "USD"
                      },
                      "fxRate": 0,
                      "cashflowReportingCurrency": {
                        "amount": 10373,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 41889.24,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": -1,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 41889.24,
                        "currency": "USD"
                      },
                      "transaction": {
                        "transactionId": "tid_329432525234323",
                        "type": "Sell",
                        "instrumentIdentifiers": {},
                        "instrumentUid": "LUID_1C7YTL5M",
                        "transactionDate": "2019-06-17T00:00:00.0000000+00:00",
                        "settlementDate": "2019-06-20T00:00:00.0000000+00:00",
                        "units": 210.63,
                        "transactionPrice": {
                          "price": 48.0192,
                          "type": "Price"
                        },
                        "totalConsideration": {
                          "amount": 48.0192,
                          "currency": "USD"
                        },
                        "properties": {},
                        "source": "",
                        "entryDateTime": "0001-01-01T00:00:00.0000000+00:00"
                      }
                    },
                    {
                      "groupById": 1,
                      "sequenceNumber": 6,
                      "effectiveDate": "2020-06-21T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "ABC"
                          }
                        }
                      },
                      "type": "Activity",
                      "movementName": "principal",
                      "cashflow": {
                        "amount": 8775,
                        "currency": "USD"
                      },
                      "balance": {
                        "amount": 50665.24,
                        "currency": "USD"
                      },
                      "fxRate": 1,
                      "cashflowReportingCurrency": {
                        "amount": 8775,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 50665.24,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 50665.24,
                        "currency": "USD"
                      },
                      "transaction": {
                        "transactionId": "tid_124319009950924",
                        "type": "Sell",
                        "instrumentIdentifiers": {},
                        "instrumentUid": "LUID_1C7YTL5M",
                        "transactionDate": "2020-06-18T00:00:00.0000000+00:00",
                        "settlementDate": "2020-06-21T00:00:00.0000000+00:00",
                        "units": 179.01,
                        "transactionPrice": {
                          "price": 49.0184,
                          "type": "Price"
                        },
                        "totalConsideration": {
                          "amount": 49.0184,
                          "currency": "USD"
                        },
                        "properties": {},
                        "source": "",
                        "entryDateTime": "0001-01-01T00:00:00.0000000+00:00"
                      }
                    },
                    {
                      "groupById": 1,
                      "sequenceNumber": 7,
                      "effectiveDate": "2020-06-21T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "ABC"
                          }
                        }
                      },
                      "type": "Activity",
                      "movementName": "principal",
                      "cashflow": {
                        "amount": 13225.1,
                        "currency": "USD"
                      },
                      "balance": {
                        "amount": 63890.34,
                        "currency": "USD"
                      },
                      "fxRate": 1,
                      "cashflowReportingCurrency": {
                        "amount": 13225.1,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 63890.34,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 63890.34,
                        "currency": "USD"
                      },
                      "transaction": {
                        "transactionId": "tid_121309590059995",
                        "type": "Sell",
                        "instrumentIdentifiers": {},
                        "instrumentUid": "LUID_1C7YTL5M",
                        "transactionDate": "2020-06-18T00:00:00.0000000+00:00",
                        "settlementDate": "2020-06-21T00:00:00.0000000+00:00",
                        "units": 269.99,
                        "transactionPrice": {
                          "price": 48.9843,
                          "type": "Price"
                        },
                        "totalConsideration": {
                          "amount": 48.9843,
                          "currency": "USD"
                        },
                        "properties": {},
                        "source": "",
                        "entryDateTime": "0001-01-01T00:00:00.0000000+00:00"
                      }
                    },
                    {
                      "groupById": 1,
                      "sequenceNumber": 8,
                      "effectiveDate": "2020-06-30T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "ABC"
                          }
                        }
                      },
                      "type": "Closed",
                      "movementName": "",
                      "cashflow": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "balance": {
                        "amount": 63890.34,
                        "currency": "USD"
                      },
                      "fxRate": 1,
                      "cashflowReportingCurrency": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 63890.34,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 63890.34,
                        "currency": "USD"
                      }
                    },
                    {
                      "groupById": 2,
                      "sequenceNumber": 0,
                      "effectiveDate": "2020-06-01T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "ABC"
                          }
                        }
                      },
                      "type": "Open",
                      "movementName": "",
                      "cashflow": {
                        "amount": 0,
                        "currency": "GBP"
                      },
                      "balance": {
                        "amount": 12738.22,
                        "currency": "GBP"
                      },
                      "fxRate": 1.3145,
                      "cashflowReportingCurrency": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 16744.39,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 16744.39,
                        "currency": "USD"
                      }
                    },
                    {
                      "groupById": 2,
                      "sequenceNumber": 1,
                      "effectiveDate": "2020-06-13T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "ABC"
                          }
                        }
                      },
                      "type": "Activity",
                      "movementName": "principal",
                      "cashflow": {
                        "amount": 43000,
                        "currency": "GBP"
                      },
                      "balance": {
                        "amount": 30261.78,
                        "currency": "GBP"
                      },
                      "fxRate": 1.2,
                      "cashflowReportingCurrency": {
                        "amount": 51600,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 36314.14,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": -1458.52619,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": -36314.14,
                        "currency": "USD"
                      },
                      "transaction": {
                        "transactionId": "tid_124319009950924",
                        "type": "Buy",
                        "instrumentIdentifiers": {},
                        "instrumentUid": "LUID_1C7YTL5M",
                        "transactionDate": "2020-06-10T00:00:00.0000000+00:00",
                        "settlementDate": "2020-06-13T00:00:00.0000000+00:00",
                        "units": 1829.79,
                        "transactionPrice": {
                          "price": 23.5,
                          "type": "Price"
                        },
                        "totalConsideration": {
                          "amount": 23.5,
                          "currency": "USD"
                        },
                        "properties": {},
                        "source": "",
                        "entryDateTime": "0001-01-01T00:00:00.0000000+00:00"
                      }
                    },
                    {
                      "groupById": 2,
                      "sequenceNumber": 2,
                      "effectiveDate": "2020-06-18T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "ABC"
                          }
                        }
                      },
                      "type": "Activity",
                      "movementName": "principal",
                      "cashflow": {
                        "amount": 89994.71,
                        "currency": "GBP"
                      },
                      "balance": {
                        "amount": 59732.93,
                        "currency": "GBP"
                      },
                      "fxRate": 1.3,
                      "cashflowReportingCurrency": {
                        "amount": 116993.12,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 77652.81,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": -3026.178,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 77652.81,
                        "currency": "USD"
                      },
                      "transaction": {
                        "transactionId": "tid_121309590059995",
                        "type": "Sell",
                        "instrumentIdentifiers": {},
                        "instrumentUid": "LUID_1C7YTL5M",
                        "transactionDate": "2020-06-15T00:00:00.0000000+00:00",
                        "settlementDate": "2020-06-18T00:00:00.0000000+00:00",
                        "units": 3333.14,
                        "transactionPrice": {
                          "price": 27,
                          "type": "Price"
                        },
                        "totalConsideration": {
                          "amount": 27,
                          "currency": "USD"
                        },
                        "properties": {},
                        "source": "",
                        "entryDateTime": "0001-01-01T00:00:00.0000000+00:00"
                      }
                    },
                    {
                      "groupById": 2,
                      "sequenceNumber": 3,
                      "effectiveDate": "2020-06-30T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "ABC"
                          }
                        }
                      },
                      "type": "Closed",
                      "movementName": "",
                      "cashflow": {
                        "amount": 0,
                        "currency": "GBP"
                      },
                      "balance": {
                        "amount": 59732.93,
                        "currency": "GBP"
                      },
                      "fxRate": 1.3244,
                      "cashflowReportingCurrency": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 79110.29,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 77652.81,
                        "currency": "USD"
                      }
                    },
                    {
                      "groupById": 3,
                      "sequenceNumber": 0,
                      "effectiveDate": "2020-06-01T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "XYZ"
                          }
                        }
                      },
                      "type": "Open",
                      "movementName": "",
                      "cashflow": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "balance": {
                        "amount": 10000,
                        "currency": "USD"
                      },
                      "fxRate": 1,
                      "cashflowReportingCurrency": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 10000,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 10000,
                        "currency": "USD"
                      }
                    },
                    {
                      "groupById": 3,
                      "sequenceNumber": 1,
                      "effectiveDate": "2020-06-30T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "XYZ"
                          }
                        }
                      },
                      "type": "Closed",
                      "movementName": "",
                      "cashflow": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "balance": {
                        "amount": 10000,
                        "currency": "USD"
                      },
                      "fxRate": 1,
                      "cashflowReportingCurrency": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 10000,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 10000,
                        "currency": "USD"
                      }
                    }
                  ],
                  "links": []
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfPortfolioCashFlow"
                },
                "example": {
                  "values": [
                    {
                      "groupById": 1,
                      "sequenceNumber": 0,
                      "effectiveDate": "2020-06-01T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "ABC"
                          }
                        }
                      },
                      "type": "Open",
                      "movementName": "",
                      "cashflow": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "balance": {
                        "amount": 128347,
                        "currency": "USD"
                      },
                      "fxRate": 1,
                      "cashflowReportingCurrency": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 128347,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 128347,
                        "currency": "USD"
                      }
                    },
                    {
                      "groupById": 1,
                      "sequenceNumber": 1,
                      "effectiveDate": "2020-06-13T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "ABC"
                          }
                        }
                      },
                      "type": "Activity",
                      "movementName": "principal",
                      "cashflow": {
                        "amount": 73494,
                        "currency": "USD"
                      },
                      "balance": {
                        "amount": 54853,
                        "currency": "USD"
                      },
                      "fxRate": 1,
                      "cashflowReportingCurrency": {
                        "amount": 73494,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 54853,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 54853,
                        "currency": "USD"
                      },
                      "transaction": {
                        "transactionId": "tid_234942982496001",
                        "type": "Buy",
                        "instrumentIdentifiers": {},
                        "instrumentUid": "LUID_1C7YTL5M",
                        "transactionDate": "2020-06-10T00:00:00.0000000+00:00",
                        "settlementDate": "2020-06-13T00:00:00.0000000+00:00",
                        "units": 1517.8,
                        "transactionPrice": {
                          "price": 48.4213,
                          "type": "Price"
                        },
                        "totalConsideration": {
                          "amount": 48.4213,
                          "currency": "USD"
                        },
                        "properties": {},
                        "source": "",
                        "entryDateTime": "0001-01-01T00:00:00.0000000+00:00"
                      }
                    },
                    {
                      "groupById": 1,
                      "sequenceNumber": 2,
                      "effectiveDate": "2020-06-14T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "ABC"
                          }
                        }
                      },
                      "type": "Activity",
                      "movementName": "principal",
                      "cashflow": {
                        "amount": 33731.44,
                        "currency": "USD"
                      },
                      "balance": {
                        "amount": 21121.56,
                        "currency": "USD"
                      },
                      "fxRate": 1,
                      "cashflowReportingCurrency": {
                        "amount": 33731.44,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 21121.56,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 21121.56,
                        "currency": "USD"
                      },
                      "transaction": {
                        "transactionId": "tid_234295929052090",
                        "type": "Buy",
                        "instrumentIdentifiers": {},
                        "instrumentUid": "LUID_1C7YTL5M",
                        "transactionDate": "2020-06-11T00:00:00.0000000+00:00",
                        "settlementDate": "2020-06-14T00:00:00.0000000+00:00",
                        "units": 696.97,
                        "transactionPrice": {
                          "price": 48.3974,
                          "type": "Price"
                        },
                        "totalConsideration": {
                          "amount": 48.3974,
                          "currency": "USD"
                        },
                        "properties": {},
                        "source": "",
                        "entryDateTime": "0001-01-01T00:00:00.0000000+00:00"
                      }
                    },
                    {
                      "groupById": 1,
                      "sequenceNumber": 3,
                      "effectiveDate": "2020-06-15T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "ABC"
                          }
                        }
                      },
                      "type": "Activity",
                      "movementName": "payment",
                      "cashflow": {
                        "amount": 20.68,
                        "currency": "USD"
                      },
                      "balance": {
                        "amount": 21142.24,
                        "currency": "USD"
                      },
                      "fxRate": 1,
                      "cashflowReportingCurrency": {
                        "amount": 20.68,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 21142.24,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 21142.24,
                        "currency": "USD"
                      },
                      "transaction": {
                        "transactionId": "tid_325452342424500",
                        "type": "Dividend",
                        "instrumentIdentifiers": {},
                        "instrumentUid": "LUID_1C7YTL5M",
                        "transactionDate": "2020-06-15T00:00:00.0000000+00:00",
                        "settlementDate": "2020-06-15T00:00:00.0000000+00:00",
                        "units": 0,
                        "transactionPrice": {
                          "price": 0,
                          "type": "Price"
                        },
                        "totalConsideration": {
                          "amount": 0,
                          "currency": "USD"
                        },
                        "properties": {},
                        "source": "",
                        "entryDateTime": "0001-01-01T00:00:00.0000000+00:00"
                      }
                    },
                    {
                      "groupById": 1,
                      "sequenceNumber": 4,
                      "effectiveDate": "2020-06-20T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "ABC"
                          }
                        }
                      },
                      "type": "Activity",
                      "movementName": "principal",
                      "cashflow": {
                        "amount": 10374,
                        "currency": "USD"
                      },
                      "balance": {
                        "amount": 31516.24,
                        "currency": "USD"
                      },
                      "fxRate": 1,
                      "cashflowReportingCurrency": {
                        "amount": 10374,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 31516.24,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 31516.24,
                        "currency": "USD"
                      },
                      "transaction": {
                        "transactionId": "tid_329432525234324",
                        "type": "Sell",
                        "instrumentIdentifiers": {},
                        "instrumentUid": "LUID_1C7YTL5M",
                        "transactionDate": "2020-06-17T00:00:00.0000000+00:00",
                        "settlementDate": "2020-06-20T00:00:00.0000000+00:00",
                        "units": 211.63,
                        "transactionPrice": {
                          "price": 49.0192,
                          "type": "Price"
                        },
                        "totalConsideration": {
                          "amount": 49.0192,
                          "currency": "USD"
                        },
                        "properties": {},
                        "source": "",
                        "entryDateTime": "0001-01-01T00:00:00.0000000+00:00"
                      }
                    },
                    {
                      "groupById": 1,
                      "sequenceNumber": 5,
                      "effectiveDate": "2020-06-20T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "ABC"
                          }
                        }
                      },
                      "type": "Activity",
                      "movementName": "bond accrual",
                      "cashflow": {
                        "amount": 10373,
                        "currency": "USD"
                      },
                      "balance": {
                        "amount": 41889.24,
                        "currency": "USD"
                      },
                      "fxRate": 0,
                      "cashflowReportingCurrency": {
                        "amount": 10373,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 41889.24,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": -1,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 41889.24,
                        "currency": "USD"
                      },
                      "transaction": {
                        "transactionId": "tid_329432525234323",
                        "type": "Sell",
                        "instrumentIdentifiers": {},
                        "instrumentUid": "LUID_1C7YTL5M",
                        "transactionDate": "2019-06-17T00:00:00.0000000+00:00",
                        "settlementDate": "2019-06-20T00:00:00.0000000+00:00",
                        "units": 210.63,
                        "transactionPrice": {
                          "price": 48.0192,
                          "type": "Price"
                        },
                        "totalConsideration": {
                          "amount": 48.0192,
                          "currency": "USD"
                        },
                        "properties": {},
                        "source": "",
                        "entryDateTime": "0001-01-01T00:00:00.0000000+00:00"
                      }
                    },
                    {
                      "groupById": 1,
                      "sequenceNumber": 6,
                      "effectiveDate": "2020-06-21T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "ABC"
                          }
                        }
                      },
                      "type": "Activity",
                      "movementName": "principal",
                      "cashflow": {
                        "amount": 8775,
                        "currency": "USD"
                      },
                      "balance": {
                        "amount": 50665.24,
                        "currency": "USD"
                      },
                      "fxRate": 1,
                      "cashflowReportingCurrency": {
                        "amount": 8775,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 50665.24,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 50665.24,
                        "currency": "USD"
                      },
                      "transaction": {
                        "transactionId": "tid_124319009950924",
                        "type": "Sell",
                        "instrumentIdentifiers": {},
                        "instrumentUid": "LUID_1C7YTL5M",
                        "transactionDate": "2020-06-18T00:00:00.0000000+00:00",
                        "settlementDate": "2020-06-21T00:00:00.0000000+00:00",
                        "units": 179.01,
                        "transactionPrice": {
                          "price": 49.0184,
                          "type": "Price"
                        },
                        "totalConsideration": {
                          "amount": 49.0184,
                          "currency": "USD"
                        },
                        "properties": {},
                        "source": "",
                        "entryDateTime": "0001-01-01T00:00:00.0000000+00:00"
                      }
                    },
                    {
                      "groupById": 1,
                      "sequenceNumber": 7,
                      "effectiveDate": "2020-06-21T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "ABC"
                          }
                        }
                      },
                      "type": "Activity",
                      "movementName": "principal",
                      "cashflow": {
                        "amount": 13225.1,
                        "currency": "USD"
                      },
                      "balance": {
                        "amount": 63890.34,
                        "currency": "USD"
                      },
                      "fxRate": 1,
                      "cashflowReportingCurrency": {
                        "amount": 13225.1,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 63890.34,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 63890.34,
                        "currency": "USD"
                      },
                      "transaction": {
                        "transactionId": "tid_121309590059995",
                        "type": "Sell",
                        "instrumentIdentifiers": {},
                        "instrumentUid": "LUID_1C7YTL5M",
                        "transactionDate": "2020-06-18T00:00:00.0000000+00:00",
                        "settlementDate": "2020-06-21T00:00:00.0000000+00:00",
                        "units": 269.99,
                        "transactionPrice": {
                          "price": 48.9843,
                          "type": "Price"
                        },
                        "totalConsideration": {
                          "amount": 48.9843,
                          "currency": "USD"
                        },
                        "properties": {},
                        "source": "",
                        "entryDateTime": "0001-01-01T00:00:00.0000000+00:00"
                      }
                    },
                    {
                      "groupById": 1,
                      "sequenceNumber": 8,
                      "effectiveDate": "2020-06-30T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "ABC"
                          }
                        }
                      },
                      "type": "Closed",
                      "movementName": "",
                      "cashflow": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "balance": {
                        "amount": 63890.34,
                        "currency": "USD"
                      },
                      "fxRate": 1,
                      "cashflowReportingCurrency": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 63890.34,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 63890.34,
                        "currency": "USD"
                      }
                    },
                    {
                      "groupById": 2,
                      "sequenceNumber": 0,
                      "effectiveDate": "2020-06-01T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "ABC"
                          }
                        }
                      },
                      "type": "Open",
                      "movementName": "",
                      "cashflow": {
                        "amount": 0,
                        "currency": "GBP"
                      },
                      "balance": {
                        "amount": 12738.22,
                        "currency": "GBP"
                      },
                      "fxRate": 1.3145,
                      "cashflowReportingCurrency": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 16744.39,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 16744.39,
                        "currency": "USD"
                      }
                    },
                    {
                      "groupById": 2,
                      "sequenceNumber": 1,
                      "effectiveDate": "2020-06-13T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "ABC"
                          }
                        }
                      },
                      "type": "Activity",
                      "movementName": "principal",
                      "cashflow": {
                        "amount": 43000,
                        "currency": "GBP"
                      },
                      "balance": {
                        "amount": 30261.78,
                        "currency": "GBP"
                      },
                      "fxRate": 1.2,
                      "cashflowReportingCurrency": {
                        "amount": 51600,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 36314.14,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": -1458.52619,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": -36314.14,
                        "currency": "USD"
                      },
                      "transaction": {
                        "transactionId": "tid_124319009950924",
                        "type": "Buy",
                        "instrumentIdentifiers": {},
                        "instrumentUid": "LUID_1C7YTL5M",
                        "transactionDate": "2020-06-10T00:00:00.0000000+00:00",
                        "settlementDate": "2020-06-13T00:00:00.0000000+00:00",
                        "units": 1829.79,
                        "transactionPrice": {
                          "price": 23.5,
                          "type": "Price"
                        },
                        "totalConsideration": {
                          "amount": 23.5,
                          "currency": "USD"
                        },
                        "properties": {},
                        "source": "",
                        "entryDateTime": "0001-01-01T00:00:00.0000000+00:00"
                      }
                    },
                    {
                      "groupById": 2,
                      "sequenceNumber": 2,
                      "effectiveDate": "2020-06-18T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "ABC"
                          }
                        }
                      },
                      "type": "Activity",
                      "movementName": "principal",
                      "cashflow": {
                        "amount": 89994.71,
                        "currency": "GBP"
                      },
                      "balance": {
                        "amount": 59732.93,
                        "currency": "GBP"
                      },
                      "fxRate": 1.3,
                      "cashflowReportingCurrency": {
                        "amount": 116993.12,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 77652.81,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": -3026.178,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 77652.81,
                        "currency": "USD"
                      },
                      "transaction": {
                        "transactionId": "tid_121309590059995",
                        "type": "Sell",
                        "instrumentIdentifiers": {},
                        "instrumentUid": "LUID_1C7YTL5M",
                        "transactionDate": "2020-06-15T00:00:00.0000000+00:00",
                        "settlementDate": "2020-06-18T00:00:00.0000000+00:00",
                        "units": 3333.14,
                        "transactionPrice": {
                          "price": 27,
                          "type": "Price"
                        },
                        "totalConsideration": {
                          "amount": 27,
                          "currency": "USD"
                        },
                        "properties": {},
                        "source": "",
                        "entryDateTime": "0001-01-01T00:00:00.0000000+00:00"
                      }
                    },
                    {
                      "groupById": 2,
                      "sequenceNumber": 3,
                      "effectiveDate": "2020-06-30T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "ABC"
                          }
                        }
                      },
                      "type": "Closed",
                      "movementName": "",
                      "cashflow": {
                        "amount": 0,
                        "currency": "GBP"
                      },
                      "balance": {
                        "amount": 59732.93,
                        "currency": "GBP"
                      },
                      "fxRate": 1.3244,
                      "cashflowReportingCurrency": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 79110.29,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 77652.81,
                        "currency": "USD"
                      }
                    },
                    {
                      "groupById": 3,
                      "sequenceNumber": 0,
                      "effectiveDate": "2020-06-01T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "XYZ"
                          }
                        }
                      },
                      "type": "Open",
                      "movementName": "",
                      "cashflow": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "balance": {
                        "amount": 10000,
                        "currency": "USD"
                      },
                      "fxRate": 1,
                      "cashflowReportingCurrency": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 10000,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 10000,
                        "currency": "USD"
                      }
                    },
                    {
                      "groupById": 3,
                      "sequenceNumber": 1,
                      "effectiveDate": "2020-06-30T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "XYZ"
                          }
                        }
                      },
                      "type": "Closed",
                      "movementName": "",
                      "cashflow": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "balance": {
                        "amount": 10000,
                        "currency": "USD"
                      },
                      "fxRate": 1,
                      "cashflowReportingCurrency": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 10000,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 10000,
                        "currency": "USD"
                      }
                    }
                  ],
                  "links": []
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfPortfolioCashFlow"
                },
                "example": {
                  "values": [
                    {
                      "groupById": 1,
                      "sequenceNumber": 0,
                      "effectiveDate": "2020-06-01T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "ABC"
                          }
                        }
                      },
                      "type": "Open",
                      "movementName": "",
                      "cashflow": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "balance": {
                        "amount": 128347,
                        "currency": "USD"
                      },
                      "fxRate": 1,
                      "cashflowReportingCurrency": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 128347,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 128347,
                        "currency": "USD"
                      }
                    },
                    {
                      "groupById": 1,
                      "sequenceNumber": 1,
                      "effectiveDate": "2020-06-13T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "ABC"
                          }
                        }
                      },
                      "type": "Activity",
                      "movementName": "principal",
                      "cashflow": {
                        "amount": 73494,
                        "currency": "USD"
                      },
                      "balance": {
                        "amount": 54853,
                        "currency": "USD"
                      },
                      "fxRate": 1,
                      "cashflowReportingCurrency": {
                        "amount": 73494,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 54853,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 54853,
                        "currency": "USD"
                      },
                      "transaction": {
                        "transactionId": "tid_234942982496001",
                        "type": "Buy",
                        "instrumentIdentifiers": {},
                        "instrumentUid": "LUID_1C7YTL5M",
                        "transactionDate": "2020-06-10T00:00:00.0000000+00:00",
                        "settlementDate": "2020-06-13T00:00:00.0000000+00:00",
                        "units": 1517.8,
                        "transactionPrice": {
                          "price": 48.4213,
                          "type": "Price"
                        },
                        "totalConsideration": {
                          "amount": 48.4213,
                          "currency": "USD"
                        },
                        "properties": {},
                        "source": "",
                        "entryDateTime": "0001-01-01T00:00:00.0000000+00:00"
                      }
                    },
                    {
                      "groupById": 1,
                      "sequenceNumber": 2,
                      "effectiveDate": "2020-06-14T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "ABC"
                          }
                        }
                      },
                      "type": "Activity",
                      "movementName": "principal",
                      "cashflow": {
                        "amount": 33731.44,
                        "currency": "USD"
                      },
                      "balance": {
                        "amount": 21121.56,
                        "currency": "USD"
                      },
                      "fxRate": 1,
                      "cashflowReportingCurrency": {
                        "amount": 33731.44,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 21121.56,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 21121.56,
                        "currency": "USD"
                      },
                      "transaction": {
                        "transactionId": "tid_234295929052090",
                        "type": "Buy",
                        "instrumentIdentifiers": {},
                        "instrumentUid": "LUID_1C7YTL5M",
                        "transactionDate": "2020-06-11T00:00:00.0000000+00:00",
                        "settlementDate": "2020-06-14T00:00:00.0000000+00:00",
                        "units": 696.97,
                        "transactionPrice": {
                          "price": 48.3974,
                          "type": "Price"
                        },
                        "totalConsideration": {
                          "amount": 48.3974,
                          "currency": "USD"
                        },
                        "properties": {},
                        "source": "",
                        "entryDateTime": "0001-01-01T00:00:00.0000000+00:00"
                      }
                    },
                    {
                      "groupById": 1,
                      "sequenceNumber": 3,
                      "effectiveDate": "2020-06-15T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "ABC"
                          }
                        }
                      },
                      "type": "Activity",
                      "movementName": "payment",
                      "cashflow": {
                        "amount": 20.68,
                        "currency": "USD"
                      },
                      "balance": {
                        "amount": 21142.24,
                        "currency": "USD"
                      },
                      "fxRate": 1,
                      "cashflowReportingCurrency": {
                        "amount": 20.68,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 21142.24,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 21142.24,
                        "currency": "USD"
                      },
                      "transaction": {
                        "transactionId": "tid_325452342424500",
                        "type": "Dividend",
                        "instrumentIdentifiers": {},
                        "instrumentUid": "LUID_1C7YTL5M",
                        "transactionDate": "2020-06-15T00:00:00.0000000+00:00",
                        "settlementDate": "2020-06-15T00:00:00.0000000+00:00",
                        "units": 0,
                        "transactionPrice": {
                          "price": 0,
                          "type": "Price"
                        },
                        "totalConsideration": {
                          "amount": 0,
                          "currency": "USD"
                        },
                        "properties": {},
                        "source": "",
                        "entryDateTime": "0001-01-01T00:00:00.0000000+00:00"
                      }
                    },
                    {
                      "groupById": 1,
                      "sequenceNumber": 4,
                      "effectiveDate": "2020-06-20T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "ABC"
                          }
                        }
                      },
                      "type": "Activity",
                      "movementName": "principal",
                      "cashflow": {
                        "amount": 10374,
                        "currency": "USD"
                      },
                      "balance": {
                        "amount": 31516.24,
                        "currency": "USD"
                      },
                      "fxRate": 1,
                      "cashflowReportingCurrency": {
                        "amount": 10374,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 31516.24,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 31516.24,
                        "currency": "USD"
                      },
                      "transaction": {
                        "transactionId": "tid_329432525234324",
                        "type": "Sell",
                        "instrumentIdentifiers": {},
                        "instrumentUid": "LUID_1C7YTL5M",
                        "transactionDate": "2020-06-17T00:00:00.0000000+00:00",
                        "settlementDate": "2020-06-20T00:00:00.0000000+00:00",
                        "units": 211.63,
                        "transactionPrice": {
                          "price": 49.0192,
                          "type": "Price"
                        },
                        "totalConsideration": {
                          "amount": 49.0192,
                          "currency": "USD"
                        },
                        "properties": {},
                        "source": "",
                        "entryDateTime": "0001-01-01T00:00:00.0000000+00:00"
                      }
                    },
                    {
                      "groupById": 1,
                      "sequenceNumber": 5,
                      "effectiveDate": "2020-06-20T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "ABC"
                          }
                        }
                      },
                      "type": "Activity",
                      "movementName": "bond accrual",
                      "cashflow": {
                        "amount": 10373,
                        "currency": "USD"
                      },
                      "balance": {
                        "amount": 41889.24,
                        "currency": "USD"
                      },
                      "fxRate": 0,
                      "cashflowReportingCurrency": {
                        "amount": 10373,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 41889.24,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": -1,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 41889.24,
                        "currency": "USD"
                      },
                      "transaction": {
                        "transactionId": "tid_329432525234323",
                        "type": "Sell",
                        "instrumentIdentifiers": {},
                        "instrumentUid": "LUID_1C7YTL5M",
                        "transactionDate": "2019-06-17T00:00:00.0000000+00:00",
                        "settlementDate": "2019-06-20T00:00:00.0000000+00:00",
                        "units": 210.63,
                        "transactionPrice": {
                          "price": 48.0192,
                          "type": "Price"
                        },
                        "totalConsideration": {
                          "amount": 48.0192,
                          "currency": "USD"
                        },
                        "properties": {},
                        "source": "",
                        "entryDateTime": "0001-01-01T00:00:00.0000000+00:00"
                      }
                    },
                    {
                      "groupById": 1,
                      "sequenceNumber": 6,
                      "effectiveDate": "2020-06-21T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "ABC"
                          }
                        }
                      },
                      "type": "Activity",
                      "movementName": "principal",
                      "cashflow": {
                        "amount": 8775,
                        "currency": "USD"
                      },
                      "balance": {
                        "amount": 50665.24,
                        "currency": "USD"
                      },
                      "fxRate": 1,
                      "cashflowReportingCurrency": {
                        "amount": 8775,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 50665.24,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 50665.24,
                        "currency": "USD"
                      },
                      "transaction": {
                        "transactionId": "tid_124319009950924",
                        "type": "Sell",
                        "instrumentIdentifiers": {},
                        "instrumentUid": "LUID_1C7YTL5M",
                        "transactionDate": "2020-06-18T00:00:00.0000000+00:00",
                        "settlementDate": "2020-06-21T00:00:00.0000000+00:00",
                        "units": 179.01,
                        "transactionPrice": {
                          "price": 49.0184,
                          "type": "Price"
                        },
                        "totalConsideration": {
                          "amount": 49.0184,
                          "currency": "USD"
                        },
                        "properties": {},
                        "source": "",
                        "entryDateTime": "0001-01-01T00:00:00.0000000+00:00"
                      }
                    },
                    {
                      "groupById": 1,
                      "sequenceNumber": 7,
                      "effectiveDate": "2020-06-21T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "ABC"
                          }
                        }
                      },
                      "type": "Activity",
                      "movementName": "principal",
                      "cashflow": {
                        "amount": 13225.1,
                        "currency": "USD"
                      },
                      "balance": {
                        "amount": 63890.34,
                        "currency": "USD"
                      },
                      "fxRate": 1,
                      "cashflowReportingCurrency": {
                        "amount": 13225.1,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 63890.34,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 63890.34,
                        "currency": "USD"
                      },
                      "transaction": {
                        "transactionId": "tid_121309590059995",
                        "type": "Sell",
                        "instrumentIdentifiers": {},
                        "instrumentUid": "LUID_1C7YTL5M",
                        "transactionDate": "2020-06-18T00:00:00.0000000+00:00",
                        "settlementDate": "2020-06-21T00:00:00.0000000+00:00",
                        "units": 269.99,
                        "transactionPrice": {
                          "price": 48.9843,
                          "type": "Price"
                        },
                        "totalConsideration": {
                          "amount": 48.9843,
                          "currency": "USD"
                        },
                        "properties": {},
                        "source": "",
                        "entryDateTime": "0001-01-01T00:00:00.0000000+00:00"
                      }
                    },
                    {
                      "groupById": 1,
                      "sequenceNumber": 8,
                      "effectiveDate": "2020-06-30T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "ABC"
                          }
                        }
                      },
                      "type": "Closed",
                      "movementName": "",
                      "cashflow": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "balance": {
                        "amount": 63890.34,
                        "currency": "USD"
                      },
                      "fxRate": 1,
                      "cashflowReportingCurrency": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 63890.34,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 63890.34,
                        "currency": "USD"
                      }
                    },
                    {
                      "groupById": 2,
                      "sequenceNumber": 0,
                      "effectiveDate": "2020-06-01T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "ABC"
                          }
                        }
                      },
                      "type": "Open",
                      "movementName": "",
                      "cashflow": {
                        "amount": 0,
                        "currency": "GBP"
                      },
                      "balance": {
                        "amount": 12738.22,
                        "currency": "GBP"
                      },
                      "fxRate": 1.3145,
                      "cashflowReportingCurrency": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 16744.39,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 16744.39,
                        "currency": "USD"
                      }
                    },
                    {
                      "groupById": 2,
                      "sequenceNumber": 1,
                      "effectiveDate": "2020-06-13T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "ABC"
                          }
                        }
                      },
                      "type": "Activity",
                      "movementName": "principal",
                      "cashflow": {
                        "amount": 43000,
                        "currency": "GBP"
                      },
                      "balance": {
                        "amount": 30261.78,
                        "currency": "GBP"
                      },
                      "fxRate": 1.2,
                      "cashflowReportingCurrency": {
                        "amount": 51600,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 36314.14,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": -1458.52619,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": -36314.14,
                        "currency": "USD"
                      },
                      "transaction": {
                        "transactionId": "tid_124319009950924",
                        "type": "Buy",
                        "instrumentIdentifiers": {},
                        "instrumentUid": "LUID_1C7YTL5M",
                        "transactionDate": "2020-06-10T00:00:00.0000000+00:00",
                        "settlementDate": "2020-06-13T00:00:00.0000000+00:00",
                        "units": 1829.79,
                        "transactionPrice": {
                          "price": 23.5,
                          "type": "Price"
                        },
                        "totalConsideration": {
                          "amount": 23.5,
                          "currency": "USD"
                        },
                        "properties": {},
                        "source": "",
                        "entryDateTime": "0001-01-01T00:00:00.0000000+00:00"
                      }
                    },
                    {
                      "groupById": 2,
                      "sequenceNumber": 2,
                      "effectiveDate": "2020-06-18T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "ABC"
                          }
                        }
                      },
                      "type": "Activity",
                      "movementName": "principal",
                      "cashflow": {
                        "amount": 89994.71,
                        "currency": "GBP"
                      },
                      "balance": {
                        "amount": 59732.93,
                        "currency": "GBP"
                      },
                      "fxRate": 1.3,
                      "cashflowReportingCurrency": {
                        "amount": 116993.12,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 77652.81,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": -3026.178,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 77652.81,
                        "currency": "USD"
                      },
                      "transaction": {
                        "transactionId": "tid_121309590059995",
                        "type": "Sell",
                        "instrumentIdentifiers": {},
                        "instrumentUid": "LUID_1C7YTL5M",
                        "transactionDate": "2020-06-15T00:00:00.0000000+00:00",
                        "settlementDate": "2020-06-18T00:00:00.0000000+00:00",
                        "units": 3333.14,
                        "transactionPrice": {
                          "price": 27,
                          "type": "Price"
                        },
                        "totalConsideration": {
                          "amount": 27,
                          "currency": "USD"
                        },
                        "properties": {},
                        "source": "",
                        "entryDateTime": "0001-01-01T00:00:00.0000000+00:00"
                      }
                    },
                    {
                      "groupById": 2,
                      "sequenceNumber": 3,
                      "effectiveDate": "2020-06-30T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "ABC"
                          }
                        }
                      },
                      "type": "Closed",
                      "movementName": "",
                      "cashflow": {
                        "amount": 0,
                        "currency": "GBP"
                      },
                      "balance": {
                        "amount": 59732.93,
                        "currency": "GBP"
                      },
                      "fxRate": 1.3244,
                      "cashflowReportingCurrency": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 79110.29,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 77652.81,
                        "currency": "USD"
                      }
                    },
                    {
                      "groupById": 3,
                      "sequenceNumber": 0,
                      "effectiveDate": "2020-06-01T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "XYZ"
                          }
                        }
                      },
                      "type": "Open",
                      "movementName": "",
                      "cashflow": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "balance": {
                        "amount": 10000,
                        "currency": "USD"
                      },
                      "fxRate": 1,
                      "cashflowReportingCurrency": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 10000,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 10000,
                        "currency": "USD"
                      }
                    },
                    {
                      "groupById": 3,
                      "sequenceNumber": 1,
                      "effectiveDate": "2020-06-30T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "XYZ"
                          }
                        }
                      },
                      "type": "Closed",
                      "movementName": "",
                      "cashflow": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "balance": {
                        "amount": 10000,
                        "currency": "USD"
                      },
                      "fxRate": 1,
                      "cashflowReportingCurrency": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 10000,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 10000,
                        "currency": "USD"
                      }
                    }
                  ],
                  "links": []
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/transactionportfolios/{scope}/{code}/details": {
      "get": {
        "tags": [
          "Transaction Portfolios"
        ],
        "summary": "Get details",
        "description": "Get the details associated with a transaction portfolio.",
        "operationId": "GetDetails",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the transaction portfolio to retrieve the details for.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the transaction portfolio to retrieve the details for.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the transaction portfolio to retrieve the details for. Together with the\r\n            scope this uniquely identifies the transaction portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the transaction portfolio to retrieve the details for. Together with the\r\n            scope this uniquely identifies the transaction portfolio.",
              "nullable": true
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime or cut label at which to retrieve the details of the transaction\r\n            portfolio. Defaults to the current LUSID system datetime if not specified.",
            "schema": {
              "type": "string",
              "description": "The effective datetime or cut label at which to retrieve the details of the transaction\r\n            portfolio. Defaults to the current LUSID system datetime if not specified.",
              "format": "dateorcutlabel",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the details of the transaction portfolio. Defaults\r\n            to returning the latest version of the details if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to retrieve the details of the transaction portfolio. Defaults\r\n            to returning the latest version of the details if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The details of the specified transaction portfolio",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioDetails"
                },
                "example": {
                  "originPortfolioId": {
                    "scope": "Region",
                    "code": "UK"
                  },
                  "baseCurrency": "GBP",
                  "corporateActionSourceId": {
                    "scope": "Sources",
                    "code": "Vendor1"
                  },
                  "subHoldingKeys": [
                    "Portfolio/Client/AccountType"
                  ]
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioDetails"
                },
                "example": {
                  "originPortfolioId": {
                    "scope": "Region",
                    "code": "UK"
                  },
                  "baseCurrency": "GBP",
                  "corporateActionSourceId": {
                    "scope": "Sources",
                    "code": "Vendor1"
                  },
                  "subHoldingKeys": [
                    "Portfolio/Client/AccountType"
                  ]
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioDetails"
                },
                "example": {
                  "originPortfolioId": {
                    "scope": "Region",
                    "code": "UK"
                  },
                  "baseCurrency": "GBP",
                  "corporateActionSourceId": {
                    "scope": "Sources",
                    "code": "Vendor1"
                  },
                  "subHoldingKeys": [
                    "Portfolio/Client/AccountType"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      },
      "post": {
        "tags": [
          "Transaction Portfolios"
        ],
        "summary": "Upsert portfolio details",
        "description": "Update or insert details for the specified transaction portfolio. The details will be updated\r\nif they already exist and inserted if they do not.",
        "operationId": "UpsertPortfolioDetails",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the transaction portfolio to update or insert details for.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the transaction portfolio to update or insert details for.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the transaction portfolio to update or insert details for. Together with the\r\n            scope this uniquely identifies the transaction portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the transaction portfolio to update or insert details for. Together with the\r\n            scope this uniquely identifies the transaction portfolio.",
              "nullable": true
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime or cut label at which the updated or inserted details should become valid.\r\n            Defaults to the current LUSID system datetime if not specified.",
            "schema": {
              "type": "string",
              "description": "The effective datetime or cut label at which the updated or inserted details should become valid.\r\n            Defaults to the current LUSID system datetime if not specified.",
              "format": "dateorcutlabel",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "The details to update or insert for the specified transaction portfolio.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePortfolioDetails"
              },
              "example": {
                "corporateActionSourceId": {
                  "scope": "Sources",
                  "code": "Vendor1"
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePortfolioDetails"
              },
              "example": {
                "corporateActionSourceId": {
                  "scope": "Sources",
                  "code": "Vendor1"
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePortfolioDetails"
              },
              "example": {
                "corporateActionSourceId": {
                  "scope": "Sources",
                  "code": "Vendor1"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePortfolioDetails"
              },
              "example": {
                "corporateActionSourceId": {
                  "scope": "Sources",
                  "code": "Vendor1"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The newly updated or inserted details",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioDetails"
                },
                "example": {
                  "originPortfolioId": {
                    "scope": "Region",
                    "code": "UK"
                  },
                  "baseCurrency": "GBP",
                  "corporateActionSourceId": {
                    "scope": "Sources",
                    "code": "Vendor1"
                  },
                  "subHoldingKeys": [
                    "Portfolio/Client/AccountType"
                  ]
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioDetails"
                },
                "example": {
                  "originPortfolioId": {
                    "scope": "Region",
                    "code": "UK"
                  },
                  "baseCurrency": "GBP",
                  "corporateActionSourceId": {
                    "scope": "Sources",
                    "code": "Vendor1"
                  },
                  "subHoldingKeys": [
                    "Portfolio/Client/AccountType"
                  ]
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioDetails"
                },
                "example": {
                  "originPortfolioId": {
                    "scope": "Region",
                    "code": "UK"
                  },
                  "baseCurrency": "GBP",
                  "corporateActionSourceId": {
                    "scope": "Sources",
                    "code": "Vendor1"
                  },
                  "subHoldingKeys": [
                    "Portfolio/Client/AccountType"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      }
    },
    "/api/transactionportfolios/{scope}/{code}/executions": {
      "post": {
        "tags": [
          "Transaction Portfolios"
        ],
        "summary": "[EARLY ACCESS] Upsert executions",
        "description": "Update or insert executions into the specified transaction portfolio. An execution will be updated\r\nif it already exists and inserted if it does not.",
        "operationId": "UpsertExecutions",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the transaction portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the transaction portfolio.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the transaction portfolio. Together with the scope this uniquely identifies\r\n            the transaction portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the transaction portfolio. Together with the scope this uniquely identifies\r\n            the transaction portfolio.",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "The executions to update or insert.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ExecutionRequest"
                },
                "description": "The executions to update or insert.",
                "nullable": true
              },
              "example": [
                {
                  "executionId": "ExecutionId-11111",
                  "side": "SellShort",
                  "instrumentIdentifiers": {
                    "clientInternal": "CLI-183461"
                  },
                  "transactionTime": "2018-03-05T12:00:00.0000000+00:00",
                  "lastShares": 1000,
                  "lastPx": 1.23,
                  "currency": "USD"
                }
              ]
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ExecutionRequest"
                },
                "description": "The executions to update or insert.",
                "nullable": true
              },
              "example": [
                {
                  "executionId": "ExecutionId-11111",
                  "side": "SellShort",
                  "instrumentIdentifiers": {
                    "clientInternal": "CLI-183461"
                  },
                  "transactionTime": "2018-03-05T12:00:00.0000000+00:00",
                  "lastShares": 1000,
                  "lastPx": 1.23,
                  "currency": "USD"
                }
              ]
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ExecutionRequest"
                },
                "description": "The executions to update or insert.",
                "nullable": true
              },
              "example": [
                {
                  "executionId": "ExecutionId-11111",
                  "side": "SellShort",
                  "instrumentIdentifiers": {
                    "clientInternal": "CLI-183461"
                  },
                  "transactionTime": "2018-03-05T12:00:00.0000000+00:00",
                  "lastShares": 1000,
                  "lastPx": 1.23,
                  "currency": "USD"
                }
              ]
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ExecutionRequest"
                },
                "description": "The executions to update or insert.",
                "nullable": true
              },
              "example": [
                {
                  "executionId": "ExecutionId-11111",
                  "side": "SellShort",
                  "instrumentIdentifiers": {
                    "clientInternal": "CLI-183461"
                  },
                  "transactionTime": "2018-03-05T12:00:00.0000000+00:00",
                  "lastShares": 1000,
                  "lastPx": 1.23,
                  "currency": "USD"
                }
              ]
            }
          }
        },
        "responses": {
          "200": {
            "description": "The version of the transaction portfolio that contains the newly updated or inserted executions",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertPortfolioExecutionsResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertPortfolioExecutionsResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertPortfolioExecutionsResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      },
      "delete": {
        "tags": [
          "Transaction Portfolios"
        ],
        "summary": "[EARLY ACCESS] Cancel executions",
        "description": "Cancel one or more executions which exist in a specified transaction portfolio.",
        "operationId": "CancelExecutions",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the transaction portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the transaction portfolio.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the transaction portfolio. Together with the scope this uniquely identifies\r\n            the transaction portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the transaction portfolio. Together with the scope this uniquely identifies\r\n            the transaction portfolio.",
              "nullable": true
            }
          },
          {
            "name": "executionIds",
            "in": "query",
            "description": "The ids of the executions to cancel.",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "The ids of the executions to cancel."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The datetime that the executions were cancelled",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/transactionportfolios/{scope}/{code}/holdings": {
      "put": {
        "tags": [
          "Transaction Portfolios"
        ],
        "summary": "Set holdings",
        "description": "Set the holdings of the specified transaction portfolio to the provided targets. LUSID will automatically\r\nconstruct adjustment transactions to ensure that the entire set of holdings for the transaction portfolio\r\nare always set to the provided targets for the specified effective datetime. Read more about the difference between\r\nadjusting and setting holdings here https://support.lusid.com/how-do-i-adjust-my-holdings.",
        "operationId": "SetHoldings",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the transaction portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the transaction portfolio.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the transaction portfolio. Together with the scope this uniquely identifies\r\n            the transaction portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the transaction portfolio. Together with the scope this uniquely identifies\r\n            the transaction portfolio.",
              "nullable": true
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime or cut label at which the holdings should be set to the provided targets.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The effective datetime or cut label at which the holdings should be set to the provided targets.",
              "format": "dateorcutlabel"
            }
          },
          {
            "name": "reconciliationMethods",
            "in": "query",
            "description": "Optional parameter for specifying a reconciliation method: e.g. FxForward.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Optional parameter for specifying a reconciliation method: e.g. FxForward.",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "requestBody": {
          "description": "The complete set of target holdings for the transaction portfolio.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AdjustHoldingRequest"
                },
                "description": "The complete set of target holdings for the transaction portfolio."
              },
              "example": [
                {
                  "instrumentIdentifiers": {
                    "instrument/default/Figi": "BBG000C6K6G9",
                    "instrument/default/Isin": "GB00BH4HKS39"
                  },
                  "subHoldingKeys": {
                    "transaction/Algo/Name": {
                      "key": "Transaction/Algo/Name",
                      "value": {
                        "labelValue": "Algo1"
                      }
                    }
                  },
                  "properties": {
                    "holding/Entity/Name": {
                      "key": "Holding/Entity/Name",
                      "value": {
                        "labelValue": "Financial Entity"
                      }
                    }
                  },
                  "taxLots": [
                    {
                      "units": 100,
                      "cost": {
                        "amount": 10000,
                        "currency": "GBP"
                      },
                      "portfolioCost": 10000,
                      "price": 100,
                      "purchaseDate": "2018-03-05T00:00:00.0000000+00:00",
                      "settlementDate": "2018-03-08T00:00:00.0000000+00:00"
                    }
                  ],
                  "currency": "GBP"
                }
              ]
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AdjustHoldingRequest"
                },
                "description": "The complete set of target holdings for the transaction portfolio."
              },
              "example": [
                {
                  "instrumentIdentifiers": {
                    "instrument/default/Figi": "BBG000C6K6G9",
                    "instrument/default/Isin": "GB00BH4HKS39"
                  },
                  "subHoldingKeys": {
                    "transaction/Algo/Name": {
                      "key": "Transaction/Algo/Name",
                      "value": {
                        "labelValue": "Algo1"
                      }
                    }
                  },
                  "properties": {
                    "holding/Entity/Name": {
                      "key": "Holding/Entity/Name",
                      "value": {
                        "labelValue": "Financial Entity"
                      }
                    }
                  },
                  "taxLots": [
                    {
                      "units": 100,
                      "cost": {
                        "amount": 10000,
                        "currency": "GBP"
                      },
                      "portfolioCost": 10000,
                      "price": 100,
                      "purchaseDate": "2018-03-05T00:00:00.0000000+00:00",
                      "settlementDate": "2018-03-08T00:00:00.0000000+00:00"
                    }
                  ],
                  "currency": "GBP"
                }
              ]
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AdjustHoldingRequest"
                },
                "description": "The complete set of target holdings for the transaction portfolio."
              },
              "example": [
                {
                  "instrumentIdentifiers": {
                    "instrument/default/Figi": "BBG000C6K6G9",
                    "instrument/default/Isin": "GB00BH4HKS39"
                  },
                  "subHoldingKeys": {
                    "transaction/Algo/Name": {
                      "key": "Transaction/Algo/Name",
                      "value": {
                        "labelValue": "Algo1"
                      }
                    }
                  },
                  "properties": {
                    "holding/Entity/Name": {
                      "key": "Holding/Entity/Name",
                      "value": {
                        "labelValue": "Financial Entity"
                      }
                    }
                  },
                  "taxLots": [
                    {
                      "units": 100,
                      "cost": {
                        "amount": 10000,
                        "currency": "GBP"
                      },
                      "portfolioCost": 10000,
                      "price": 100,
                      "purchaseDate": "2018-03-05T00:00:00.0000000+00:00",
                      "settlementDate": "2018-03-08T00:00:00.0000000+00:00"
                    }
                  ],
                  "currency": "GBP"
                }
              ]
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AdjustHoldingRequest"
                },
                "description": "The complete set of target holdings for the transaction portfolio."
              },
              "example": [
                {
                  "instrumentIdentifiers": {
                    "instrument/default/Figi": "BBG000C6K6G9",
                    "instrument/default/Isin": "GB00BH4HKS39"
                  },
                  "subHoldingKeys": {
                    "transaction/Algo/Name": {
                      "key": "Transaction/Algo/Name",
                      "value": {
                        "labelValue": "Algo1"
                      }
                    }
                  },
                  "properties": {
                    "holding/Entity/Name": {
                      "key": "Holding/Entity/Name",
                      "value": {
                        "labelValue": "Financial Entity"
                      }
                    }
                  },
                  "taxLots": [
                    {
                      "units": 100,
                      "cost": {
                        "amount": 10000,
                        "currency": "GBP"
                      },
                      "portfolioCost": 10000,
                      "price": 100,
                      "purchaseDate": "2018-03-05T00:00:00.0000000+00:00",
                      "settlementDate": "2018-03-08T00:00:00.0000000+00:00"
                    }
                  ],
                  "currency": "GBP"
                }
              ]
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The version of the transaction portfolio that contains the newly set holdings",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AdjustHolding"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdjustHolding"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdjustHolding"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      },
      "post": {
        "tags": [
          "Transaction Portfolios"
        ],
        "summary": "Adjust holdings",
        "description": "Adjust one or more holdings of the specified transaction portfolio to the provided targets. LUSID will\r\nautomatically construct adjustment transactions to ensure that the holdings which have been adjusted are\r\nalways set to the provided targets for the specified effective datetime. Read more about the difference between\r\nadjusting and setting holdings here https://support.lusid.com/how-do-i-adjust-my-holdings.",
        "operationId": "AdjustHoldings",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the transaction portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the transaction portfolio.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the transaction portfolio. Together with the scope this uniquely identifies\r\n            the transaction portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the transaction portfolio. Together with the scope this uniquely identifies\r\n            the transaction portfolio.",
              "nullable": true
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime or cut label at which the holdings should be set to the provided targets.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The effective datetime or cut label at which the holdings should be set to the provided targets.",
              "format": "dateorcutlabel"
            }
          },
          {
            "name": "reconciliationMethods",
            "in": "query",
            "description": "Optional parameter for specifying a reconciliation method: e.g. FxForward.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Optional parameter for specifying a reconciliation method: e.g. FxForward.",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "requestBody": {
          "description": "The selected set of holdings to adjust to the provided targets for the\r\n            transaction portfolio.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AdjustHoldingRequest"
                },
                "description": "The selected set of holdings to adjust to the provided targets for the\r\n            transaction portfolio."
              },
              "example": [
                {
                  "instrumentIdentifiers": {
                    "instrument/default/Figi": "BBG000C6K6G9",
                    "instrument/default/Isin": "GB00BH4HKS39"
                  },
                  "subHoldingKeys": {
                    "transaction/Algo/Name": {
                      "key": "Transaction/Algo/Name",
                      "value": {
                        "labelValue": "Algo1"
                      }
                    }
                  },
                  "properties": {
                    "holding/Entity/Name": {
                      "key": "Holding/Entity/Name",
                      "value": {
                        "labelValue": "Financial Entity"
                      }
                    }
                  },
                  "taxLots": [
                    {
                      "units": 100,
                      "cost": {
                        "amount": 10000,
                        "currency": "GBP"
                      },
                      "portfolioCost": 10000,
                      "price": 100,
                      "purchaseDate": "2018-03-05T00:00:00.0000000+00:00",
                      "settlementDate": "2018-03-08T00:00:00.0000000+00:00"
                    }
                  ],
                  "currency": "GBP"
                }
              ]
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AdjustHoldingRequest"
                },
                "description": "The selected set of holdings to adjust to the provided targets for the\r\n            transaction portfolio."
              },
              "example": [
                {
                  "instrumentIdentifiers": {
                    "instrument/default/Figi": "BBG000C6K6G9",
                    "instrument/default/Isin": "GB00BH4HKS39"
                  },
                  "subHoldingKeys": {
                    "transaction/Algo/Name": {
                      "key": "Transaction/Algo/Name",
                      "value": {
                        "labelValue": "Algo1"
                      }
                    }
                  },
                  "properties": {
                    "holding/Entity/Name": {
                      "key": "Holding/Entity/Name",
                      "value": {
                        "labelValue": "Financial Entity"
                      }
                    }
                  },
                  "taxLots": [
                    {
                      "units": 100,
                      "cost": {
                        "amount": 10000,
                        "currency": "GBP"
                      },
                      "portfolioCost": 10000,
                      "price": 100,
                      "purchaseDate": "2018-03-05T00:00:00.0000000+00:00",
                      "settlementDate": "2018-03-08T00:00:00.0000000+00:00"
                    }
                  ],
                  "currency": "GBP"
                }
              ]
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AdjustHoldingRequest"
                },
                "description": "The selected set of holdings to adjust to the provided targets for the\r\n            transaction portfolio."
              },
              "example": [
                {
                  "instrumentIdentifiers": {
                    "instrument/default/Figi": "BBG000C6K6G9",
                    "instrument/default/Isin": "GB00BH4HKS39"
                  },
                  "subHoldingKeys": {
                    "transaction/Algo/Name": {
                      "key": "Transaction/Algo/Name",
                      "value": {
                        "labelValue": "Algo1"
                      }
                    }
                  },
                  "properties": {
                    "holding/Entity/Name": {
                      "key": "Holding/Entity/Name",
                      "value": {
                        "labelValue": "Financial Entity"
                      }
                    }
                  },
                  "taxLots": [
                    {
                      "units": 100,
                      "cost": {
                        "amount": 10000,
                        "currency": "GBP"
                      },
                      "portfolioCost": 10000,
                      "price": 100,
                      "purchaseDate": "2018-03-05T00:00:00.0000000+00:00",
                      "settlementDate": "2018-03-08T00:00:00.0000000+00:00"
                    }
                  ],
                  "currency": "GBP"
                }
              ]
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AdjustHoldingRequest"
                },
                "description": "The selected set of holdings to adjust to the provided targets for the\r\n            transaction portfolio."
              },
              "example": [
                {
                  "instrumentIdentifiers": {
                    "instrument/default/Figi": "BBG000C6K6G9",
                    "instrument/default/Isin": "GB00BH4HKS39"
                  },
                  "subHoldingKeys": {
                    "transaction/Algo/Name": {
                      "key": "Transaction/Algo/Name",
                      "value": {
                        "labelValue": "Algo1"
                      }
                    }
                  },
                  "properties": {
                    "holding/Entity/Name": {
                      "key": "Holding/Entity/Name",
                      "value": {
                        "labelValue": "Financial Entity"
                      }
                    }
                  },
                  "taxLots": [
                    {
                      "units": 100,
                      "cost": {
                        "amount": 10000,
                        "currency": "GBP"
                      },
                      "portfolioCost": 10000,
                      "price": 100,
                      "purchaseDate": "2018-03-05T00:00:00.0000000+00:00",
                      "settlementDate": "2018-03-08T00:00:00.0000000+00:00"
                    }
                  ],
                  "currency": "GBP"
                }
              ]
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The version of the transaction portfolio that contains the newly adjusted holdings",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AdjustHolding"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdjustHolding"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdjustHolding"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      },
      "delete": {
        "tags": [
          "Transaction Portfolios"
        ],
        "summary": "Cancel adjust holdings",
        "description": "Cancel all previous holding adjustments made on the specified transaction portfolio for a specified effective\r\ndatetime. This should be used to undo holding adjustments made via set holdings or adjust holdings.",
        "operationId": "CancelAdjustHoldings",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the transaction portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the transaction portfolio.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the transaction portfolio. Together with the scope this uniquely identifies\r\n            the transaction portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the transaction portfolio. Together with the scope this uniquely identifies\r\n            the transaction portfolio.",
              "nullable": true
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime or cut label at which the holding adjustments should be undone.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The effective datetime or cut label at which the holding adjustments should be undone.",
              "format": "dateorcutlabel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The datetime that the holding adjustments were cancelled",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      },
      "get": {
        "tags": [
          "Transaction Portfolios"
        ],
        "summary": "Get holdings",
        "description": "Get the holdings of the specified transaction portfolio.",
        "operationId": "GetHoldings",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the transaction portfolio.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The scope of the transaction portfolio.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the transaction portfolio. Together with the scope this uniquely identifies\r\n            the transaction portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the transaction portfolio. Together with the scope this uniquely identifies\r\n            the transaction portfolio.",
              "nullable": true
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime or cut label at which to retrieve the holdings of the transaction\r\n            portfolio. Defaults to the current LUSID system datetime if not specified.",
            "schema": {
              "type": "string",
              "description": "The effective datetime or cut label at which to retrieve the holdings of the transaction\r\n            portfolio. Defaults to the current LUSID system datetime if not specified.",
              "format": "dateorcutlabel",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the holdings of the transaction portfolio. Defaults\r\n            to return the latest version of the holdings if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to retrieve the holdings of the transaction portfolio. Defaults\r\n            to return the latest version of the holdings if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the result set. \r\n            For example, to filter on the Holding Type, use \"holdingType eq 'p'\"\r\n            Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "type": "string",
              "description": "Expression to filter the result set. \r\n            For example, to filter on the Holding Type, use \"holdingType eq 'p'\"\r\n            Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
              "nullable": true
            }
          },
          {
            "name": "propertyKeys",
            "in": "query",
            "description": "A list of property keys from the \"Instrument\" or \"Holding\" domain to decorate onto\r\n            the holdings. These take the format {domain}/{scope}/{code} e.g. \"Instrument/system/Name\" or \"Holding/system/Cost\".",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
              },
              "description": "A list of property keys from the \"Instrument\" or \"Holding\" domain to decorate onto\r\n            the holdings. These take the format {domain}/{scope}/{code} e.g. \"Instrument/system/Name\" or \"Holding/system/Cost\".",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "byTaxlots",
            "in": "query",
            "description": "Whether or not to expand the holdings to return the underlying tax-lots. Defaults to\r\n            False.",
            "schema": {
              "type": "boolean",
              "description": "Whether or not to expand the holdings to return the underlying tax-lots. Defaults to\r\n            False.",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The holdings and version of the specified transaction portfolio",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/VersionedResourceListOfPortfolioHolding"
                },
                "example": {
                  "version": {
                    "effectiveFrom": "2019-03-05T12:00:00.0000000+00:00",
                    "asAtDate": "2019-03-05T12:00:00.0000000+00:00"
                  },
                  "values": [
                    {
                      "instrumentUid": "LUID_XH4GNUEX",
                      "holdingType": "P",
                      "units": 10,
                      "settledUnits": 10,
                      "cost": {
                        "amount": 2.5,
                        "currency": "GBP"
                      },
                      "costPortfolioCcy": {
                        "amount": 2.5,
                        "currency": "GBP"
                      },
                      "currency": "ZZZ"
                    }
                  ],
                  "links": []
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VersionedResourceListOfPortfolioHolding"
                },
                "example": {
                  "version": {
                    "effectiveFrom": "2019-03-05T12:00:00.0000000+00:00",
                    "asAtDate": "2019-03-05T12:00:00.0000000+00:00"
                  },
                  "values": [
                    {
                      "instrumentUid": "LUID_XH4GNUEX",
                      "holdingType": "P",
                      "units": 10,
                      "settledUnits": 10,
                      "cost": {
                        "amount": 2.5,
                        "currency": "GBP"
                      },
                      "costPortfolioCcy": {
                        "amount": 2.5,
                        "currency": "GBP"
                      },
                      "currency": "ZZZ"
                    }
                  ],
                  "links": []
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/VersionedResourceListOfPortfolioHolding"
                },
                "example": {
                  "version": {
                    "effectiveFrom": "2019-03-05T12:00:00.0000000+00:00",
                    "asAtDate": "2019-03-05T12:00:00.0000000+00:00"
                  },
                  "values": [
                    {
                      "instrumentUid": "LUID_XH4GNUEX",
                      "holdingType": "P",
                      "units": 10,
                      "settledUnits": 10,
                      "cost": {
                        "amount": 2.5,
                        "currency": "GBP"
                      },
                      "costPortfolioCcy": {
                        "amount": 2.5,
                        "currency": "GBP"
                      },
                      "currency": "ZZZ"
                    }
                  ],
                  "links": []
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      }
    },
    "/api/transactionportfolios/{scope}/{code}/holdingsadjustments": {
      "get": {
        "tags": [
          "Transaction Portfolios"
        ],
        "summary": "List holdings adjustments",
        "description": "List the holdings adjustments made to the specified transaction portfolio over a specified interval of effective time.",
        "operationId": "ListHoldingsAdjustments",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the transaction portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the transaction portfolio.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the transaction portfolio. Together with the scope this uniquely identifies\r\n            the transaction portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the transaction portfolio. Together with the scope this uniquely identifies\r\n            the transaction portfolio.",
              "nullable": true
            }
          },
          {
            "name": "fromEffectiveAt",
            "in": "query",
            "description": "The lower bound effective datetime or cut label (inclusive) from which to retrieve the holdings\r\n            adjustments. There is no lower bound if this is not specified.",
            "schema": {
              "type": "string",
              "description": "The lower bound effective datetime or cut label (inclusive) from which to retrieve the holdings\r\n            adjustments. There is no lower bound if this is not specified.",
              "format": "dateorcutlabel",
              "nullable": true
            }
          },
          {
            "name": "toEffectiveAt",
            "in": "query",
            "description": "The upper bound effective datetime or cut label (inclusive) from which to retrieve the holdings\r\n            adjustments. There is no upper bound if this is not specified.",
            "schema": {
              "type": "string",
              "description": "The upper bound effective datetime or cut label (inclusive) from which to retrieve the holdings\r\n            adjustments. There is no upper bound if this is not specified.",
              "format": "dateorcutlabel",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the holdings adjustments. Defaults to return the\r\n            latest version of each holding adjustment if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to retrieve the holdings adjustments. Defaults to return the\r\n            latest version of each holding adjustment if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The record of holdings adjustments made to the specified transaction portfolio",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfHoldingsAdjustmentHeader"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfHoldingsAdjustmentHeader"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfHoldingsAdjustmentHeader"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      }
    },
    "/api/transactionportfolios/{scope}/{code}/holdingsadjustments/{effectiveAt}": {
      "get": {
        "tags": [
          "Transaction Portfolios"
        ],
        "summary": "Get holdings adjustment",
        "description": "Get a holdings adjustment made to a transaction portfolio at a specific effective datetime. Note that a\r\nholdings adjustment will only be returned if one exists for the specified effective datetime.",
        "operationId": "GetHoldingsAdjustment",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the transaction portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the transaction portfolio.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the transaction portfolio. Together with the scope this uniquely identifies\r\n            the transaction portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the transaction portfolio. Together with the scope this uniquely identifies\r\n            the transaction portfolio.",
              "nullable": true
            }
          },
          {
            "name": "effectiveAt",
            "in": "path",
            "description": "The effective datetime or cut label of the holdings adjustment.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The effective datetime or cut label of the holdings adjustment.",
              "format": "dateorcutlabel",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the holdings adjustment. Defaults to the return the latest\r\n            version of the holdings adjustment if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to retrieve the holdings adjustment. Defaults to the return the latest\r\n            version of the holdings adjustment if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The details of the requested holdings adjustment",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/HoldingsAdjustment"
                },
                "example": {
                  "value": {
                    "effectiveAt": "0001-01-01T00:00:00.0000000+00:00",
                    "version": {
                      "effectiveFrom": "2019-03-05T00:00:00.0000000+00:00",
                      "asAtDate": "2019-03-08T00:00:00.0000000+00:00"
                    },
                    "unmatchedHoldingMethod": "KeepTheSame",
                    "adjustments": [
                      {
                        "instrumentIdentifiers": {
                          "instrument/default/ClientInternal": "CLI-192836"
                        },
                        "instrumentUid": "LUID_GNMKYXXK",
                        "subHoldingKeys": {},
                        "properties": {},
                        "taxLots": [
                          {
                            "units": 10,
                            "cost": {
                              "amount": 120,
                              "currency": "GBP"
                            }
                          }
                        ],
                        "currency": "ZZZ"
                      },
                      {
                        "instrumentIdentifiers": {
                          "instrument/default/ClientInternal": "CLI-462810"
                        },
                        "instrumentUid": "LUID_LE9E5SJE",
                        "subHoldingKeys": {},
                        "properties": {},
                        "taxLots": [
                          {
                            "units": 10,
                            "cost": {
                              "amount": 120,
                              "currency": "GBP"
                            }
                          }
                        ],
                        "currency": "ZZZ"
                      }
                    ]
                  }
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HoldingsAdjustment"
                },
                "example": {
                  "value": {
                    "effectiveAt": "0001-01-01T00:00:00.0000000+00:00",
                    "version": {
                      "effectiveFrom": "2019-03-05T00:00:00.0000000+00:00",
                      "asAtDate": "2019-03-08T00:00:00.0000000+00:00"
                    },
                    "unmatchedHoldingMethod": "KeepTheSame",
                    "adjustments": [
                      {
                        "instrumentIdentifiers": {
                          "instrument/default/ClientInternal": "CLI-192836"
                        },
                        "instrumentUid": "LUID_GNMKYXXK",
                        "subHoldingKeys": {},
                        "properties": {},
                        "taxLots": [
                          {
                            "units": 10,
                            "cost": {
                              "amount": 120,
                              "currency": "GBP"
                            }
                          }
                        ],
                        "currency": "ZZZ"
                      },
                      {
                        "instrumentIdentifiers": {
                          "instrument/default/ClientInternal": "CLI-462810"
                        },
                        "instrumentUid": "LUID_LE9E5SJE",
                        "subHoldingKeys": {},
                        "properties": {},
                        "taxLots": [
                          {
                            "units": 10,
                            "cost": {
                              "amount": 120,
                              "currency": "GBP"
                            }
                          }
                        ],
                        "currency": "ZZZ"
                      }
                    ]
                  }
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/HoldingsAdjustment"
                },
                "example": {
                  "value": {
                    "effectiveAt": "0001-01-01T00:00:00.0000000+00:00",
                    "version": {
                      "effectiveFrom": "2019-03-05T00:00:00.0000000+00:00",
                      "asAtDate": "2019-03-08T00:00:00.0000000+00:00"
                    },
                    "unmatchedHoldingMethod": "KeepTheSame",
                    "adjustments": [
                      {
                        "instrumentIdentifiers": {
                          "instrument/default/ClientInternal": "CLI-192836"
                        },
                        "instrumentUid": "LUID_GNMKYXXK",
                        "subHoldingKeys": {},
                        "properties": {},
                        "taxLots": [
                          {
                            "units": 10,
                            "cost": {
                              "amount": 120,
                              "currency": "GBP"
                            }
                          }
                        ],
                        "currency": "ZZZ"
                      },
                      {
                        "instrumentIdentifiers": {
                          "instrument/default/ClientInternal": "CLI-462810"
                        },
                        "instrumentUid": "LUID_LE9E5SJE",
                        "subHoldingKeys": {},
                        "properties": {},
                        "taxLots": [
                          {
                            "units": 10,
                            "cost": {
                              "amount": 120,
                              "currency": "GBP"
                            }
                          }
                        ],
                        "currency": "ZZZ"
                      }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      }
    },
    "/api/transactionportfolios/{scope}/{code}/transactions": {
      "get": {
        "tags": [
          "Transaction Portfolios"
        ],
        "summary": "Get transactions",
        "description": "Get transactions from the specified transaction portfolio over a given interval of effective time. \r\n\r\nWhen the specified portfolio is a derived transaction portfolio, the returned set of transactions is the\r\nunion set of all transactions of the parent (and any grandparents etc.) and the specified derived transaction portfolio itself.\n\nThe maximum number of transactions that this method can get per request is 2,000.",
        "operationId": "GetTransactions",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the transaction portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the transaction portfolio.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the transaction portfolio. Together with the scope this uniquely identifies\r\n            the transaction portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the transaction portfolio. Together with the scope this uniquely identifies\r\n            the transaction portfolio.",
              "nullable": true
            }
          },
          {
            "name": "fromTransactionDate",
            "in": "query",
            "description": "The lower bound effective datetime or cut label (inclusive) from which to retrieve the transactions.\r\n            There is no lower bound if this is not specified.",
            "schema": {
              "type": "string",
              "description": "The lower bound effective datetime or cut label (inclusive) from which to retrieve the transactions.\r\n            There is no lower bound if this is not specified.",
              "format": "dateorcutlabel",
              "nullable": true
            }
          },
          {
            "name": "toTransactionDate",
            "in": "query",
            "description": "The upper bound effective datetime or cut label (inclusive) from which to retrieve transactions.\r\n            There is no upper bound if this is not specified.",
            "schema": {
              "type": "string",
              "description": "The upper bound effective datetime or cut label (inclusive) from which to retrieve transactions.\r\n            There is no upper bound if this is not specified.",
              "format": "dateorcutlabel",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the transactions. Defaults to return the latest version\r\n            of each transaction if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to retrieve the transactions. Defaults to return the latest version\r\n            of each transaction if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the result set. \r\n            For example, to filter on the Transaction Type, use \"type eq 'Buy'\"\r\n            Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "type": "string",
              "description": "Expression to filter the result set. \r\n            For example, to filter on the Transaction Type, use \"type eq 'Buy'\"\r\n            Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
              "nullable": true
            }
          },
          {
            "name": "propertyKeys",
            "in": "query",
            "description": "A list of property keys from the \"Instrument\" or \"Transaction\" domain to decorate onto\r\n            the transactions. These take the format {domain}/{scope}/{code} e.g. \"Instrument/system/Name\" or\r\n            \"Transaction/strategy/quantsignal\".",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
              },
              "description": "A list of property keys from the \"Instrument\" or \"Transaction\" domain to decorate onto\r\n            the transactions. These take the format {domain}/{scope}/{code} e.g. \"Instrument/system/Name\" or\r\n            \"Transaction/strategy/quantsignal\".",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The requested transactions from the specified transaction portfolio",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/VersionedResourceListOfTransaction"
                },
                "example": {
                  "version": {
                    "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00",
                    "asAtDate": "2018-03-04T23:50:00.0000000+00:00"
                  },
                  "values": [
                    {
                      "transactionId": "TXN-00001",
                      "type": "Buy",
                      "instrumentIdentifiers": {
                        "instrument/default/RIC": "RIC.L"
                      },
                      "instrumentUid": "LUID_1C7YTL5M",
                      "transactionDate": "2018-08-04T00:00:00.0000000+00:00",
                      "settlementDate": "2018-08-06T00:00:00.0000000+00:00",
                      "units": 1000,
                      "transactionPrice": {
                        "price": 88.8,
                        "type": "Price"
                      },
                      "totalConsideration": {
                        "amount": 88800,
                        "currency": "USD"
                      },
                      "properties": {
                        "transaction/default/TradeToPortfolioRate": {
                          "key": "Transaction/default/TradeToPortfolioRate",
                          "value": {
                            "metricValue": {
                              "value": 0.765
                            }
                          }
                        },
                        "transaction/default/SourcePortfolioId": {
                          "key": "Transaction/default/SourcePortfolioId",
                          "value": {
                            "labelValue": "DEMO-PORTFOLIO-ID"
                          }
                        },
                        "transaction/default/SourcePortfolioScope": {
                          "key": "Transaction/default/SourcePortfolioScope",
                          "value": {
                            "labelValue": "DEMO-SCOPE"
                          }
                        }
                      },
                      "source": "",
                      "entryDateTime": "2018-03-04T23:50:00.0000000+00:00"
                    }
                  ],
                  "href": "http://example.com",
                  "links": []
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VersionedResourceListOfTransaction"
                },
                "example": {
                  "version": {
                    "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00",
                    "asAtDate": "2018-03-04T23:50:00.0000000+00:00"
                  },
                  "values": [
                    {
                      "transactionId": "TXN-00001",
                      "type": "Buy",
                      "instrumentIdentifiers": {
                        "instrument/default/RIC": "RIC.L"
                      },
                      "instrumentUid": "LUID_1C7YTL5M",
                      "transactionDate": "2018-08-04T00:00:00.0000000+00:00",
                      "settlementDate": "2018-08-06T00:00:00.0000000+00:00",
                      "units": 1000,
                      "transactionPrice": {
                        "price": 88.8,
                        "type": "Price"
                      },
                      "totalConsideration": {
                        "amount": 88800,
                        "currency": "USD"
                      },
                      "properties": {
                        "transaction/default/TradeToPortfolioRate": {
                          "key": "Transaction/default/TradeToPortfolioRate",
                          "value": {
                            "metricValue": {
                              "value": 0.765
                            }
                          }
                        },
                        "transaction/default/SourcePortfolioId": {
                          "key": "Transaction/default/SourcePortfolioId",
                          "value": {
                            "labelValue": "DEMO-PORTFOLIO-ID"
                          }
                        },
                        "transaction/default/SourcePortfolioScope": {
                          "key": "Transaction/default/SourcePortfolioScope",
                          "value": {
                            "labelValue": "DEMO-SCOPE"
                          }
                        }
                      },
                      "source": "",
                      "entryDateTime": "2018-03-04T23:50:00.0000000+00:00"
                    }
                  ],
                  "href": "http://example.com",
                  "links": []
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/VersionedResourceListOfTransaction"
                },
                "example": {
                  "version": {
                    "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00",
                    "asAtDate": "2018-03-04T23:50:00.0000000+00:00"
                  },
                  "values": [
                    {
                      "transactionId": "TXN-00001",
                      "type": "Buy",
                      "instrumentIdentifiers": {
                        "instrument/default/RIC": "RIC.L"
                      },
                      "instrumentUid": "LUID_1C7YTL5M",
                      "transactionDate": "2018-08-04T00:00:00.0000000+00:00",
                      "settlementDate": "2018-08-06T00:00:00.0000000+00:00",
                      "units": 1000,
                      "transactionPrice": {
                        "price": 88.8,
                        "type": "Price"
                      },
                      "totalConsideration": {
                        "amount": 88800,
                        "currency": "USD"
                      },
                      "properties": {
                        "transaction/default/TradeToPortfolioRate": {
                          "key": "Transaction/default/TradeToPortfolioRate",
                          "value": {
                            "metricValue": {
                              "value": 0.765
                            }
                          }
                        },
                        "transaction/default/SourcePortfolioId": {
                          "key": "Transaction/default/SourcePortfolioId",
                          "value": {
                            "labelValue": "DEMO-PORTFOLIO-ID"
                          }
                        },
                        "transaction/default/SourcePortfolioScope": {
                          "key": "Transaction/default/SourcePortfolioScope",
                          "value": {
                            "labelValue": "DEMO-SCOPE"
                          }
                        }
                      },
                      "source": "",
                      "entryDateTime": "2018-03-04T23:50:00.0000000+00:00"
                    }
                  ],
                  "href": "http://example.com",
                  "links": []
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      },
      "post": {
        "tags": [
          "Transaction Portfolios"
        ],
        "summary": "Upsert transactions",
        "description": "Update or insert transactions into the specified transaction portfolio. A transaction will be updated\r\nif it already exists and inserted if it does not.\n\nThe maximum number of transactions that this method can upsert per request is 10,000.",
        "operationId": "UpsertTransactions",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the transaction portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the transaction portfolio.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the transaction portfolio. Together with the scope this uniquely identifies\r\n            the transaction portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the transaction portfolio. Together with the scope this uniquely identifies\r\n            the transaction portfolio.",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "The transactions to be updated or inserted.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/TransactionRequest"
                },
                "description": "The transactions to be updated or inserted."
              },
              "example": [
                {
                  "transactionId": "TransactionId-111111",
                  "type": "StockIn",
                  "instrumentIdentifiers": {
                    "instrument/default/Figi": "BBG000C6K6G9",
                    "instrument/default/Isin": "GB00BH4HKS39"
                  },
                  "transactionDate": "2018-03-05T00:00:00.0000000+00:00",
                  "settlementDate": "2018-03-08T00:00:00.0000000+00:00",
                  "units": 1000,
                  "transactionPrice": {
                    "price": 123,
                    "type": "Price"
                  },
                  "totalConsideration": {
                    "amount": 123000,
                    "currency": "GBP"
                  },
                  "transactionCurrency": "GBP",
                  "properties": {
                    "transaction/Algo/Name": {
                      "key": "Transaction/Algo/Name",
                      "value": {
                        "labelValue": "Algo1"
                      }
                    }
                  },
                  "counterpartyId": "CounterpartyId-118263",
                  "source": ""
                }
              ]
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/TransactionRequest"
                },
                "description": "The transactions to be updated or inserted."
              },
              "example": [
                {
                  "transactionId": "TransactionId-111111",
                  "type": "StockIn",
                  "instrumentIdentifiers": {
                    "instrument/default/Figi": "BBG000C6K6G9",
                    "instrument/default/Isin": "GB00BH4HKS39"
                  },
                  "transactionDate": "2018-03-05T00:00:00.0000000+00:00",
                  "settlementDate": "2018-03-08T00:00:00.0000000+00:00",
                  "units": 1000,
                  "transactionPrice": {
                    "price": 123,
                    "type": "Price"
                  },
                  "totalConsideration": {
                    "amount": 123000,
                    "currency": "GBP"
                  },
                  "transactionCurrency": "GBP",
                  "properties": {
                    "transaction/Algo/Name": {
                      "key": "Transaction/Algo/Name",
                      "value": {
                        "labelValue": "Algo1"
                      }
                    }
                  },
                  "counterpartyId": "CounterpartyId-118263",
                  "source": ""
                }
              ]
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/TransactionRequest"
                },
                "description": "The transactions to be updated or inserted."
              },
              "example": [
                {
                  "transactionId": "TransactionId-111111",
                  "type": "StockIn",
                  "instrumentIdentifiers": {
                    "instrument/default/Figi": "BBG000C6K6G9",
                    "instrument/default/Isin": "GB00BH4HKS39"
                  },
                  "transactionDate": "2018-03-05T00:00:00.0000000+00:00",
                  "settlementDate": "2018-03-08T00:00:00.0000000+00:00",
                  "units": 1000,
                  "transactionPrice": {
                    "price": 123,
                    "type": "Price"
                  },
                  "totalConsideration": {
                    "amount": 123000,
                    "currency": "GBP"
                  },
                  "transactionCurrency": "GBP",
                  "properties": {
                    "transaction/Algo/Name": {
                      "key": "Transaction/Algo/Name",
                      "value": {
                        "labelValue": "Algo1"
                      }
                    }
                  },
                  "counterpartyId": "CounterpartyId-118263",
                  "source": ""
                }
              ]
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/TransactionRequest"
                },
                "description": "The transactions to be updated or inserted."
              },
              "example": [
                {
                  "transactionId": "TransactionId-111111",
                  "type": "StockIn",
                  "instrumentIdentifiers": {
                    "instrument/default/Figi": "BBG000C6K6G9",
                    "instrument/default/Isin": "GB00BH4HKS39"
                  },
                  "transactionDate": "2018-03-05T00:00:00.0000000+00:00",
                  "settlementDate": "2018-03-08T00:00:00.0000000+00:00",
                  "units": 1000,
                  "transactionPrice": {
                    "price": 123,
                    "type": "Price"
                  },
                  "totalConsideration": {
                    "amount": 123000,
                    "currency": "GBP"
                  },
                  "transactionCurrency": "GBP",
                  "properties": {
                    "transaction/Algo/Name": {
                      "key": "Transaction/Algo/Name",
                      "value": {
                        "labelValue": "Algo1"
                      }
                    }
                  },
                  "counterpartyId": "CounterpartyId-118263",
                  "source": ""
                }
              ]
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The version of the transaction portfolio that contains the newly updated or inserted transactions",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertPortfolioTransactionsResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertPortfolioTransactionsResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertPortfolioTransactionsResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      },
      "delete": {
        "tags": [
          "Transaction Portfolios"
        ],
        "summary": "Cancel transactions",
        "description": "Cancel one or more transactions from the specified transaction portfolio.",
        "operationId": "CancelTransactions",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the transaction portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the transaction portfolio.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the transaction portfolio. Together with the scope this uniquely identifies\r\n            the transaction portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the transaction portfolio. Together with the scope this uniquely identifies\r\n            the transaction portfolio.",
              "nullable": true
            }
          },
          {
            "name": "transactionIds",
            "in": "query",
            "description": "The ids of the transactions to cancel.",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "The ids of the transactions to cancel."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The datetime that the transactions were cancelled",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      }
    },
    "/api/transactionportfolios/{scope}/{code}/transactions/{transactionId}/properties": {
      "post": {
        "tags": [
          "Transaction Portfolios"
        ],
        "summary": "Upsert transaction properties",
        "description": "Update or insert one or more transaction properties to a single transaction in a transaction portfolio.\r\nEach property will be updated if it already exists and inserted if it does not.\r\nBoth transaction and portfolio must exist at the time when properties are updated or inserted.",
        "operationId": "UpsertTransactionProperties",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the transaction portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the transaction portfolio.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the transaction portfolio. Together with the scope this uniquely identifies\r\n            the transaction portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the transaction portfolio. Together with the scope this uniquely identifies\r\n            the transaction portfolio.",
              "nullable": true
            }
          },
          {
            "name": "transactionId",
            "in": "path",
            "description": "The unique id of the transaction to update or insert properties against.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The unique id of the transaction to update or insert properties against.",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "The properties with their associated values to update or insert onto the\r\n            transaction.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/PerpetualProperty"
                },
                "description": "The properties with their associated values to update or insert onto the\r\n            transaction."
              },
              "example": {
                "transaction/MyScope/MyPropertyName": {
                  "key": "Transaction/MyScope/MyPropertyName",
                  "value": {
                    "metricValue": {
                      "value": 12345.5672,
                      "unit": "Unit"
                    }
                  }
                },
                "transaction/MyScope/MyPropertyName2": {
                  "key": "Transaction/MyScope/MyPropertyName2",
                  "value": {
                    "metricValue": {
                      "value": 925.3,
                      "unit": "Unit"
                    }
                  }
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/PerpetualProperty"
                },
                "description": "The properties with their associated values to update or insert onto the\r\n            transaction."
              },
              "example": {
                "transaction/MyScope/MyPropertyName": {
                  "key": "Transaction/MyScope/MyPropertyName",
                  "value": {
                    "metricValue": {
                      "value": 12345.5672,
                      "unit": "Unit"
                    }
                  }
                },
                "transaction/MyScope/MyPropertyName2": {
                  "key": "Transaction/MyScope/MyPropertyName2",
                  "value": {
                    "metricValue": {
                      "value": 925.3,
                      "unit": "Unit"
                    }
                  }
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/PerpetualProperty"
                },
                "description": "The properties with their associated values to update or insert onto the\r\n            transaction."
              },
              "example": {
                "transaction/MyScope/MyPropertyName": {
                  "key": "Transaction/MyScope/MyPropertyName",
                  "value": {
                    "metricValue": {
                      "value": 12345.5672,
                      "unit": "Unit"
                    }
                  }
                },
                "transaction/MyScope/MyPropertyName2": {
                  "key": "Transaction/MyScope/MyPropertyName2",
                  "value": {
                    "metricValue": {
                      "value": 925.3,
                      "unit": "Unit"
                    }
                  }
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/PerpetualProperty"
                },
                "description": "The properties with their associated values to update or insert onto the\r\n            transaction."
              },
              "example": {
                "transaction/MyScope/MyPropertyName": {
                  "key": "Transaction/MyScope/MyPropertyName",
                  "value": {
                    "metricValue": {
                      "value": 12345.5672,
                      "unit": "Unit"
                    }
                  }
                },
                "transaction/MyScope/MyPropertyName2": {
                  "key": "Transaction/MyScope/MyPropertyName2",
                  "value": {
                    "metricValue": {
                      "value": 925.3,
                      "unit": "Unit"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The version of the transaction portfolio that contains the newly updated or inserted transaction property",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertTransactionPropertiesResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertTransactionPropertiesResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertTransactionPropertiesResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      },
      "delete": {
        "tags": [
          "Transaction Portfolios"
        ],
        "summary": "Delete properties from transaction",
        "description": "Delete one or more property values from a single transaction in a transaction portfolio.",
        "operationId": "DeletePropertiesFromTransaction",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the transaction portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the transaction portfolio.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the transaction portfolio. Together with the scope this uniquely identifies\r\n            the transaction portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the transaction portfolio. Together with the scope this uniquely identifies\r\n            the transaction portfolio.",
              "nullable": true
            }
          },
          {
            "name": "transactionId",
            "in": "path",
            "description": "The unique id of the transaction to delete the property value from.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The unique id of the transaction to delete the property value from.",
              "nullable": true
            }
          },
          {
            "name": "propertyKeys",
            "in": "query",
            "description": "The property keys of the properties to delete from the transaction.\r\n            This must be from the \"Transaction\" domain and will have the format {domain}/{scope}/{code} e.g.\r\n            \"Transaction/strategy/quantsignal\".",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
              },
              "description": "The property keys of the properties to delete from the transaction.\r\n            This must be from the \"Transaction\" domain and will have the format {domain}/{scope}/{code} e.g.\r\n            \"Transaction/strategy/quantsignal\"."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The datetime that the property was deleted",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      }
    },
    "/api/transactionportfolios/{scope}/{code}/transactions/$build": {
      "post": {
        "tags": [
          "Transaction Portfolios"
        ],
        "summary": "Build transactions",
        "description": "Builds and returns all transactions that affect the holdings of a portfolio over a given interval of\r\neffective time into a set of output transactions. This includes transactions automatically generated by\r\nLUSID such as holding adjustments.",
        "operationId": "BuildTransactions",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the transaction portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the transaction portfolio.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the transaction portfolio. Together with the scope this uniquely identifies\r\n            the transaction portfolio.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The code of the transaction portfolio. Together with the scope this uniquely identifies\r\n            the transaction portfolio.",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to build the transactions. Defaults to return the latest\r\n            version of each transaction if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to build the transactions. Defaults to return the latest\r\n            version of each transaction if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the result set.\r\n            For example, to filter on the Transaction Type, use \"type eq 'Buy'\"\r\n            Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "type": "string",
              "description": "Expression to filter the result set.\r\n            For example, to filter on the Transaction Type, use \"type eq 'Buy'\"\r\n            Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
              "nullable": true
            }
          },
          {
            "name": "propertyKeys",
            "in": "query",
            "description": "A list of property keys from the \"Instrument\" or \"Transaction\" domain to decorate onto\r\n            the transactions. These take the format {domain}/{scope}/{code} e.g. \"Instrument/system/Name\" or\r\n            \"Transaction/strategy/quantsignal\".",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
              },
              "description": "A list of property keys from the \"Instrument\" or \"Transaction\" domain to decorate onto\r\n            the transactions. These take the format {domain}/{scope}/{code} e.g. \"Instrument/system/Name\" or\r\n            \"Transaction/strategy/quantsignal\".",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "requestBody": {
          "description": "The query queryParameters which control how the output transactions are built.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/TransactionQueryParameters"
              },
              "example": {
                "startDate": "2018-03-05T00:00:00.0000000+00:00",
                "endDate": "2018-03-19T00:00:00.0000000+00:00",
                "queryMode": "TradeDate",
                "showCancelledTransactions": false
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TransactionQueryParameters"
              },
              "example": {
                "startDate": "2018-03-05T00:00:00.0000000+00:00",
                "endDate": "2018-03-19T00:00:00.0000000+00:00",
                "queryMode": "TradeDate",
                "showCancelledTransactions": false
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/TransactionQueryParameters"
              },
              "example": {
                "startDate": "2018-03-05T00:00:00.0000000+00:00",
                "endDate": "2018-03-19T00:00:00.0000000+00:00",
                "queryMode": "TradeDate",
                "showCancelledTransactions": false
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/TransactionQueryParameters"
              },
              "example": {
                "startDate": "2018-03-05T00:00:00.0000000+00:00",
                "endDate": "2018-03-19T00:00:00.0000000+00:00",
                "queryMode": "TradeDate",
                "showCancelledTransactions": false
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The requested transactions from the specified transaction portfolio",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/VersionedResourceListOfOutputTransaction"
                },
                "example": {
                  "version": {
                    "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00",
                    "asAtDate": "2018-03-04T23:50:00.0000000+00:00"
                  },
                  "values": [
                    {
                      "transactionId": "TXN-00001",
                      "type": "Buy",
                      "description": "Purchase",
                      "instrumentIdentifiers": {
                        "instrument/default/RIC": "RIC.L"
                      },
                      "instrumentUid": "LUID_JLH24106",
                      "transactionDate": "2018-08-04T00:00:00.0000000+00:00",
                      "settlementDate": "2018-08-06T00:00:00.0000000+00:00",
                      "units": 1000,
                      "transactionAmount": 88800,
                      "transactionPrice": {
                        "price": 88.8,
                        "type": "Price"
                      },
                      "totalConsideration": {
                        "amount": 88800,
                        "currency": "USD"
                      },
                      "exchangeRate": 1,
                      "transactionToPortfolioRate": 0.7648,
                      "transactionCurrency": "USD",
                      "properties": {
                        "transaction/default/TradeToPortfolioRate": {
                          "key": "Transaction/default/TradeToPortfolioRate",
                          "value": {
                            "metricValue": {
                              "value": 0.765
                            }
                          }
                        },
                        "transaction/default/SourcePortfolioId": {
                          "key": "Transaction/default/SourcePortfolioId",
                          "value": {
                            "labelValue": "DEMO-PORTFOLIO-ID"
                          }
                        },
                        "transaction/default/SourcePortfolioScope": {
                          "key": "Transaction/default/SourcePortfolioScope",
                          "value": {
                            "labelValue": "DEMO-SCOPE"
                          }
                        }
                      },
                      "source": "",
                      "transactionStatus": "Cancelled",
                      "entryDateTime": "2018-08-04T12:22:06.0000000+00:00",
                      "cancelDateTime": "2018-08-04T12:25:14.0000000+00:00"
                    },
                    {
                      "transactionId": "TXN-00002",
                      "type": "Sell",
                      "description": "Sale",
                      "instrumentIdentifiers": {
                        "instrument/default/ClientInternal": "INT:00024106"
                      },
                      "instrumentUid": "LUID_OI5JX1V7",
                      "transactionDate": "2018-08-07T00:00:00.0000000+00:00",
                      "settlementDate": "2018-08-10T00:00:00.0000000+00:00",
                      "units": 10000,
                      "transactionAmount": 1470100,
                      "transactionPrice": {
                        "price": 147.01,
                        "type": "Price"
                      },
                      "totalConsideration": {
                        "amount": 1470100,
                        "currency": "USD"
                      },
                      "exchangeRate": 1,
                      "transactionToPortfolioRate": 0.772,
                      "transactionCurrency": "USD",
                      "properties": {
                        "transaction/default/TradeToPortfolioRate": {
                          "key": "Transaction/default/TradeToPortfolioRate",
                          "value": {
                            "metricValue": {
                              "value": 0.772
                            }
                          }
                        },
                        "transaction/default/SourcePortfolioId": {
                          "key": "Transaction/default/SourcePortfolioId",
                          "value": {
                            "labelValue": "DEMO-PORTFOLIO-ID"
                          }
                        },
                        "transaction/default/SourcePortfolioScope": {
                          "key": "Transaction/default/SourcePortfolioScope",
                          "value": {
                            "labelValue": "DEMO-SCOPE"
                          }
                        },
                        "transaction/default/ResultantHolding": {
                          "key": "Transaction/default/ResultantHolding",
                          "value": {
                            "metricValue": {
                              "value": 3500
                            }
                          }
                        }
                      },
                      "source": "",
                      "transactionStatus": "Active",
                      "entryDateTime": "2018-08-07T10:30:12.0000000+00:00",
                      "realisedGainLoss": [
                        {
                          "instrumentUid": "LUID_OI5JX1V7",
                          "units": 4500,
                          "purchaseTradeDate": "2018-08-02T00:00:00.0000000+00:00",
                          "purchaseSettlementDate": "2018-08-05T00:00:00.0000000+00:00",
                          "purchasePrice": 142.96,
                          "costTradeCcy": {
                            "amount": 643320,
                            "currency": "USD"
                          },
                          "costPortfolioCcy": {
                            "amount": 493619.44,
                            "currency": "GBP"
                          },
                          "realisedTradeCcy": {
                            "amount": 18225,
                            "currency": "USD"
                          },
                          "realisedTotal": {
                            "amount": 17093.3,
                            "currency": "GBP"
                          },
                          "realisedMarket": {
                            "amount": 14069.7,
                            "currency": "GBP"
                          },
                          "realisedCurrency": {
                            "amount": 3023.6,
                            "currency": "GBP"
                          }
                        },
                        {
                          "instrumentUid": "LUID_OI5JX1V7",
                          "units": 4500,
                          "purchaseTradeDate": "2018-08-03T00:00:00.0000000+00:00",
                          "purchaseSettlementDate": "2018-08-06T00:00:00.0000000+00:00",
                          "purchasePrice": 147.7,
                          "costTradeCcy": {
                            "amount": 664650,
                            "currency": "USD"
                          },
                          "costPortfolioCcy": {
                            "amount": 510517.67,
                            "currency": "GBP"
                          },
                          "realisedTradeCcy": {
                            "amount": -3105,
                            "currency": "USD"
                          },
                          "realisedTotal": {
                            "amount": 195.07,
                            "currency": "GBP"
                          },
                          "realisedMarket": {
                            "amount": -2397.06,
                            "currency": "GBP"
                          },
                          "realisedCurrency": {
                            "amount": 2592.13,
                            "currency": "GBP"
                          }
                        },
                        {
                          "instrumentUid": "LUID_OI5JX1V7",
                          "units": 1000,
                          "purchaseTradeDate": "2018-08-06T00:00:00.0000000+00:00",
                          "purchaseSettlementDate": "2018-08-08T00:00:00.0000000+00:00",
                          "purchasePrice": 146.03,
                          "costTradeCcy": {
                            "amount": 146030,
                            "currency": "USD"
                          },
                          "costPortfolioCcy": {
                            "amount": 112851.98,
                            "currency": "GBP"
                          },
                          "realisedTradeCcy": {
                            "amount": 980,
                            "currency": "USD"
                          },
                          "realisedTotal": {
                            "amount": 639.74,
                            "currency": "GBP"
                          },
                          "realisedMarket": {
                            "amount": 756.56,
                            "currency": "GBP"
                          },
                          "realisedCurrency": {
                            "amount": -116.82,
                            "currency": "GBP"
                          }
                        }
                      ]
                    }
                  ],
                  "href": "http://example.com",
                  "links": []
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VersionedResourceListOfOutputTransaction"
                },
                "example": {
                  "version": {
                    "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00",
                    "asAtDate": "2018-03-04T23:50:00.0000000+00:00"
                  },
                  "values": [
                    {
                      "transactionId": "TXN-00001",
                      "type": "Buy",
                      "description": "Purchase",
                      "instrumentIdentifiers": {
                        "instrument/default/RIC": "RIC.L"
                      },
                      "instrumentUid": "LUID_JLH24106",
                      "transactionDate": "2018-08-04T00:00:00.0000000+00:00",
                      "settlementDate": "2018-08-06T00:00:00.0000000+00:00",
                      "units": 1000,
                      "transactionAmount": 88800,
                      "transactionPrice": {
                        "price": 88.8,
                        "type": "Price"
                      },
                      "totalConsideration": {
                        "amount": 88800,
                        "currency": "USD"
                      },
                      "exchangeRate": 1,
                      "transactionToPortfolioRate": 0.7648,
                      "transactionCurrency": "USD",
                      "properties": {
                        "transaction/default/TradeToPortfolioRate": {
                          "key": "Transaction/default/TradeToPortfolioRate",
                          "value": {
                            "metricValue": {
                              "value": 0.765
                            }
                          }
                        },
                        "transaction/default/SourcePortfolioId": {
                          "key": "Transaction/default/SourcePortfolioId",
                          "value": {
                            "labelValue": "DEMO-PORTFOLIO-ID"
                          }
                        },
                        "transaction/default/SourcePortfolioScope": {
                          "key": "Transaction/default/SourcePortfolioScope",
                          "value": {
                            "labelValue": "DEMO-SCOPE"
                          }
                        }
                      },
                      "source": "",
                      "transactionStatus": "Cancelled",
                      "entryDateTime": "2018-08-04T12:22:06.0000000+00:00",
                      "cancelDateTime": "2018-08-04T12:25:14.0000000+00:00"
                    },
                    {
                      "transactionId": "TXN-00002",
                      "type": "Sell",
                      "description": "Sale",
                      "instrumentIdentifiers": {
                        "instrument/default/ClientInternal": "INT:00024106"
                      },
                      "instrumentUid": "LUID_OI5JX1V7",
                      "transactionDate": "2018-08-07T00:00:00.0000000+00:00",
                      "settlementDate": "2018-08-10T00:00:00.0000000+00:00",
                      "units": 10000,
                      "transactionAmount": 1470100,
                      "transactionPrice": {
                        "price": 147.01,
                        "type": "Price"
                      },
                      "totalConsideration": {
                        "amount": 1470100,
                        "currency": "USD"
                      },
                      "exchangeRate": 1,
                      "transactionToPortfolioRate": 0.772,
                      "transactionCurrency": "USD",
                      "properties": {
                        "transaction/default/TradeToPortfolioRate": {
                          "key": "Transaction/default/TradeToPortfolioRate",
                          "value": {
                            "metricValue": {
                              "value": 0.772
                            }
                          }
                        },
                        "transaction/default/SourcePortfolioId": {
                          "key": "Transaction/default/SourcePortfolioId",
                          "value": {
                            "labelValue": "DEMO-PORTFOLIO-ID"
                          }
                        },
                        "transaction/default/SourcePortfolioScope": {
                          "key": "Transaction/default/SourcePortfolioScope",
                          "value": {
                            "labelValue": "DEMO-SCOPE"
                          }
                        },
                        "transaction/default/ResultantHolding": {
                          "key": "Transaction/default/ResultantHolding",
                          "value": {
                            "metricValue": {
                              "value": 3500
                            }
                          }
                        }
                      },
                      "source": "",
                      "transactionStatus": "Active",
                      "entryDateTime": "2018-08-07T10:30:12.0000000+00:00",
                      "realisedGainLoss": [
                        {
                          "instrumentUid": "LUID_OI5JX1V7",
                          "units": 4500,
                          "purchaseTradeDate": "2018-08-02T00:00:00.0000000+00:00",
                          "purchaseSettlementDate": "2018-08-05T00:00:00.0000000+00:00",
                          "purchasePrice": 142.96,
                          "costTradeCcy": {
                            "amount": 643320,
                            "currency": "USD"
                          },
                          "costPortfolioCcy": {
                            "amount": 493619.44,
                            "currency": "GBP"
                          },
                          "realisedTradeCcy": {
                            "amount": 18225,
                            "currency": "USD"
                          },
                          "realisedTotal": {
                            "amount": 17093.3,
                            "currency": "GBP"
                          },
                          "realisedMarket": {
                            "amount": 14069.7,
                            "currency": "GBP"
                          },
                          "realisedCurrency": {
                            "amount": 3023.6,
                            "currency": "GBP"
                          }
                        },
                        {
                          "instrumentUid": "LUID_OI5JX1V7",
                          "units": 4500,
                          "purchaseTradeDate": "2018-08-03T00:00:00.0000000+00:00",
                          "purchaseSettlementDate": "2018-08-06T00:00:00.0000000+00:00",
                          "purchasePrice": 147.7,
                          "costTradeCcy": {
                            "amount": 664650,
                            "currency": "USD"
                          },
                          "costPortfolioCcy": {
                            "amount": 510517.67,
                            "currency": "GBP"
                          },
                          "realisedTradeCcy": {
                            "amount": -3105,
                            "currency": "USD"
                          },
                          "realisedTotal": {
                            "amount": 195.07,
                            "currency": "GBP"
                          },
                          "realisedMarket": {
                            "amount": -2397.06,
                            "currency": "GBP"
                          },
                          "realisedCurrency": {
                            "amount": 2592.13,
                            "currency": "GBP"
                          }
                        },
                        {
                          "instrumentUid": "LUID_OI5JX1V7",
                          "units": 1000,
                          "purchaseTradeDate": "2018-08-06T00:00:00.0000000+00:00",
                          "purchaseSettlementDate": "2018-08-08T00:00:00.0000000+00:00",
                          "purchasePrice": 146.03,
                          "costTradeCcy": {
                            "amount": 146030,
                            "currency": "USD"
                          },
                          "costPortfolioCcy": {
                            "amount": 112851.98,
                            "currency": "GBP"
                          },
                          "realisedTradeCcy": {
                            "amount": 980,
                            "currency": "USD"
                          },
                          "realisedTotal": {
                            "amount": 639.74,
                            "currency": "GBP"
                          },
                          "realisedMarket": {
                            "amount": 756.56,
                            "currency": "GBP"
                          },
                          "realisedCurrency": {
                            "amount": -116.82,
                            "currency": "GBP"
                          }
                        }
                      ]
                    }
                  ],
                  "href": "http://example.com",
                  "links": []
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/VersionedResourceListOfOutputTransaction"
                },
                "example": {
                  "version": {
                    "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00",
                    "asAtDate": "2018-03-04T23:50:00.0000000+00:00"
                  },
                  "values": [
                    {
                      "transactionId": "TXN-00001",
                      "type": "Buy",
                      "description": "Purchase",
                      "instrumentIdentifiers": {
                        "instrument/default/RIC": "RIC.L"
                      },
                      "instrumentUid": "LUID_JLH24106",
                      "transactionDate": "2018-08-04T00:00:00.0000000+00:00",
                      "settlementDate": "2018-08-06T00:00:00.0000000+00:00",
                      "units": 1000,
                      "transactionAmount": 88800,
                      "transactionPrice": {
                        "price": 88.8,
                        "type": "Price"
                      },
                      "totalConsideration": {
                        "amount": 88800,
                        "currency": "USD"
                      },
                      "exchangeRate": 1,
                      "transactionToPortfolioRate": 0.7648,
                      "transactionCurrency": "USD",
                      "properties": {
                        "transaction/default/TradeToPortfolioRate": {
                          "key": "Transaction/default/TradeToPortfolioRate",
                          "value": {
                            "metricValue": {
                              "value": 0.765
                            }
                          }
                        },
                        "transaction/default/SourcePortfolioId": {
                          "key": "Transaction/default/SourcePortfolioId",
                          "value": {
                            "labelValue": "DEMO-PORTFOLIO-ID"
                          }
                        },
                        "transaction/default/SourcePortfolioScope": {
                          "key": "Transaction/default/SourcePortfolioScope",
                          "value": {
                            "labelValue": "DEMO-SCOPE"
                          }
                        }
                      },
                      "source": "",
                      "transactionStatus": "Cancelled",
                      "entryDateTime": "2018-08-04T12:22:06.0000000+00:00",
                      "cancelDateTime": "2018-08-04T12:25:14.0000000+00:00"
                    },
                    {
                      "transactionId": "TXN-00002",
                      "type": "Sell",
                      "description": "Sale",
                      "instrumentIdentifiers": {
                        "instrument/default/ClientInternal": "INT:00024106"
                      },
                      "instrumentUid": "LUID_OI5JX1V7",
                      "transactionDate": "2018-08-07T00:00:00.0000000+00:00",
                      "settlementDate": "2018-08-10T00:00:00.0000000+00:00",
                      "units": 10000,
                      "transactionAmount": 1470100,
                      "transactionPrice": {
                        "price": 147.01,
                        "type": "Price"
                      },
                      "totalConsideration": {
                        "amount": 1470100,
                        "currency": "USD"
                      },
                      "exchangeRate": 1,
                      "transactionToPortfolioRate": 0.772,
                      "transactionCurrency": "USD",
                      "properties": {
                        "transaction/default/TradeToPortfolioRate": {
                          "key": "Transaction/default/TradeToPortfolioRate",
                          "value": {
                            "metricValue": {
                              "value": 0.772
                            }
                          }
                        },
                        "transaction/default/SourcePortfolioId": {
                          "key": "Transaction/default/SourcePortfolioId",
                          "value": {
                            "labelValue": "DEMO-PORTFOLIO-ID"
                          }
                        },
                        "transaction/default/SourcePortfolioScope": {
                          "key": "Transaction/default/SourcePortfolioScope",
                          "value": {
                            "labelValue": "DEMO-SCOPE"
                          }
                        },
                        "transaction/default/ResultantHolding": {
                          "key": "Transaction/default/ResultantHolding",
                          "value": {
                            "metricValue": {
                              "value": 3500
                            }
                          }
                        }
                      },
                      "source": "",
                      "transactionStatus": "Active",
                      "entryDateTime": "2018-08-07T10:30:12.0000000+00:00",
                      "realisedGainLoss": [
                        {
                          "instrumentUid": "LUID_OI5JX1V7",
                          "units": 4500,
                          "purchaseTradeDate": "2018-08-02T00:00:00.0000000+00:00",
                          "purchaseSettlementDate": "2018-08-05T00:00:00.0000000+00:00",
                          "purchasePrice": 142.96,
                          "costTradeCcy": {
                            "amount": 643320,
                            "currency": "USD"
                          },
                          "costPortfolioCcy": {
                            "amount": 493619.44,
                            "currency": "GBP"
                          },
                          "realisedTradeCcy": {
                            "amount": 18225,
                            "currency": "USD"
                          },
                          "realisedTotal": {
                            "amount": 17093.3,
                            "currency": "GBP"
                          },
                          "realisedMarket": {
                            "amount": 14069.7,
                            "currency": "GBP"
                          },
                          "realisedCurrency": {
                            "amount": 3023.6,
                            "currency": "GBP"
                          }
                        },
                        {
                          "instrumentUid": "LUID_OI5JX1V7",
                          "units": 4500,
                          "purchaseTradeDate": "2018-08-03T00:00:00.0000000+00:00",
                          "purchaseSettlementDate": "2018-08-06T00:00:00.0000000+00:00",
                          "purchasePrice": 147.7,
                          "costTradeCcy": {
                            "amount": 664650,
                            "currency": "USD"
                          },
                          "costPortfolioCcy": {
                            "amount": 510517.67,
                            "currency": "GBP"
                          },
                          "realisedTradeCcy": {
                            "amount": -3105,
                            "currency": "USD"
                          },
                          "realisedTotal": {
                            "amount": 195.07,
                            "currency": "GBP"
                          },
                          "realisedMarket": {
                            "amount": -2397.06,
                            "currency": "GBP"
                          },
                          "realisedCurrency": {
                            "amount": 2592.13,
                            "currency": "GBP"
                          }
                        },
                        {
                          "instrumentUid": "LUID_OI5JX1V7",
                          "units": 1000,
                          "purchaseTradeDate": "2018-08-06T00:00:00.0000000+00:00",
                          "purchaseSettlementDate": "2018-08-08T00:00:00.0000000+00:00",
                          "purchasePrice": 146.03,
                          "costTradeCcy": {
                            "amount": 146030,
                            "currency": "USD"
                          },
                          "costPortfolioCcy": {
                            "amount": 112851.98,
                            "currency": "GBP"
                          },
                          "realisedTradeCcy": {
                            "amount": 980,
                            "currency": "USD"
                          },
                          "realisedTotal": {
                            "amount": 639.74,
                            "currency": "GBP"
                          },
                          "realisedMarket": {
                            "amount": 756.56,
                            "currency": "GBP"
                          },
                          "realisedCurrency": {
                            "amount": -116.82,
                            "currency": "GBP"
                          }
                        }
                      ]
                    }
                  ],
                  "href": "http://example.com",
                  "links": []
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      }
    }
  },
  "components": {
    "schemas": {
      "ResourceId": {
        "required": [
          "code",
          "scope"
        ],
        "type": "object",
        "properties": {
          "scope": {
            "maxLength": 512,
            "minLength": 1,
            "type": "string"
          },
          "code": {
            "maxLength": 512,
            "minLength": 1,
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "LusidValidationProblemDetails": {
        "required": [
          "code",
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "errorDetails": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "nullable": true
          },
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "errors": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "nullable": true
          },
          "type": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "detail": {
            "type": "string",
            "nullable": true
          },
          "instance": {
            "type": "string",
            "nullable": true
          },
          "extensions": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "additionalProperties": false
            },
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "LusidProblemDetails": {
        "required": [
          "code",
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "errorDetails": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "nullable": true
          },
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "type": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "detail": {
            "type": "string",
            "nullable": true
          },
          "instance": {
            "type": "string",
            "nullable": true
          },
          "extensions": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "additionalProperties": false
            },
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "Link": {
        "required": [
          "href",
          "method",
          "relation"
        ],
        "type": "object",
        "properties": {
          "relation": {
            "type": "string"
          },
          "href": {
            "type": "string",
            "format": "uri"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "method": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "LusidInstrument": {
        "required": [
          "instrumentType"
        ],
        "type": "object",
        "properties": {
          "instrumentType": {
            "enum": [
              "QuotedSecurity",
              "InterestRateSwap",
              "FxForward",
              "Future",
              "ExoticInstrument",
              "FxOption",
              "CreditDefaultSwap",
              "InterestRateSwaption",
              "Bond",
              "EquityOption",
              "FixedLeg",
              "FloatingLeg",
              "BespokeCashflowLeg",
              "Unknown",
              "TermDeposit",
              "ContractForDifference",
              "EquitySwap",
              "CashPerpetual",
              "CashSettled",
              "CdsIndex",
              "Basket",
              "FundingLeg"
            ],
            "type": "string",
            "description": "The available values are: QuotedSecurity, InterestRateSwap, FxForward, Future, ExoticInstrument, FxOption, CreditDefaultSwap, InterestRateSwaption, Bond, EquityOption, FixedLeg, FloatingLeg, BespokeCashflowLeg, Unknown, TermDeposit, ContractForDifference, EquitySwap, CashPerpetual, CashSettled, CdsIndex, Basket, FundingLeg"
          }
        },
        "additionalProperties": false,
        "description": "Base class in hierarchy for LUSID Instruments. Valuation would normally be performed through passing LUSID a Code for a portfolio to be valued.\r\nIn that case the set of instruments have already been uploaded. Equally, one might wish to pass in a set of instruments directly and have LUSID\r\nvalue the inlined set. This the base instrument for this case.",
        "discriminator": {
          "propertyName": "instrumentType"
        }
      },
      "Version": {
        "required": [
          "asAtDate",
          "effectiveFrom"
        ],
        "type": "object",
        "properties": {
          "effectiveFrom": {
            "type": "string",
            "description": "The effective datetime at which this version became valid. Only applies when a single entity is being interacted with.",
            "format": "date-time"
          },
          "asAtDate": {
            "type": "string",
            "description": "The asAt datetime at which the data was committed to LUSID.",
            "format": "date-time"
          }
        },
        "additionalProperties": false,
        "description": "The version metadata."
      },
      "MetricValue": {
        "type": "object",
        "properties": {
          "value": {
            "type": "number",
            "description": "The numerical value of the property.",
            "format": "double"
          },
          "unit": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "LabelValueSet": {
        "type": "object",
        "properties": {
          "values": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The set of string labels in a multi-value property."
      },
      "PropertyValue": {
        "type": "object",
        "properties": {
          "labelValue": {
            "type": "string",
            "description": "The text value of a property defined as having the 'Label' type.",
            "nullable": true
          },
          "metricValue": {
            "$ref": "#/components/schemas/MetricValue"
          },
          "labelValueSet": {
            "$ref": "#/components/schemas/LabelValueSet"
          }
        },
        "additionalProperties": false,
        "description": "The value of the property."
      },
      "PerpetualProperty": {
        "required": [
          "key"
        ],
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "description": "The key of the property. This takes the format {domain}/{scope}/{code} e.g. 'Instrument/system/Name' or 'Transaction/strategy/quantsignal'."
          },
          "value": {
            "$ref": "#/components/schemas/PropertyValue"
          }
        },
        "additionalProperties": false
      },
      "DeletedEntityResponse": {
        "required": [
          "asAt"
        ],
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "description": "The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.",
            "format": "uri",
            "nullable": true
          },
          "effectiveFrom": {
            "type": "string",
            "description": "The effective datetime at which the deletion became valid. May be null in the case where multiple date times are applicable.",
            "format": "date-time",
            "nullable": true
          },
          "asAt": {
            "type": "string",
            "description": "The asAt datetime at which the deletion was committed to LUSID.",
            "format": "date-time"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Property": {
        "required": [
          "key"
        ],
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "description": "The key of the property. This takes the format {domain}/{scope}/{code} e.g. 'Instrument/system/Name' or 'Transaction/strategy/quantsignal'."
          },
          "value": {
            "$ref": "#/components/schemas/PropertyValue"
          },
          "effectiveFrom": {
            "type": "string",
            "description": "The effective datetime from which the property is valid.",
            "format": "date-time",
            "nullable": true
          },
          "effectiveUntil": {
            "type": "string",
            "description": "The effective datetime until which the property is valid. If not supplied this will be valid indefinitely, or until the next 'effectiveFrom' datetime of the property.",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ErrorDetail": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the failed item that this error relates to.",
            "nullable": true
          },
          "type": {
            "type": "string",
            "description": "The type of failure that occurred.",
            "nullable": true
          },
          "detail": {
            "type": "string",
            "description": "Description of the failure that occurred.",
            "nullable": true
          },
          "errorDetails": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "description": "Information about the particular instance of the failure (supplied information depends on the type of failure).",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "IUnitDefinitionDto": {
        "type": "object",
        "properties": {
          "schema": {
            "enum": [
              "NoUnits",
              "Basic",
              "Iso4217Currency"
            ],
            "type": "string",
            "description": "The available values are: NoUnits, Basic, Iso4217Currency"
          },
          "code": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "displayName": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "description": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "DataType": {
        "required": [
          "description",
          "displayName",
          "id",
          "typeValueRange",
          "valueType"
        ],
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "typeValueRange": {
            "enum": [
              "Open",
              "Closed"
            ],
            "type": "string",
            "description": "The available values are: Open, Closed"
          },
          "id": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "displayName": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "valueType": {
            "enum": [
              "String",
              "Int",
              "Decimal",
              "DateTime",
              "Boolean",
              "Map",
              "List",
              "PropertyArray",
              "Percentage",
              "Code",
              "Id",
              "Uri",
              "CurrencyAndAmount",
              "TradePrice",
              "Currency",
              "MetricValue",
              "ResourceId",
              "ResultValue",
              "CutLocalTime",
              "DateOrCutLabel"
            ],
            "type": "string",
            "description": "The available values are: String, Int, Decimal, DateTime, Boolean, Map, List, PropertyArray, Percentage, Code, Id, Uri, CurrencyAndAmount, TradePrice, Currency, MetricValue, ResourceId, ResultValue, CutLocalTime, DateOrCutLabel"
          },
          "acceptableValues": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "unitSchema": {
            "enum": [
              "NoUnits",
              "Basic",
              "Iso4217Currency"
            ],
            "type": "string",
            "description": "The available values are: NoUnits, Basic, Iso4217Currency"
          },
          "acceptableUnits": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IUnitDefinitionDto"
            },
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ResourceListOfDataType": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DataType"
            }
          },
          "href": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ResourceListOfIUnitDefinitionDto": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IUnitDefinitionDto"
            }
          },
          "href": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CreateDerivedTransactionPortfolioRequest": {
        "required": [
          "code",
          "displayName",
          "parentPortfolioId"
        ],
        "type": "object",
        "properties": {
          "displayName": {
            "maxLength": 512,
            "minLength": 1,
            "pattern": "(?s).*",
            "type": "string",
            "description": ""
          },
          "description": {
            "maxLength": 1024,
            "minLength": 0,
            "pattern": "(?s).*",
            "type": "string",
            "description": "",
            "nullable": true
          },
          "code": {
            "maxLength": 64,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9\\-_]+$",
            "type": "string",
            "description": ""
          },
          "parentPortfolioId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "created": {
            "type": "string",
            "description": "",
            "format": "date-time",
            "nullable": true
          },
          "corporateActionSourceId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "accountingMethod": {
            "enum": [
              "Default",
              "AverageCost",
              "FirstInFirstOut",
              "LastInFirstOut",
              "HighestCostFirst",
              "LowestCostFirst"
            ],
            "type": "string",
            "description": "The available values are: Default, AverageCost, FirstInFirstOut, LastInFirstOut, HighestCostFirst, LowestCostFirst"
          },
          "subHoldingKeys": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
            },
            "description": "",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Portfolio": {
        "required": [
          "created",
          "displayName",
          "id",
          "type"
        ],
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "description": "The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.",
            "format": "uri",
            "nullable": true
          },
          "id": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "type": {
            "enum": [
              "Transaction",
              "Reference",
              "DerivedTransaction"
            ],
            "type": "string",
            "description": "The type of the portfolio. The available values are: Transaction, Reference, DerivedTransaction"
          },
          "displayName": {
            "type": "string",
            "description": "The name of the portfolio."
          },
          "description": {
            "type": "string",
            "description": "The long form description of the portfolio.",
            "nullable": true
          },
          "created": {
            "type": "string",
            "description": "The effective datetime at which the portfolio was created. No transactions or constituents can be added to the portfolio before this date.",
            "format": "date-time"
          },
          "parentPortfolioId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "version": {
            "$ref": "#/components/schemas/Version"
          },
          "isDerived": {
            "type": "boolean",
            "description": "Whether or not this is a derived portfolio."
          },
          "baseCurrency": {
            "type": "string",
            "description": "The base currency of the portfolio. This will be an empty string for reference portfolios.",
            "nullable": true
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Property"
            },
            "description": "The requested portfolio properties. These will be from the 'Portfolio' domain.",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A list of portfolios."
      },
      "Change": {
        "required": [
          "amended",
          "corrected",
          "entityId"
        ],
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "entityId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "corrected": {
            "type": "boolean",
            "description": ""
          },
          "correctionEffectiveAt": {
            "type": "string",
            "description": "",
            "format": "date-time",
            "nullable": true
          },
          "correctionAsAt": {
            "type": "string",
            "description": "",
            "format": "date-time",
            "nullable": true
          },
          "amended": {
            "type": "boolean",
            "description": ""
          },
          "amendmentEffectiveAt": {
            "type": "string",
            "description": "",
            "format": "date-time",
            "nullable": true
          },
          "amendmentAsAt": {
            "type": "string",
            "description": "",
            "format": "date-time",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The time an entity was modified (amendment and/or historical correction)."
      },
      "ResourceListOfChange": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Change"
            }
          },
          "href": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "InstrumentIdValue": {
        "required": [
          "value"
        ],
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "The value of the identifier."
          },
          "effectiveAt": {
            "type": "string",
            "description": "The effective datetime from which the identifier will be valid. If left unspecified the default value is the beginning of time.",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "InstrumentDefinition": {
        "required": [
          "identifiers",
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the instrument."
          },
          "identifiers": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/InstrumentIdValue"
            },
            "description": "A set of identifiers that can be used to identify the instrument. At least one of these must be configured to be a unique identifier."
          },
          "properties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Property"
            },
            "description": "Set of unique instrument properties and associated values to store with the instrument. Each property must be from the 'Instrument' domain.",
            "nullable": true
          },
          "lookThroughPortfolioId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "definition": {
            "$ref": "#/components/schemas/LusidInstrument"
          }
        },
        "additionalProperties": false
      },
      "Instrument": {
        "required": [
          "identifiers",
          "lusidInstrumentId",
          "name",
          "state",
          "version"
        ],
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "description": "The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.",
            "format": "uri",
            "nullable": true
          },
          "lusidInstrumentId": {
            "type": "string",
            "description": "The unique LUSID Instrument Identifier (LUID) of the instrument."
          },
          "version": {
            "$ref": "#/components/schemas/Version"
          },
          "name": {
            "type": "string",
            "description": "The name of the instrument."
          },
          "identifiers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "The set of identifiers that can be used to identify the instrument."
          },
          "properties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Property"
            },
            "description": "The requested instrument properties. These will be from the 'Instrument' domain.",
            "nullable": true
          },
          "lookthroughPortfolio": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "instrumentDefinition": {
            "$ref": "#/components/schemas/LusidInstrument"
          },
          "state": {
            "enum": [
              "Active",
              "Inactive"
            ],
            "type": "string",
            "description": "The state of of the instrument at the asAt datetime of this version of the instrument definition. The available values are: Active, Inactive"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A list of instruments."
      },
      "UpsertInstrumentsResponse": {
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "description": "The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.",
            "format": "uri",
            "nullable": true
          },
          "values": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Instrument"
            },
            "description": "The instruments which have been successfully updated or inserted.",
            "nullable": true
          },
          "failed": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ErrorDetail"
            },
            "description": "The instruments that could not be updated or inserted along with a reason for their failure.",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PagedResourceListOfInstrument": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "nextPage": {
            "type": "string",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "nullable": true
          },
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Instrument"
            }
          },
          "href": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpdateInstrumentIdentifierRequest": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "The allowable instrument identifier to update, insert or remove e.g. 'Figi'."
          },
          "value": {
            "type": "string",
            "description": "The new value of the allowable instrument identifier. If unspecified the identifier will be removed from the instrument.",
            "nullable": true
          },
          "effectiveAt": {
            "type": "string",
            "description": "The effective datetime from which the identifier should be updated, inserted or removed. Defaults to the current LUSID system datetime if not specified.",
            "format": "dateorcutlabel",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DeleteInstrumentResponse": {
        "required": [
          "asAt"
        ],
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "description": "The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.",
            "format": "uri",
            "nullable": true
          },
          "asAt": {
            "type": "string",
            "description": "The asAt datetime at which the instrument was deleted.",
            "format": "date-time"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DateRange": {
        "required": [
          "fromDate"
        ],
        "type": "object",
        "properties": {
          "fromDate": {
            "type": "string",
            "format": "date-time"
          },
          "untilDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PropertyInterval": {
        "required": [
          "asAtRange",
          "effectiveRange",
          "status",
          "value"
        ],
        "type": "object",
        "properties": {
          "value": {
            "$ref": "#/components/schemas/PropertyValue"
          },
          "effectiveRange": {
            "$ref": "#/components/schemas/DateRange"
          },
          "asAtRange": {
            "$ref": "#/components/schemas/DateRange"
          },
          "status": {
            "type": "string",
            "description": "Indicates whether the value is part of the prevailing effective date timeline for the requested asAt date, or whether it has been superseded by correctional activity"
          }
        },
        "additionalProperties": false
      },
      "ResourceListOfPropertyInterval": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PropertyInterval"
            }
          },
          "href": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GetInstrumentsResponse": {
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "description": "The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.",
            "format": "uri",
            "nullable": true
          },
          "values": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Instrument"
            },
            "description": "The instrument definitions, keyed by the identifier used to retrieve them. Only instruments that were found will be contained in this collection.",
            "nullable": true
          },
          "failed": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ErrorDetail"
            },
            "description": "The identifiers which did not resolve to an instrument along with the nature of the failure.",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpsertInstrumentPropertyRequest": {
        "required": [
          "identifier",
          "identifierType"
        ],
        "type": "object",
        "properties": {
          "identifierType": {
            "type": "string",
            "description": "The instrument identifier type."
          },
          "identifier": {
            "type": "string",
            "description": "The unique instrument identifier of the instrument to update or insert properties on."
          },
          "properties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Property"
            },
            "description": "Set of unique instrument properties and associated values to store with the instrument. Each property must be from the 'Instrument' domain.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpsertInstrumentPropertiesResponse": {
        "required": [
          "asAtDate"
        ],
        "type": "object",
        "properties": {
          "asAtDate": {
            "type": "string",
            "description": "The asAt datetime at which the properties were updated or inserted on the specified instruments.",
            "format": "date-time"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "InstrumentIdTypeDescriptor": {
        "required": [
          "identifierType",
          "isUniqueIdentifierType",
          "propertyKey"
        ],
        "type": "object",
        "properties": {
          "identifierType": {
            "type": "string",
            "description": "The name of the identifier type."
          },
          "propertyKey": {
            "type": "string",
            "description": "The property key that corresponds to the identifier type."
          },
          "isUniqueIdentifierType": {
            "type": "boolean",
            "description": "Whether or not the identifier type is enforced to be unique."
          }
        },
        "additionalProperties": false,
        "description": "The description of an allowable instrument identifier."
      },
      "ResourceListOfInstrumentIdTypeDescriptor": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InstrumentIdTypeDescriptor"
            }
          },
          "href": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpsertLegalEntityRequest": {
        "required": [
          "displayName",
          "identifiers"
        ],
        "type": "object",
        "properties": {
          "identifiers": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Property"
            },
            "description": "The identifiers the legal entity will be upserted with.The provided keys should be idTypeScope, idTypeCode, code"
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Property"
            },
            "description": "A set of properties associated to the Legal Entity.",
            "nullable": true
          },
          "displayName": {
            "maxLength": 512,
            "minLength": 1,
            "pattern": "(?s).*",
            "type": "string",
            "description": "The display name of the Legal Entity"
          },
          "description": {
            "maxLength": 512,
            "minLength": 0,
            "pattern": "(?s).*",
            "type": "string",
            "description": "The description of the Legal Entity",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Request to create or update an legal entity"
      },
      "LegalEntity": {
        "type": "object",
        "properties": {
          "displayName": {
            "type": "string",
            "description": "The display name of the Legal Entity",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "The description of the Legal Entity",
            "nullable": true
          },
          "href": {
            "type": "string",
            "description": "The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.",
            "format": "uri",
            "nullable": true
          },
          "lusidLegalEntityId": {
            "type": "string",
            "description": "The unique LUSID Legal Entity Identifier (LULEID) of the Legal Entity. This field is not populated until further notice.",
            "nullable": true
          },
          "identifiers": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Property"
            },
            "description": "Unique client-defined identifiers of the Legal Entity.",
            "nullable": true
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Property"
            },
            "description": "A set of properties associated to the Legal Entity.",
            "nullable": true
          },
          "version": {
            "$ref": "#/components/schemas/Version"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Representation of Legal Entity on LUSID API"
      },
      "PagedResourceListOfLegalEntity": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "nextPage": {
            "type": "string",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "nullable": true
          },
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LegalEntity"
            }
          },
          "href": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Relation": {
        "required": [
          "relatedEntityId",
          "relationDefinitionId",
          "traversalDescription",
          "traversalDirection"
        ],
        "type": "object",
        "properties": {
          "version": {
            "$ref": "#/components/schemas/Version"
          },
          "relationDefinitionId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "relatedEntityId": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "traversalDirection": {
            "type": "string"
          },
          "traversalDescription": {
            "type": "string"
          },
          "effectiveFrom": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false,
        "description": "Representation of a Relation between a requested entity with the stated entity as RelationedEntityId"
      },
      "ResourceListOfRelation": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Relation"
            }
          },
          "href": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ActionId": {
        "required": [
          "activity",
          "entity",
          "scope"
        ],
        "type": "object",
        "properties": {
          "scope": {
            "maxLength": 100,
            "minLength": 3,
            "type": "string"
          },
          "activity": {
            "maxLength": 25,
            "minLength": 3,
            "type": "string"
          },
          "entity": {
            "maxLength": 25,
            "minLength": 3,
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "IdSelectorDefinition": {
        "required": [
          "actions",
          "identifier"
        ],
        "type": "object",
        "properties": {
          "identifier": {
            "minLength": 1,
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "actions": {
            "minLength": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ActionId"
            }
          },
          "name": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "description": {
            "maxLength": 1024,
            "minLength": 0,
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AccessControlledAction": {
        "required": [
          "action",
          "description"
        ],
        "type": "object",
        "properties": {
          "description": {
            "type": "string"
          },
          "action": {
            "$ref": "#/components/schemas/ActionId"
          },
          "limitedSet": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IdSelectorDefinition"
            },
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "IdentifierPartSchema": {
        "required": [
          "description",
          "displayName",
          "index",
          "name",
          "required"
        ],
        "type": "object",
        "properties": {
          "index": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "displayName": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "required": {
            "type": "boolean"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AccessControlledResource": {
        "required": [
          "actions",
          "description"
        ],
        "type": "object",
        "properties": {
          "application": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string"
          },
          "actions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccessControlledAction"
            }
          },
          "identifierParts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IdentifierPartSchema"
            },
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ResourceListOfAccessControlledResource": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccessControlledResource"
            }
          },
          "href": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Stream": {
        "type": "object",
        "properties": {
          "canRead": {
            "type": "boolean",
            "readOnly": true
          },
          "canSeek": {
            "type": "boolean",
            "readOnly": true
          },
          "canTimeout": {
            "type": "boolean",
            "readOnly": true
          },
          "canWrite": {
            "type": "boolean",
            "readOnly": true
          },
          "length": {
            "type": "integer",
            "format": "int64",
            "readOnly": true
          },
          "position": {
            "type": "integer",
            "format": "int64"
          },
          "readTimeout": {
            "type": "integer",
            "format": "int32"
          },
          "writeTimeout": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "FileResponse": {
        "type": "object",
        "properties": {
          "fileStream": {
            "$ref": "#/components/schemas/Stream"
          },
          "contentType": {
            "type": "string",
            "nullable": true
          },
          "downloadedFilename": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Allows a file (represented as a stream) to be returned from an Api call"
      },
      "VersionSummaryDto": {
        "type": "object",
        "properties": {
          "apiVersion": {
            "type": "string",
            "nullable": true
          },
          "buildVersion": {
            "type": "string",
            "nullable": true
          },
          "excelVersion": {
            "type": "string",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CreatePortfolioGroupRequest": {
        "required": [
          "code",
          "displayName"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "The code that the portfolio group will be created with. Together with the scope this uniquely identifies the portfolio group."
          },
          "created": {
            "type": "string",
            "description": "The effective datetime at which the portfolio group was created. Defaults to the current LUSID system datetime if not specified.",
            "format": "date-time",
            "nullable": true
          },
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResourceId"
            },
            "description": "The resource identifiers of the portfolios to be contained within the portfolio group.",
            "nullable": true
          },
          "subGroups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResourceId"
            },
            "description": "The resource identifiers of the portfolio groups to be contained within the portfolio group as sub groups.",
            "nullable": true
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Property"
            },
            "description": "A set of unique group properties to add to the portfolio group. Each property must be from the 'PortfolioGroup' domain and should be identified by its key which has the format {domain}/{scope}/{code}, e.g. 'PortfolioGroup/Manager/Id'. These properties must be pre-defined.",
            "nullable": true
          },
          "displayName": {
            "type": "string",
            "description": "The name of the portfolio group."
          },
          "description": {
            "type": "string",
            "description": "A long form description of the portfolio group.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PortfolioGroup": {
        "required": [
          "displayName",
          "id"
        ],
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "description": "The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.",
            "format": "uri",
            "nullable": true
          },
          "id": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "displayName": {
            "type": "string",
            "description": "The name of the portfolio group."
          },
          "description": {
            "type": "string",
            "description": "The long form description of the portfolio group.",
            "nullable": true
          },
          "created": {
            "type": "string",
            "description": "The effective datetime at which the portfolio group was created. No portfolios or sub groups can be added to the group before this date.",
            "format": "date-time"
          },
          "portfolios": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResourceId"
            },
            "description": "The collection of resource identifiers for the portfolios contained in the portfolio group.",
            "nullable": true
          },
          "subGroups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResourceId"
            },
            "description": "The collection of resource identifiers for the portfolio groups contained in the portfolio group as sub groups.",
            "nullable": true
          },
          "version": {
            "$ref": "#/components/schemas/Version"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ResourceListOfPortfolioGroup": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PortfolioGroup"
            }
          },
          "href": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpdatePortfolioGroupRequest": {
        "required": [
          "displayName"
        ],
        "type": "object",
        "properties": {
          "displayName": {
            "type": "string",
            "description": "The name of the portfolio group."
          },
          "description": {
            "type": "string",
            "description": "A long form description of the portfolio group.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique id of the user.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The unique id of the user that issued the command."
      },
      "ProcessedCommand": {
        "required": [
          "description",
          "processedTime",
          "userId"
        ],
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "The description of the command issued."
          },
          "path": {
            "type": "string",
            "description": "The unique identifier for the command including the request id.",
            "nullable": true
          },
          "userId": {
            "$ref": "#/components/schemas/User"
          },
          "processedTime": {
            "type": "string",
            "description": "The asAt datetime that the events published by the processing of this command were committed to LUSID.",
            "format": "date-time"
          }
        },
        "additionalProperties": false,
        "description": "The list of commands."
      },
      "ResourceListOfProcessedCommand": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProcessedCommand"
            }
          },
          "href": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CompletePortfolio": {
        "required": [
          "id",
          "version"
        ],
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "href": {
            "type": "string",
            "description": "The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.",
            "format": "uri",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "The long form description of the portfolio.",
            "nullable": true
          },
          "displayName": {
            "type": "string",
            "description": "The name of the portfolio.",
            "nullable": true
          },
          "created": {
            "type": "string",
            "description": "The effective datetime at which the portfolio was created. No transactions or constituents can be added to the portfolio before this date.",
            "format": "date-time"
          },
          "parentPortfolioId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "isDerived": {
            "type": "boolean",
            "description": "Whether or not this is a derived portfolio.",
            "readOnly": true
          },
          "type": {
            "enum": [
              "Transaction",
              "Reference",
              "DerivedTransaction"
            ],
            "type": "string",
            "description": "The type of the portfolio. The available values are: Transaction, Reference, DerivedTransaction"
          },
          "version": {
            "$ref": "#/components/schemas/Version"
          },
          "properties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Property"
            },
            "description": "The requested portfolio properties. These will be from the 'Portfolio' domain.",
            "nullable": true
          },
          "baseCurrency": {
            "type": "string",
            "description": "If the portfolio is a transaction portfolio or derived transaction portfolio, this is the base currency of the portfolio.",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ExpandedGroup": {
        "required": [
          "displayName",
          "id"
        ],
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "description": "The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.",
            "format": "uri",
            "nullable": true
          },
          "id": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "displayName": {
            "type": "string",
            "description": "The name of the portfolio group."
          },
          "description": {
            "type": "string",
            "description": "The long form description of the portfolio group.",
            "nullable": true
          },
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CompletePortfolio"
            },
            "description": "The collection of resource identifiers for the portfolios contained in the portfolio group.",
            "nullable": true
          },
          "subGroups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExpandedGroup"
            },
            "description": "The collection of resource identifiers for the portfolio groups contained in the portfolio group as sub groups.",
            "nullable": true
          },
          "version": {
            "$ref": "#/components/schemas/Version"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CurrencyAndAmount": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "number",
            "format": "double"
          },
          "currency": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "An amount of a specific currency, specifying a value and an associated unit"
      },
      "TransactionPrice": {
        "type": "object",
        "properties": {
          "price": {
            "type": "number",
            "format": "double"
          },
          "type": {
            "enum": [
              "Price",
              "Yield",
              "Spread"
            ],
            "type": "string",
            "description": "The available values are: Price, Yield, Spread"
          }
        },
        "additionalProperties": false
      },
      "Transaction": {
        "required": [
          "instrumentUid",
          "settlementDate",
          "totalConsideration",
          "transactionDate",
          "transactionId",
          "type",
          "units"
        ],
        "type": "object",
        "properties": {
          "transactionId": {
            "type": "string",
            "description": "The unique identifier for the transaction."
          },
          "type": {
            "type": "string",
            "description": "The type of the transaction e.g. 'Buy', 'Sell'. The transaction type should have been pre-configured via the System Configuration API endpoint."
          },
          "instrumentIdentifiers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "The set of instrument identifiers that can be used to resolve the transaction to a unique instrument.",
            "nullable": true
          },
          "instrumentUid": {
            "type": "string",
            "description": "The unqiue Lusid Instrument Id (LUID) of the instrument that the transaction is in."
          },
          "transactionDate": {
            "type": "string",
            "description": "The date of the transaction.",
            "format": "date-time"
          },
          "settlementDate": {
            "type": "string",
            "description": "The settlement date of the transaction.",
            "format": "date-time"
          },
          "units": {
            "type": "number",
            "description": "The number of units transacted in the associated instrument.",
            "format": "double"
          },
          "transactionPrice": {
            "$ref": "#/components/schemas/TransactionPrice"
          },
          "totalConsideration": {
            "$ref": "#/components/schemas/CurrencyAndAmount"
          },
          "exchangeRate": {
            "type": "number",
            "description": "The exchange rate between the transaction and settlement currency (settlement currency being represented by the TotalConsideration.Currency). For example if the transaction currency is in USD and the settlement currency is in GBP this this the USD/GBP rate.",
            "format": "double",
            "nullable": true
          },
          "transactionCurrency": {
            "type": "string",
            "description": "The transaction currency.",
            "nullable": true
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/PerpetualProperty"
            },
            "description": "Set of unique transaction properties and associated values to stored with the transaction. Each property will be from the 'Transaction' domain.",
            "nullable": true
          },
          "counterpartyId": {
            "type": "string",
            "description": "The identifier for the counterparty of the transaction.",
            "nullable": true
          },
          "source": {
            "type": "string",
            "description": "The source of the transaction. This is used to look up the appropriate transaction group set in the transaction type configuration.",
            "nullable": true
          },
          "entryDateTime": {
            "type": "string",
            "description": "The asAt datetime that the transaction was added to LUSID.",
            "format": "date-time"
          }
        },
        "additionalProperties": false,
        "description": "A list of transactions."
      },
      "PortfolioHolding": {
        "required": [
          "cost",
          "costPortfolioCcy",
          "holdingType",
          "instrumentUid",
          "settledUnits",
          "units"
        ],
        "type": "object",
        "properties": {
          "instrumentUid": {
            "type": "string",
            "description": "The unqiue Lusid Instrument Id (LUID) of the instrument that the holding is in."
          },
          "subHoldingKeys": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/PerpetualProperty"
            },
            "description": "The sub-holding properties which identify the holding. Each property will be from the 'Transaction' domain. These are configured when a transaction portfolio is created.",
            "nullable": true
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Property"
            },
            "description": "The properties which have been requested to be decorated onto the holding. These will be from the 'Instrument' or 'Holding' domain.",
            "nullable": true
          },
          "holdingType": {
            "type": "string",
            "description": "The type of the holding e.g. Position, Balance, CashCommitment, Receivable, ForwardFX etc."
          },
          "units": {
            "type": "number",
            "description": "The total number of units of the holding.",
            "format": "double"
          },
          "settledUnits": {
            "type": "number",
            "description": "The total number of settled units of the holding.",
            "format": "double"
          },
          "cost": {
            "$ref": "#/components/schemas/CurrencyAndAmount"
          },
          "costPortfolioCcy": {
            "$ref": "#/components/schemas/CurrencyAndAmount"
          },
          "transaction": {
            "$ref": "#/components/schemas/Transaction"
          },
          "currency": {
            "type": "string",
            "description": "The holding currency.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A list of holdings."
      },
      "VersionedResourceListOfPortfolioHolding": {
        "required": [
          "values",
          "version"
        ],
        "type": "object",
        "properties": {
          "version": {
            "$ref": "#/components/schemas/Version"
          },
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PortfolioHolding"
            }
          },
          "href": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PortfolioGroupProperties": {
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "description": "The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.",
            "format": "uri",
            "nullable": true
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Property"
            },
            "description": "The portfolio group properties. These will be from the 'PortfolioGroup' domain.",
            "nullable": true
          },
          "version": {
            "$ref": "#/components/schemas/Version"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "VersionedResourceListOfTransaction": {
        "required": [
          "values",
          "version"
        ],
        "type": "object",
        "properties": {
          "version": {
            "$ref": "#/components/schemas/Version"
          },
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Transaction"
            }
          },
          "href": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TransactionQueryParameters": {
        "required": [
          "endDate",
          "startDate"
        ],
        "type": "object",
        "properties": {
          "startDate": {
            "type": "string",
            "description": "The lower bound effective datetime or cut label (inclusive) from which to build the transactions.",
            "format": "dateorcutlabel"
          },
          "endDate": {
            "type": "string",
            "description": "The upper bound effective datetime or cut label (inclusive) from which to retrieve transactions.",
            "format": "dateorcutlabel"
          },
          "queryMode": {
            "enum": [
              "TradeDate",
              "SettleDate"
            ],
            "type": "string",
            "description": "The date to compare against the upper and lower bounds for the effective datetime or cut label. Defaults to 'TradeDate' if not specified. The available values are: TradeDate, SettleDate"
          },
          "showCancelledTransactions": {
            "type": "boolean",
            "description": "Option to specify whether or not to include cancelled transactions in the output. Defaults to False if not specified."
          }
        },
        "additionalProperties": false
      },
      "RealisedGainLoss": {
        "required": [
          "costPortfolioCcy",
          "costTradeCcy",
          "instrumentUid",
          "realisedTotal",
          "realisedTradeCcy",
          "units"
        ],
        "type": "object",
        "properties": {
          "instrumentUid": {
            "type": "string",
            "description": "The unqiue Lusid Instrument Id (LUID) of the instrument that this gain or loss is associated with."
          },
          "units": {
            "type": "number",
            "description": "The number of units of the associated instrument against which the gain or loss has been realised.",
            "format": "double"
          },
          "purchaseTradeDate": {
            "type": "string",
            "description": "The effective datetime that the units associated with this gain or loss where originally purchased.",
            "format": "date-time",
            "nullable": true,
            "readOnly": true
          },
          "purchaseSettlementDate": {
            "type": "string",
            "description": "The effective datetime that the units associated with this gain or loss where originally settled.",
            "format": "date-time",
            "nullable": true,
            "readOnly": true
          },
          "purchasePrice": {
            "type": "number",
            "description": "The purchase price of each unit associated with this gain or loss.",
            "format": "double",
            "nullable": true
          },
          "costTradeCcy": {
            "$ref": "#/components/schemas/CurrencyAndAmount"
          },
          "costPortfolioCcy": {
            "$ref": "#/components/schemas/CurrencyAndAmount"
          },
          "realisedTradeCcy": {
            "$ref": "#/components/schemas/CurrencyAndAmount"
          },
          "realisedTotal": {
            "$ref": "#/components/schemas/CurrencyAndAmount"
          },
          "realisedMarket": {
            "$ref": "#/components/schemas/CurrencyAndAmount"
          },
          "realisedCurrency": {
            "$ref": "#/components/schemas/CurrencyAndAmount"
          }
        },
        "additionalProperties": false
      },
      "OutputTransaction": {
        "required": [
          "instrumentUid",
          "settlementDate",
          "transactionDate",
          "transactionId",
          "type",
          "units"
        ],
        "type": "object",
        "properties": {
          "transactionId": {
            "type": "string",
            "description": "The unique identifier for the transaction."
          },
          "type": {
            "type": "string",
            "description": "The type of the transaction e.g. 'Buy', 'Sell'. The transaction type should have been pre-configured via the System Configuration API endpoint."
          },
          "description": {
            "type": "string",
            "description": "The description of the transaction. This only exists on transactions generated by LUSID e.g. a holdings adjustment transaction.",
            "nullable": true
          },
          "instrumentIdentifiers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "The set of instrument identifiers that can be used to resolve the transaction to a unique instrument.",
            "nullable": true
          },
          "instrumentUid": {
            "type": "string",
            "description": "The unqiue Lusid Instrument Id (LUID) of the instrument that the transaction is in."
          },
          "transactionDate": {
            "type": "string",
            "description": "The date of the transaction.",
            "format": "date-time"
          },
          "settlementDate": {
            "type": "string",
            "description": "The settlement date of the transaction.",
            "format": "date-time"
          },
          "units": {
            "type": "number",
            "description": "The number of units transacted in the associated instrument.",
            "format": "double"
          },
          "transactionAmount": {
            "type": "number",
            "description": "The total value of the transaction in the transaction currency.",
            "format": "double"
          },
          "transactionPrice": {
            "$ref": "#/components/schemas/TransactionPrice"
          },
          "totalConsideration": {
            "$ref": "#/components/schemas/CurrencyAndAmount"
          },
          "exchangeRate": {
            "type": "number",
            "description": "The exchange rate between the transaction and settlement currency (settlement currency being represented by the TotalConsideration.Currency). For example if the transaction currency is in USD and the settlement currency is in GBP this this the USD/GBP rate.",
            "format": "double"
          },
          "transactionToPortfolioRate": {
            "type": "number",
            "description": "The exchange rate between the transaction and portfolio currency. For example if the transaction currency is in USD and the portfolio currency is in GBP this this the USD/GBP rate.",
            "format": "double",
            "nullable": true
          },
          "transactionCurrency": {
            "type": "string",
            "description": "The transaction currency.",
            "nullable": true
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/PerpetualProperty"
            },
            "description": "Set of unique transaction properties and associated values to stored with the transaction. Each property will be from the 'Transaction' domain.",
            "nullable": true
          },
          "counterpartyId": {
            "type": "string",
            "description": "The identifier for the counterparty of the transaction.",
            "nullable": true
          },
          "source": {
            "type": "string",
            "description": "The source of the transaction. This is used to look up the appropriate transaction group set in the transaction type configuration.",
            "nullable": true
          },
          "transactionStatus": {
            "enum": [
              "Active",
              "Amended",
              "Cancelled"
            ],
            "type": "string",
            "description": "The status of the transaction. The available values are: Active, Amended, Cancelled"
          },
          "entryDateTime": {
            "type": "string",
            "description": "The asAt datetime that the transaction was added to LUSID.",
            "format": "date-time"
          },
          "cancelDateTime": {
            "type": "string",
            "description": "If the transaction has been cancelled, the asAt datetime that the transaction was cancelled.",
            "format": "date-time",
            "nullable": true
          },
          "realisedGainLoss": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RealisedGainLoss"
            },
            "description": "The collection of realised gains or losses resulting from relevant transactions e.g. a sale transaction. The cost used in calculating the realised gain or loss is determined by the accounting method defined when the transaction portfolio is created.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A list of output transactions."
      },
      "VersionedResourceListOfOutputTransaction": {
        "required": [
          "values",
          "version"
        ],
        "type": "object",
        "properties": {
          "version": {
            "$ref": "#/components/schemas/Version"
          },
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OutputTransaction"
            }
          },
          "href": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ResourceListOfPortfolio": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Portfolio"
            }
          },
          "href": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpdatePortfolioRequest": {
        "required": [
          "displayName"
        ],
        "type": "object",
        "properties": {
          "displayName": {
            "type": "string",
            "description": "The name of the transaction portfolio."
          },
          "description": {
            "type": "string",
            "description": "A long form description of the transaction portfolio.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PortfolioProperties": {
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "description": "The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.",
            "format": "uri",
            "nullable": true
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Property"
            },
            "description": "The portfolio properties. These will be from the 'Portfolio' domain.",
            "nullable": true
          },
          "version": {
            "$ref": "#/components/schemas/Version"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PortfolioReconciliationRequest": {
        "required": [
          "effectiveAt",
          "portfolioId"
        ],
        "type": "object",
        "properties": {
          "portfolioId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "effectiveAt": {
            "type": "string",
            "description": "The effective date of the portfolio",
            "format": "dateorcutlabel"
          },
          "asAt": {
            "type": "string",
            "description": "Optional. The AsAt date of the portfolio",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PortfoliosReconciliationRequest": {
        "required": [
          "instrumentPropertyKeys",
          "left",
          "right"
        ],
        "type": "object",
        "properties": {
          "left": {
            "$ref": "#/components/schemas/PortfolioReconciliationRequest"
          },
          "right": {
            "$ref": "#/components/schemas/PortfolioReconciliationRequest"
          },
          "instrumentPropertyKeys": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
            },
            "description": "Instrument properties to be included with any identified breaks. These properties will be in the effective and AsAt dates of the left portfolio"
          }
        },
        "additionalProperties": false
      },
      "ReconciliationBreak": {
        "required": [
          "differenceCost",
          "differenceUnits",
          "instrumentProperties",
          "instrumentUid",
          "leftCost",
          "leftUnits",
          "rightCost",
          "rightUnits",
          "subHoldingKeys"
        ],
        "type": "object",
        "properties": {
          "instrumentUid": {
            "type": "string",
            "description": "Unique instrument identifier"
          },
          "subHoldingKeys": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/PerpetualProperty"
            },
            "description": "Any other properties that comprise the Sub-Holding Key"
          },
          "leftUnits": {
            "type": "number",
            "description": "Units from the left hand side",
            "format": "double"
          },
          "rightUnits": {
            "type": "number",
            "description": "Units from the right hand side",
            "format": "double"
          },
          "differenceUnits": {
            "type": "number",
            "description": "Difference in units",
            "format": "double"
          },
          "leftCost": {
            "$ref": "#/components/schemas/CurrencyAndAmount"
          },
          "rightCost": {
            "$ref": "#/components/schemas/CurrencyAndAmount"
          },
          "differenceCost": {
            "$ref": "#/components/schemas/CurrencyAndAmount"
          },
          "instrumentProperties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Property"
            },
            "description": "Additional features relating to the instrument"
          }
        },
        "additionalProperties": false,
        "description": "A reconciliation break"
      },
      "ResourceListOfReconciliationBreak": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReconciliationBreak"
            }
          },
          "href": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CreatePropertyDefinitionRequest": {
        "required": [
          "code",
          "dataTypeId",
          "displayName",
          "domain",
          "scope"
        ],
        "type": "object",
        "properties": {
          "domain": {
            "enum": [
              "NotDefined",
              "Transaction",
              "Portfolio",
              "Holding",
              "ReferenceHolding",
              "TransactionConfiguration",
              "Instrument",
              "CutLabelDefinition",
              "Analytic",
              "PortfolioGroup",
              "Person",
              "AccessMetadata",
              "Order",
              "UnitResult",
              "MarketData",
              "ConfigurationRecipe",
              "Allocation",
              "Calendar",
              "LegalEntity"
            ],
            "type": "string",
            "description": "The domain that the property exists in. The available values are: NotDefined, Transaction, Portfolio, Holding, ReferenceHolding, TransactionConfiguration, Instrument, CutLabelDefinition, Analytic, PortfolioGroup, Person, AccessMetadata, Order, UnitResult, MarketData, ConfigurationRecipe, Allocation, Calendar, LegalEntity"
          },
          "scope": {
            "type": "string",
            "description": "The scope that the property exists in."
          },
          "code": {
            "type": "string",
            "description": "The code of the property. Together with the domain and scope this uniquely identifies the property."
          },
          "valueRequired": {
            "type": "boolean",
            "description": "Whether or not a value is always required for this property."
          },
          "displayName": {
            "type": "string",
            "description": "The display name of the property."
          },
          "dataTypeId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "lifeTime": {
            "enum": [
              "Perpetual",
              "TimeVariant"
            ],
            "type": "string",
            "description": "Describes how the property's values can change over time. The available values are: Perpetual, TimeVariant"
          },
          "constraintStyle": {
            "type": "string",
            "description": "Describes the uniqueness and cardinality of the property for entity objects under the property domain specified in Key. Defaults to \"Property\" if not specified. Valid values for this field are: Property, Collection or Identifier.",
            "nullable": true
          },
          "propertyDescription": {
            "maxLength": 512,
            "type": "string",
            "description": "Describes the property",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PropertyDefinition": {
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "description": "The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.",
            "format": "uri",
            "nullable": true
          },
          "key": {
            "type": "string",
            "description": "The property key which uniquely identifies the property. The format for the property key is {domain}/{scope}/{code}, e.g. 'Portfolio/Manager/Id'.",
            "nullable": true
          },
          "valueType": {
            "enum": [
              "String",
              "Int",
              "Decimal",
              "DateTime",
              "Boolean",
              "Map",
              "List",
              "PropertyArray",
              "Percentage",
              "Code",
              "Id",
              "Uri",
              "CurrencyAndAmount",
              "TradePrice",
              "Currency",
              "MetricValue",
              "ResourceId",
              "ResultValue",
              "CutLocalTime",
              "DateOrCutLabel"
            ],
            "type": "string",
            "description": "The type of values that can be associated with this property. This is defined by the property's data type. The available values are: String, Int, Decimal, DateTime, Boolean, Map, List, PropertyArray, Percentage, Code, Id, Uri, CurrencyAndAmount, TradePrice, Currency, MetricValue, ResourceId, ResultValue, CutLocalTime, DateOrCutLabel"
          },
          "displayName": {
            "type": "string",
            "description": "The display name of the property.",
            "nullable": true
          },
          "dataTypeId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "type": {
            "enum": [
              "Label",
              "Metric",
              "Information"
            ],
            "type": "string",
            "description": "The type of the property. The available values are: Label, Metric, Information"
          },
          "unitSchema": {
            "enum": [
              "NoUnits",
              "Basic",
              "Iso4217Currency"
            ],
            "type": "string",
            "description": "The units that can be associated with the property's values. This is defined by the property's data type. The available values are: NoUnits, Basic, Iso4217Currency"
          },
          "domain": {
            "enum": [
              "NotDefined",
              "Transaction",
              "Portfolio",
              "Holding",
              "ReferenceHolding",
              "TransactionConfiguration",
              "Instrument",
              "CutLabelDefinition",
              "Analytic",
              "PortfolioGroup",
              "Person",
              "AccessMetadata",
              "Order",
              "UnitResult",
              "MarketData",
              "ConfigurationRecipe",
              "Allocation",
              "Calendar",
              "LegalEntity"
            ],
            "type": "string",
            "description": "The domain that the property exists in. The available values are: NotDefined, Transaction, Portfolio, Holding, ReferenceHolding, TransactionConfiguration, Instrument, CutLabelDefinition, Analytic, PortfolioGroup, Person, AccessMetadata, Order, UnitResult, MarketData, ConfigurationRecipe, Allocation, Calendar, LegalEntity"
          },
          "scope": {
            "type": "string",
            "description": "The scope that the property exists in.",
            "nullable": true,
            "readOnly": true
          },
          "code": {
            "type": "string",
            "description": "The code of the property. Together with the domain and scope this uniquely identifies the property.",
            "nullable": true,
            "readOnly": true
          },
          "valueRequired": {
            "type": "boolean",
            "description": "Whether or not a value is always required for this property."
          },
          "lifeTime": {
            "enum": [
              "Perpetual",
              "TimeVariant"
            ],
            "type": "string",
            "description": "Describes how the property's values can change over time. The available values are: Perpetual, TimeVariant"
          },
          "constraintStyle": {
            "type": "string",
            "description": "Describes the uniqueness and cardinality of the property for entity objects under the property domain specified in Key.",
            "nullable": true
          },
          "propertyDefinitionType": {
            "enum": [
              "ValueProperty",
              "DerivedDefinition"
            ],
            "type": "string",
            "description": "The definition type (DerivedDefinition or Definition). The available values are: ValueProperty, DerivedDefinition"
          },
          "propertyDescription": {
            "type": "string",
            "description": "A brief description of what a property of this property definition contains.",
            "nullable": true
          },
          "derivationFormula": {
            "type": "string",
            "description": "The rule that defines how data is composed for a derived property.",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A list of property definitions."
      },
      "ResourceListOfPropertyDefinition": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PropertyDefinition"
            }
          },
          "href": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpdatePropertyDefinitionRequest": {
        "required": [
          "displayName"
        ],
        "type": "object",
        "properties": {
          "displayName": {
            "type": "string",
            "description": "The display name of the property."
          },
          "propertyDescription": {
            "maxLength": 512,
            "type": "string",
            "description": "Describes the property",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "QuoteSeriesId": {
        "required": [
          "field",
          "instrumentId",
          "instrumentIdType",
          "provider",
          "quoteType"
        ],
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "description": "The platform or vendor that provided the quote, e.g. 'DataScope', 'LUSID' etc."
          },
          "priceSource": {
            "type": "string",
            "description": "The source or originator of the quote, e.g. a bank or financial institution.",
            "nullable": true
          },
          "instrumentId": {
            "type": "string",
            "description": "The value of the instrument identifier that uniquely identifies the instrument that the quote is for, e.g. 'BBG00JX0P539'."
          },
          "instrumentIdType": {
            "enum": [
              "LusidInstrumentId",
              "Figi",
              "RIC",
              "QuotePermId",
              "Isin",
              "CurrencyPair",
              "ClientInternal"
            ],
            "type": "string",
            "description": "The type of instrument identifier used to uniquely identify the instrument that the quote is for, e.g. 'Figi'. The available values are: LusidInstrumentId, Figi, RIC, QuotePermId, Isin, CurrencyPair, ClientInternal",
            "nullable": true
          },
          "quoteType": {
            "enum": [
              "Price",
              "Spread",
              "Rate",
              "LogNormalVol",
              "NormalVol",
              "ParSpread",
              "IsdaSpread",
              "Upfront"
            ],
            "type": "string",
            "description": "The type of the quote. This allows for quotes other than prices e.g. rates or spreads to be used. The available values are: Price, Spread, Rate, LogNormalVol, NormalVol, ParSpread, IsdaSpread, Upfront",
            "nullable": true
          },
          "field": {
            "type": "string",
            "description": "The field of the quote e.g. bid, mid, ask etc. This should be consistent across a time series of quotes. The allowed values are dependant on the specified Provider."
          }
        },
        "additionalProperties": false,
        "description": "The time invariant unique identifier of the quote. Combined with the effective datetime of the quote this\r\nuniquely identifies the quote. This can be thought of as a unique identifier for a time series of quotes."
      },
      "QuoteId": {
        "required": [
          "effectiveAt",
          "quoteSeriesId"
        ],
        "type": "object",
        "properties": {
          "quoteSeriesId": {
            "$ref": "#/components/schemas/QuoteSeriesId"
          },
          "effectiveAt": {
            "type": "string",
            "description": "The effective datetime or cut label at which the quote is valid from.",
            "format": "dateorcutlabel"
          }
        },
        "additionalProperties": false,
        "description": "The unique identifier of the quote."
      },
      "UpsertQuoteRequest": {
        "required": [
          "quoteId"
        ],
        "type": "object",
        "properties": {
          "quoteId": {
            "$ref": "#/components/schemas/QuoteId"
          },
          "metricValue": {
            "$ref": "#/components/schemas/MetricValue"
          },
          "lineage": {
            "type": "string",
            "description": "Description of the quote's lineage e.g. 'FundAccountant_GreenQuality'.",
            "nullable": true
          },
          "scaleFactor": {
            "type": "number",
            "description": "An optional scale factor for non-standard scaling of quotes against the instrument. If not supplied, the default ScaleFactor is 1.",
            "format": "double",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The details of the quote including its unique identifier, value and lineage."
      },
      "Quote": {
        "required": [
          "asAt",
          "quoteId",
          "uploadedBy"
        ],
        "type": "object",
        "properties": {
          "quoteId": {
            "$ref": "#/components/schemas/QuoteId"
          },
          "metricValue": {
            "$ref": "#/components/schemas/MetricValue"
          },
          "lineage": {
            "type": "string",
            "description": "Description of the quote's lineage e.g. 'FundAccountant_GreenQuality'.",
            "nullable": true
          },
          "cutLabel": {
            "type": "string",
            "description": "The cut label that this quote was updated or inserted with.",
            "nullable": true
          },
          "uploadedBy": {
            "type": "string",
            "description": "The unique id of the user that updated or inserted the quote."
          },
          "asAt": {
            "type": "string",
            "description": "The asAt datetime at which the quote was committed to LUSID.",
            "format": "date-time"
          },
          "scaleFactor": {
            "type": "number",
            "description": "An optional scale factor for non-standard scaling of quotes against the instrument. If not supplied, the default ScaleFactor is 1.",
            "format": "double",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The quote id, value and lineage of the quotes all keyed by a unique correlation id."
      },
      "UpsertQuotesResponse": {
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "description": "The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.",
            "format": "uri",
            "nullable": true
          },
          "values": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Quote"
            },
            "description": "The quotes which have been successfully updated or inserted.",
            "nullable": true
          },
          "failed": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ErrorDetail"
            },
            "description": "The quotes that could not be updated or inserted along with a reason for their failure.",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ResourceListOfQuote": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Quote"
            }
          },
          "href": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AnnulQuotesResponse": {
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "description": "The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.",
            "format": "uri",
            "nullable": true
          },
          "values": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "format": "date-time"
            },
            "description": "The quotes which have been successfully deleted along with the asAt datetime at which the deletion was committed to LUSID.",
            "nullable": true
          },
          "failed": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ErrorDetail"
            },
            "description": "The quotes that could not be deleted along with a reason for their failure.",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GetQuotesResponse": {
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "description": "The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.",
            "format": "uri",
            "nullable": true
          },
          "values": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Quote"
            },
            "description": "The quotes which have been successfully retrieved.",
            "nullable": true
          },
          "notFound": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ErrorDetail"
            },
            "description": "The quotes that could not be found along with a reason why.",
            "nullable": true
          },
          "failed": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ErrorDetail"
            },
            "description": "The quotes that could not be retrieved due to an error along with a reason for their failure.",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CreateReferencePortfolioRequest": {
        "required": [
          "code",
          "displayName"
        ],
        "type": "object",
        "properties": {
          "displayName": {
            "type": "string",
            "description": ""
          },
          "description": {
            "type": "string",
            "description": "",
            "nullable": true
          },
          "code": {
            "type": "string",
            "description": ""
          },
          "created": {
            "type": "string",
            "description": "",
            "format": "date-time",
            "nullable": true
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Property"
            },
            "description": "Portfolio properties to add to the portfolio",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ReferencePortfolioConstituentRequest": {
        "required": [
          "instrumentIdentifiers",
          "weight"
        ],
        "type": "object",
        "properties": {
          "instrumentIdentifiers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Unique instrument identifiers"
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/PerpetualProperty"
            },
            "nullable": true
          },
          "weight": {
            "type": "number",
            "description": "",
            "format": "double"
          },
          "currency": {
            "type": "string",
            "description": "",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpsertReferencePortfolioConstituentsRequest": {
        "required": [
          "constituents",
          "effectiveFrom",
          "weightType"
        ],
        "type": "object",
        "properties": {
          "effectiveFrom": {
            "type": "string",
            "description": "The first date from which the weights will apply",
            "format": "dateorcutlabel"
          },
          "weightType": {
            "enum": [
              "Static",
              "Floating",
              "Periodical"
            ],
            "type": "string",
            "description": "The available values are: Static, Floating, Periodical"
          },
          "periodType": {
            "enum": [
              "Daily",
              "Weekly",
              "Monthly",
              "Quarterly",
              "Annually"
            ],
            "type": "string",
            "description": "The available values are: Daily, Weekly, Monthly, Quarterly, Annually",
            "nullable": true
          },
          "periodCount": {
            "type": "integer",
            "description": "",
            "format": "int32",
            "nullable": true
          },
          "constituents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReferencePortfolioConstituentRequest"
            },
            "description": "Set of constituents (instrument/weight pairings)"
          }
        },
        "additionalProperties": false
      },
      "UpsertReferencePortfolioConstituentsResponse": {
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "version": {
            "$ref": "#/components/schemas/Version"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ReferencePortfolioConstituent": {
        "required": [
          "currency",
          "instrumentUid",
          "weight"
        ],
        "type": "object",
        "properties": {
          "instrumentIdentifiers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Unique instrument identifiers",
            "nullable": true
          },
          "instrumentUid": {
            "type": "string",
            "description": "LUSID's internal unique instrument identifier, resolved from the instrument identifiers"
          },
          "currency": {
            "type": "string",
            "description": ""
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/PerpetualProperty"
            },
            "description": "Properties associated with the constituent",
            "nullable": true
          },
          "weight": {
            "type": "number",
            "description": "",
            "format": "double"
          },
          "floatingWeight": {
            "type": "number",
            "description": "",
            "format": "double",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GetReferencePortfolioConstituentsResponse": {
        "required": [
          "constituents",
          "effectiveFrom",
          "weightType"
        ],
        "type": "object",
        "properties": {
          "effectiveFrom": {
            "type": "string",
            "description": "",
            "format": "date-time"
          },
          "weightType": {
            "enum": [
              "Static",
              "Floating",
              "Periodical"
            ],
            "type": "string",
            "description": "The available values are: Static, Floating, Periodical"
          },
          "periodType": {
            "enum": [
              "Daily",
              "Weekly",
              "Monthly",
              "Quarterly",
              "Annually"
            ],
            "type": "string",
            "description": "The available values are: Daily, Weekly, Monthly, Quarterly, Annually",
            "nullable": true
          },
          "periodCount": {
            "type": "integer",
            "description": "",
            "format": "int32",
            "nullable": true
          },
          "constituents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReferencePortfolioConstituent"
            },
            "description": "Set of constituents (instrument/weight pairings)"
          },
          "href": {
            "type": "string",
            "description": "The Uri that returns the same result as the original request,\r\nbut may include resolved as at time(s).",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ConstituentsAdjustmentHeader": {
        "type": "object",
        "properties": {
          "effectiveAt": {
            "type": "string",
            "description": "There can be at most one holdings adjustment for a portfolio at a\r\nspecific effective time so this uniquely identifies the adjustment.",
            "format": "date-time"
          },
          "version": {
            "$ref": "#/components/schemas/Version"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ResourceListOfConstituentsAdjustmentHeader": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ConstituentsAdjustmentHeader"
            }
          },
          "href": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CreateRelationDefinitionRequest": {
        "required": [
          "code",
          "displayName",
          "inwardDescription",
          "outwardDescription",
          "scope",
          "sourceEntityDomain",
          "targetEntityDomain"
        ],
        "type": "object",
        "properties": {
          "scope": {
            "type": "string",
            "description": "The scope that the relation exists in."
          },
          "code": {
            "type": "string",
            "description": "The code of the relation. Together with the scope this uniquely defines the relation."
          },
          "sourceEntityDomain": {
            "type": "string",
            "description": "The entity domain of the source entity object must be, allowed values are \"Portfolio\" and \"Person\""
          },
          "targetEntityDomain": {
            "type": "string",
            "description": "The entity domain of the target entity object must be, allowed values are \"Portfolio\" and \"Person\""
          },
          "displayName": {
            "type": "string",
            "description": "The display name of the relation."
          },
          "outwardDescription": {
            "type": "string",
            "description": "The description to relate source entity object and target entity object."
          },
          "inwardDescription": {
            "type": "string",
            "description": "The description to relate target entity object and source entity object."
          },
          "lifeTime": {
            "type": "string",
            "description": "Describes how the relations can change over time, allowed values are \"Perpetual\" and \"TimeVariant\"",
            "nullable": true
          },
          "constraintStyle": {
            "type": "string",
            "description": "Describes the uniqueness and cardinality for relations with a specific source entity object and relations under this definition. Allowed values are \"Property\" and \"Collection\", defaults to \"Collection\" if not specified.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "RelationDefinition": {
        "type": "object",
        "properties": {
          "version": {
            "$ref": "#/components/schemas/Version"
          },
          "relationDefinitionId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "sourceEntityDomain": {
            "type": "string",
            "description": "The entity domain of the source entity object.",
            "nullable": true
          },
          "targetEntityDomain": {
            "type": "string",
            "description": "The entity domain of the target entity object.",
            "nullable": true
          },
          "displayName": {
            "type": "string",
            "description": "The display name of the relation.",
            "nullable": true
          },
          "outwardDescription": {
            "type": "string",
            "description": "The description to relate source entity object and target entity object",
            "nullable": true
          },
          "inwardDescription": {
            "type": "string",
            "description": "The description to relate target entity object and source entity object",
            "nullable": true
          },
          "lifeTime": {
            "type": "string",
            "description": "Describes how the relations can change over time, allowed values are \"Perpetual\" and \"TimeVariant\"",
            "nullable": true
          },
          "constraintStyle": {
            "type": "string",
            "description": "Describes the uniqueness and cardinality for relations with a specific source entity object and relations under this definition. Allowed values are \"Property\" and \"Collection\", defaults to \"Collection\" if not specified.",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CreateRelationRequest": {
        "required": [
          "sourceEntityId",
          "targetEntityId"
        ],
        "type": "object",
        "properties": {
          "sourceEntityId": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "The identifier of the source entity."
          },
          "targetEntityId": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "The identifier of the target entity."
          }
        },
        "additionalProperties": false
      },
      "CompleteRelation": {
        "required": [
          "inwardDescription",
          "outwardDescription",
          "relationDefinitionId",
          "sourceEntityId",
          "targetEntityId"
        ],
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "version": {
            "$ref": "#/components/schemas/Version"
          },
          "relationDefinitionId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "sourceEntityId": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "targetEntityId": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "outwardDescription": {
            "type": "string"
          },
          "inwardDescription": {
            "type": "string"
          },
          "effectiveFrom": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false,
        "description": "Representation of a relation containing details of source and target entities, and both outward and inward descriptions."
      },
      "DeleteRelationRequest": {
        "required": [
          "sourceEntityId",
          "targetEntityId"
        ],
        "type": "object",
        "properties": {
          "sourceEntityId": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "The identifier of the source entity of the relation to be deleted."
          },
          "targetEntityId": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "The identifier of the target entity of the relation to be deleted."
          }
        },
        "additionalProperties": false
      },
      "ScopeDefinition": {
        "required": [
          "scope"
        ],
        "type": "object",
        "properties": {
          "scope": {
            "type": "string",
            "description": "The unique identifier for the scope."
          }
        },
        "additionalProperties": false,
        "description": "A list of scopes."
      },
      "ResourceListOfScopeDefinition": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ScopeDefinition"
            }
          },
          "href": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PortfolioGroupSearchResult": {
        "required": [
          "displayName",
          "id"
        ],
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "description": "The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.",
            "format": "uri",
            "nullable": true
          },
          "id": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "displayName": {
            "type": "string",
            "description": "The name of the portfolio group."
          },
          "description": {
            "type": "string",
            "description": "The long form description of the portfolio group.",
            "nullable": true
          },
          "created": {
            "type": "string",
            "description": "The effective datetime at which the portfolio group was created. No portfolios or sub groups can be added to the group before this date.",
            "format": "date-time"
          },
          "portfolios": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResourceId"
            },
            "description": "The collection of resource identifiers for the portfolios contained in the portfolio group.",
            "nullable": true
          },
          "subGroups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResourceId"
            },
            "description": "The collection of resource identifiers for the portfolio groups contained in the portfolio group as sub groups.",
            "nullable": true
          },
          "version": {
            "$ref": "#/components/schemas/Version"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PagedResourceListOfPortfolioGroupSearchResult": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "nextPage": {
            "type": "string",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "nullable": true
          },
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PortfolioGroupSearchResult"
            }
          },
          "href": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PortfolioSearchResult": {
        "required": [
          "created",
          "displayName",
          "id",
          "type"
        ],
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "type": {
            "enum": [
              "Transaction",
              "Reference",
              "DerivedTransaction"
            ],
            "type": "string",
            "description": "The type of the portfolio. The available values are: Transaction, Reference, DerivedTransaction"
          },
          "href": {
            "type": "string",
            "description": "The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.",
            "format": "uri",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "The long form description of the portfolio.",
            "nullable": true
          },
          "displayName": {
            "type": "string",
            "description": "The name of the portfolio."
          },
          "isDerived": {
            "type": "boolean",
            "description": "Whether or not this is a derived portfolio.",
            "readOnly": true
          },
          "created": {
            "type": "string",
            "description": "The effective datetime at which the portfolio was created. No transactions or constituents can be added to the portfolio before this date.",
            "format": "date-time"
          },
          "parentPortfolioId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "baseCurrency": {
            "type": "string",
            "description": "The base currency of the portfolio. This will be an empty string for reference portfolios.",
            "nullable": true
          },
          "properties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Property"
            },
            "description": "The requested portfolio properties. These will be from the 'Portfolio' domain.",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A list of portfolios."
      },
      "PagedResourceListOfPortfolioSearchResult": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "nextPage": {
            "type": "string",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "nullable": true
          },
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PortfolioSearchResult"
            }
          },
          "href": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ResourceListOfPortfolioSearchResult": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PortfolioSearchResult"
            }
          },
          "href": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PropertyDefinitionSearchResult": {
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "description": "The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.",
            "format": "uri",
            "nullable": true
          },
          "key": {
            "type": "string",
            "description": "The property key which uniquely identifies the property. The format for the property key is {domain}/{scope}/{code}, e.g. 'Portfolio/Manager/Id'.",
            "nullable": true
          },
          "valueType": {
            "enum": [
              "String",
              "Int",
              "Decimal",
              "DateTime",
              "Boolean",
              "Map",
              "List",
              "PropertyArray",
              "Percentage",
              "Code",
              "Id",
              "Uri",
              "CurrencyAndAmount",
              "TradePrice",
              "Currency",
              "MetricValue",
              "ResourceId",
              "ResultValue",
              "CutLocalTime",
              "DateOrCutLabel"
            ],
            "type": "string",
            "description": "The type of values that can be associated with this property. This is defined by the property's data type. The available values are: String, Int, Decimal, DateTime, Boolean, Map, List, PropertyArray, Percentage, Code, Id, Uri, CurrencyAndAmount, TradePrice, Currency, MetricValue, ResourceId, ResultValue, CutLocalTime, DateOrCutLabel"
          },
          "displayName": {
            "type": "string",
            "description": "The display name of the property.",
            "nullable": true
          },
          "dataTypeId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "type": {
            "enum": [
              "Label",
              "Metric",
              "Information"
            ],
            "type": "string",
            "description": "The type of the property. The available values are: Label, Metric, Information"
          },
          "unitSchema": {
            "enum": [
              "NoUnits",
              "Basic",
              "Iso4217Currency"
            ],
            "type": "string",
            "description": "The units that can be associated with the property's values. This is defined by the property's data type. The available values are: NoUnits, Basic, Iso4217Currency"
          },
          "domain": {
            "enum": [
              "NotDefined",
              "Transaction",
              "Portfolio",
              "Holding",
              "ReferenceHolding",
              "TransactionConfiguration",
              "Instrument",
              "CutLabelDefinition",
              "Analytic",
              "PortfolioGroup",
              "Person",
              "AccessMetadata",
              "Order",
              "UnitResult",
              "MarketData",
              "ConfigurationRecipe",
              "Allocation",
              "Calendar",
              "LegalEntity"
            ],
            "type": "string",
            "description": "The domain that the property exists in. The available values are: NotDefined, Transaction, Portfolio, Holding, ReferenceHolding, TransactionConfiguration, Instrument, CutLabelDefinition, Analytic, PortfolioGroup, Person, AccessMetadata, Order, UnitResult, MarketData, ConfigurationRecipe, Allocation, Calendar, LegalEntity"
          },
          "scope": {
            "type": "string",
            "description": "The scope that the property exists in.",
            "nullable": true,
            "readOnly": true
          },
          "code": {
            "type": "string",
            "description": "The code of the property. Together with the domain and scope this uniquely identifies the property.",
            "nullable": true,
            "readOnly": true
          },
          "valueRequired": {
            "type": "boolean",
            "description": "Whether or not a value is always required for this property."
          },
          "lifeTime": {
            "enum": [
              "Perpetual",
              "TimeVariant"
            ],
            "type": "string",
            "description": "Describes how the property's values can change over time. The available values are: Perpetual, TimeVariant"
          },
          "constraintStyle": {
            "type": "string",
            "description": "Describes the uniqueness and cardinality of the property for entity objects under the property domain specified in Key.",
            "nullable": true
          },
          "propertyDefinitionType": {
            "enum": [
              "ValueProperty",
              "DerivedDefinition"
            ],
            "type": "string",
            "description": "The definition type (DerivedDefinition or Definition). The available values are: ValueProperty, DerivedDefinition"
          },
          "propertyDescription": {
            "type": "string",
            "description": "A brief description of what a property of this property definition contains.",
            "nullable": true
          },
          "derivationFormula": {
            "type": "string",
            "description": "The rule that defines how data is composed for a derived property.",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A property definition search result"
      },
      "PagedResourceListOfPropertyDefinitionSearchResult": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "nextPage": {
            "type": "string",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "nullable": true
          },
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PropertyDefinitionSearchResult"
            }
          },
          "href": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CutLocalTime": {
        "type": "object",
        "properties": {
          "hours": {
            "type": "integer",
            "format": "int32"
          },
          "minutes": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "CreateCutLabelDefinitionRequest": {
        "required": [
          "code",
          "cutLocalTime",
          "displayName",
          "timeZone"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "displayName": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "cutLocalTime": {
            "$ref": "#/components/schemas/CutLocalTime"
          },
          "timeZone": {
            "type": "string"
          }
        },
        "additionalProperties": false,
        "description": "This request specifies a new Cut Label Definition"
      },
      "CutLabelDefinition": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "",
            "nullable": true
          },
          "displayName": {
            "type": "string",
            "description": "",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "",
            "nullable": true
          },
          "cutLocalTime": {
            "$ref": "#/components/schemas/CutLocalTime"
          },
          "timeZone": {
            "type": "string",
            "description": "",
            "nullable": true
          },
          "href": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PagedResourceListOfCutLabelDefinition": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "nextPage": {
            "type": "string",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "nullable": true
          },
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CutLabelDefinition"
            }
          },
          "href": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpdateCutLabelDefinitionRequest": {
        "required": [
          "cutLocalTime",
          "displayName",
          "timeZone"
        ],
        "type": "object",
        "properties": {
          "displayName": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "cutLocalTime": {
            "$ref": "#/components/schemas/CutLocalTime"
          },
          "timeZone": {
            "type": "string"
          }
        },
        "additionalProperties": false,
        "description": "This request specifies a new Cut Label Definition"
      },
      "TransactionConfigurationTypeAlias": {
        "required": [
          "description",
          "transactionClass",
          "transactionGroup",
          "transactionRoles",
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "The transaction type"
          },
          "description": {
            "type": "string",
            "description": "Brief description of the transaction"
          },
          "transactionClass": {
            "type": "string",
            "description": "Relates types of a similar class. E.g. Buy/Sell, StockIn/StockOut"
          },
          "transactionGroup": {
            "type": "string",
            "description": "Group is a set of codes related to a source, or sync"
          },
          "transactionRoles": {
            "enum": [
              "None",
              "LongLonger",
              "LongShorter",
              "ShortShorter",
              "Shorter",
              "ShortLonger",
              "Longer",
              "AllRoles"
            ],
            "type": "string",
            "description": ". The available values are: None, LongLonger, LongShorter, ShortShorter, Shorter, ShortLonger, Longer, AllRoles"
          }
        },
        "additionalProperties": false
      },
      "TransactionPropertyMappingRequest": {
        "required": [
          "propertyKey"
        ],
        "type": "object",
        "properties": {
          "propertyKey": {
            "type": "string",
            "description": "The Side"
          },
          "mapFrom": {
            "type": "string",
            "description": "The Side",
            "nullable": true
          },
          "setTo": {
            "type": "object",
            "additionalProperties": false,
            "description": "The Side",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TransactionConfigurationMovementDataRequest": {
        "required": [
          "direction",
          "movementTypes",
          "side"
        ],
        "type": "object",
        "properties": {
          "movementTypes": {
            "enum": [
              "Settlement",
              "Traded",
              "StockMovement",
              "FutureCash",
              "Commitment",
              "Receivable",
              "CashSettlement",
              "CashForward",
              "CashCommitment",
              "CashReceivable",
              "Accrual",
              "CashAccrual",
              "ForwardFx",
              "CashFxForward",
              "UnsettledCashTypes",
              "Carry",
              "CarryAsPnl"
            ],
            "type": "string",
            "description": ". The available values are: Settlement, Traded, StockMovement, FutureCash, Commitment, Receivable, CashSettlement, CashForward, CashCommitment, CashReceivable, Accrual, CashAccrual, ForwardFx, CashFxForward, UnsettledCashTypes, Carry, CarryAsPnl"
          },
          "side": {
            "type": "string",
            "description": "The movement side"
          },
          "direction": {
            "type": "integer",
            "description": "The movement direction",
            "format": "int32"
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/PerpetualProperty"
            },
            "nullable": true
          },
          "mappings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TransactionPropertyMappingRequest"
            },
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "The movement name (optional)",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TransactionConfigurationDataRequest": {
        "required": [
          "aliases",
          "movements"
        ],
        "type": "object",
        "properties": {
          "aliases": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TransactionConfigurationTypeAlias"
            },
            "description": "List of transaction codes that map to this specific transaction model"
          },
          "movements": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TransactionConfigurationMovementDataRequest"
            },
            "description": "Movement data for the transaction code"
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/PerpetualProperty"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TransactionPropertyMapping": {
        "required": [
          "propertyKey"
        ],
        "type": "object",
        "properties": {
          "propertyKey": {
            "type": "string",
            "description": "The Side"
          },
          "mapFrom": {
            "type": "string",
            "description": "The Side",
            "nullable": true
          },
          "setTo": {
            "type": "object",
            "additionalProperties": false,
            "description": "The Side",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TransactionConfigurationMovementData": {
        "required": [
          "direction",
          "movementTypes",
          "side"
        ],
        "type": "object",
        "properties": {
          "movementTypes": {
            "enum": [
              "Settlement",
              "Traded",
              "StockMovement",
              "FutureCash",
              "Commitment",
              "Receivable",
              "CashSettlement",
              "CashForward",
              "CashCommitment",
              "CashReceivable",
              "Accrual",
              "CashAccrual",
              "ForwardFx",
              "CashFxForward",
              "UnsettledCashTypes",
              "Carry",
              "CarryAsPnl"
            ],
            "type": "string",
            "description": ". The available values are: Settlement, Traded, StockMovement, FutureCash, Commitment, Receivable, CashSettlement, CashForward, CashCommitment, CashReceivable, Accrual, CashAccrual, ForwardFx, CashFxForward, UnsettledCashTypes, Carry, CarryAsPnl"
          },
          "side": {
            "type": "string",
            "description": "The movement side"
          },
          "direction": {
            "type": "integer",
            "description": "The movement direction",
            "format": "int32"
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/PerpetualProperty"
            },
            "nullable": true
          },
          "mappings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TransactionPropertyMapping"
            },
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "The movement name (optional)",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TransactionConfigurationData": {
        "required": [
          "aliases",
          "movements"
        ],
        "type": "object",
        "properties": {
          "aliases": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TransactionConfigurationTypeAlias"
            },
            "description": "List of transaction codes that map to this specific transaction model"
          },
          "movements": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TransactionConfigurationMovementData"
            },
            "description": "Movement data for the transaction code"
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/PerpetualProperty"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SideConfigurationData": {
        "required": [
          "amount",
          "currency",
          "rate",
          "security",
          "side",
          "units"
        ],
        "type": "object",
        "properties": {
          "side": {
            "type": "string",
            "description": "The side's label."
          },
          "security": {
            "type": "string",
            "description": "The security, or instrument."
          },
          "currency": {
            "type": "string",
            "description": "The currency."
          },
          "rate": {
            "type": "string",
            "description": "The rate."
          },
          "units": {
            "type": "string",
            "description": "The units."
          },
          "amount": {
            "type": "string",
            "description": "The amount."
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Configuration needed to define a side. Sides are referenced by Label. Beyond that, other properties\r\ncan be used to reference either transaction fields, or transaction properties."
      },
      "TransactionSetConfigurationData": {
        "required": [
          "transactionConfigs"
        ],
        "type": "object",
        "properties": {
          "transactionConfigs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TransactionConfigurationData"
            },
            "description": "Collection of transaction type models"
          },
          "sideDefinitions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SideConfigurationData"
            },
            "description": "Collection of side definitions",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A collection of the data required to configure transaction types.."
      },
      "CreateTransactionPortfolioRequest": {
        "required": [
          "baseCurrency",
          "code",
          "displayName"
        ],
        "type": "object",
        "properties": {
          "displayName": {
            "type": "string",
            "description": "The name of the transaction portfolio."
          },
          "description": {
            "type": "string",
            "description": "A long form description of the transaction portfolio.",
            "nullable": true
          },
          "code": {
            "type": "string",
            "description": "The code that the transaction portfolio will be created with. Together with the scope this uniquely identifies the transaction portfolio."
          },
          "created": {
            "type": "string",
            "description": "The effective datetime at which the transaction portfolio will be created. No transactions can be added to the transaction portfolio before this date. Defaults to the current LUSID system datetime if not specified.",
            "format": "date-time",
            "nullable": true
          },
          "baseCurrency": {
            "type": "string",
            "description": "The base currency of the transaction portfolio."
          },
          "corporateActionSourceId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "accountingMethod": {
            "enum": [
              "Default",
              "AverageCost",
              "FirstInFirstOut",
              "LastInFirstOut",
              "HighestCostFirst",
              "LowestCostFirst"
            ],
            "type": "string",
            "description": "Determines the accounting treatment given to the transaction portfolio's tax lots. The available values are: Default, AverageCost, FirstInFirstOut, LastInFirstOut, HighestCostFirst, LowestCostFirst"
          },
          "subHoldingKeys": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
            },
            "description": "A set of unique transaction properties to group the transaction portfolio's holdings by. Each property must be from the 'Transaction' domain and should be identified by its key which has the format {domain}/{scope}/{code}, e.g. 'Transaction/strategies/quantsignal'.",
            "nullable": true
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Property"
            },
            "description": "A set of unique portfolio properties to add to the transaction portfolio. Each property must be from the 'Portfolio' domain and should be identified by its key which has the format {domain}/{scope}/{code}, e.g. 'Portfolio/Manager/Id'. These properties must be pre-defined.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpsertPortfolioTransactionsResponse": {
        "required": [
          "version"
        ],
        "type": "object",
        "properties": {
          "version": {
            "$ref": "#/components/schemas/Version"
          },
          "href": {
            "type": "string",
            "description": "The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PortfolioCashFlow": {
        "required": [
          "balance",
          "balanceReportingCurrency",
          "cashflow",
          "cashflowReportingCurrency",
          "costBasisReportingCurrency",
          "fxRate",
          "groupById",
          "movementName",
          "sequenceNumber",
          "translationGainLoss",
          "type"
        ],
        "type": "object",
        "properties": {
          "groupById": {
            "type": "integer",
            "description": "The groupBy subHoldings and currency.",
            "format": "int32"
          },
          "sequenceNumber": {
            "type": "integer",
            "description": "Sequence number determining the order of the cash flow records.",
            "format": "int32"
          },
          "effectiveDate": {
            "type": "string",
            "description": "Indicates the date when the cash-flow settles.",
            "format": "date-time"
          },
          "subHoldingKeys": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/PerpetualProperty"
            },
            "description": "The sub-holding properties which identify the holding. Each property will be from the 'Transaction' domain. These are configured when a transaction portfolio is created.",
            "nullable": true
          },
          "type": {
            "type": "string",
            "description": "Indicates the record type (Closed, Open, Activity)."
          },
          "movementName": {
            "type": "string",
            "description": "Indicates the specific movement of the transaction that generated this cash flow."
          },
          "cashflow": {
            "$ref": "#/components/schemas/CurrencyAndAmount"
          },
          "balance": {
            "$ref": "#/components/schemas/CurrencyAndAmount"
          },
          "fxRate": {
            "type": "number",
            "description": "Exchange rate between the currency of this cash flow and the reporting currency.",
            "format": "double"
          },
          "cashflowReportingCurrency": {
            "$ref": "#/components/schemas/CurrencyAndAmount"
          },
          "balanceReportingCurrency": {
            "$ref": "#/components/schemas/CurrencyAndAmount"
          },
          "translationGainLoss": {
            "$ref": "#/components/schemas/CurrencyAndAmount"
          },
          "costBasisReportingCurrency": {
            "$ref": "#/components/schemas/CurrencyAndAmount"
          },
          "transaction": {
            "$ref": "#/components/schemas/Transaction"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The details for the cashflow for a given portfolio."
      },
      "ResourceListOfPortfolioCashFlow": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PortfolioCashFlow"
            }
          },
          "href": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PortfolioDetails": {
        "required": [
          "baseCurrency",
          "originPortfolioId",
          "version"
        ],
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "description": "The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.",
            "format": "uri",
            "nullable": true
          },
          "originPortfolioId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "version": {
            "$ref": "#/components/schemas/Version"
          },
          "baseCurrency": {
            "type": "string",
            "description": "The base currency of the transaction portfolio."
          },
          "corporateActionSourceId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "subHoldingKeys": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
            },
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CreatePortfolioDetails": {
        "type": "object",
        "properties": {
          "corporateActionSourceId": {
            "$ref": "#/components/schemas/ResourceId"
          }
        },
        "additionalProperties": false
      },
      "ExecutionRequest": {
        "required": [
          "currency",
          "executionId",
          "instrumentIdentifiers",
          "lastPx",
          "lastShares",
          "side",
          "transactionTime"
        ],
        "type": "object",
        "properties": {
          "executionId": {
            "type": "string",
            "description": "The unique identifier of the Execution Report (8) message as assigned by sell-side. FIX field 17."
          },
          "side": {
            "type": "string",
            "description": "The side of the order. FIX field 54."
          },
          "instrumentIdentifiers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "A set of instrument identifiers to use to resolve the execution to a unique instrument."
          },
          "transactionTime": {
            "type": "string",
            "description": "Time of execution/order creation. FIX field 60.",
            "format": "date-time"
          },
          "lastShares": {
            "type": "number",
            "description": "Quantity (e.g. shares) bought/sold on this (last) fill. FIX field 32.",
            "format": "double"
          },
          "lastPx": {
            "type": "number",
            "description": "Price of this (last) fill. FIX field 31.",
            "format": "double"
          },
          "currency": {
            "type": "string",
            "description": "The currency used for the price. FIX field 15."
          }
        },
        "additionalProperties": false
      },
      "UpsertPortfolioExecutionsResponse": {
        "required": [
          "version"
        ],
        "type": "object",
        "properties": {
          "version": {
            "$ref": "#/components/schemas/Version"
          },
          "href": {
            "type": "string",
            "description": "The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TargetTaxLotRequest": {
        "required": [
          "units"
        ],
        "type": "object",
        "properties": {
          "units": {
            "type": "number",
            "description": "The number of units of the instrument in this tax-lot.",
            "format": "double"
          },
          "cost": {
            "$ref": "#/components/schemas/CurrencyAndAmount"
          },
          "portfolioCost": {
            "type": "number",
            "description": "The total cost of the tax-lot in the transaction portfolio's base currency.",
            "format": "double",
            "nullable": true
          },
          "price": {
            "type": "number",
            "description": "The purchase price of each unit of the instrument held in this tax-lot. This forms part of the unique key required for multiple tax-lots.",
            "format": "double",
            "nullable": true
          },
          "purchaseDate": {
            "type": "string",
            "description": "The purchase date of this tax-lot. This forms part of the unique key required for multiple tax-lots.",
            "format": "date-time",
            "nullable": true
          },
          "settlementDate": {
            "type": "string",
            "description": "The settlement date of the tax-lot's opening transaction.",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AdjustHoldingRequest": {
        "required": [
          "instrumentIdentifiers",
          "taxLots"
        ],
        "type": "object",
        "properties": {
          "instrumentIdentifiers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "A set of instrument identifiers to use to resolve the holding adjustment to a unique instrument."
          },
          "subHoldingKeys": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/PerpetualProperty"
            },
            "description": "Set of unique transaction properties and associated values to store with the holding adjustment transaction automatically created by LUSID. Each property must be from the 'Transaction' domain.",
            "nullable": true
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/PerpetualProperty"
            },
            "description": "Set of unique holding properties and associated values to store with the target holding. Each property must be from the 'Holding' domain.",
            "nullable": true
          },
          "taxLots": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TargetTaxLotRequest"
            },
            "description": "The tax-lots that together make up the target holding."
          },
          "currency": {
            "type": "string",
            "description": "The Holding currency. This needs to be equal with the one on the TaxLot -> cost if one is specified",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "This request specifies target holdings. i.e. holding data that the\r\nsystem should match. When processed by the movement\r\nengine, it will create 'true-up' adjustments on the fly."
      },
      "AdjustHolding": {
        "required": [
          "version"
        ],
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "description": "The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.",
            "format": "uri",
            "nullable": true
          },
          "version": {
            "$ref": "#/components/schemas/Version"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "HoldingsAdjustmentHeader": {
        "required": [
          "effectiveAt",
          "unmatchedHoldingMethod",
          "version"
        ],
        "type": "object",
        "properties": {
          "effectiveAt": {
            "type": "string",
            "description": "The effective datetime from which the adjustment is valid. There can only be one holdings adjustment for a transaction portfolio at a specific effective datetime, so this uniquely identifies the adjustment.",
            "format": "date-time"
          },
          "version": {
            "$ref": "#/components/schemas/Version"
          },
          "unmatchedHoldingMethod": {
            "enum": [
              "PositionToZero",
              "KeepTheSame"
            ],
            "type": "string",
            "description": "Describes how the holdings were adjusted. If 'PositionToZero' the entire transaction portfolio's holdings were set via a call to 'Set holdings'. If 'KeepTheSame' only the specified holdings were adjusted via a call to 'Adjust holdings'. The available values are: PositionToZero, KeepTheSame"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A record of holdings adjustments made on the transaction portfolio."
      },
      "ResourceListOfHoldingsAdjustmentHeader": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/HoldingsAdjustmentHeader"
            }
          },
          "href": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TargetTaxLot": {
        "required": [
          "units"
        ],
        "type": "object",
        "properties": {
          "units": {
            "type": "number",
            "description": "The number of units of the instrument in this tax-lot.",
            "format": "double"
          },
          "cost": {
            "$ref": "#/components/schemas/CurrencyAndAmount"
          },
          "portfolioCost": {
            "type": "number",
            "description": "The total cost of the tax-lot in the transaction portfolio's base currency.",
            "format": "double",
            "nullable": true
          },
          "price": {
            "type": "number",
            "description": "The purchase price of each unit of the instrument held in this tax-lot. This forms part of the unique key required for multiple tax-lots.",
            "format": "double",
            "nullable": true
          },
          "purchaseDate": {
            "type": "string",
            "description": "The purchase date of this tax-lot. This forms part of the unique key required for multiple tax-lots.",
            "format": "date-time",
            "nullable": true
          },
          "settlementDate": {
            "type": "string",
            "description": "The settlement date of the tax-lot's opening transaction.",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Used to specify holdings target amounts at the tax-lot level"
      },
      "HoldingAdjustment": {
        "required": [
          "instrumentUid",
          "taxLots"
        ],
        "type": "object",
        "properties": {
          "instrumentIdentifiers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "The set of instrument identifiers that can be used to resolve the holding adjustment to a unique instrument.",
            "nullable": true
          },
          "instrumentUid": {
            "type": "string",
            "description": "The unqiue Lusid Instrument Id (LUID) of the instrument that the holding adjustment is in."
          },
          "subHoldingKeys": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/PerpetualProperty"
            },
            "description": "The set of unique transaction properties and associated values stored with the holding adjustment transactions automatically created by LUSID. Each property will be from the 'Transaction' domain.",
            "nullable": true
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/PerpetualProperty"
            },
            "description": "The set of unique holding properties and associated values stored with the target holding. Each property will be from the 'Holding' domain.",
            "nullable": true
          },
          "taxLots": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TargetTaxLot"
            },
            "description": "The tax-lots that together make up the target holding."
          },
          "currency": {
            "type": "string",
            "description": "The Holding currency.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The target holdings."
      },
      "HoldingsAdjustment": {
        "required": [
          "adjustments",
          "effectiveAt",
          "unmatchedHoldingMethod",
          "version"
        ],
        "type": "object",
        "properties": {
          "effectiveAt": {
            "type": "string",
            "description": "The effective datetime from which the adjustment is valid. There can only be one holdings adjustment for a transaction portfolio at a specific effective datetime, so this uniquely identifies the adjustment.",
            "format": "date-time"
          },
          "version": {
            "$ref": "#/components/schemas/Version"
          },
          "unmatchedHoldingMethod": {
            "enum": [
              "PositionToZero",
              "KeepTheSame"
            ],
            "type": "string",
            "description": "Describes how the holdings were adjusted. If 'PositionToZero' the entire transaction portfolio's holdings were set via a call to 'Set holdings'. If 'KeepTheSame' only the specified holdings were adjusted via a call to 'Adjust holdings'. The available values are: PositionToZero, KeepTheSame"
          },
          "adjustments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/HoldingAdjustment"
            },
            "description": "The holding adjustments."
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Full content of a holdings adjustment for a single portfolio and effective date."
      },
      "TransactionRequest": {
        "required": [
          "instrumentIdentifiers",
          "settlementDate",
          "totalConsideration",
          "transactionDate",
          "transactionId",
          "type",
          "units"
        ],
        "type": "object",
        "properties": {
          "transactionId": {
            "type": "string",
            "description": "The unique identifier for the transaction."
          },
          "type": {
            "type": "string",
            "description": "The type of the transaction e.g. 'Buy', 'Sell'. The transaction type should have been pre-configured via the System Configuration API endpoint. If it hasn't been pre-configured the transaction will still be updated or inserted however you will be unable to generate the resultant holdings for the portfolio that contains this transaction as LUSID does not know how to process it."
          },
          "instrumentIdentifiers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "A set of instrument identifiers to use to resolve the transaction to a unique instrument."
          },
          "transactionDate": {
            "type": "string",
            "description": "The date of the transaction.",
            "format": "dateorcutlabel"
          },
          "settlementDate": {
            "type": "string",
            "description": "The settlement date of the transaction.",
            "format": "dateorcutlabel"
          },
          "units": {
            "type": "number",
            "description": "The number of units transacted in the associated instrument.",
            "format": "double"
          },
          "transactionPrice": {
            "$ref": "#/components/schemas/TransactionPrice"
          },
          "totalConsideration": {
            "$ref": "#/components/schemas/CurrencyAndAmount"
          },
          "exchangeRate": {
            "type": "number",
            "description": "The exchange rate between the transaction and settlement currency (settlement currency being represented by the TotalConsideration.Currency). For example if the transaction currency is in USD and the settlement currency is in GBP this this the USD/GBP rate.",
            "format": "double",
            "nullable": true
          },
          "transactionCurrency": {
            "type": "string",
            "description": "The transaction currency.",
            "nullable": true
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/PerpetualProperty"
            },
            "description": "Set of unique transaction properties and associated values to store with the transaction. Each property must be from the 'Transaction' domain.",
            "nullable": true
          },
          "counterpartyId": {
            "type": "string",
            "description": "The identifier for the counterparty of the transaction.",
            "nullable": true
          },
          "source": {
            "type": "string",
            "description": "The source of the transaction. This is used to look up the appropriate transaction group set in the transaction type configuration.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpsertTransactionPropertiesResponse": {
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "description": "The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.",
            "format": "uri",
            "nullable": true
          },
          "version": {
            "$ref": "#/components/schemas/Version"
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/PerpetualProperty"
            },
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "oauth2": {
        "type": "oauth2",
        "description": "OAuth2 Implicit Grant",
        "flows": {
          "implicit": {
            "authorizationUrl": "https://dummyurl.lusid.com/",
            "scopes": {}
          }
        }
      }
    }
  },
  "security": [
    {}
  ],
  "tags": [
    {
      "name": "Aggregation",
      "description": "Methods for accessing aggregated data"
    },
    {
      "name": "Allocations",
      "description": "Methods for interacting with Allocations. This is experimental functionality, with limited documentation presently. An Allocation represents the redistribution of market Executions against an originating Order. Allocations are treated monotemporally; any updates are effective at the as-at time of update, and its not possible to make retroactive (or forward) changes."
    },
    {
      "name": "Application Metadata",
      "description": "Methods for querying application metadata"
    },
    {
      "name": "Calendars",
      "description": ""
    },
    {
      "name": "Configuration Recipe",
      "description": "Methods for the storage and retrieval of Configuration Recipe documents. Read more about these in the LUSID Knowledge Base here https://support.lusid.com/what-is-a-lusid-recipe-and-how-is-it-used."
    },
    {
      "name": "Conventions",
      "description": "Methods for the storage and retrieval of flow conventions."
    },
    {
      "name": "Corporate Action Sources",
      "description": "Methods for storage and retrieval of Corporate Action Sources"
    },
    {
      "name": "Counterparty",
      "description": "Methods for the storage and retrieval of counter-party related information; in particular counter-party, CSA and Netting set data."
    },
    {
      "name": "Cut Label Definitions",
      "description": "Methods for interacting with Cut Label Definitions"
    },
    {
      "name": "Data Types",
      "description": "Methods for administering data types"
    },
    {
      "name": "Derived Transaction Portfolios",
      "description": "Methods for interacting with derived transaction portfolios"
    },
    {
      "name": "Entities",
      "description": "Methods for querying data about entities"
    },
    {
      "name": "Instruments",
      "description": "Methods for interacting with instruments. Read more about instruments in the LUSID Knowledge Base here https://support.lusid.com/what-is-an-instrument."
    },
    {
      "name": "Legal Entities",
      "description": "Endpoints for interacting with Legal Entities."
    },
    {
      "name": "Login",
      "description": "Methods to handle login"
    },
    {
      "name": "Orders",
      "description": "Methods for interacting with Orders. This is experimental functionality, with limited documentation presently. An Order represents an investor's instruction to a broker or similar agent to but or sell a single security. Orders are treated monotemporally; any updates are effective at the as-at time of update, and its not possible to make retroactive (or forward) changes."
    },
    {
      "name": "Persons",
      "description": "Endpoints for interacting with Persons entities."
    },
    {
      "name": "Portfolio Groups",
      "description": "Methods for interacting with Portfolios Groups. Read more about Portfolio Groups in the LUSID Knowledge Base here https://support.lusid.com/how-do-you-group-and-aggregate-portfolios."
    },
    {
      "name": "Portfolios",
      "description": "Methods for interacting with Portfolios. Read more about Portfolios in LUSID here https://support.lusid.com/what-is-portfolio."
    },
    {
      "name": "Property Definitions",
      "description": "Methods for interacting with Properties. Read more about Properties in the LUSID Knowledge Base here https://support.lusid.com/what-is-a-property."
    },
    {
      "name": "Quotes",
      "description": "Methods for the storage and retrieval of Quotes. Read more about Quotes in the LUSID Knowledge Base here https://support.lusid.com/what-is-a-quote."
    },
    {
      "name": "Reconciliations",
      "description": "Endpoints for performing reconciliations"
    },
    {
      "name": "Reference Portfolio",
      "description": "Methods for interacting with Reference Portfolios"
    },
    {
      "name": "Relation Definitions",
      "description": "Methods for interacting with Relations Definitions."
    },
    {
      "name": "Relations",
      "description": "Methods for interacting with Relations."
    },
    {
      "name": "Relationship Definitions",
      "description": "Methods for interacting with Relationship Definitions. Read more about Relationship in the LUSID Knowledge Base at https://support.lusid.com/relationships."
    },
    {
      "name": "Relationships",
      "description": "Methods for interacting with Relationships. Read more about Relationships in the LUSID Knowledge Base here https://support.lusid.com/relationships."
    },
    {
      "name": "Schemas",
      "description": "Methods for retrieval of Schemas"
    },
    {
      "name": "Scopes",
      "description": "Methods for interacting with Scopes. Read more about Scopes in the LUSID Knowledge Base here https://support.lusid.com/what-is-a-scope-in-lusid-and-how-is-it-used."
    },
    {
      "name": "Search",
      "description": "Methods providing Search capability."
    },
    {
      "name": "Structured Market Data",
      "description": "Methods for the storage and retrieval of structured market data documents. Read more about these in the LUSID Knowledge Base here https://support.lusid.com/knowledgebase/article/KA-01894."
    },
    {
      "name": "Structured Result Data",
      "description": "Methods for the storage and retrieval of structured result data documents. Read more about these in the LUSID Knowledge Base here https://support.lusid.com/knowledgebase/article/KA-01893."
    },
    {
      "name": "System Configuration",
      "description": "Methods for updating system configuration with Portfolios"
    },
    {
      "name": "Transaction Portfolios",
      "description": "Methods for interacting with Transaction Portfolios. Read more about Transaction Portfolios in the LUSID Knowledge Base here https://support.lusid.com/what-is-a-transaction-portfolio."
    }
  ],
  "x-tagGroups": {
    "name": "API",
    "tags": [
      "Aggregation",
      "Allocations",
      "Application Metadata",
      "Calendars",
      "Configuration Recipe",
      "Conventions",
      "Corporate Action Sources",
      "Counterparty",
      "Cut Label Definitions",
      "Data Types",
      "Derived Transaction Portfolios",
      "Entities",
      "Instruments",
      "Legal Entities",
      "Login",
      "Orders",
      "Persons",
      "Portfolio Groups",
      "Portfolios",
      "Property Definitions",
      "Quotes",
      "Reconciliations",
      "Reference Portfolio",
      "Relation Definitions",
      "Relations",
      "Relationship Definitions",
      "Relationships",
      "Schemas",
      "Scopes",
      "Search",
      "Structured Market Data",
      "Structured Result Data",
      "System Configuration",
      "Transaction Portfolios"
    ]
  }
}
