{
  "openapi": "3.0.1",
  "info": {
    "title": "LUSID API",
    "description": "FINBOURNE Technology",
    "termsOfService": "https://www.finbourne.com/legal/terms-conditions",
    "contact": {
      "name": "FINBOURNE Technology",
      "url": "https://www.finbourne.com",
      "email": "info@finbourne.com"
    },
    "version": "0.11.4693",
    "x-logo": {
      "url": "https://www.lusid.com/app/assets/logo_white.png",
      "backgroundColor": "#415464"
    }
  },
  "servers": [
    {
      "url": "https://www.lusid.com/api"
    }
  ],
  "paths": {
    "/api/aggregation/$valuation": {
      "post": {
        "tags": [
          "Aggregation"
        ],
        "summary": "GetValuation: Perform valuation for a list of portfolios and/or portfolio groups",
        "description": "Perform valuation on specified list of portfolio and/or portfolio groups for a set of dates.",
        "operationId": "GetValuation",
        "requestBody": {
          "description": "The request specifying the set of portfolios and dates on which to calculate a set of valuation metrics",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/ValuationRequest"
              },
              "example": {
                "recipeId": {
                  "scope": "MyRecipeScope",
                  "code": "default"
                },
                "asAt": "2018-03-05T00:00:00.0000000+00:00",
                "metrics": [
                  {
                    "key": "Instrument/default/Name",
                    "op": "Value"
                  },
                  {
                    "key": "Holding/default/PV",
                    "op": "Value"
                  }
                ],
                "groupBy": [
                  "Instrument/default/Name"
                ],
                "sort": [
                  {
                    "key": "Instrument/default/RIC",
                    "sortOrder": "Ascending"
                  }
                ],
                "reportCurrency": "USD",
                "equipWithSubtotals": false,
                "portfolioEntityIds": [
                  {
                    "scope": "PortfolioScope1",
                    "code": "MyPortfolioAbC",
                    "portfolioEntityType": "SinglePortfolio"
                  },
                  {
                    "scope": "PortfolioScope2",
                    "code": "MyPortfolioDeF",
                    "portfolioEntityType": "SinglePortfolio"
                  }
                ],
                "valuationSchedule": {
                  "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00",
                  "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                  "tenor": "1D",
                  "rollConvention": "F",
                  "holidayCalendars": [],
                  "valuationDateTimes": []
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ValuationRequest"
              },
              "example": {
                "recipeId": {
                  "scope": "MyRecipeScope",
                  "code": "default"
                },
                "asAt": "2018-03-05T00:00:00.0000000+00:00",
                "metrics": [
                  {
                    "key": "Instrument/default/Name",
                    "op": "Value"
                  },
                  {
                    "key": "Holding/default/PV",
                    "op": "Value"
                  }
                ],
                "groupBy": [
                  "Instrument/default/Name"
                ],
                "sort": [
                  {
                    "key": "Instrument/default/RIC",
                    "sortOrder": "Ascending"
                  }
                ],
                "reportCurrency": "USD",
                "equipWithSubtotals": false,
                "portfolioEntityIds": [
                  {
                    "scope": "PortfolioScope1",
                    "code": "MyPortfolioAbC",
                    "portfolioEntityType": "SinglePortfolio"
                  },
                  {
                    "scope": "PortfolioScope2",
                    "code": "MyPortfolioDeF",
                    "portfolioEntityType": "SinglePortfolio"
                  }
                ],
                "valuationSchedule": {
                  "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00",
                  "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                  "tenor": "1D",
                  "rollConvention": "F",
                  "holidayCalendars": [],
                  "valuationDateTimes": []
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ValuationRequest"
              },
              "example": {
                "recipeId": {
                  "scope": "MyRecipeScope",
                  "code": "default"
                },
                "asAt": "2018-03-05T00:00:00.0000000+00:00",
                "metrics": [
                  {
                    "key": "Instrument/default/Name",
                    "op": "Value"
                  },
                  {
                    "key": "Holding/default/PV",
                    "op": "Value"
                  }
                ],
                "groupBy": [
                  "Instrument/default/Name"
                ],
                "sort": [
                  {
                    "key": "Instrument/default/RIC",
                    "sortOrder": "Ascending"
                  }
                ],
                "reportCurrency": "USD",
                "equipWithSubtotals": false,
                "portfolioEntityIds": [
                  {
                    "scope": "PortfolioScope1",
                    "code": "MyPortfolioAbC",
                    "portfolioEntityType": "SinglePortfolio"
                  },
                  {
                    "scope": "PortfolioScope2",
                    "code": "MyPortfolioDeF",
                    "portfolioEntityType": "SinglePortfolio"
                  }
                ],
                "valuationSchedule": {
                  "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00",
                  "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                  "tenor": "1D",
                  "rollConvention": "F",
                  "holidayCalendars": [],
                  "valuationDateTimes": []
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ValuationRequest"
              },
              "example": {
                "recipeId": {
                  "scope": "MyRecipeScope",
                  "code": "default"
                },
                "asAt": "2018-03-05T00:00:00.0000000+00:00",
                "metrics": [
                  {
                    "key": "Instrument/default/Name",
                    "op": "Value"
                  },
                  {
                    "key": "Holding/default/PV",
                    "op": "Value"
                  }
                ],
                "groupBy": [
                  "Instrument/default/Name"
                ],
                "sort": [
                  {
                    "key": "Instrument/default/RIC",
                    "sortOrder": "Ascending"
                  }
                ],
                "reportCurrency": "USD",
                "equipWithSubtotals": false,
                "portfolioEntityIds": [
                  {
                    "scope": "PortfolioScope1",
                    "code": "MyPortfolioAbC",
                    "portfolioEntityType": "SinglePortfolio"
                  },
                  {
                    "scope": "PortfolioScope2",
                    "code": "MyPortfolioDeF",
                    "portfolioEntityType": "SinglePortfolio"
                  }
                ],
                "valuationSchedule": {
                  "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00",
                  "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                  "tenor": "1D",
                  "rollConvention": "F",
                  "holidayCalendars": [],
                  "valuationDateTimes": []
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ListAggregationResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListAggregationResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListAggregationResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      }
    },
    "/api/aggregation/$valuationinlined": {
      "post": {
        "tags": [
          "Aggregation"
        ],
        "summary": "GetValuationOfWeightedInstruments: Perform valuation for an inlined portfolio",
        "description": "Perform valuation on the portfolio that is defined by the weighted set of instruments passed to the request.",
        "operationId": "GetValuationOfWeightedInstruments",
        "requestBody": {
          "description": "The request specifying the set of portfolios and dates on which to calculate a set of valuation metrics",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/InlineValuationRequest"
              },
              "example": {
                "recipeId": {
                  "scope": "MyRecipeScope",
                  "code": "default"
                },
                "asAt": "2018-03-05T00:00:00.0000000+00:00",
                "metrics": [
                  {
                    "key": "Instrument/default/Name",
                    "op": "Value"
                  },
                  {
                    "key": "Holding/default/PV",
                    "op": "Value"
                  }
                ],
                "groupBy": [
                  "Instrument/default/Name"
                ],
                "reportCurrency": "USD",
                "equipWithSubtotals": false,
                "valuationSchedule": {
                  "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00",
                  "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                  "tenor": "1D",
                  "rollConvention": "F",
                  "holidayCalendars": [],
                  "valuationDateTimes": []
                },
                "instruments": [
                  {
                    "quantity": 10000,
                    "holdingIdentifier": "my-holding-on-some-date",
                    "instrument": {
                      "startDate": "2018-03-05T00:00:00.0000000+00:00",
                      "maturityDate": "2018-04-04T00:00:00.0000000+00:00",
                      "domAmount": 100,
                      "domCcy": "GBP",
                      "fgnAmount": -150,
                      "fgnCcy": "USD",
                      "refSpotRate": 1.5,
                      "isNdf": false,
                      "fixingDate": "0001-01-01T00:00:00.0000000+00:00",
                      "instrumentType": "FxForward"
                    }
                  }
                ]
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InlineValuationRequest"
              },
              "example": {
                "recipeId": {
                  "scope": "MyRecipeScope",
                  "code": "default"
                },
                "asAt": "2018-03-05T00:00:00.0000000+00:00",
                "metrics": [
                  {
                    "key": "Instrument/default/Name",
                    "op": "Value"
                  },
                  {
                    "key": "Holding/default/PV",
                    "op": "Value"
                  }
                ],
                "groupBy": [
                  "Instrument/default/Name"
                ],
                "reportCurrency": "USD",
                "equipWithSubtotals": false,
                "valuationSchedule": {
                  "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00",
                  "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                  "tenor": "1D",
                  "rollConvention": "F",
                  "holidayCalendars": [],
                  "valuationDateTimes": []
                },
                "instruments": [
                  {
                    "quantity": 10000,
                    "holdingIdentifier": "my-holding-on-some-date",
                    "instrument": {
                      "startDate": "2018-03-05T00:00:00.0000000+00:00",
                      "maturityDate": "2018-04-04T00:00:00.0000000+00:00",
                      "domAmount": 100,
                      "domCcy": "GBP",
                      "fgnAmount": -150,
                      "fgnCcy": "USD",
                      "refSpotRate": 1.5,
                      "isNdf": false,
                      "fixingDate": "0001-01-01T00:00:00.0000000+00:00",
                      "instrumentType": "FxForward"
                    }
                  }
                ]
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/InlineValuationRequest"
              },
              "example": {
                "recipeId": {
                  "scope": "MyRecipeScope",
                  "code": "default"
                },
                "asAt": "2018-03-05T00:00:00.0000000+00:00",
                "metrics": [
                  {
                    "key": "Instrument/default/Name",
                    "op": "Value"
                  },
                  {
                    "key": "Holding/default/PV",
                    "op": "Value"
                  }
                ],
                "groupBy": [
                  "Instrument/default/Name"
                ],
                "reportCurrency": "USD",
                "equipWithSubtotals": false,
                "valuationSchedule": {
                  "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00",
                  "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                  "tenor": "1D",
                  "rollConvention": "F",
                  "holidayCalendars": [],
                  "valuationDateTimes": []
                },
                "instruments": [
                  {
                    "quantity": 10000,
                    "holdingIdentifier": "my-holding-on-some-date",
                    "instrument": {
                      "startDate": "2018-03-05T00:00:00.0000000+00:00",
                      "maturityDate": "2018-04-04T00:00:00.0000000+00:00",
                      "domAmount": 100,
                      "domCcy": "GBP",
                      "fgnAmount": -150,
                      "fgnCcy": "USD",
                      "refSpotRate": 1.5,
                      "isNdf": false,
                      "fixingDate": "0001-01-01T00:00:00.0000000+00:00",
                      "instrumentType": "FxForward"
                    }
                  }
                ]
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/InlineValuationRequest"
              },
              "example": {
                "recipeId": {
                  "scope": "MyRecipeScope",
                  "code": "default"
                },
                "asAt": "2018-03-05T00:00:00.0000000+00:00",
                "metrics": [
                  {
                    "key": "Instrument/default/Name",
                    "op": "Value"
                  },
                  {
                    "key": "Holding/default/PV",
                    "op": "Value"
                  }
                ],
                "groupBy": [
                  "Instrument/default/Name"
                ],
                "reportCurrency": "USD",
                "equipWithSubtotals": false,
                "valuationSchedule": {
                  "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00",
                  "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                  "tenor": "1D",
                  "rollConvention": "F",
                  "holidayCalendars": [],
                  "valuationDateTimes": []
                },
                "instruments": [
                  {
                    "quantity": 10000,
                    "holdingIdentifier": "my-holding-on-some-date",
                    "instrument": {
                      "startDate": "2018-03-05T00:00:00.0000000+00:00",
                      "maturityDate": "2018-04-04T00:00:00.0000000+00:00",
                      "domAmount": 100,
                      "domCcy": "GBP",
                      "fgnAmount": -150,
                      "fgnCcy": "USD",
                      "refSpotRate": 1.5,
                      "isNdf": false,
                      "fixingDate": "0001-01-01T00:00:00.0000000+00:00",
                      "instrumentType": "FxForward"
                    }
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ListAggregationResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListAggregationResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListAggregationResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      }
    },
    "/api/allocations": {
      "get": {
        "tags": [
          "Allocations"
        ],
        "summary": "[EARLY ACCESS] ListAllocations: List Allocations",
        "description": "Fetch the last pre-AsAt date version of each allocation in scope (does not fetch the entire history).",
        "operationId": "ListAllocations",
        "parameters": [
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the allocation. Defaults to return the latest version of the allocation if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to retrieve the allocation. Defaults to return the latest version of the allocation if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "page",
            "in": "query",
            "description": "The pagination token to use to continue listing allocations from a previous call to list allocations.\r\n            This value is returned from the previous call. If a pagination token is provided the sortBy, filter, effectiveAt, and asAt fields\r\n            must not have changed since the original request. Also, if set, a start value cannot be provided.",
            "schema": {
              "maxLength": 500,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\+/]*={0,3}$",
              "type": "string",
              "description": "The pagination token to use to continue listing allocations from a previous call to list allocations.\r\n            This value is returned from the previous call. If a pagination token is provided the sortBy, filter, effectiveAt, and asAt fields\r\n            must not have changed since the original request. Also, if set, a start value cannot be provided.",
              "nullable": true
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "Allocation the results by these fields. Use use the '-' sign to denote descending allocation e.g. -MyFieldName.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Allocation the results by these fields. Use use the '-' sign to denote descending allocation e.g. -MyFieldName.",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "start",
            "in": "query",
            "description": "When paginating, skip this number of results.",
            "schema": {
              "type": "integer",
              "description": "When paginating, skip this number of results.",
              "format": "int32",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "limit",
            "in": "query",
            "description": "When paginating, limit the number of returned results to this many.",
            "schema": {
              "maximum": 5000,
              "minimum": 1,
              "type": "integer",
              "description": "When paginating, limit the number of returned results to this many.",
              "format": "int32",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the result set. Read more about filtering results from LUSID here:\r\n            https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "maxLength": 16384,
              "minLength": 0,
              "pattern": "^[\\s\\S]*$",
              "type": "string",
              "description": "Expression to filter the result set. Read more about filtering results from LUSID here:\r\n            https://support.lusid.com/filtering-results-from-lusid.",
              "nullable": true
            }
          },
          {
            "name": "propertyKeys",
            "in": "query",
            "description": "A list of property keys from the \"Allocations\" domain to decorate onto each allocation.\r\n                These take the format {domain}/{scope}/{code} e.g. \"Allocations/system/Name\".",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
              },
              "description": "A list of property keys from the \"Allocations\" domain to decorate onto each allocation.\r\n                These take the format {domain}/{scope}/{code} e.g. \"Allocations/system/Name\".",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "Allocations.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfAllocation"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfAllocation"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfAllocation"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      },
      "post": {
        "tags": [
          "Allocations"
        ],
        "summary": "[EARLY ACCESS] UpsertAllocations: Upsert Allocations",
        "description": "Upsert; update existing allocations with given ids, or create new allocations otherwise.",
        "operationId": "UpsertAllocations",
        "requestBody": {
          "description": "The collection of allocation requests.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/AllocationSetRequest"
              },
              "example": {
                "allocationRequests": [
                  {
                    "properties": {
                      "allocation/MyScope/SomeAllocationProperty": {
                        "key": "Allocation/MyScope/SomeAllocationProperty",
                        "value": {
                          "labelValue": "XYZ000034567"
                        }
                      }
                    },
                    "instrumentIdentifiers": {
                      "instrument/default/Currency": "GBP"
                    },
                    "quantity": 100,
                    "portfolioId": {
                      "scope": "MyScope",
                      "code": "UK Equity"
                    },
                    "allocatedOrderId": {
                      "scope": "MyScope",
                      "code": "ORD00000123"
                    },
                    "id": {
                      "scope": "MyScope",
                      "code": "ALLOC00000123"
                    },
                    "placementIds": [
                      {
                        "scope": "MyScope",
                        "code": "A placement"
                      }
                    ],
                    "state": "New",
                    "side": "Buy",
                    "type": "Limit",
                    "settlementDate": "2006-04-14T00:00:00.0000000+00:00",
                    "date": "2006-04-11T00:00:00.0000000+00:00",
                    "price": {
                      "amount": 12413.33,
                      "currency": "USD"
                    },
                    "settlementCurrency": "USD",
                    "settlementCurrencyFxRate": 1,
                    "counterparty": "SomeCounterparty"
                  }
                ]
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AllocationSetRequest"
              },
              "example": {
                "allocationRequests": [
                  {
                    "properties": {
                      "allocation/MyScope/SomeAllocationProperty": {
                        "key": "Allocation/MyScope/SomeAllocationProperty",
                        "value": {
                          "labelValue": "XYZ000034567"
                        }
                      }
                    },
                    "instrumentIdentifiers": {
                      "instrument/default/Currency": "GBP"
                    },
                    "quantity": 100,
                    "portfolioId": {
                      "scope": "MyScope",
                      "code": "UK Equity"
                    },
                    "allocatedOrderId": {
                      "scope": "MyScope",
                      "code": "ORD00000123"
                    },
                    "id": {
                      "scope": "MyScope",
                      "code": "ALLOC00000123"
                    },
                    "placementIds": [
                      {
                        "scope": "MyScope",
                        "code": "A placement"
                      }
                    ],
                    "state": "New",
                    "side": "Buy",
                    "type": "Limit",
                    "settlementDate": "2006-04-14T00:00:00.0000000+00:00",
                    "date": "2006-04-11T00:00:00.0000000+00:00",
                    "price": {
                      "amount": 12413.33,
                      "currency": "USD"
                    },
                    "settlementCurrency": "USD",
                    "settlementCurrencyFxRate": 1,
                    "counterparty": "SomeCounterparty"
                  }
                ]
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AllocationSetRequest"
              },
              "example": {
                "allocationRequests": [
                  {
                    "properties": {
                      "allocation/MyScope/SomeAllocationProperty": {
                        "key": "Allocation/MyScope/SomeAllocationProperty",
                        "value": {
                          "labelValue": "XYZ000034567"
                        }
                      }
                    },
                    "instrumentIdentifiers": {
                      "instrument/default/Currency": "GBP"
                    },
                    "quantity": 100,
                    "portfolioId": {
                      "scope": "MyScope",
                      "code": "UK Equity"
                    },
                    "allocatedOrderId": {
                      "scope": "MyScope",
                      "code": "ORD00000123"
                    },
                    "id": {
                      "scope": "MyScope",
                      "code": "ALLOC00000123"
                    },
                    "placementIds": [
                      {
                        "scope": "MyScope",
                        "code": "A placement"
                      }
                    ],
                    "state": "New",
                    "side": "Buy",
                    "type": "Limit",
                    "settlementDate": "2006-04-14T00:00:00.0000000+00:00",
                    "date": "2006-04-11T00:00:00.0000000+00:00",
                    "price": {
                      "amount": 12413.33,
                      "currency": "USD"
                    },
                    "settlementCurrency": "USD",
                    "settlementCurrencyFxRate": 1,
                    "counterparty": "SomeCounterparty"
                  }
                ]
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AllocationSetRequest"
              },
              "example": {
                "allocationRequests": [
                  {
                    "properties": {
                      "allocation/MyScope/SomeAllocationProperty": {
                        "key": "Allocation/MyScope/SomeAllocationProperty",
                        "value": {
                          "labelValue": "XYZ000034567"
                        }
                      }
                    },
                    "instrumentIdentifiers": {
                      "instrument/default/Currency": "GBP"
                    },
                    "quantity": 100,
                    "portfolioId": {
                      "scope": "MyScope",
                      "code": "UK Equity"
                    },
                    "allocatedOrderId": {
                      "scope": "MyScope",
                      "code": "ORD00000123"
                    },
                    "id": {
                      "scope": "MyScope",
                      "code": "ALLOC00000123"
                    },
                    "placementIds": [
                      {
                        "scope": "MyScope",
                        "code": "A placement"
                      }
                    ],
                    "state": "New",
                    "side": "Buy",
                    "type": "Limit",
                    "settlementDate": "2006-04-14T00:00:00.0000000+00:00",
                    "date": "2006-04-11T00:00:00.0000000+00:00",
                    "price": {
                      "amount": 12413.33,
                      "currency": "USD"
                    },
                    "settlementCurrency": "USD",
                    "settlementCurrencyFxRate": 1,
                    "counterparty": "SomeCounterparty"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "A collection of allocations.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfAllocation"
                },
                "example": {
                  "values": [
                    {
                      "id": {
                        "scope": "MyScope",
                        "code": "ALLOC00000123"
                      },
                      "allocatedOrderId": {
                        "scope": "MyScope",
                        "code": "ORD00000123"
                      },
                      "portfolioId": {
                        "scope": "MyScope",
                        "code": "testPortfolio"
                      },
                      "quantity": 100,
                      "instrumentIdentifiers": {
                        "instrument/default/Currency": "GBP"
                      },
                      "version": {
                        "effectiveFrom": "2018-03-05T10:10:10.0000000+00:00",
                        "asAtDate": "2018-03-05T10:10:10.0000000+00:00"
                      },
                      "properties": {
                        "allocation/MyScope/SomeAllocationProperty": {
                          "key": "Allocation/MyScope/SomeAllocationProperty",
                          "value": {
                            "labelValue": "XYZ000034567"
                          }
                        }
                      },
                      "placementIds": [
                        {
                          "scope": "MyScope",
                          "code": "PLAC00000123"
                        }
                      ],
                      "state": "New",
                      "side": "Buy",
                      "type": "Limit",
                      "settlementDate": "2006-04-14T00:00:00.0000000+00:00",
                      "date": "2006-04-11T00:00:00.0000000+00:00",
                      "price": {
                        "amount": 12413.33,
                        "currency": "USD"
                      },
                      "settlementCurrency": "USD",
                      "settlementCurrencyFxRate": 1,
                      "counterparty": "SomeCounterparty"
                    }
                  ],
                  "links": []
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfAllocation"
                },
                "example": {
                  "values": [
                    {
                      "id": {
                        "scope": "MyScope",
                        "code": "ALLOC00000123"
                      },
                      "allocatedOrderId": {
                        "scope": "MyScope",
                        "code": "ORD00000123"
                      },
                      "portfolioId": {
                        "scope": "MyScope",
                        "code": "testPortfolio"
                      },
                      "quantity": 100,
                      "instrumentIdentifiers": {
                        "instrument/default/Currency": "GBP"
                      },
                      "version": {
                        "effectiveFrom": "2018-03-05T10:10:10.0000000+00:00",
                        "asAtDate": "2018-03-05T10:10:10.0000000+00:00"
                      },
                      "properties": {
                        "allocation/MyScope/SomeAllocationProperty": {
                          "key": "Allocation/MyScope/SomeAllocationProperty",
                          "value": {
                            "labelValue": "XYZ000034567"
                          }
                        }
                      },
                      "placementIds": [
                        {
                          "scope": "MyScope",
                          "code": "PLAC00000123"
                        }
                      ],
                      "state": "New",
                      "side": "Buy",
                      "type": "Limit",
                      "settlementDate": "2006-04-14T00:00:00.0000000+00:00",
                      "date": "2006-04-11T00:00:00.0000000+00:00",
                      "price": {
                        "amount": 12413.33,
                        "currency": "USD"
                      },
                      "settlementCurrency": "USD",
                      "settlementCurrencyFxRate": 1,
                      "counterparty": "SomeCounterparty"
                    }
                  ],
                  "links": []
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfAllocation"
                },
                "example": {
                  "values": [
                    {
                      "id": {
                        "scope": "MyScope",
                        "code": "ALLOC00000123"
                      },
                      "allocatedOrderId": {
                        "scope": "MyScope",
                        "code": "ORD00000123"
                      },
                      "portfolioId": {
                        "scope": "MyScope",
                        "code": "testPortfolio"
                      },
                      "quantity": 100,
                      "instrumentIdentifiers": {
                        "instrument/default/Currency": "GBP"
                      },
                      "version": {
                        "effectiveFrom": "2018-03-05T10:10:10.0000000+00:00",
                        "asAtDate": "2018-03-05T10:10:10.0000000+00:00"
                      },
                      "properties": {
                        "allocation/MyScope/SomeAllocationProperty": {
                          "key": "Allocation/MyScope/SomeAllocationProperty",
                          "value": {
                            "labelValue": "XYZ000034567"
                          }
                        }
                      },
                      "placementIds": [
                        {
                          "scope": "MyScope",
                          "code": "PLAC00000123"
                        }
                      ],
                      "state": "New",
                      "side": "Buy",
                      "type": "Limit",
                      "settlementDate": "2006-04-14T00:00:00.0000000+00:00",
                      "date": "2006-04-11T00:00:00.0000000+00:00",
                      "price": {
                        "amount": 12413.33,
                        "currency": "USD"
                      },
                      "settlementCurrency": "USD",
                      "settlementCurrencyFxRate": 1,
                      "counterparty": "SomeCounterparty"
                    }
                  ],
                  "links": []
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/allocations/{scope}/{code}": {
      "get": {
        "tags": [
          "Allocations"
        ],
        "summary": "[EARLY ACCESS] GetAllocation: Get Allocation",
        "description": "Fetch an Allocation matching the provided identifier",
        "operationId": "GetAllocation",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope to which the allocation belongs.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope to which the allocation belongs.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The allocation's unique identifier.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The allocation's unique identifier.",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the allocation. Defaults to return the latest version of the allocation if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to retrieve the allocation. Defaults to return the latest version of the allocation if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "propertyKeys",
            "in": "query",
            "description": "A list of property keys from the \"Allocations\" domain to decorate onto the allocation.\r\n            These take the format {domain}/{scope}/{code} e.g. \"Allocations/system/Name\".",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
              },
              "description": "A list of property keys from the \"Allocations\" domain to decorate onto the allocation.\r\n            These take the format {domain}/{scope}/{code} e.g. \"Allocations/system/Name\".",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The allocation matching the given identifier.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Allocation"
                },
                "example": {
                  "id": {
                    "scope": "MyScope",
                    "code": "ALLOC00000123"
                  },
                  "allocatedOrderId": {
                    "scope": "MyScope",
                    "code": "ORD00000123"
                  },
                  "portfolioId": {
                    "scope": "MyScope",
                    "code": "testPortfolio"
                  },
                  "quantity": 100,
                  "instrumentIdentifiers": {
                    "instrument/default/Currency": "GBP"
                  },
                  "version": {
                    "effectiveFrom": "2018-03-05T10:10:10.0000000+00:00",
                    "asAtDate": "2018-03-05T10:10:10.0000000+00:00"
                  },
                  "properties": {
                    "allocation/MyScope/SomeAllocationProperty": {
                      "key": "Allocation/MyScope/SomeAllocationProperty",
                      "value": {
                        "labelValue": "XYZ000034567"
                      }
                    }
                  },
                  "placementIds": [
                    {
                      "scope": "MyScope",
                      "code": "PLAC00000123"
                    }
                  ],
                  "state": "New",
                  "side": "Buy",
                  "type": "Limit",
                  "settlementDate": "2006-04-14T00:00:00.0000000+00:00",
                  "date": "2006-04-11T00:00:00.0000000+00:00",
                  "price": {
                    "amount": 12413.33,
                    "currency": "USD"
                  },
                  "settlementCurrency": "USD",
                  "settlementCurrencyFxRate": 1,
                  "counterparty": "SomeCounterparty"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Allocation"
                },
                "example": {
                  "id": {
                    "scope": "MyScope",
                    "code": "ALLOC00000123"
                  },
                  "allocatedOrderId": {
                    "scope": "MyScope",
                    "code": "ORD00000123"
                  },
                  "portfolioId": {
                    "scope": "MyScope",
                    "code": "testPortfolio"
                  },
                  "quantity": 100,
                  "instrumentIdentifiers": {
                    "instrument/default/Currency": "GBP"
                  },
                  "version": {
                    "effectiveFrom": "2018-03-05T10:10:10.0000000+00:00",
                    "asAtDate": "2018-03-05T10:10:10.0000000+00:00"
                  },
                  "properties": {
                    "allocation/MyScope/SomeAllocationProperty": {
                      "key": "Allocation/MyScope/SomeAllocationProperty",
                      "value": {
                        "labelValue": "XYZ000034567"
                      }
                    }
                  },
                  "placementIds": [
                    {
                      "scope": "MyScope",
                      "code": "PLAC00000123"
                    }
                  ],
                  "state": "New",
                  "side": "Buy",
                  "type": "Limit",
                  "settlementDate": "2006-04-14T00:00:00.0000000+00:00",
                  "date": "2006-04-11T00:00:00.0000000+00:00",
                  "price": {
                    "amount": 12413.33,
                    "currency": "USD"
                  },
                  "settlementCurrency": "USD",
                  "settlementCurrencyFxRate": 1,
                  "counterparty": "SomeCounterparty"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Allocation"
                },
                "example": {
                  "id": {
                    "scope": "MyScope",
                    "code": "ALLOC00000123"
                  },
                  "allocatedOrderId": {
                    "scope": "MyScope",
                    "code": "ORD00000123"
                  },
                  "portfolioId": {
                    "scope": "MyScope",
                    "code": "testPortfolio"
                  },
                  "quantity": 100,
                  "instrumentIdentifiers": {
                    "instrument/default/Currency": "GBP"
                  },
                  "version": {
                    "effectiveFrom": "2018-03-05T10:10:10.0000000+00:00",
                    "asAtDate": "2018-03-05T10:10:10.0000000+00:00"
                  },
                  "properties": {
                    "allocation/MyScope/SomeAllocationProperty": {
                      "key": "Allocation/MyScope/SomeAllocationProperty",
                      "value": {
                        "labelValue": "XYZ000034567"
                      }
                    }
                  },
                  "placementIds": [
                    {
                      "scope": "MyScope",
                      "code": "PLAC00000123"
                    }
                  ],
                  "state": "New",
                  "side": "Buy",
                  "type": "Limit",
                  "settlementDate": "2006-04-14T00:00:00.0000000+00:00",
                  "date": "2006-04-11T00:00:00.0000000+00:00",
                  "price": {
                    "amount": 12413.33,
                    "currency": "USD"
                  },
                  "settlementCurrency": "USD",
                  "settlementCurrencyFxRate": 1,
                  "counterparty": "SomeCounterparty"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      },
      "delete": {
        "tags": [
          "Allocations"
        ],
        "summary": "[EARLY ACCESS] DeleteAllocation: Delete allocation",
        "description": "Delete an allocation. Deletion will be valid from the allocation's creation datetime.\r\nThis means that the allocation will no longer exist at any effective datetime from the asAt datetime of deletion.",
        "operationId": "DeleteAllocation",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The allocation scope.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The allocation scope."
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The allocation's code. This, together with the scope uniquely identifies the allocation to delete.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The allocation's code. This, together with the scope uniquely identifies the allocation to delete."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The response from deleting an allocation.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/complexmarketdata/{scope}": {
      "post": {
        "tags": [
          "Complex Market Data"
        ],
        "summary": "[EARLY ACCESS] UpsertComplexMarketData: Upsert a set of complex market data items. This creates or updates the data in Lusid.",
        "description": "Update or insert one or more complex market data items in a single scope. An item will be updated if it already exists\r\nand inserted if it does not.\r\n            \r\nIn the request each complex market data item must be keyed by a unique correlation id. This id is ephemeral and is not stored by LUSID.\r\nIt serves only as a way to easily identify each complex market data in the response.\r\n            \r\nThe response will return both the collection of successfully updated or inserted complex market data, as well as those that failed.\r\nFor the failures a reason will be provided explaining why the item could not be updated or inserted.\r\n            \r\nIt is important to always check the failed set for any unsuccessful results.",
        "operationId": "UpsertComplexMarketData",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope to use when updating or inserting the complex market data.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope to use when updating or inserting the complex market data."
            }
          }
        ],
        "requestBody": {
          "description": "The set of complex market data items to update or insert keyed by a unique correlation id.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/UpsertComplexMarketDataRequest"
                },
                "description": "The set of complex market data items to update or insert keyed by a unique correlation id."
              },
              "example": {
                "first-item": {
                  "marketDataId": {
                    "provider": "DataScope",
                    "priceSource": "Some Bank Plc",
                    "lineage": "Swaps Desk Trader A",
                    "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                    "marketAsset": "USDOIS"
                  },
                  "marketData": {
                    "baseDate": "1970-01-01T00:00:00.0000000+00:00",
                    "dates": [
                      "1970-01-01T00:00:00.0000000+00:00"
                    ],
                    "discountFactors": [
                      1
                    ],
                    "lineage": "SomeLineage",
                    "marketDataType": "DiscountFactorCurveData"
                  }
                },
                "second-item": {
                  "marketDataId": {
                    "provider": "DataScope",
                    "priceSource": "AN.Other Bank Plc",
                    "lineage": "Swaps Desk Trader B",
                    "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                    "marketAsset": "RBS"
                  },
                  "marketData": {
                    "document": "{ \"some\":\"valid json\"}",
                    "format": "Json",
                    "name": "free text identifier of document 1",
                    "marketDataType": "OpaqueMarketData"
                  }
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/UpsertComplexMarketDataRequest"
                },
                "description": "The set of complex market data items to update or insert keyed by a unique correlation id."
              },
              "example": {
                "first-item": {
                  "marketDataId": {
                    "provider": "DataScope",
                    "priceSource": "Some Bank Plc",
                    "lineage": "Swaps Desk Trader A",
                    "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                    "marketAsset": "USDOIS"
                  },
                  "marketData": {
                    "baseDate": "1970-01-01T00:00:00.0000000+00:00",
                    "dates": [
                      "1970-01-01T00:00:00.0000000+00:00"
                    ],
                    "discountFactors": [
                      1
                    ],
                    "lineage": "SomeLineage",
                    "marketDataType": "DiscountFactorCurveData"
                  }
                },
                "second-item": {
                  "marketDataId": {
                    "provider": "DataScope",
                    "priceSource": "AN.Other Bank Plc",
                    "lineage": "Swaps Desk Trader B",
                    "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                    "marketAsset": "RBS"
                  },
                  "marketData": {
                    "document": "{ \"some\":\"valid json\"}",
                    "format": "Json",
                    "name": "free text identifier of document 1",
                    "marketDataType": "OpaqueMarketData"
                  }
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/UpsertComplexMarketDataRequest"
                },
                "description": "The set of complex market data items to update or insert keyed by a unique correlation id."
              },
              "example": {
                "first-item": {
                  "marketDataId": {
                    "provider": "DataScope",
                    "priceSource": "Some Bank Plc",
                    "lineage": "Swaps Desk Trader A",
                    "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                    "marketAsset": "USDOIS"
                  },
                  "marketData": {
                    "baseDate": "1970-01-01T00:00:00.0000000+00:00",
                    "dates": [
                      "1970-01-01T00:00:00.0000000+00:00"
                    ],
                    "discountFactors": [
                      1
                    ],
                    "lineage": "SomeLineage",
                    "marketDataType": "DiscountFactorCurveData"
                  }
                },
                "second-item": {
                  "marketDataId": {
                    "provider": "DataScope",
                    "priceSource": "AN.Other Bank Plc",
                    "lineage": "Swaps Desk Trader B",
                    "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                    "marketAsset": "RBS"
                  },
                  "marketData": {
                    "document": "{ \"some\":\"valid json\"}",
                    "format": "Json",
                    "name": "free text identifier of document 1",
                    "marketDataType": "OpaqueMarketData"
                  }
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/UpsertComplexMarketDataRequest"
                },
                "description": "The set of complex market data items to update or insert keyed by a unique correlation id."
              },
              "example": {
                "first-item": {
                  "marketDataId": {
                    "provider": "DataScope",
                    "priceSource": "Some Bank Plc",
                    "lineage": "Swaps Desk Trader A",
                    "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                    "marketAsset": "USDOIS"
                  },
                  "marketData": {
                    "baseDate": "1970-01-01T00:00:00.0000000+00:00",
                    "dates": [
                      "1970-01-01T00:00:00.0000000+00:00"
                    ],
                    "discountFactors": [
                      1
                    ],
                    "lineage": "SomeLineage",
                    "marketDataType": "DiscountFactorCurveData"
                  }
                },
                "second-item": {
                  "marketDataId": {
                    "provider": "DataScope",
                    "priceSource": "AN.Other Bank Plc",
                    "lineage": "Swaps Desk Trader B",
                    "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                    "marketAsset": "RBS"
                  },
                  "marketData": {
                    "document": "{ \"some\":\"valid json\"}",
                    "format": "Json",
                    "name": "free text identifier of document 1",
                    "marketDataType": "OpaqueMarketData"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The successfully updated or inserted ComplexMarketData along with any failures",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertStructuredDataResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertStructuredDataResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertStructuredDataResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/complexmarketdata/{scope}/$delete": {
      "post": {
        "tags": [
          "Complex Market Data"
        ],
        "summary": "[EARLY ACCESS] DeleteComplexMarketData: Delete one or more items of complex market data, assuming they are present.",
        "description": "Delete one or more specified complex market data items from a single scope. Each item is identified by a unique id which includes\r\ninformation about its type as well as the exact effective datetime (to the microsecond) at which it entered the system (became valid).\r\n            \r\nIn the request each complex market data item must be keyed by a unique correlation id. This id is ephemeral and is not stored by LUSID.\r\nIt serves only as a way to easily identify each quote in the response.\r\n            \r\nThe response will return both the collection of successfully deleted  complex market data items, as well as those that failed.\r\nFor the failures a reason will be provided explaining why the it could not be deleted.\r\n            \r\nIt is important to always check the failed set for any unsuccessful results.",
        "operationId": "DeleteComplexMarketData",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the complex market data to delete.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the complex market data to delete."
            }
          }
        ],
        "requestBody": {
          "description": "The complex market data Ids to delete, each keyed by a unique correlation id.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/ComplexMarketDataId"
                },
                "description": "The complex market data Ids to delete, each keyed by a unique correlation id."
              },
              "example": {
                "first-item": {
                  "provider": "DataScope",
                  "priceSource": "Some Bank Plc",
                  "lineage": "Swaps Desk Trader A",
                  "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                  "marketAsset": "USDOIS"
                },
                "second-item": {
                  "provider": "DataScope",
                  "priceSource": "AN.Other Bank Plc",
                  "lineage": "Swaps Desk Trader B",
                  "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                  "marketAsset": "RBS"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/ComplexMarketDataId"
                },
                "description": "The complex market data Ids to delete, each keyed by a unique correlation id."
              },
              "example": {
                "first-item": {
                  "provider": "DataScope",
                  "priceSource": "Some Bank Plc",
                  "lineage": "Swaps Desk Trader A",
                  "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                  "marketAsset": "USDOIS"
                },
                "second-item": {
                  "provider": "DataScope",
                  "priceSource": "AN.Other Bank Plc",
                  "lineage": "Swaps Desk Trader B",
                  "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                  "marketAsset": "RBS"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/ComplexMarketDataId"
                },
                "description": "The complex market data Ids to delete, each keyed by a unique correlation id."
              },
              "example": {
                "first-item": {
                  "provider": "DataScope",
                  "priceSource": "Some Bank Plc",
                  "lineage": "Swaps Desk Trader A",
                  "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                  "marketAsset": "USDOIS"
                },
                "second-item": {
                  "provider": "DataScope",
                  "priceSource": "AN.Other Bank Plc",
                  "lineage": "Swaps Desk Trader B",
                  "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                  "marketAsset": "RBS"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/ComplexMarketDataId"
                },
                "description": "The complex market data Ids to delete, each keyed by a unique correlation id."
              },
              "example": {
                "first-item": {
                  "provider": "DataScope",
                  "priceSource": "Some Bank Plc",
                  "lineage": "Swaps Desk Trader A",
                  "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                  "marketAsset": "USDOIS"
                },
                "second-item": {
                  "provider": "DataScope",
                  "priceSource": "AN.Other Bank Plc",
                  "lineage": "Swaps Desk Trader B",
                  "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                  "marketAsset": "RBS"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The successfully deleted ComplexMarketData along with any failures",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AnnulStructuredDataResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnnulStructuredDataResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnnulStructuredDataResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/complexmarketdata/{scope}/$get": {
      "post": {
        "tags": [
          "Complex Market Data"
        ],
        "summary": "[EARLY ACCESS] GetComplexMarketData: Get complex market data",
        "description": "Get one or more items of complex market data from a single scope.\r\n            \r\nEach item can be identified by its time invariant complex market data identifier.\r\n            \r\nFor each id LUSID will return the most recent matched item with respect to the provided (or default) effective datetime.\r\n            \r\nAn optional maximum age range window can be specified which defines how far back to look back for data from the specified effective datetime.\r\nLUSID will return the most recent item within this window.\r\n            \r\nIn the request each complex market data id must be keyed by a unique correlation id. This id is ephemeral and is not stored by LUSID.\r\nIt serves only as a way to easily identify each item in the response.\r\n            \r\nThe response will return three collections. One, the successfully retrieved complex market data. Two, those that had a\r\nvalid identifier but could not be found. Three, those that failed because LUSID could not construct a valid identifier from the request.\r\n            \r\nFor the ids that failed to resolve or could not be found a reason will be provided explaining why that is the case.\r\n            \r\nIt is important to always check the failed and not found sets for any unsuccessful results.",
        "operationId": "GetComplexMarketData",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the complex market data to retrieve.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the complex market data to retrieve."
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime at which to retrieve the complex market data. Defaults to the current LUSID system datetime if not specified.",
            "schema": {
              "maxLength": 256,
              "minLength": 0,
              "pattern": "^[a-zA-Z0-9\\-_\\+:\\.]+$",
              "type": "string",
              "description": "The effective datetime at which to retrieve the complex market data. Defaults to the current LUSID system datetime if not specified.",
              "format": "dateorcutlabel",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the complex market data. Defaults to return the latest version if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to retrieve the complex market data. Defaults to return the latest version if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "maxAge",
            "in": "query",
            "description": "The duration of the look back window in an ISO8601 time interval format e.g. P1Y2M3DT4H30M (1 year, 2 months, 3 days, 4 hours and 30 minutes).\r\n             This is subtracted from the provided effectiveAt datetime to generate a effective datetime window inside which a complex market data item must exist to be retrieved.",
            "schema": {
              "type": "string",
              "description": "The duration of the look back window in an ISO8601 time interval format e.g. P1Y2M3DT4H30M (1 year, 2 months, 3 days, 4 hours and 30 minutes).\r\n             This is subtracted from the provided effectiveAt datetime to generate a effective datetime window inside which a complex market data item must exist to be retrieved.",
              "format": "date-span",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "The time invariant set of complex data identifiers to retrieve the data for. These need to be\r\n             keyed by a unique correlation id allowing the retrieved item to be identified in the response.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/ComplexMarketDataId"
                },
                "description": "The time invariant set of complex data identifiers to retrieve the data for. These need to be\r\n             keyed by a unique correlation id allowing the retrieved item to be identified in the response."
              },
              "example": {
                "first-item": {
                  "provider": "DataScope",
                  "priceSource": "Some Bank Plc",
                  "lineage": "Swaps Desk Trader A",
                  "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                  "marketAsset": "USDOIS"
                },
                "second-item": {
                  "provider": "DataScope",
                  "priceSource": "AN.Other Bank Plc",
                  "lineage": "Swaps Desk Trader B",
                  "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                  "marketAsset": "RBS"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/ComplexMarketDataId"
                },
                "description": "The time invariant set of complex data identifiers to retrieve the data for. These need to be\r\n             keyed by a unique correlation id allowing the retrieved item to be identified in the response."
              },
              "example": {
                "first-item": {
                  "provider": "DataScope",
                  "priceSource": "Some Bank Plc",
                  "lineage": "Swaps Desk Trader A",
                  "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                  "marketAsset": "USDOIS"
                },
                "second-item": {
                  "provider": "DataScope",
                  "priceSource": "AN.Other Bank Plc",
                  "lineage": "Swaps Desk Trader B",
                  "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                  "marketAsset": "RBS"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/ComplexMarketDataId"
                },
                "description": "The time invariant set of complex data identifiers to retrieve the data for. These need to be\r\n             keyed by a unique correlation id allowing the retrieved item to be identified in the response."
              },
              "example": {
                "first-item": {
                  "provider": "DataScope",
                  "priceSource": "Some Bank Plc",
                  "lineage": "Swaps Desk Trader A",
                  "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                  "marketAsset": "USDOIS"
                },
                "second-item": {
                  "provider": "DataScope",
                  "priceSource": "AN.Other Bank Plc",
                  "lineage": "Swaps Desk Trader B",
                  "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                  "marketAsset": "RBS"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/ComplexMarketDataId"
                },
                "description": "The time invariant set of complex data identifiers to retrieve the data for. These need to be\r\n             keyed by a unique correlation id allowing the retrieved item to be identified in the response."
              },
              "example": {
                "first-item": {
                  "provider": "DataScope",
                  "priceSource": "Some Bank Plc",
                  "lineage": "Swaps Desk Trader A",
                  "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                  "marketAsset": "USDOIS"
                },
                "second-item": {
                  "provider": "DataScope",
                  "priceSource": "AN.Other Bank Plc",
                  "lineage": "Swaps Desk Trader B",
                  "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                  "marketAsset": "RBS"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The successfully retrieved complex market data along with any failures",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GetComplexMarketDataResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetComplexMarketDataResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetComplexMarketDataResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/corporateactionsources": {
      "post": {
        "tags": [
          "Corporate Action Sources"
        ],
        "summary": "[EARLY ACCESS] CreateCorporateActionSource: Create corporate action source",
        "description": "Create a corporate action source.",
        "operationId": "CreateCorporateActionSource",
        "requestBody": {
          "description": "The corporate action source definition",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCorporateActionSourceRequest"
              },
              "example": {
                "scope": "ExampleScope",
                "code": "ExampleCode",
                "displayName": "ExampleDisplayName",
                "description": "Example Description",
                "instrumentScopes": []
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCorporateActionSourceRequest"
              },
              "example": {
                "scope": "ExampleScope",
                "code": "ExampleCode",
                "displayName": "ExampleDisplayName",
                "description": "Example Description",
                "instrumentScopes": []
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCorporateActionSourceRequest"
              },
              "example": {
                "scope": "ExampleScope",
                "code": "ExampleCode",
                "displayName": "ExampleDisplayName",
                "description": "Example Description",
                "instrumentScopes": []
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCorporateActionSourceRequest"
              },
              "example": {
                "scope": "ExampleScope",
                "code": "ExampleCode",
                "displayName": "ExampleDisplayName",
                "description": "Example Description",
                "instrumentScopes": []
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "The created corporate action source",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CorporateActionSource"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CorporateActionSource"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CorporateActionSource"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      },
      "get": {
        "tags": [
          "Corporate Action Sources"
        ],
        "summary": "[EARLY ACCESS] ListCorporateActionSources: List corporate action sources",
        "description": "Gets a list of all corporate action sources",
        "operationId": "ListCorporateActionSources",
        "parameters": [
          {
            "name": "asAt",
            "in": "query",
            "description": "Optional. The AsAt date of the data",
            "schema": {
              "type": "string",
              "description": "Optional. The AsAt date of the data",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "Optional. Order the results by these fields. Use use the '-' sign to denote descending order e.g. -MyFieldName",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Optional. Order the results by these fields. Use use the '-' sign to denote descending order e.g. -MyFieldName",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Optional. When paginating, limit the number of returned results to this many. If not specified, a default\r\nof 100 is used.",
            "schema": {
              "type": "integer",
              "description": "Optional. When paginating, limit the number of returned results to this many. If not specified, a default\r\nof 100 is used.",
              "format": "int32",
              "default": 100,
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Optional. Expression to filter the result set. For example, to\r\nfilter on the Display Name, use \"displayName eq 'string'\"\r\nRead more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "maxLength": 16384,
              "minLength": 0,
              "pattern": "^[\\s\\S]*$",
              "type": "string",
              "description": "Optional. Expression to filter the result set. For example, to\r\nfilter on the Display Name, use \"displayName eq 'string'\"\r\nRead more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
              "nullable": true
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Optional. The pagination token to use to continue listing items from a previous call. Page values are\r\nreturn from list calls, and must be supplied exactly as returned. Additionally, when specifying this\r\nvalue, the filter, asAt, and limit must not\r\nbe modified.",
            "schema": {
              "maxLength": 500,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\+/]*={0,3}$",
              "type": "string",
              "description": "Optional. The pagination token to use to continue listing items from a previous call. Page values are\r\nreturn from list calls, and must be supplied exactly as returned. Additionally, when specifying this\r\nvalue, the filter, asAt, and limit must not\r\nbe modified.",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "All Existing Corporate Action Sources",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfCorporateActionSource"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfCorporateActionSource"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfCorporateActionSource"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/corporateactionsources/{scope}/{code}/corporateactions": {
      "post": {
        "tags": [
          "Corporate Action Sources"
        ],
        "summary": "[EARLY ACCESS] BatchUpsertCorporateActions: Batch upsert corporate actions (instrument transition events) to corporate action source.",
        "description": "Create or update one or more corporate actions in a particular corporate action source. Failures are identified in the body of the response.\r\n            \r\nIf a corporate action is upserted at exactly the same effective datetime as a transaction for the same instrument, the corporate action takes precedence. Depending on the nature of the corporate action, this may mean it affects the transaction.",
        "operationId": "BatchUpsertCorporateActions",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of corporate action source",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of corporate action source",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the corporate action source",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the corporate action source",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "The corporate action definitions",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/UpsertCorporateActionRequest"
                },
                "description": "The corporate action definitions",
                "nullable": true
              },
              "example": [
                {
                  "corporateActionCode": "MyStockSplitId",
                  "description": "2-for-1 stock split of instrument BBG001S6PJ31",
                  "announcementDate": "2018-03-01T00:00:00.0000000+00:00",
                  "exDate": "2018-06-01T00:00:00.0000000+00:00",
                  "recordDate": "2018-06-02T00:00:00.0000000+00:00",
                  "paymentDate": "2018-08-02T00:00:00.0000000+00:00",
                  "transitions": [
                    {
                      "inputTransition": {
                        "instrumentIdentifiers": {
                          "instrument/default/Figi": "BBG001S6PJ31"
                        },
                        "unitsFactor": 1,
                        "costFactor": 1
                      },
                      "outputTransitions": [
                        {
                          "instrumentIdentifiers": {
                            "instrument/default/Figi": "BBG001S6PJ31"
                          },
                          "unitsFactor": 2,
                          "costFactor": 1
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/UpsertCorporateActionRequest"
                },
                "description": "The corporate action definitions",
                "nullable": true
              },
              "example": [
                {
                  "corporateActionCode": "MyStockSplitId",
                  "description": "2-for-1 stock split of instrument BBG001S6PJ31",
                  "announcementDate": "2018-03-01T00:00:00.0000000+00:00",
                  "exDate": "2018-06-01T00:00:00.0000000+00:00",
                  "recordDate": "2018-06-02T00:00:00.0000000+00:00",
                  "paymentDate": "2018-08-02T00:00:00.0000000+00:00",
                  "transitions": [
                    {
                      "inputTransition": {
                        "instrumentIdentifiers": {
                          "instrument/default/Figi": "BBG001S6PJ31"
                        },
                        "unitsFactor": 1,
                        "costFactor": 1
                      },
                      "outputTransitions": [
                        {
                          "instrumentIdentifiers": {
                            "instrument/default/Figi": "BBG001S6PJ31"
                          },
                          "unitsFactor": 2,
                          "costFactor": 1
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/UpsertCorporateActionRequest"
                },
                "description": "The corporate action definitions",
                "nullable": true
              },
              "example": [
                {
                  "corporateActionCode": "MyStockSplitId",
                  "description": "2-for-1 stock split of instrument BBG001S6PJ31",
                  "announcementDate": "2018-03-01T00:00:00.0000000+00:00",
                  "exDate": "2018-06-01T00:00:00.0000000+00:00",
                  "recordDate": "2018-06-02T00:00:00.0000000+00:00",
                  "paymentDate": "2018-08-02T00:00:00.0000000+00:00",
                  "transitions": [
                    {
                      "inputTransition": {
                        "instrumentIdentifiers": {
                          "instrument/default/Figi": "BBG001S6PJ31"
                        },
                        "unitsFactor": 1,
                        "costFactor": 1
                      },
                      "outputTransitions": [
                        {
                          "instrumentIdentifiers": {
                            "instrument/default/Figi": "BBG001S6PJ31"
                          },
                          "unitsFactor": 2,
                          "costFactor": 1
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/UpsertCorporateActionRequest"
                },
                "description": "The corporate action definitions",
                "nullable": true
              },
              "example": [
                {
                  "corporateActionCode": "MyStockSplitId",
                  "description": "2-for-1 stock split of instrument BBG001S6PJ31",
                  "announcementDate": "2018-03-01T00:00:00.0000000+00:00",
                  "exDate": "2018-06-01T00:00:00.0000000+00:00",
                  "recordDate": "2018-06-02T00:00:00.0000000+00:00",
                  "paymentDate": "2018-08-02T00:00:00.0000000+00:00",
                  "transitions": [
                    {
                      "inputTransition": {
                        "instrumentIdentifiers": {
                          "instrument/default/Figi": "BBG001S6PJ31"
                        },
                        "unitsFactor": 1,
                        "costFactor": 1
                      },
                      "outputTransitions": [
                        {
                          "instrumentIdentifiers": {
                            "instrument/default/Figi": "BBG001S6PJ31"
                          },
                          "unitsFactor": 2,
                          "costFactor": 1
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          }
        },
        "responses": {
          "201": {
            "description": "The created corporate actions",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertCorporateActionsResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertCorporateActionsResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertCorporateActionsResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      },
      "get": {
        "tags": [
          "Corporate Action Sources"
        ],
        "summary": "[EARLY ACCESS] GetCorporateActions: List corporate actions (instrument transition events) from the corporate action source.",
        "description": "Get corporate actions from a particular corporate action source.",
        "operationId": "GetCorporateActions",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the corporate action source.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the corporate action source.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the corporate action source.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the corporate action source.",
              "nullable": true
            }
          },
          {
            "name": "fromEffectiveAt",
            "in": "query",
            "description": "Optional. The start effective date of the data range.",
            "schema": {
              "maxLength": 256,
              "minLength": 0,
              "pattern": "^[a-zA-Z0-9\\-_\\+:\\.]+$",
              "type": "string",
              "description": "Optional. The start effective date of the data range.",
              "format": "dateorcutlabel",
              "nullable": true
            }
          },
          {
            "name": "toEffectiveAt",
            "in": "query",
            "description": "Optional. The end effective date of the data range.",
            "schema": {
              "maxLength": 256,
              "minLength": 0,
              "pattern": "^[a-zA-Z0-9\\-_\\+:\\.]+$",
              "type": "string",
              "description": "Optional. The end effective date of the data range.",
              "format": "dateorcutlabel",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "Optional. The AsAt date of the data.",
            "schema": {
              "type": "string",
              "description": "Optional. The AsAt date of the data.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "Optional. Order the results by these fields. Use use the '-' sign to denote descending order e.g. -MyFieldName",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Optional. Order the results by these fields. Use use the '-' sign to denote descending order e.g. -MyFieldName",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Optional. When paginating, limit the results to this number.",
            "schema": {
              "type": "integer",
              "description": "Optional. When paginating, limit the results to this number.",
              "format": "int32",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Optional. Expression to filter the result set.\r\n            For example, to filter on the Announcement Date, use \"announcementDate eq '2020-03-06'\"\r\n            Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "maxLength": 16384,
              "minLength": 0,
              "pattern": "^[\\s\\S]*$",
              "type": "string",
              "description": "Optional. Expression to filter the result set.\r\n            For example, to filter on the Announcement Date, use \"announcementDate eq '2020-03-06'\"\r\n            Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Corporate Actions",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfCorporateAction"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfCorporateAction"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfCorporateAction"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/datatypes/{scope}": {
      "get": {
        "tags": [
          "Data Types"
        ],
        "summary": "ListDataTypes: List data types",
        "description": "List all data types in a specified scope",
        "operationId": "ListDataTypes",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The requested scope of the data types",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The requested scope of the data types",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The as at of the requested data types",
            "schema": {
              "type": "string",
              "description": "The as at of the requested data types",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "includeSystem",
            "in": "query",
            "description": "Whether to additionally include those data types in the \"system\" scope",
            "schema": {
              "type": "boolean",
              "description": "Whether to additionally include those data types in the \"system\" scope",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "Optional. Order the results by these fields. Use use the '-' sign to denote descending order e.g. -MyFieldName",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Optional. Order the results by these fields. Use use the '-' sign to denote descending order e.g. -MyFieldName",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "start",
            "in": "query",
            "description": "Optional. When paginating, skip this number of results",
            "schema": {
              "type": "integer",
              "description": "Optional. When paginating, skip this number of results",
              "format": "int32",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Optional. When paginating, limit the number of returned results to this many.",
            "schema": {
              "type": "integer",
              "description": "Optional. When paginating, limit the number of returned results to this many.",
              "format": "int32",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Optional. Expression to filter the result set.\r\n            For example, to filter on the Display Name, use \"displayName eq 'string'\"\r\n            Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "maxLength": 16384,
              "minLength": 0,
              "pattern": "^[\\s\\S]*$",
              "type": "string",
              "description": "Optional. Expression to filter the result set.\r\n            For example, to filter on the Display Name, use \"displayName eq 'string'\"\r\n            Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfDataType"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfDataType"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfDataType"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      }
    },
    "/api/datatypes/{scope}/{code}": {
      "get": {
        "tags": [
          "Data Types"
        ],
        "summary": "GetDataType: Get data type definition",
        "description": "Get the definition of a specified data type",
        "operationId": "GetDataType",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the data type",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the data type",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the data type",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the data type",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the data type definition. Defaults to\r\n            return the latest version of the instrument definition if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to retrieve the data type definition. Defaults to\r\n            return the latest version of the instrument definition if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DataType"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataType"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataType"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      }
    },
    "/api/datatypes/{scope}/{code}/units": {
      "get": {
        "tags": [
          "Data Types"
        ],
        "summary": "[EARLY ACCESS] GetUnitsFromDataType: Get units from data type",
        "description": "Get the definitions of the specified units associated bound to a specific data type",
        "operationId": "GetUnitsFromDataType",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the data type",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the data type",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the data type",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the data type",
              "nullable": true
            }
          },
          {
            "name": "units",
            "in": "query",
            "description": "One or more unit identifiers for which the definition is being requested",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "One or more unit identifiers for which the definition is being requested",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Optional. Expression to filter the result set. \r\n            For example, to filter on the Schema, use \"schema eq 'string'\"\r\n            Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "maxLength": 16384,
              "minLength": 0,
              "pattern": "^[\\s\\S]*$",
              "type": "string",
              "description": "Optional. Expression to filter the result set. \r\n            For example, to filter on the Schema, use \"schema eq 'string'\"\r\n            Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "Optional. The as at of the requested data type",
            "schema": {
              "type": "string",
              "description": "Optional. The as at of the requested data type",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfIUnitDefinitionDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfIUnitDefinitionDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfIUnitDefinitionDto"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/derivedtransactionportfolios/{scope}": {
      "post": {
        "tags": [
          "Derived Transaction Portfolios"
        ],
        "summary": "CreateDerivedPortfolio: Create derived portfolio",
        "description": "Create a derived transaction portfolio from a parent transaction portfolio (which may itself be derived).",
        "operationId": "CreateDerivedPortfolio",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope in which to create the derived transaction portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope in which to create the derived transaction portfolio.",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "The definition of the derived transaction portfolio.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateDerivedTransactionPortfolioRequest"
              },
              "example": {
                "displayName": "MyDerivedPortfolioName",
                "description": "Example long form portfolio description",
                "code": "MyDerivedPortfolioCode",
                "parentPortfolioId": {
                  "scope": "MyParentPortfolioScope",
                  "code": "MyParentPortfolioCode"
                },
                "corporateActionSourceId": {
                  "scope": "MyScope",
                  "code": "MyCorporateActionSourceId"
                },
                "accountingMethod": "FirstInFirstOut",
                "subHoldingKeys": [
                  "Transaction/MyScope/Strategy",
                  "Transaction/MyScope/SubAccount"
                ]
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateDerivedTransactionPortfolioRequest"
              },
              "example": {
                "displayName": "MyDerivedPortfolioName",
                "description": "Example long form portfolio description",
                "code": "MyDerivedPortfolioCode",
                "parentPortfolioId": {
                  "scope": "MyParentPortfolioScope",
                  "code": "MyParentPortfolioCode"
                },
                "corporateActionSourceId": {
                  "scope": "MyScope",
                  "code": "MyCorporateActionSourceId"
                },
                "accountingMethod": "FirstInFirstOut",
                "subHoldingKeys": [
                  "Transaction/MyScope/Strategy",
                  "Transaction/MyScope/SubAccount"
                ]
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateDerivedTransactionPortfolioRequest"
              },
              "example": {
                "displayName": "MyDerivedPortfolioName",
                "description": "Example long form portfolio description",
                "code": "MyDerivedPortfolioCode",
                "parentPortfolioId": {
                  "scope": "MyParentPortfolioScope",
                  "code": "MyParentPortfolioCode"
                },
                "corporateActionSourceId": {
                  "scope": "MyScope",
                  "code": "MyCorporateActionSourceId"
                },
                "accountingMethod": "FirstInFirstOut",
                "subHoldingKeys": [
                  "Transaction/MyScope/Strategy",
                  "Transaction/MyScope/SubAccount"
                ]
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateDerivedTransactionPortfolioRequest"
              },
              "example": {
                "displayName": "MyDerivedPortfolioName",
                "description": "Example long form portfolio description",
                "code": "MyDerivedPortfolioCode",
                "parentPortfolioId": {
                  "scope": "MyParentPortfolioScope",
                  "code": "MyParentPortfolioCode"
                },
                "corporateActionSourceId": {
                  "scope": "MyScope",
                  "code": "MyCorporateActionSourceId"
                },
                "accountingMethod": "FirstInFirstOut",
                "subHoldingKeys": [
                  "Transaction/MyScope/Strategy",
                  "Transaction/MyScope/SubAccount"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The created derived portfolio, with populated id",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Portfolio"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Portfolio"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Portfolio"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      }
    },
    "/api/derivedtransactionportfolios/{scope}/{code}/details": {
      "delete": {
        "tags": [
          "Derived Transaction Portfolios"
        ],
        "summary": "[EARLY ACCESS] DeleteDerivedPortfolioDetails: Delete derived portfolio details",
        "description": "Delete all the portfolio details for a derived transaction portfolio.",
        "operationId": "DeleteDerivedPortfolioDetails",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the derived transaction portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the derived transaction portfolio.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the derived transaction portfolio. Together with the scope this uniquely identifies\r\n            the derived transaction portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the derived transaction portfolio. Together with the scope this uniquely identifies\r\n            the derived transaction portfolio.",
              "nullable": true
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective date of the change.",
            "schema": {
              "maxLength": 256,
              "minLength": 0,
              "pattern": "^[a-zA-Z0-9\\-_\\+:\\.]+$",
              "type": "string",
              "description": "The effective date of the change.",
              "format": "dateorcutlabel",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/entities/changes/portfolios": {
      "get": {
        "tags": [
          "Entities"
        ],
        "summary": "[EARLY ACCESS] GetPortfolioChanges: Get the next change to each portfolio in a scope.",
        "description": "Gets the time of the next (earliest effective at) modification (correction and/or amendment) to each portfolio in a scope relative to a point in bitemporal time.\r\nIncludes changes from parent portfolios in different scopes.\r\nExcludes changes from subcriptions (e.g corporate actions).",
        "operationId": "GetPortfolioChanges",
        "parameters": [
          {
            "name": "scope",
            "in": "query",
            "description": "The scope",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope"
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective date of the origin.",
            "required": true,
            "schema": {
              "maxLength": 256,
              "minLength": 0,
              "pattern": "^[a-zA-Z0-9\\-_\\+:\\.]+$",
              "type": "string",
              "description": "The effective date of the origin.",
              "format": "dateorcutlabel"
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The as-at date of the origin.",
            "schema": {
              "type": "string",
              "description": "The as-at date of the origin.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "A list of portfolio changes in the requested scope relative to the specified time.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfChange"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfChange"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfChange"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/instruments": {
      "post": {
        "tags": [
          "Instruments"
        ],
        "summary": "UpsertInstruments: Upsert instruments",
        "description": "Create or update one or more instruments in the instrument master. An instrument is updated\r\nif it already exists and created if it does not.\r\n            \r\nIn the request, each instrument definition should be keyed by a unique correlation ID. This ID is ephemeral\r\nand not stored by LUSID. It serves only to easily identify each instrument in the response.\r\n            \r\nNote that an instrument must have at least one unique identifier, which is a combination of a type\r\n(such as 'Figi') and a value (such as 'BBG000BS1N49'). In addition, a random value is automatically\r\ngenerated for a LUSID Instrument ID (LUID) unique type by the system. For more information, see\r\nhttps://support.lusid.com/knowledgebase/article/KA-01862.\r\n            \r\nThe response returns both the collection of successfully created or updated instruments, as well as those\r\nthat failed. For each failure, a reason is provided. It is important to check the failed set for\r\nunsuccessful results.\n\nThe maximum number of instruments that this method can upsert per request is 2,000.",
        "operationId": "UpsertInstruments",
        "parameters": [
          {
            "name": "scope",
            "in": "query",
            "description": "The scope in which the instrument lies. When not supplied the scope is 'default'.",
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope in which the instrument lies. When not supplied the scope is 'default'.",
              "default": "default",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "The definitions of the instruments to create or update.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/InstrumentDefinition"
                },
                "description": "The definitions of the instruments to create or update."
              },
              "example": {
                "request_id_1": {
                  "name": "Instrument name",
                  "identifiers": {
                    "clientInternal": {
                      "value": "some-identifier",
                      "effectiveAt": "0001-01-01T00:00:00.0000000+00:00"
                    },
                    "figi": {
                      "value": "some-figi-code",
                      "effectiveAt": "0001-01-01T00:00:00.0000000+00:00"
                    },
                    "isin": {
                      "value": "some-isin-code",
                      "effectiveAt": "0001-01-01T00:00:00.0000000+00:00"
                    }
                  },
                  "properties": [
                    {
                      "key": "Instrument/someScope/somePropertyName",
                      "value": {
                        "labelValue": "some-property-value"
                      },
                      "effectiveFrom": "2018-06-18T09:00:00.0000000+00:00"
                    }
                  ],
                  "lookThroughPortfolioId": {
                    "scope": "MyScope",
                    "code": "portfolio-code"
                  },
                  "definition": {
                    "instrumentFormat": {
                      "sourceSystem": "systemA",
                      "vendor": "Unknown",
                      "version": "1.0.0"
                    },
                    "content": "{\"some-key\": \"some-value\"}",
                    "instrumentType": "ExoticInstrument"
                  }
                },
                "request_id_2": {
                  "name": "Instrument name",
                  "identifiers": {
                    "clientInternal": {
                      "value": "some-identifier-2",
                      "effectiveAt": "0001-01-01T00:00:00.0000000+00:00"
                    },
                    "figi": {
                      "value": "some-figi-code-2",
                      "effectiveAt": "0001-01-01T00:00:00.0000000+00:00"
                    }
                  },
                  "properties": [],
                  "lookThroughPortfolioId": {
                    "scope": "MyScope",
                    "code": "portfolio-code"
                  },
                  "definition": {
                    "instrumentFormat": {
                      "sourceSystem": "systemA",
                      "vendor": "Unknown",
                      "version": "1.0.0"
                    },
                    "content": "{\"some-key\": \"some-value\"}",
                    "instrumentType": "ExoticInstrument"
                  }
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/InstrumentDefinition"
                },
                "description": "The definitions of the instruments to create or update."
              },
              "example": {
                "request_id_1": {
                  "name": "Instrument name",
                  "identifiers": {
                    "clientInternal": {
                      "value": "some-identifier",
                      "effectiveAt": "0001-01-01T00:00:00.0000000+00:00"
                    },
                    "figi": {
                      "value": "some-figi-code",
                      "effectiveAt": "0001-01-01T00:00:00.0000000+00:00"
                    },
                    "isin": {
                      "value": "some-isin-code",
                      "effectiveAt": "0001-01-01T00:00:00.0000000+00:00"
                    }
                  },
                  "properties": [
                    {
                      "key": "Instrument/someScope/somePropertyName",
                      "value": {
                        "labelValue": "some-property-value"
                      },
                      "effectiveFrom": "2018-06-18T09:00:00.0000000+00:00"
                    }
                  ],
                  "lookThroughPortfolioId": {
                    "scope": "MyScope",
                    "code": "portfolio-code"
                  },
                  "definition": {
                    "instrumentFormat": {
                      "sourceSystem": "systemA",
                      "vendor": "Unknown",
                      "version": "1.0.0"
                    },
                    "content": "{\"some-key\": \"some-value\"}",
                    "instrumentType": "ExoticInstrument"
                  }
                },
                "request_id_2": {
                  "name": "Instrument name",
                  "identifiers": {
                    "clientInternal": {
                      "value": "some-identifier-2",
                      "effectiveAt": "0001-01-01T00:00:00.0000000+00:00"
                    },
                    "figi": {
                      "value": "some-figi-code-2",
                      "effectiveAt": "0001-01-01T00:00:00.0000000+00:00"
                    }
                  },
                  "properties": [],
                  "lookThroughPortfolioId": {
                    "scope": "MyScope",
                    "code": "portfolio-code"
                  },
                  "definition": {
                    "instrumentFormat": {
                      "sourceSystem": "systemA",
                      "vendor": "Unknown",
                      "version": "1.0.0"
                    },
                    "content": "{\"some-key\": \"some-value\"}",
                    "instrumentType": "ExoticInstrument"
                  }
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/InstrumentDefinition"
                },
                "description": "The definitions of the instruments to create or update."
              },
              "example": {
                "request_id_1": {
                  "name": "Instrument name",
                  "identifiers": {
                    "clientInternal": {
                      "value": "some-identifier",
                      "effectiveAt": "0001-01-01T00:00:00.0000000+00:00"
                    },
                    "figi": {
                      "value": "some-figi-code",
                      "effectiveAt": "0001-01-01T00:00:00.0000000+00:00"
                    },
                    "isin": {
                      "value": "some-isin-code",
                      "effectiveAt": "0001-01-01T00:00:00.0000000+00:00"
                    }
                  },
                  "properties": [
                    {
                      "key": "Instrument/someScope/somePropertyName",
                      "value": {
                        "labelValue": "some-property-value"
                      },
                      "effectiveFrom": "2018-06-18T09:00:00.0000000+00:00"
                    }
                  ],
                  "lookThroughPortfolioId": {
                    "scope": "MyScope",
                    "code": "portfolio-code"
                  },
                  "definition": {
                    "instrumentFormat": {
                      "sourceSystem": "systemA",
                      "vendor": "Unknown",
                      "version": "1.0.0"
                    },
                    "content": "{\"some-key\": \"some-value\"}",
                    "instrumentType": "ExoticInstrument"
                  }
                },
                "request_id_2": {
                  "name": "Instrument name",
                  "identifiers": {
                    "clientInternal": {
                      "value": "some-identifier-2",
                      "effectiveAt": "0001-01-01T00:00:00.0000000+00:00"
                    },
                    "figi": {
                      "value": "some-figi-code-2",
                      "effectiveAt": "0001-01-01T00:00:00.0000000+00:00"
                    }
                  },
                  "properties": [],
                  "lookThroughPortfolioId": {
                    "scope": "MyScope",
                    "code": "portfolio-code"
                  },
                  "definition": {
                    "instrumentFormat": {
                      "sourceSystem": "systemA",
                      "vendor": "Unknown",
                      "version": "1.0.0"
                    },
                    "content": "{\"some-key\": \"some-value\"}",
                    "instrumentType": "ExoticInstrument"
                  }
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/InstrumentDefinition"
                },
                "description": "The definitions of the instruments to create or update."
              },
              "example": {
                "request_id_1": {
                  "name": "Instrument name",
                  "identifiers": {
                    "clientInternal": {
                      "value": "some-identifier",
                      "effectiveAt": "0001-01-01T00:00:00.0000000+00:00"
                    },
                    "figi": {
                      "value": "some-figi-code",
                      "effectiveAt": "0001-01-01T00:00:00.0000000+00:00"
                    },
                    "isin": {
                      "value": "some-isin-code",
                      "effectiveAt": "0001-01-01T00:00:00.0000000+00:00"
                    }
                  },
                  "properties": [
                    {
                      "key": "Instrument/someScope/somePropertyName",
                      "value": {
                        "labelValue": "some-property-value"
                      },
                      "effectiveFrom": "2018-06-18T09:00:00.0000000+00:00"
                    }
                  ],
                  "lookThroughPortfolioId": {
                    "scope": "MyScope",
                    "code": "portfolio-code"
                  },
                  "definition": {
                    "instrumentFormat": {
                      "sourceSystem": "systemA",
                      "vendor": "Unknown",
                      "version": "1.0.0"
                    },
                    "content": "{\"some-key\": \"some-value\"}",
                    "instrumentType": "ExoticInstrument"
                  }
                },
                "request_id_2": {
                  "name": "Instrument name",
                  "identifiers": {
                    "clientInternal": {
                      "value": "some-identifier-2",
                      "effectiveAt": "0001-01-01T00:00:00.0000000+00:00"
                    },
                    "figi": {
                      "value": "some-figi-code-2",
                      "effectiveAt": "0001-01-01T00:00:00.0000000+00:00"
                    }
                  },
                  "properties": [],
                  "lookThroughPortfolioId": {
                    "scope": "MyScope",
                    "code": "portfolio-code"
                  },
                  "definition": {
                    "instrumentFormat": {
                      "sourceSystem": "systemA",
                      "vendor": "Unknown",
                      "version": "1.0.0"
                    },
                    "content": "{\"some-key\": \"some-value\"}",
                    "instrumentType": "ExoticInstrument"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "The successfully created or updated instruments along with any failures",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertInstrumentsResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertInstrumentsResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertInstrumentsResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      },
      "get": {
        "tags": [
          "Instruments"
        ],
        "summary": "ListInstruments: List instruments",
        "description": "List all the instruments in the instrument master.\r\n            \r\nTo retrieve a particular set of instruments instead, use the Get instruments endpoint.\n\nThe maximum number of instruments that this method can list per request is 2,000.",
        "operationId": "ListInstruments",
        "parameters": [
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to list instruments. Defaults to returning the latest\r\n             version of each instrument if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to list instruments. Defaults to returning the latest\r\n             version of each instrument if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime or cut label at which to list instruments.\r\n             Defaults to the current LUSID system datetime if not specified.",
            "schema": {
              "type": "string",
              "description": "The effective datetime or cut label at which to list instruments.\r\n             Defaults to the current LUSID system datetime if not specified.",
              "format": "dateorcutlabel",
              "nullable": true
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "The pagination token to use to continue listing instruments; this value is returned from\r\n             the previous call. If a pagination token is provided, the <i>sortBy</i>, <i>filter</i>, <i>effectiveAt</i> and\r\n             <i>asAt</i> fields must not have changed since the original request. Also, a <i>start</i> value cannot be\r\n             provided. For more information, see https://support.lusid.com/knowledgebase/article/KA-01915.",
            "schema": {
              "maxLength": 500,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\+/]*={0,3}$",
              "type": "string",
              "description": "The pagination token to use to continue listing instruments; this value is returned from\r\n             the previous call. If a pagination token is provided, the <i>sortBy</i>, <i>filter</i>, <i>effectiveAt</i> and\r\n             <i>asAt</i> fields must not have changed since the original request. Also, a <i>start</i> value cannot be\r\n             provided. For more information, see https://support.lusid.com/knowledgebase/article/KA-01915.",
              "nullable": true
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "Order results by particular fields. Use the '-' sign to denote descending order, for\r\n             example '-MyFieldName'.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Order results by particular fields. Use the '-' sign to denote descending order, for\r\n             example '-MyFieldName'.",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "start",
            "in": "query",
            "description": "When paginating, skip this number of results.",
            "schema": {
              "type": "integer",
              "description": "When paginating, skip this number of results.",
              "format": "int32",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "limit",
            "in": "query",
            "description": "When paginating, limit the results to this number.",
            "schema": {
              "maximum": 5000,
              "minimum": 1,
              "type": "integer",
              "description": "When paginating, limit the results to this number.",
              "format": "int32",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the result set. Defaults to filtering out inactive instruments\r\n             (that is, those that have been deleted). For more information about filtering results,\r\n             see https://support.lusid.com/knowledgebase/article/KA-01914.",
            "schema": {
              "maxLength": 16384,
              "minLength": 0,
              "pattern": "^[\\s\\S]*$",
              "type": "string",
              "description": "Expression to filter the result set. Defaults to filtering out inactive instruments\r\n             (that is, those that have been deleted). For more information about filtering results,\r\n             see https://support.lusid.com/knowledgebase/article/KA-01914.",
              "default": "State eq 'Active'",
              "nullable": true
            }
          },
          {
            "name": "instrumentPropertyKeys",
            "in": "query",
            "description": "A list of property keys from the 'Instrument' domain to decorate onto\r\n             instruments. These must have the format {domain}/{scope}/{code}, for example 'Instrument/system/Name'.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
              },
              "description": "A list of property keys from the 'Instrument' domain to decorate onto\r\n             instruments. These must have the format {domain}/{scope}/{code}, for example 'Instrument/system/Name'.",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "scope",
            "in": "query",
            "description": "The scope in which the instrument lies. When not supplied the scope is 'default'.",
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope in which the instrument lies. When not supplied the scope is 'default'.",
              "default": "default",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested instruments",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfInstrument"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfInstrument"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfInstrument"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      }
    },
    "/api/instruments/$get": {
      "post": {
        "tags": [
          "Instruments"
        ],
        "summary": "GetInstruments: Get instruments",
        "description": "Retrieve the definition of one or more instruments, as identified by a collection of unique identifiers.\r\n            \r\nNote that to retrieve all the instruments in the instrument master, use the List instruments endpoint instead.",
        "operationId": "GetInstruments",
        "parameters": [
          {
            "name": "identifierType",
            "in": "query",
            "description": "The unique identifier type to use, for example 'Figi'.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The unique identifier type to use, for example 'Figi'."
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime or cut label at which to retrieve the instrument definitions.\r\n             Defaults to the current LUSID system datetime if not specified.",
            "schema": {
              "type": "string",
              "description": "The effective datetime or cut label at which to retrieve the instrument definitions.\r\n             Defaults to the current LUSID system datetime if not specified.",
              "format": "dateorcutlabel",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the instrument definitions.\r\n             Defaults to returning the latest version of each instrument definition if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to retrieve the instrument definitions.\r\n             Defaults to returning the latest version of each instrument definition if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "propertyKeys",
            "in": "query",
            "description": "A list of property keys from the 'Instrument' domain to decorate onto the instrument.\r\n             These must have the format {domain}/{scope}/{code}, for example 'Instrument/system/Name'.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
              },
              "description": "A list of property keys from the 'Instrument' domain to decorate onto the instrument.\r\n             These must have the format {domain}/{scope}/{code}, for example 'Instrument/system/Name'.",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "scope",
            "in": "query",
            "description": "The scope in which the instrument lies. When not supplied the scope is 'default'.",
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope in which the instrument lies. When not supplied the scope is 'default'.",
              "default": "default",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "A list of one or more <i>identifierType</i> values to use to identify instruments.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "A list of one or more <i>identifierType</i> values to use to identify instruments."
              },
              "example": [
                "instrument-identifier-1",
                "instrument-identifier-2"
              ]
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "A list of one or more <i>identifierType</i> values to use to identify instruments."
              },
              "example": [
                "instrument-identifier-1",
                "instrument-identifier-2"
              ]
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "A list of one or more <i>identifierType</i> values to use to identify instruments."
              },
              "example": [
                "instrument-identifier-1",
                "instrument-identifier-2"
              ]
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "A list of one or more <i>identifierType</i> values to use to identify instruments."
              },
              "example": [
                "instrument-identifier-1",
                "instrument-identifier-2"
              ]
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The requested instruments which could be identified along with any failures",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GetInstrumentsResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetInstrumentsResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetInstrumentsResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      }
    },
    "/api/instruments/$upsertproperties": {
      "post": {
        "tags": [
          "Instruments"
        ],
        "summary": "UpsertInstrumentsProperties: Upsert instruments properties",
        "description": "Create or update one or more properties for particular instruments.\r\n            \r\nEach instrument property is updated if it exists and created if it does not. For any failures, a reason\r\nis provided.\r\n            \r\nProperties have an <i>effectiveFrom</i> datetime from which the property is valid, and an <i>effectiveUntil</i>\r\ndatetime until which the property is valid. Not supplying an <i>effectiveUntil</i> datetime results in the property being\r\nvalid indefinitely, or until the next <i>effectiveFrom</i> datetime of the property.",
        "operationId": "UpsertInstrumentsProperties",
        "parameters": [
          {
            "name": "scope",
            "in": "query",
            "description": "The scope in which the instrument lies. When not supplied the scope is 'default'.",
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope in which the instrument lies. When not supplied the scope is 'default'.",
              "default": "default",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "A list of instruments and associated instrument properties to create or update.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/UpsertInstrumentPropertyRequest"
                },
                "description": "A list of instruments and associated instrument properties to create or update."
              },
              "example": [
                {
                  "identifierType": "LusidInstrumentId",
                  "identifier": "LUID_00000000",
                  "properties": [
                    {
                      "key": "Instrument/MyScope/SomePropertyName",
                      "value": {
                        "labelValue": "SomeValue1"
                      },
                      "effectiveFrom": "2016-09-15T12:00:00.0000000+00:00"
                    },
                    {
                      "key": "Instrument/MyScope/SomePropertyName",
                      "value": {
                        "labelValue": "SomeValue2"
                      },
                      "effectiveFrom": "2017-08-10T12:00:00.0000000+00:00"
                    },
                    {
                      "key": "Instrument/MyScope/AnotherPropertyName",
                      "value": {
                        "labelValue": "AnotherValue1"
                      },
                      "effectiveFrom": "2018-03-05T12:00:00.0000000+00:00",
                      "effectiveUntil": "2019-06-01T12:00:00.0000000+00:00"
                    },
                    {
                      "key": "Instrument/MyScope/AnotherPropertyName",
                      "value": {
                        "labelValue": "AnotherValue2"
                      },
                      "effectiveFrom": "2020-03-15T12:00:00.0000000+00:00",
                      "effectiveUntil": "2021-01-15T12:00:00.0000000+00:00"
                    }
                  ]
                }
              ]
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/UpsertInstrumentPropertyRequest"
                },
                "description": "A list of instruments and associated instrument properties to create or update."
              },
              "example": [
                {
                  "identifierType": "LusidInstrumentId",
                  "identifier": "LUID_00000000",
                  "properties": [
                    {
                      "key": "Instrument/MyScope/SomePropertyName",
                      "value": {
                        "labelValue": "SomeValue1"
                      },
                      "effectiveFrom": "2016-09-15T12:00:00.0000000+00:00"
                    },
                    {
                      "key": "Instrument/MyScope/SomePropertyName",
                      "value": {
                        "labelValue": "SomeValue2"
                      },
                      "effectiveFrom": "2017-08-10T12:00:00.0000000+00:00"
                    },
                    {
                      "key": "Instrument/MyScope/AnotherPropertyName",
                      "value": {
                        "labelValue": "AnotherValue1"
                      },
                      "effectiveFrom": "2018-03-05T12:00:00.0000000+00:00",
                      "effectiveUntil": "2019-06-01T12:00:00.0000000+00:00"
                    },
                    {
                      "key": "Instrument/MyScope/AnotherPropertyName",
                      "value": {
                        "labelValue": "AnotherValue2"
                      },
                      "effectiveFrom": "2020-03-15T12:00:00.0000000+00:00",
                      "effectiveUntil": "2021-01-15T12:00:00.0000000+00:00"
                    }
                  ]
                }
              ]
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/UpsertInstrumentPropertyRequest"
                },
                "description": "A list of instruments and associated instrument properties to create or update."
              },
              "example": [
                {
                  "identifierType": "LusidInstrumentId",
                  "identifier": "LUID_00000000",
                  "properties": [
                    {
                      "key": "Instrument/MyScope/SomePropertyName",
                      "value": {
                        "labelValue": "SomeValue1"
                      },
                      "effectiveFrom": "2016-09-15T12:00:00.0000000+00:00"
                    },
                    {
                      "key": "Instrument/MyScope/SomePropertyName",
                      "value": {
                        "labelValue": "SomeValue2"
                      },
                      "effectiveFrom": "2017-08-10T12:00:00.0000000+00:00"
                    },
                    {
                      "key": "Instrument/MyScope/AnotherPropertyName",
                      "value": {
                        "labelValue": "AnotherValue1"
                      },
                      "effectiveFrom": "2018-03-05T12:00:00.0000000+00:00",
                      "effectiveUntil": "2019-06-01T12:00:00.0000000+00:00"
                    },
                    {
                      "key": "Instrument/MyScope/AnotherPropertyName",
                      "value": {
                        "labelValue": "AnotherValue2"
                      },
                      "effectiveFrom": "2020-03-15T12:00:00.0000000+00:00",
                      "effectiveUntil": "2021-01-15T12:00:00.0000000+00:00"
                    }
                  ]
                }
              ]
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/UpsertInstrumentPropertyRequest"
                },
                "description": "A list of instruments and associated instrument properties to create or update."
              },
              "example": [
                {
                  "identifierType": "LusidInstrumentId",
                  "identifier": "LUID_00000000",
                  "properties": [
                    {
                      "key": "Instrument/MyScope/SomePropertyName",
                      "value": {
                        "labelValue": "SomeValue1"
                      },
                      "effectiveFrom": "2016-09-15T12:00:00.0000000+00:00"
                    },
                    {
                      "key": "Instrument/MyScope/SomePropertyName",
                      "value": {
                        "labelValue": "SomeValue2"
                      },
                      "effectiveFrom": "2017-08-10T12:00:00.0000000+00:00"
                    },
                    {
                      "key": "Instrument/MyScope/AnotherPropertyName",
                      "value": {
                        "labelValue": "AnotherValue1"
                      },
                      "effectiveFrom": "2018-03-05T12:00:00.0000000+00:00",
                      "effectiveUntil": "2019-06-01T12:00:00.0000000+00:00"
                    },
                    {
                      "key": "Instrument/MyScope/AnotherPropertyName",
                      "value": {
                        "labelValue": "AnotherValue2"
                      },
                      "effectiveFrom": "2020-03-15T12:00:00.0000000+00:00",
                      "effectiveUntil": "2021-01-15T12:00:00.0000000+00:00"
                    }
                  ]
                }
              ]
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "The asAt datetime at which the properties were created or updated.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertInstrumentPropertiesResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertInstrumentPropertiesResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertInstrumentPropertiesResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      }
    },
    "/api/instruments/identifierTypes": {
      "get": {
        "tags": [
          "Instruments"
        ],
        "summary": "GetInstrumentIdentifierTypes: Get instrument identifier types",
        "description": "Retrieve a list of all valid instrument identifier types and whether they are unique or not.\r\n            \r\nAn instrument must have a value for at least one unique identifier type (it can have more than one unique type and value).\r\nIn addition, a value is automatically generated for a LUSID Instrument ID (LUID) unique type by the system.\r\n            \r\nAn instrument can have values for multiple non-unique identifier types (or it can have zero non-unique types and values).",
        "operationId": "GetInstrumentIdentifierTypes",
        "responses": {
          "200": {
            "description": "A list of valid instrument identifier types.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfInstrumentIdTypeDescriptor"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfInstrumentIdTypeDescriptor"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfInstrumentIdTypeDescriptor"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      }
    },
    "/api/instruments/{identifierType}/{identifier}": {
      "get": {
        "tags": [
          "Instruments"
        ],
        "summary": "GetInstrument: Get instrument",
        "description": "Retrieve the definition of a particular instrument, as identified by a particular unique identifier.",
        "operationId": "GetInstrument",
        "parameters": [
          {
            "name": "identifierType",
            "in": "path",
            "description": "The unique identifier type to use, for example 'Figi'.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The unique identifier type to use, for example 'Figi'.",
              "nullable": true
            }
          },
          {
            "name": "identifier",
            "in": "path",
            "description": "An <i>identifierType</i> value to use to identify the instrument, for example 'BBG000BLNNV0'.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "An <i>identifierType</i> value to use to identify the instrument, for example 'BBG000BLNNV0'.",
              "nullable": true
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime or cut label at which to retrieve the instrument.\r\n            Defaults to the current LUSID system datetime if not specified.",
            "schema": {
              "type": "string",
              "description": "The effective datetime or cut label at which to retrieve the instrument.\r\n            Defaults to the current LUSID system datetime if not specified.",
              "format": "dateorcutlabel",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the instrument. Defaults to\r\n            returning the latest version if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to retrieve the instrument. Defaults to\r\n            returning the latest version if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "propertyKeys",
            "in": "query",
            "description": "A list of property keys from the 'Instrument' domain to decorate onto the instrument.\r\n            These must have the format {domain}/{scope}/{code}, for example 'Instrument/system/Name'.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
              },
              "description": "A list of property keys from the 'Instrument' domain to decorate onto the instrument.\r\n            These must have the format {domain}/{scope}/{code}, for example 'Instrument/system/Name'.",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "scope",
            "in": "query",
            "description": "The scope in which the instrument lies. When not supplied the scope is 'default'.",
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope in which the instrument lies. When not supplied the scope is 'default'.",
              "default": "default",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested instrument.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Instrument"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Instrument"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Instrument"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      },
      "post": {
        "tags": [
          "Instruments"
        ],
        "summary": "UpdateInstrumentIdentifier: Update instrument identifier",
        "description": "Create, update or delete a particular instrument identifier for an instrument.\r\n            \r\nTo delete the identifier, leave the value unspecified in the request. If not being deleted, the\r\nidentifier is updated if it exists and created if it does not.",
        "operationId": "UpdateInstrumentIdentifier",
        "parameters": [
          {
            "name": "identifierType",
            "in": "path",
            "description": "The unique identifier type to search, for example 'Figi'.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The unique identifier type to search, for example 'Figi'.",
              "nullable": true
            }
          },
          {
            "name": "identifier",
            "in": "path",
            "description": "An <i>identifierType</i> value to use to identify the instrument, for example 'BBG000BLNNV0'.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "An <i>identifierType</i> value to use to identify the instrument, for example 'BBG000BLNNV0'.",
              "nullable": true
            }
          },
          {
            "name": "scope",
            "in": "query",
            "description": "The scope in which the instrument lies. When not supplied the scope is 'default'.",
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope in which the instrument lies. When not supplied the scope is 'default'.",
              "default": "default",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "The identifier to update or delete. This need not be the same value as the\r\n             'identifier' parameter used to retrieve the instrument.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateInstrumentIdentifierRequest"
              },
              "example": {
                "type": "Figi",
                "value": "updated-figi",
                "effectiveAt": "2018-02-01T10:00:00.0000000+00:00"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateInstrumentIdentifierRequest"
              },
              "example": {
                "type": "Figi",
                "value": "updated-figi",
                "effectiveAt": "2018-02-01T10:00:00.0000000+00:00"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateInstrumentIdentifierRequest"
              },
              "example": {
                "type": "Figi",
                "value": "updated-figi",
                "effectiveAt": "2018-02-01T10:00:00.0000000+00:00"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateInstrumentIdentifierRequest"
              },
              "example": {
                "type": "Figi",
                "value": "updated-figi",
                "effectiveAt": "2018-02-01T10:00:00.0000000+00:00"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The updated instrument definition with the identifier created, updated or deleted",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Instrument"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Instrument"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Instrument"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      },
      "delete": {
        "tags": [
          "Instruments"
        ],
        "summary": "[EARLY ACCESS] DeleteInstrument: Soft delete a single instrument",
        "description": "Soft delete a particular instrument, as identified by a particular instrument identifier.\r\n            \r\nOnce deleted, an instrument is marked as inactive and can no longer be referenced when creating or updating\r\ntransactions or holdings. You can still query existing transactions and holdings related to the\r\ndeleted instrument.",
        "operationId": "DeleteInstrument",
        "parameters": [
          {
            "name": "identifierType",
            "in": "path",
            "description": "The unique identifier type to search, for example 'Figi'.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The unique identifier type to search, for example 'Figi'.",
              "nullable": true
            }
          },
          {
            "name": "identifier",
            "in": "path",
            "description": "An <i>identifierType</i> value to use to identify the instrument, for example 'BBG000BLNNV0'.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "An <i>identifierType</i> value to use to identify the instrument, for example 'BBG000BLNNV0'.",
              "nullable": true
            }
          },
          {
            "name": "scope",
            "in": "query",
            "description": "The scope in which the instrument lies. When not supplied the scope is 'default'.",
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope in which the instrument lies. When not supplied the scope is 'default'.",
              "default": "default",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The datetime that the instrument was deleted",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteInstrumentResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteInstrumentResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteInstrumentResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/instruments/{identifierType}/{identifier}/properties/time-series": {
      "get": {
        "tags": [
          "Instruments"
        ],
        "summary": "[EARLY ACCESS] GetInstrumentPropertyTimeSeries: Get instrument property time series",
        "description": "Retrieve the complete time series (history) for a particular property of an instrument.",
        "operationId": "GetInstrumentPropertyTimeSeries",
        "parameters": [
          {
            "name": "identifierType",
            "in": "path",
            "description": "The unique identifier type to search, for example 'Figi'.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The unique identifier type to search, for example 'Figi'.",
              "nullable": true
            }
          },
          {
            "name": "identifier",
            "in": "path",
            "description": "An <i>identifierType</i> value to use to identify the instrument, for example 'BBG000BLNNV0'.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "An <i>identifierType</i> value to use to identify the instrument, for example 'BBG000BLNNV0'.",
              "nullable": true
            }
          },
          {
            "name": "propertyKey",
            "in": "query",
            "description": "The property key of a property from the 'Instrument' domain whose history to retrieve.\r\n            This must have the format {domain}/{scope}/{code}, for example 'Instrument/system/Name'.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
            }
          },
          {
            "name": "identifierEffectiveAt",
            "in": "query",
            "description": "The effective datetime used to resolve the instrument from the identifier.\r\n            Defaults to the current LUSID system datetime if not specified.",
            "schema": {
              "type": "string",
              "description": "The effective datetime used to resolve the instrument from the identifier.\r\n            Defaults to the current LUSID system datetime if not specified.",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the instrument's property history. Defaults to\r\n            returning the current datetime if not supplied.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to retrieve the instrument's property history. Defaults to\r\n            returning the current datetime if not supplied.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the results. For more information about filtering,\r\n            see https://support.lusid.com/knowledgebase/article/KA-01914.",
            "schema": {
              "maxLength": 16384,
              "minLength": 0,
              "pattern": "^[\\s\\S]*$",
              "type": "string",
              "description": "Expression to filter the results. For more information about filtering,\r\n            see https://support.lusid.com/knowledgebase/article/KA-01914.",
              "nullable": true
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "The pagination token to use to continue listing properties; this value is returned from\r\n            the previous call. If a pagination token is provided, the <i>filter</i>, <i>effectiveAt</i> and\r\n            <i>asAt</i> fields must not have changed since the original request. For more information, see\r\n            https://support.lusid.com/knowledgebase/article/KA-01915.",
            "schema": {
              "maxLength": 500,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\+/]*={0,3}$",
              "type": "string",
              "description": "The pagination token to use to continue listing properties; this value is returned from\r\n            the previous call. If a pagination token is provided, the <i>filter</i>, <i>effectiveAt</i> and\r\n            <i>asAt</i> fields must not have changed since the original request. For more information, see\r\n            https://support.lusid.com/knowledgebase/article/KA-01915.",
              "nullable": true
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "When paginating, limit the results to this number.",
            "schema": {
              "maximum": 5000,
              "minimum": 1,
              "type": "integer",
              "description": "When paginating, limit the results to this number.",
              "format": "int32",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "scope",
            "in": "query",
            "description": "The scope in which the instrument lies. When not supplied the scope is 'default'.",
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope in which the instrument lies. When not supplied the scope is 'default'.",
              "default": "default",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The time series of the property",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfPropertyInterval"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfPropertyInterval"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfPropertyInterval"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/instruments/{identifierType}/{identifier}/relationships": {
      "get": {
        "tags": [
          "Instruments"
        ],
        "summary": "[EARLY ACCESS] GetInstrumentRelationships: Get Instrument relationships",
        "description": "Get relationships for a particular Instrument.",
        "operationId": "GetInstrumentRelationships",
        "parameters": [
          {
            "name": "identifierType",
            "in": "path",
            "description": "An identifier type attached to the Instrument.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "An identifier type attached to the Instrument.",
              "nullable": true
            }
          },
          {
            "name": "identifier",
            "in": "path",
            "description": "The identifier value.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The identifier value.",
              "nullable": true
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime or cut label at which to get relationships. Defaults to the current LUSID system datetime if not specified.",
            "schema": {
              "maxLength": 256,
              "minLength": 0,
              "pattern": "^[a-zA-Z0-9\\-_\\+:\\.]+$",
              "type": "string",
              "description": "The effective datetime or cut label at which to get relationships. Defaults to the current LUSID system datetime if not specified.",
              "format": "dateorcutlabel",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve relationships. Defaults to return the latest LUSID AsAt time if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to retrieve relationships. Defaults to return the latest LUSID AsAt time if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter relationships. Users should provide null or empty string for this field until further notice.",
            "schema": {
              "maxLength": 16384,
              "minLength": 0,
              "pattern": "^[\\s\\S]*$",
              "type": "string",
              "description": "Expression to filter relationships. Users should provide null or empty string for this field until further notice.",
              "nullable": true
            }
          },
          {
            "name": "identifierTypes",
            "in": "query",
            "description": "Identifier types (as property keys) used for referencing Persons or Legal Entities.\r\n            These can be specified from the 'Person' or 'LegalEntity' domains and have the format {domain}/{scope}/{code}, for example\r\n            'Person/CompanyDetails/Role'. An Empty array may be used to return all related Entities.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
              },
              "description": "Identifier types (as property keys) used for referencing Persons or Legal Entities.\r\n            These can be specified from the 'Person' or 'LegalEntity' domains and have the format {domain}/{scope}/{code}, for example\r\n            'Person/CompanyDetails/Role'. An Empty array may be used to return all related Entities.",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "scope",
            "in": "query",
            "description": "The entity scope in which the instrument lies. When not supplied the scope is 'default'.",
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The entity scope in which the instrument lies. When not supplied the scope is 'default'.",
              "default": "default",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The relationships for the specified instrument.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfRelationship"
                },
                "example": {
                  "values": [
                    {
                      "relationshipDefinitionId": {
                        "scope": "securityReferenceData",
                        "code": "issuer"
                      },
                      "relatedEntity": {
                        "entityType": "LegalEntity",
                        "entityId": {
                          "identifierScope": "public",
                          "identifierType": "LEI",
                          "identifierValue": "HWUPKR0MPOU8FGXBT394"
                        },
                        "displayName": "APPLE INC",
                        "properties": {},
                        "scope": "uat",
                        "identifiers": [
                          {
                            "identifierType": "LEI",
                            "identifierValue": "HWUPKR0MPOU8FGXBT394"
                          }
                        ]
                      },
                      "traversalDirection": "In",
                      "traversalDescription": "issued by",
                      "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                      "effectiveUntil": "2022-01-01T12:00:00.0000000+00:00"
                    }
                  ],
                  "links": []
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfRelationship"
                },
                "example": {
                  "values": [
                    {
                      "relationshipDefinitionId": {
                        "scope": "securityReferenceData",
                        "code": "issuer"
                      },
                      "relatedEntity": {
                        "entityType": "LegalEntity",
                        "entityId": {
                          "identifierScope": "public",
                          "identifierType": "LEI",
                          "identifierValue": "HWUPKR0MPOU8FGXBT394"
                        },
                        "displayName": "APPLE INC",
                        "properties": {},
                        "scope": "uat",
                        "identifiers": [
                          {
                            "identifierType": "LEI",
                            "identifierValue": "HWUPKR0MPOU8FGXBT394"
                          }
                        ]
                      },
                      "traversalDirection": "In",
                      "traversalDescription": "issued by",
                      "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                      "effectiveUntil": "2022-01-01T12:00:00.0000000+00:00"
                    }
                  ],
                  "links": []
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfRelationship"
                },
                "example": {
                  "values": [
                    {
                      "relationshipDefinitionId": {
                        "scope": "securityReferenceData",
                        "code": "issuer"
                      },
                      "relatedEntity": {
                        "entityType": "LegalEntity",
                        "entityId": {
                          "identifierScope": "public",
                          "identifierType": "LEI",
                          "identifierValue": "HWUPKR0MPOU8FGXBT394"
                        },
                        "displayName": "APPLE INC",
                        "properties": {},
                        "scope": "uat",
                        "identifiers": [
                          {
                            "identifierType": "LEI",
                            "identifierValue": "HWUPKR0MPOU8FGXBT394"
                          }
                        ]
                      },
                      "traversalDirection": "In",
                      "traversalDescription": "issued by",
                      "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                      "effectiveUntil": "2022-01-01T12:00:00.0000000+00:00"
                    }
                  ],
                  "links": []
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/legalentities": {
      "post": {
        "tags": [
          "Legal Entities"
        ],
        "summary": "[EARLY ACCESS] UpsertLegalEntity: Upsert Legal Entity",
        "description": "Create or update a legal entity",
        "operationId": "UpsertLegalEntity",
        "requestBody": {
          "description": "Request to create or update a legal entity.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertLegalEntityRequest"
              },
              "example": {
                "identifiers": {
                  "legalEntity/ExternalIdentifier/LEI": {
                    "key": "LegalEntity/ExternalIdentifier/LEI",
                    "value": {
                      "labelValue": "LEI_12345678"
                    }
                  },
                  "legalEntity/InternalIdentifier/InternalLeiId": {
                    "key": "LegalEntity/InternalIdentifier/InternalLeiId",
                    "value": {
                      "labelValue": "Internal_XHSP2038"
                    }
                  }
                },
                "properties": {
                  "legalEntity/Details/Name": {
                    "key": "LegalEntity/Details/Name",
                    "value": {
                      "labelValue": "Legal Entity Inc."
                    }
                  },
                  "legalEntity/Details/Country": {
                    "key": "LegalEntity/Details/Country",
                    "value": {
                      "labelValue": "United Kingdom"
                    },
                    "effectiveFrom": "2016-01-01T00:00:00.0000000+00:00"
                  },
                  "legalEntity/Status/Active": {
                    "key": "LegalEntity/Status/Active",
                    "value": {
                      "labelValue": "Active"
                    },
                    "effectiveFrom": "2016-07-01T00:00:00.0000000+00:00"
                  }
                },
                "displayName": "LegalEntity1DisplayName",
                "description": "LegalEntity1Description",
                "counterpartyRiskInformation": {
                  "countryOfRisk": "UnitedKingdom",
                  "creditRatings": [
                    {
                      "ratingSource": "StandardAndPoors",
                      "rating": "AA+"
                    }
                  ],
                  "industryClassifiers": [
                    {
                      "classificationSystemName": "GICS2018",
                      "classificationCode": "10101010"
                    }
                  ]
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertLegalEntityRequest"
              },
              "example": {
                "identifiers": {
                  "legalEntity/ExternalIdentifier/LEI": {
                    "key": "LegalEntity/ExternalIdentifier/LEI",
                    "value": {
                      "labelValue": "LEI_12345678"
                    }
                  },
                  "legalEntity/InternalIdentifier/InternalLeiId": {
                    "key": "LegalEntity/InternalIdentifier/InternalLeiId",
                    "value": {
                      "labelValue": "Internal_XHSP2038"
                    }
                  }
                },
                "properties": {
                  "legalEntity/Details/Name": {
                    "key": "LegalEntity/Details/Name",
                    "value": {
                      "labelValue": "Legal Entity Inc."
                    }
                  },
                  "legalEntity/Details/Country": {
                    "key": "LegalEntity/Details/Country",
                    "value": {
                      "labelValue": "United Kingdom"
                    },
                    "effectiveFrom": "2016-01-01T00:00:00.0000000+00:00"
                  },
                  "legalEntity/Status/Active": {
                    "key": "LegalEntity/Status/Active",
                    "value": {
                      "labelValue": "Active"
                    },
                    "effectiveFrom": "2016-07-01T00:00:00.0000000+00:00"
                  }
                },
                "displayName": "LegalEntity1DisplayName",
                "description": "LegalEntity1Description",
                "counterpartyRiskInformation": {
                  "countryOfRisk": "UnitedKingdom",
                  "creditRatings": [
                    {
                      "ratingSource": "StandardAndPoors",
                      "rating": "AA+"
                    }
                  ],
                  "industryClassifiers": [
                    {
                      "classificationSystemName": "GICS2018",
                      "classificationCode": "10101010"
                    }
                  ]
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertLegalEntityRequest"
              },
              "example": {
                "identifiers": {
                  "legalEntity/ExternalIdentifier/LEI": {
                    "key": "LegalEntity/ExternalIdentifier/LEI",
                    "value": {
                      "labelValue": "LEI_12345678"
                    }
                  },
                  "legalEntity/InternalIdentifier/InternalLeiId": {
                    "key": "LegalEntity/InternalIdentifier/InternalLeiId",
                    "value": {
                      "labelValue": "Internal_XHSP2038"
                    }
                  }
                },
                "properties": {
                  "legalEntity/Details/Name": {
                    "key": "LegalEntity/Details/Name",
                    "value": {
                      "labelValue": "Legal Entity Inc."
                    }
                  },
                  "legalEntity/Details/Country": {
                    "key": "LegalEntity/Details/Country",
                    "value": {
                      "labelValue": "United Kingdom"
                    },
                    "effectiveFrom": "2016-01-01T00:00:00.0000000+00:00"
                  },
                  "legalEntity/Status/Active": {
                    "key": "LegalEntity/Status/Active",
                    "value": {
                      "labelValue": "Active"
                    },
                    "effectiveFrom": "2016-07-01T00:00:00.0000000+00:00"
                  }
                },
                "displayName": "LegalEntity1DisplayName",
                "description": "LegalEntity1Description",
                "counterpartyRiskInformation": {
                  "countryOfRisk": "UnitedKingdom",
                  "creditRatings": [
                    {
                      "ratingSource": "StandardAndPoors",
                      "rating": "AA+"
                    }
                  ],
                  "industryClassifiers": [
                    {
                      "classificationSystemName": "GICS2018",
                      "classificationCode": "10101010"
                    }
                  ]
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertLegalEntityRequest"
              },
              "example": {
                "identifiers": {
                  "legalEntity/ExternalIdentifier/LEI": {
                    "key": "LegalEntity/ExternalIdentifier/LEI",
                    "value": {
                      "labelValue": "LEI_12345678"
                    }
                  },
                  "legalEntity/InternalIdentifier/InternalLeiId": {
                    "key": "LegalEntity/InternalIdentifier/InternalLeiId",
                    "value": {
                      "labelValue": "Internal_XHSP2038"
                    }
                  }
                },
                "properties": {
                  "legalEntity/Details/Name": {
                    "key": "LegalEntity/Details/Name",
                    "value": {
                      "labelValue": "Legal Entity Inc."
                    }
                  },
                  "legalEntity/Details/Country": {
                    "key": "LegalEntity/Details/Country",
                    "value": {
                      "labelValue": "United Kingdom"
                    },
                    "effectiveFrom": "2016-01-01T00:00:00.0000000+00:00"
                  },
                  "legalEntity/Status/Active": {
                    "key": "LegalEntity/Status/Active",
                    "value": {
                      "labelValue": "Active"
                    },
                    "effectiveFrom": "2016-07-01T00:00:00.0000000+00:00"
                  }
                },
                "displayName": "LegalEntity1DisplayName",
                "description": "LegalEntity1Description",
                "counterpartyRiskInformation": {
                  "countryOfRisk": "UnitedKingdom",
                  "creditRatings": [
                    {
                      "ratingSource": "StandardAndPoors",
                      "rating": "AA+"
                    }
                  ],
                  "industryClassifiers": [
                    {
                      "classificationSystemName": "GICS2018",
                      "classificationCode": "10101010"
                    }
                  ]
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "The newly created or updated legal entity",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LegalEntity"
                },
                "example": {
                  "displayName": "LegalEntity1DisplayName",
                  "description": "LegalEntity1Description",
                  "href": "https://example.com",
                  "lusidLegalEntityId": "LUID_00003D4V",
                  "identifiers": {
                    "legalEntity/ExternalIdentifier/LEI": {
                      "key": "LegalEntity/ExternalIdentifier/LEI",
                      "value": {
                        "labelValue": "LEI_12345678"
                      }
                    },
                    "legalEntity/InternalIdentifier/InternalLeiId": {
                      "key": "LegalEntity/InternalIdentifier/InternalLeiId",
                      "value": {
                        "labelValue": "Internal_XHSP2038"
                      }
                    }
                  },
                  "properties": {
                    "legalEntity/Details/Name": {
                      "key": "LegalEntity/Details/Name",
                      "value": {
                        "labelValue": "Legal Entity Inc."
                      }
                    },
                    "legalEntity/Details/Country": {
                      "key": "LegalEntity/Details/Country",
                      "value": {
                        "labelValue": "United Kingdom"
                      },
                      "effectiveFrom": "2016-01-01T00:00:00.0000000+00:00"
                    },
                    "legalEntity/Status/Active": {
                      "key": "LegalEntity/Status/Active",
                      "value": {
                        "labelValue": "Active"
                      },
                      "effectiveFrom": "2016-07-01T00:00:00.0000000+00:00"
                    }
                  },
                  "counterpartyRiskInformation": {
                    "countryOfRisk": "UnitedKingdom",
                    "creditRatings": [
                      {
                        "ratingSource": "StandardAndPoors",
                        "rating": "AA+"
                      }
                    ],
                    "industryClassifiers": [
                      {
                        "classificationSystemName": "GICS2018",
                        "classificationCode": "10101010"
                      }
                    ]
                  },
                  "version": {
                    "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                    "asAtDate": "2019-01-01T12:00:00.0100000+00:00"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LegalEntity"
                },
                "example": {
                  "displayName": "LegalEntity1DisplayName",
                  "description": "LegalEntity1Description",
                  "href": "https://example.com",
                  "lusidLegalEntityId": "LUID_00003D4V",
                  "identifiers": {
                    "legalEntity/ExternalIdentifier/LEI": {
                      "key": "LegalEntity/ExternalIdentifier/LEI",
                      "value": {
                        "labelValue": "LEI_12345678"
                      }
                    },
                    "legalEntity/InternalIdentifier/InternalLeiId": {
                      "key": "LegalEntity/InternalIdentifier/InternalLeiId",
                      "value": {
                        "labelValue": "Internal_XHSP2038"
                      }
                    }
                  },
                  "properties": {
                    "legalEntity/Details/Name": {
                      "key": "LegalEntity/Details/Name",
                      "value": {
                        "labelValue": "Legal Entity Inc."
                      }
                    },
                    "legalEntity/Details/Country": {
                      "key": "LegalEntity/Details/Country",
                      "value": {
                        "labelValue": "United Kingdom"
                      },
                      "effectiveFrom": "2016-01-01T00:00:00.0000000+00:00"
                    },
                    "legalEntity/Status/Active": {
                      "key": "LegalEntity/Status/Active",
                      "value": {
                        "labelValue": "Active"
                      },
                      "effectiveFrom": "2016-07-01T00:00:00.0000000+00:00"
                    }
                  },
                  "counterpartyRiskInformation": {
                    "countryOfRisk": "UnitedKingdom",
                    "creditRatings": [
                      {
                        "ratingSource": "StandardAndPoors",
                        "rating": "AA+"
                      }
                    ],
                    "industryClassifiers": [
                      {
                        "classificationSystemName": "GICS2018",
                        "classificationCode": "10101010"
                      }
                    ]
                  },
                  "version": {
                    "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                    "asAtDate": "2019-01-01T12:00:00.0100000+00:00"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LegalEntity"
                },
                "example": {
                  "displayName": "LegalEntity1DisplayName",
                  "description": "LegalEntity1Description",
                  "href": "https://example.com",
                  "lusidLegalEntityId": "LUID_00003D4V",
                  "identifiers": {
                    "legalEntity/ExternalIdentifier/LEI": {
                      "key": "LegalEntity/ExternalIdentifier/LEI",
                      "value": {
                        "labelValue": "LEI_12345678"
                      }
                    },
                    "legalEntity/InternalIdentifier/InternalLeiId": {
                      "key": "LegalEntity/InternalIdentifier/InternalLeiId",
                      "value": {
                        "labelValue": "Internal_XHSP2038"
                      }
                    }
                  },
                  "properties": {
                    "legalEntity/Details/Name": {
                      "key": "LegalEntity/Details/Name",
                      "value": {
                        "labelValue": "Legal Entity Inc."
                      }
                    },
                    "legalEntity/Details/Country": {
                      "key": "LegalEntity/Details/Country",
                      "value": {
                        "labelValue": "United Kingdom"
                      },
                      "effectiveFrom": "2016-01-01T00:00:00.0000000+00:00"
                    },
                    "legalEntity/Status/Active": {
                      "key": "LegalEntity/Status/Active",
                      "value": {
                        "labelValue": "Active"
                      },
                      "effectiveFrom": "2016-07-01T00:00:00.0000000+00:00"
                    }
                  },
                  "counterpartyRiskInformation": {
                    "countryOfRisk": "UnitedKingdom",
                    "creditRatings": [
                      {
                        "ratingSource": "StandardAndPoors",
                        "rating": "AA+"
                      }
                    ],
                    "industryClassifiers": [
                      {
                        "classificationSystemName": "GICS2018",
                        "classificationCode": "10101010"
                      }
                    ]
                  },
                  "version": {
                    "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                    "asAtDate": "2019-01-01T12:00:00.0100000+00:00"
                  }
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      },
      "get": {
        "tags": [
          "Legal Entities"
        ],
        "summary": "[EARLY ACCESS] ListAllLegalEntities: List Legal Entities",
        "description": "List all legal entities which the user is entitled to see.",
        "operationId": "ListAllLegalEntities",
        "parameters": [
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime or cut label at which to list the legal entities. Defaults to the current LUSID\r\n            system datetime if not specified.",
            "schema": {
              "type": "string",
              "description": "The effective datetime or cut label at which to list the legal entities. Defaults to the current LUSID\r\n            system datetime if not specified.",
              "format": "dateorcutlabel",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to list the legal entities. Defaults to return the latest version\r\n            of each legal entities if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to list the legal entities. Defaults to return the latest version\r\n            of each legal entities if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "page",
            "in": "query",
            "description": "The pagination token to use to continue listing legal entities from a previous call to list legal entities. This\r\nvalue is returned from the previous call. If a pagination token is provided the filter, effectiveAt\r\nand asAt fields must not have changed since the original request.",
            "schema": {
              "maxLength": 500,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\+/]*={0,3}$",
              "type": "string",
              "description": "The pagination token to use to continue listing legal entities from a previous call to list legal entities. This\r\nvalue is returned from the previous call. If a pagination token is provided the filter, effectiveAt\r\nand asAt fields must not have changed since the original request.",
              "nullable": true
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "When paginating, limit the number of returned results to this many. Defaults to 5000 if not specified.",
            "schema": {
              "maximum": 5000,
              "minimum": 1,
              "type": "integer",
              "description": "When paginating, limit the number of returned results to this many. Defaults to 5000 if not specified.",
              "format": "int32",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the result set. \r\n            Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "maxLength": 16384,
              "minLength": 0,
              "pattern": "^[\\s\\S]*$",
              "type": "string",
              "description": "Expression to filter the result set. \r\n            Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
              "nullable": true
            }
          },
          {
            "name": "propertyKeys",
            "in": "query",
            "description": "A list of property keys or identifier types (as property keys) from the \"LegalEntity\" domain to include for each legal entity.\r\n            These take the format {domain}/{scope}/{code} e.g. \"LegalEntity/ContactDetails/Address\".",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
              },
              "description": "A list of property keys or identifier types (as property keys) from the \"LegalEntity\" domain to include for each legal entity.\r\n            These take the format {domain}/{scope}/{code} e.g. \"LegalEntity/ContactDetails/Address\".",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "All existing Legal Entities",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfLegalEntity"
                },
                "example": {
                  "values": [
                    {
                      "displayName": "LegalEntity1DisplayName",
                      "description": "LegalEntity1Description",
                      "href": "https://example.com",
                      "lusidLegalEntityId": "LUID_00003D4V",
                      "identifiers": {
                        "legalEntity/ExternalIdentifier/LEI": {
                          "key": "LegalEntity/ExternalIdentifier/LEI",
                          "value": {
                            "labelValue": "LEI_12345678"
                          }
                        },
                        "legalEntity/InternalIdentifier/InternalLeiId": {
                          "key": "LegalEntity/InternalIdentifier/InternalLeiId",
                          "value": {
                            "labelValue": "Internal_XHSP2038"
                          }
                        }
                      },
                      "properties": {
                        "legalEntity/Details/Name": {
                          "key": "LegalEntity/Details/Name",
                          "value": {
                            "labelValue": "Legal Entity Inc."
                          }
                        },
                        "legalEntity/Details/Country": {
                          "key": "LegalEntity/Details/Country",
                          "value": {
                            "labelValue": "United Kingdom"
                          },
                          "effectiveFrom": "2016-01-01T00:00:00.0000000+00:00"
                        },
                        "legalEntity/Status/Active": {
                          "key": "LegalEntity/Status/Active",
                          "value": {
                            "labelValue": "Active"
                          },
                          "effectiveFrom": "2016-07-01T00:00:00.0000000+00:00"
                        }
                      },
                      "counterpartyRiskInformation": {
                        "countryOfRisk": "UnitedKingdom",
                        "creditRatings": [
                          {
                            "ratingSource": "StandardAndPoors",
                            "rating": "AA+"
                          }
                        ],
                        "industryClassifiers": [
                          {
                            "classificationSystemName": "GICS2018",
                            "classificationCode": "10101010"
                          }
                        ]
                      },
                      "version": {
                        "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                        "asAtDate": "2019-01-01T12:00:00.0100000+00:00"
                      }
                    },
                    {
                      "displayName": "LegalEntity2DisplayName",
                      "description": "LegalEntity2Description",
                      "href": "https://example.com",
                      "lusidLegalEntityId": "LUID_00003D55",
                      "identifiers": {
                        "legalEntity/ExternalIdentifier/LEI": {
                          "key": "LegalEntity/ExternalIdentifier/LEI",
                          "value": {
                            "labelValue": "LEI_22345678"
                          }
                        },
                        "legalEntity/InternalIdentifier/InternalLeiId": {
                          "key": "LegalEntity/InternalIdentifier/InternalLeiId",
                          "value": {
                            "labelValue": "Internal_XHSP2038"
                          }
                        }
                      },
                      "properties": {
                        "legalEntity/Details/Name": {
                          "key": "LegalEntity/Details/Name",
                          "value": {
                            "labelValue": "Legal Entity 2 Inc."
                          }
                        },
                        "legalEntity/Details/Country": {
                          "key": "LegalEntity/Details/Country",
                          "value": {
                            "labelValue": "Germany"
                          },
                          "effectiveFrom": "2016-01-01T00:00:00.0000000+00:00"
                        },
                        "legalEntity/Status/Active": {
                          "key": "LegalEntity/Status/Active",
                          "value": {
                            "labelValue": "Active"
                          },
                          "effectiveFrom": "2016-04-01T00:00:00.0000000+00:00"
                        }
                      },
                      "version": {
                        "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                        "asAtDate": "2019-01-01T12:00:00.0100000+00:00"
                      }
                    }
                  ],
                  "href": "http://example.com",
                  "links": []
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfLegalEntity"
                },
                "example": {
                  "values": [
                    {
                      "displayName": "LegalEntity1DisplayName",
                      "description": "LegalEntity1Description",
                      "href": "https://example.com",
                      "lusidLegalEntityId": "LUID_00003D4V",
                      "identifiers": {
                        "legalEntity/ExternalIdentifier/LEI": {
                          "key": "LegalEntity/ExternalIdentifier/LEI",
                          "value": {
                            "labelValue": "LEI_12345678"
                          }
                        },
                        "legalEntity/InternalIdentifier/InternalLeiId": {
                          "key": "LegalEntity/InternalIdentifier/InternalLeiId",
                          "value": {
                            "labelValue": "Internal_XHSP2038"
                          }
                        }
                      },
                      "properties": {
                        "legalEntity/Details/Name": {
                          "key": "LegalEntity/Details/Name",
                          "value": {
                            "labelValue": "Legal Entity Inc."
                          }
                        },
                        "legalEntity/Details/Country": {
                          "key": "LegalEntity/Details/Country",
                          "value": {
                            "labelValue": "United Kingdom"
                          },
                          "effectiveFrom": "2016-01-01T00:00:00.0000000+00:00"
                        },
                        "legalEntity/Status/Active": {
                          "key": "LegalEntity/Status/Active",
                          "value": {
                            "labelValue": "Active"
                          },
                          "effectiveFrom": "2016-07-01T00:00:00.0000000+00:00"
                        }
                      },
                      "counterpartyRiskInformation": {
                        "countryOfRisk": "UnitedKingdom",
                        "creditRatings": [
                          {
                            "ratingSource": "StandardAndPoors",
                            "rating": "AA+"
                          }
                        ],
                        "industryClassifiers": [
                          {
                            "classificationSystemName": "GICS2018",
                            "classificationCode": "10101010"
                          }
                        ]
                      },
                      "version": {
                        "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                        "asAtDate": "2019-01-01T12:00:00.0100000+00:00"
                      }
                    },
                    {
                      "displayName": "LegalEntity2DisplayName",
                      "description": "LegalEntity2Description",
                      "href": "https://example.com",
                      "lusidLegalEntityId": "LUID_00003D55",
                      "identifiers": {
                        "legalEntity/ExternalIdentifier/LEI": {
                          "key": "LegalEntity/ExternalIdentifier/LEI",
                          "value": {
                            "labelValue": "LEI_22345678"
                          }
                        },
                        "legalEntity/InternalIdentifier/InternalLeiId": {
                          "key": "LegalEntity/InternalIdentifier/InternalLeiId",
                          "value": {
                            "labelValue": "Internal_XHSP2038"
                          }
                        }
                      },
                      "properties": {
                        "legalEntity/Details/Name": {
                          "key": "LegalEntity/Details/Name",
                          "value": {
                            "labelValue": "Legal Entity 2 Inc."
                          }
                        },
                        "legalEntity/Details/Country": {
                          "key": "LegalEntity/Details/Country",
                          "value": {
                            "labelValue": "Germany"
                          },
                          "effectiveFrom": "2016-01-01T00:00:00.0000000+00:00"
                        },
                        "legalEntity/Status/Active": {
                          "key": "LegalEntity/Status/Active",
                          "value": {
                            "labelValue": "Active"
                          },
                          "effectiveFrom": "2016-04-01T00:00:00.0000000+00:00"
                        }
                      },
                      "version": {
                        "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                        "asAtDate": "2019-01-01T12:00:00.0100000+00:00"
                      }
                    }
                  ],
                  "href": "http://example.com",
                  "links": []
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfLegalEntity"
                },
                "example": {
                  "values": [
                    {
                      "displayName": "LegalEntity1DisplayName",
                      "description": "LegalEntity1Description",
                      "href": "https://example.com",
                      "lusidLegalEntityId": "LUID_00003D4V",
                      "identifiers": {
                        "legalEntity/ExternalIdentifier/LEI": {
                          "key": "LegalEntity/ExternalIdentifier/LEI",
                          "value": {
                            "labelValue": "LEI_12345678"
                          }
                        },
                        "legalEntity/InternalIdentifier/InternalLeiId": {
                          "key": "LegalEntity/InternalIdentifier/InternalLeiId",
                          "value": {
                            "labelValue": "Internal_XHSP2038"
                          }
                        }
                      },
                      "properties": {
                        "legalEntity/Details/Name": {
                          "key": "LegalEntity/Details/Name",
                          "value": {
                            "labelValue": "Legal Entity Inc."
                          }
                        },
                        "legalEntity/Details/Country": {
                          "key": "LegalEntity/Details/Country",
                          "value": {
                            "labelValue": "United Kingdom"
                          },
                          "effectiveFrom": "2016-01-01T00:00:00.0000000+00:00"
                        },
                        "legalEntity/Status/Active": {
                          "key": "LegalEntity/Status/Active",
                          "value": {
                            "labelValue": "Active"
                          },
                          "effectiveFrom": "2016-07-01T00:00:00.0000000+00:00"
                        }
                      },
                      "counterpartyRiskInformation": {
                        "countryOfRisk": "UnitedKingdom",
                        "creditRatings": [
                          {
                            "ratingSource": "StandardAndPoors",
                            "rating": "AA+"
                          }
                        ],
                        "industryClassifiers": [
                          {
                            "classificationSystemName": "GICS2018",
                            "classificationCode": "10101010"
                          }
                        ]
                      },
                      "version": {
                        "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                        "asAtDate": "2019-01-01T12:00:00.0100000+00:00"
                      }
                    },
                    {
                      "displayName": "LegalEntity2DisplayName",
                      "description": "LegalEntity2Description",
                      "href": "https://example.com",
                      "lusidLegalEntityId": "LUID_00003D55",
                      "identifiers": {
                        "legalEntity/ExternalIdentifier/LEI": {
                          "key": "LegalEntity/ExternalIdentifier/LEI",
                          "value": {
                            "labelValue": "LEI_22345678"
                          }
                        },
                        "legalEntity/InternalIdentifier/InternalLeiId": {
                          "key": "LegalEntity/InternalIdentifier/InternalLeiId",
                          "value": {
                            "labelValue": "Internal_XHSP2038"
                          }
                        }
                      },
                      "properties": {
                        "legalEntity/Details/Name": {
                          "key": "LegalEntity/Details/Name",
                          "value": {
                            "labelValue": "Legal Entity 2 Inc."
                          }
                        },
                        "legalEntity/Details/Country": {
                          "key": "LegalEntity/Details/Country",
                          "value": {
                            "labelValue": "Germany"
                          },
                          "effectiveFrom": "2016-01-01T00:00:00.0000000+00:00"
                        },
                        "legalEntity/Status/Active": {
                          "key": "LegalEntity/Status/Active",
                          "value": {
                            "labelValue": "Active"
                          },
                          "effectiveFrom": "2016-04-01T00:00:00.0000000+00:00"
                        }
                      },
                      "version": {
                        "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                        "asAtDate": "2019-01-01T12:00:00.0100000+00:00"
                      }
                    }
                  ],
                  "href": "http://example.com",
                  "links": []
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/legalentities/{idTypeScope}/{idTypeCode}": {
      "get": {
        "tags": [
          "Legal Entities"
        ],
        "summary": "[EARLY ACCESS] ListLegalEntities: List Legal Entities",
        "description": "List legal entities which has identifier of specific identifier type's scope and code, and satisfies filter criteria.",
        "operationId": "ListLegalEntities",
        "parameters": [
          {
            "name": "idTypeScope",
            "in": "path",
            "description": "Scope of the legal entity identifier type.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "Scope of the legal entity identifier type.",
              "nullable": true
            }
          },
          {
            "name": "idTypeCode",
            "in": "path",
            "description": "Code of the legal entity identifier type.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "Code of the legal entity identifier type.",
              "nullable": true
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime or cut label at which to list the people. Defaults to the current LUSID\r\n            system datetime if not specified.",
            "schema": {
              "maxLength": 256,
              "minLength": 0,
              "pattern": "^[a-zA-Z0-9\\-_\\+:\\.]+$",
              "type": "string",
              "description": "The effective datetime or cut label at which to list the people. Defaults to the current LUSID\r\n            system datetime if not specified.",
              "format": "dateorcutlabel",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to list the people. Defaults to return the latest version\r\n            of each people if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to list the people. Defaults to return the latest version\r\n            of each people if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "page",
            "in": "query",
            "description": "The pagination token to use to continue listing legal entities from a previous call to list legal entities. This\r\nvalue is returned from the previous call. If a pagination token is provided the filter, effectiveAt\r\nand asAt fields must not have changed since the original request.",
            "schema": {
              "maxLength": 500,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\+/]*={0,3}$",
              "type": "string",
              "description": "The pagination token to use to continue listing legal entities from a previous call to list legal entities. This\r\nvalue is returned from the previous call. If a pagination token is provided the filter, effectiveAt\r\nand asAt fields must not have changed since the original request.",
              "nullable": true
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "When paginating, limit the number of returned results to this many. Defaults to 100 if not specified.",
            "schema": {
              "maximum": 5000,
              "minimum": 1,
              "type": "integer",
              "description": "When paginating, limit the number of returned results to this many. Defaults to 100 if not specified.",
              "format": "int32",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the result set. \r\n            Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "maxLength": 16384,
              "minLength": 0,
              "pattern": "^[\\s\\S]*$",
              "type": "string",
              "description": "Expression to filter the result set. \r\n            Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
              "nullable": true
            }
          },
          {
            "name": "propertyKeys",
            "in": "query",
            "description": "A list of property keys or identifier types (as property keys) from the \"LegalEntity\" domain to include for each legal entity.\r\n            These take the format {domain}/{scope}/{code} e.g. \"LegalEntity/ContactDetails/Address\".",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
              },
              "description": "A list of property keys or identifier types (as property keys) from the \"LegalEntity\" domain to include for each legal entity.\r\n            These take the format {domain}/{scope}/{code} e.g. \"LegalEntity/ContactDetails/Address\".",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "Legal Entities with specified identifier type",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfLegalEntity"
                },
                "example": {
                  "values": [
                    {
                      "displayName": "LegalEntity1DisplayName",
                      "description": "LegalEntity1Description",
                      "href": "https://example.com",
                      "lusidLegalEntityId": "LUID_00003D4V",
                      "identifiers": {
                        "legalEntity/ExternalIdentifier/LEI": {
                          "key": "LegalEntity/ExternalIdentifier/LEI",
                          "value": {
                            "labelValue": "LEI_12345678"
                          }
                        },
                        "legalEntity/InternalIdentifier/InternalLeiId": {
                          "key": "LegalEntity/InternalIdentifier/InternalLeiId",
                          "value": {
                            "labelValue": "Internal_XHSP2038"
                          }
                        }
                      },
                      "properties": {
                        "legalEntity/Details/Name": {
                          "key": "LegalEntity/Details/Name",
                          "value": {
                            "labelValue": "Legal Entity Inc."
                          }
                        },
                        "legalEntity/Details/Country": {
                          "key": "LegalEntity/Details/Country",
                          "value": {
                            "labelValue": "United Kingdom"
                          },
                          "effectiveFrom": "2016-01-01T00:00:00.0000000+00:00"
                        },
                        "legalEntity/Status/Active": {
                          "key": "LegalEntity/Status/Active",
                          "value": {
                            "labelValue": "Active"
                          },
                          "effectiveFrom": "2016-07-01T00:00:00.0000000+00:00"
                        }
                      },
                      "counterpartyRiskInformation": {
                        "countryOfRisk": "UnitedKingdom",
                        "creditRatings": [
                          {
                            "ratingSource": "StandardAndPoors",
                            "rating": "AA+"
                          }
                        ],
                        "industryClassifiers": [
                          {
                            "classificationSystemName": "GICS2018",
                            "classificationCode": "10101010"
                          }
                        ]
                      },
                      "version": {
                        "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                        "asAtDate": "2019-01-01T12:00:00.0100000+00:00"
                      }
                    },
                    {
                      "displayName": "LegalEntity2DisplayName",
                      "description": "LegalEntity2Description",
                      "href": "https://example.com",
                      "lusidLegalEntityId": "LUID_00003D55",
                      "identifiers": {
                        "legalEntity/ExternalIdentifier/LEI": {
                          "key": "LegalEntity/ExternalIdentifier/LEI",
                          "value": {
                            "labelValue": "LEI_22345678"
                          }
                        },
                        "legalEntity/InternalIdentifier/InternalLeiId": {
                          "key": "LegalEntity/InternalIdentifier/InternalLeiId",
                          "value": {
                            "labelValue": "Internal_XHSP2038"
                          }
                        }
                      },
                      "properties": {
                        "legalEntity/Details/Name": {
                          "key": "LegalEntity/Details/Name",
                          "value": {
                            "labelValue": "Legal Entity 2 Inc."
                          }
                        },
                        "legalEntity/Details/Country": {
                          "key": "LegalEntity/Details/Country",
                          "value": {
                            "labelValue": "Germany"
                          },
                          "effectiveFrom": "2016-01-01T00:00:00.0000000+00:00"
                        },
                        "legalEntity/Status/Active": {
                          "key": "LegalEntity/Status/Active",
                          "value": {
                            "labelValue": "Active"
                          },
                          "effectiveFrom": "2016-04-01T00:00:00.0000000+00:00"
                        }
                      },
                      "version": {
                        "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                        "asAtDate": "2019-01-01T12:00:00.0100000+00:00"
                      }
                    }
                  ],
                  "href": "http://example.com",
                  "links": []
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfLegalEntity"
                },
                "example": {
                  "values": [
                    {
                      "displayName": "LegalEntity1DisplayName",
                      "description": "LegalEntity1Description",
                      "href": "https://example.com",
                      "lusidLegalEntityId": "LUID_00003D4V",
                      "identifiers": {
                        "legalEntity/ExternalIdentifier/LEI": {
                          "key": "LegalEntity/ExternalIdentifier/LEI",
                          "value": {
                            "labelValue": "LEI_12345678"
                          }
                        },
                        "legalEntity/InternalIdentifier/InternalLeiId": {
                          "key": "LegalEntity/InternalIdentifier/InternalLeiId",
                          "value": {
                            "labelValue": "Internal_XHSP2038"
                          }
                        }
                      },
                      "properties": {
                        "legalEntity/Details/Name": {
                          "key": "LegalEntity/Details/Name",
                          "value": {
                            "labelValue": "Legal Entity Inc."
                          }
                        },
                        "legalEntity/Details/Country": {
                          "key": "LegalEntity/Details/Country",
                          "value": {
                            "labelValue": "United Kingdom"
                          },
                          "effectiveFrom": "2016-01-01T00:00:00.0000000+00:00"
                        },
                        "legalEntity/Status/Active": {
                          "key": "LegalEntity/Status/Active",
                          "value": {
                            "labelValue": "Active"
                          },
                          "effectiveFrom": "2016-07-01T00:00:00.0000000+00:00"
                        }
                      },
                      "counterpartyRiskInformation": {
                        "countryOfRisk": "UnitedKingdom",
                        "creditRatings": [
                          {
                            "ratingSource": "StandardAndPoors",
                            "rating": "AA+"
                          }
                        ],
                        "industryClassifiers": [
                          {
                            "classificationSystemName": "GICS2018",
                            "classificationCode": "10101010"
                          }
                        ]
                      },
                      "version": {
                        "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                        "asAtDate": "2019-01-01T12:00:00.0100000+00:00"
                      }
                    },
                    {
                      "displayName": "LegalEntity2DisplayName",
                      "description": "LegalEntity2Description",
                      "href": "https://example.com",
                      "lusidLegalEntityId": "LUID_00003D55",
                      "identifiers": {
                        "legalEntity/ExternalIdentifier/LEI": {
                          "key": "LegalEntity/ExternalIdentifier/LEI",
                          "value": {
                            "labelValue": "LEI_22345678"
                          }
                        },
                        "legalEntity/InternalIdentifier/InternalLeiId": {
                          "key": "LegalEntity/InternalIdentifier/InternalLeiId",
                          "value": {
                            "labelValue": "Internal_XHSP2038"
                          }
                        }
                      },
                      "properties": {
                        "legalEntity/Details/Name": {
                          "key": "LegalEntity/Details/Name",
                          "value": {
                            "labelValue": "Legal Entity 2 Inc."
                          }
                        },
                        "legalEntity/Details/Country": {
                          "key": "LegalEntity/Details/Country",
                          "value": {
                            "labelValue": "Germany"
                          },
                          "effectiveFrom": "2016-01-01T00:00:00.0000000+00:00"
                        },
                        "legalEntity/Status/Active": {
                          "key": "LegalEntity/Status/Active",
                          "value": {
                            "labelValue": "Active"
                          },
                          "effectiveFrom": "2016-04-01T00:00:00.0000000+00:00"
                        }
                      },
                      "version": {
                        "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                        "asAtDate": "2019-01-01T12:00:00.0100000+00:00"
                      }
                    }
                  ],
                  "href": "http://example.com",
                  "links": []
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfLegalEntity"
                },
                "example": {
                  "values": [
                    {
                      "displayName": "LegalEntity1DisplayName",
                      "description": "LegalEntity1Description",
                      "href": "https://example.com",
                      "lusidLegalEntityId": "LUID_00003D4V",
                      "identifiers": {
                        "legalEntity/ExternalIdentifier/LEI": {
                          "key": "LegalEntity/ExternalIdentifier/LEI",
                          "value": {
                            "labelValue": "LEI_12345678"
                          }
                        },
                        "legalEntity/InternalIdentifier/InternalLeiId": {
                          "key": "LegalEntity/InternalIdentifier/InternalLeiId",
                          "value": {
                            "labelValue": "Internal_XHSP2038"
                          }
                        }
                      },
                      "properties": {
                        "legalEntity/Details/Name": {
                          "key": "LegalEntity/Details/Name",
                          "value": {
                            "labelValue": "Legal Entity Inc."
                          }
                        },
                        "legalEntity/Details/Country": {
                          "key": "LegalEntity/Details/Country",
                          "value": {
                            "labelValue": "United Kingdom"
                          },
                          "effectiveFrom": "2016-01-01T00:00:00.0000000+00:00"
                        },
                        "legalEntity/Status/Active": {
                          "key": "LegalEntity/Status/Active",
                          "value": {
                            "labelValue": "Active"
                          },
                          "effectiveFrom": "2016-07-01T00:00:00.0000000+00:00"
                        }
                      },
                      "counterpartyRiskInformation": {
                        "countryOfRisk": "UnitedKingdom",
                        "creditRatings": [
                          {
                            "ratingSource": "StandardAndPoors",
                            "rating": "AA+"
                          }
                        ],
                        "industryClassifiers": [
                          {
                            "classificationSystemName": "GICS2018",
                            "classificationCode": "10101010"
                          }
                        ]
                      },
                      "version": {
                        "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                        "asAtDate": "2019-01-01T12:00:00.0100000+00:00"
                      }
                    },
                    {
                      "displayName": "LegalEntity2DisplayName",
                      "description": "LegalEntity2Description",
                      "href": "https://example.com",
                      "lusidLegalEntityId": "LUID_00003D55",
                      "identifiers": {
                        "legalEntity/ExternalIdentifier/LEI": {
                          "key": "LegalEntity/ExternalIdentifier/LEI",
                          "value": {
                            "labelValue": "LEI_22345678"
                          }
                        },
                        "legalEntity/InternalIdentifier/InternalLeiId": {
                          "key": "LegalEntity/InternalIdentifier/InternalLeiId",
                          "value": {
                            "labelValue": "Internal_XHSP2038"
                          }
                        }
                      },
                      "properties": {
                        "legalEntity/Details/Name": {
                          "key": "LegalEntity/Details/Name",
                          "value": {
                            "labelValue": "Legal Entity 2 Inc."
                          }
                        },
                        "legalEntity/Details/Country": {
                          "key": "LegalEntity/Details/Country",
                          "value": {
                            "labelValue": "Germany"
                          },
                          "effectiveFrom": "2016-01-01T00:00:00.0000000+00:00"
                        },
                        "legalEntity/Status/Active": {
                          "key": "LegalEntity/Status/Active",
                          "value": {
                            "labelValue": "Active"
                          },
                          "effectiveFrom": "2016-04-01T00:00:00.0000000+00:00"
                        }
                      },
                      "version": {
                        "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                        "asAtDate": "2019-01-01T12:00:00.0100000+00:00"
                      }
                    }
                  ],
                  "href": "http://example.com",
                  "links": []
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/legalentities/{idTypeScope}/{idTypeCode}/{code}": {
      "get": {
        "tags": [
          "Legal Entities"
        ],
        "summary": "[EARLY ACCESS] GetLegalEntity: Get Legal Entity",
        "description": "Retrieve the definition of a legal entity.",
        "operationId": "GetLegalEntity",
        "parameters": [
          {
            "name": "idTypeScope",
            "in": "path",
            "description": "Scope of the legal entity identifier type.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "Scope of the legal entity identifier type.",
              "nullable": true
            }
          },
          {
            "name": "idTypeCode",
            "in": "path",
            "description": "Code of the legal entity identifier type.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "Code of the legal entity identifier type.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "Code of the legal entity under specified identifier type's scope and code. This together with stated identifier type uniquely\r\n            identifies the legal entity.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "Code of the legal entity under specified identifier type's scope and code. This together with stated identifier type uniquely\r\n            identifies the legal entity.",
              "nullable": true
            }
          },
          {
            "name": "propertyKeys",
            "in": "query",
            "description": "A list of property keys or identifier types (as property keys) from the \"LegalEntity\" domain to include for found legal entity.\r\n            These take the format {domain}/{scope}/{code} e.g. \"LegalEntity/ContactDetails/Address\".",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
              },
              "description": "A list of property keys or identifier types (as property keys) from the \"LegalEntity\" domain to include for found legal entity.\r\n            These take the format {domain}/{scope}/{code} e.g. \"LegalEntity/ContactDetails/Address\".",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime or cut label at which to retrieve the legal entity. Defaults to the current LUSID system datetime if not specified.",
            "schema": {
              "maxLength": 256,
              "minLength": 0,
              "pattern": "^[a-zA-Z0-9\\-_\\+:\\.]+$",
              "type": "string",
              "description": "The effective datetime or cut label at which to retrieve the legal entity. Defaults to the current LUSID system datetime if not specified.",
              "format": "dateorcutlabel",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the legal entity. Defaults to return the latest version of the legal entity if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to retrieve the legal entity. Defaults to return the latest version of the legal entity if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The requested legal entity",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LegalEntity"
                },
                "example": {
                  "displayName": "LegalEntity1DisplayName",
                  "description": "LegalEntity1Description",
                  "href": "https://example.com",
                  "lusidLegalEntityId": "LUID_00003D4V",
                  "identifiers": {
                    "legalEntity/ExternalIdentifier/LEI": {
                      "key": "LegalEntity/ExternalIdentifier/LEI",
                      "value": {
                        "labelValue": "LEI_12345678"
                      }
                    },
                    "legalEntity/InternalIdentifier/InternalLeiId": {
                      "key": "LegalEntity/InternalIdentifier/InternalLeiId",
                      "value": {
                        "labelValue": "Internal_XHSP2038"
                      }
                    }
                  },
                  "properties": {
                    "legalEntity/Details/Name": {
                      "key": "LegalEntity/Details/Name",
                      "value": {
                        "labelValue": "Legal Entity Inc."
                      }
                    },
                    "legalEntity/Details/Country": {
                      "key": "LegalEntity/Details/Country",
                      "value": {
                        "labelValue": "United Kingdom"
                      },
                      "effectiveFrom": "2016-01-01T00:00:00.0000000+00:00"
                    },
                    "legalEntity/Status/Active": {
                      "key": "LegalEntity/Status/Active",
                      "value": {
                        "labelValue": "Active"
                      },
                      "effectiveFrom": "2016-07-01T00:00:00.0000000+00:00"
                    }
                  },
                  "counterpartyRiskInformation": {
                    "countryOfRisk": "UnitedKingdom",
                    "creditRatings": [
                      {
                        "ratingSource": "StandardAndPoors",
                        "rating": "AA+"
                      }
                    ],
                    "industryClassifiers": [
                      {
                        "classificationSystemName": "GICS2018",
                        "classificationCode": "10101010"
                      }
                    ]
                  },
                  "version": {
                    "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                    "asAtDate": "2019-01-01T12:00:00.0100000+00:00"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LegalEntity"
                },
                "example": {
                  "displayName": "LegalEntity1DisplayName",
                  "description": "LegalEntity1Description",
                  "href": "https://example.com",
                  "lusidLegalEntityId": "LUID_00003D4V",
                  "identifiers": {
                    "legalEntity/ExternalIdentifier/LEI": {
                      "key": "LegalEntity/ExternalIdentifier/LEI",
                      "value": {
                        "labelValue": "LEI_12345678"
                      }
                    },
                    "legalEntity/InternalIdentifier/InternalLeiId": {
                      "key": "LegalEntity/InternalIdentifier/InternalLeiId",
                      "value": {
                        "labelValue": "Internal_XHSP2038"
                      }
                    }
                  },
                  "properties": {
                    "legalEntity/Details/Name": {
                      "key": "LegalEntity/Details/Name",
                      "value": {
                        "labelValue": "Legal Entity Inc."
                      }
                    },
                    "legalEntity/Details/Country": {
                      "key": "LegalEntity/Details/Country",
                      "value": {
                        "labelValue": "United Kingdom"
                      },
                      "effectiveFrom": "2016-01-01T00:00:00.0000000+00:00"
                    },
                    "legalEntity/Status/Active": {
                      "key": "LegalEntity/Status/Active",
                      "value": {
                        "labelValue": "Active"
                      },
                      "effectiveFrom": "2016-07-01T00:00:00.0000000+00:00"
                    }
                  },
                  "counterpartyRiskInformation": {
                    "countryOfRisk": "UnitedKingdom",
                    "creditRatings": [
                      {
                        "ratingSource": "StandardAndPoors",
                        "rating": "AA+"
                      }
                    ],
                    "industryClassifiers": [
                      {
                        "classificationSystemName": "GICS2018",
                        "classificationCode": "10101010"
                      }
                    ]
                  },
                  "version": {
                    "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                    "asAtDate": "2019-01-01T12:00:00.0100000+00:00"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LegalEntity"
                },
                "example": {
                  "displayName": "LegalEntity1DisplayName",
                  "description": "LegalEntity1Description",
                  "href": "https://example.com",
                  "lusidLegalEntityId": "LUID_00003D4V",
                  "identifiers": {
                    "legalEntity/ExternalIdentifier/LEI": {
                      "key": "LegalEntity/ExternalIdentifier/LEI",
                      "value": {
                        "labelValue": "LEI_12345678"
                      }
                    },
                    "legalEntity/InternalIdentifier/InternalLeiId": {
                      "key": "LegalEntity/InternalIdentifier/InternalLeiId",
                      "value": {
                        "labelValue": "Internal_XHSP2038"
                      }
                    }
                  },
                  "properties": {
                    "legalEntity/Details/Name": {
                      "key": "LegalEntity/Details/Name",
                      "value": {
                        "labelValue": "Legal Entity Inc."
                      }
                    },
                    "legalEntity/Details/Country": {
                      "key": "LegalEntity/Details/Country",
                      "value": {
                        "labelValue": "United Kingdom"
                      },
                      "effectiveFrom": "2016-01-01T00:00:00.0000000+00:00"
                    },
                    "legalEntity/Status/Active": {
                      "key": "LegalEntity/Status/Active",
                      "value": {
                        "labelValue": "Active"
                      },
                      "effectiveFrom": "2016-07-01T00:00:00.0000000+00:00"
                    }
                  },
                  "counterpartyRiskInformation": {
                    "countryOfRisk": "UnitedKingdom",
                    "creditRatings": [
                      {
                        "ratingSource": "StandardAndPoors",
                        "rating": "AA+"
                      }
                    ],
                    "industryClassifiers": [
                      {
                        "classificationSystemName": "GICS2018",
                        "classificationCode": "10101010"
                      }
                    ]
                  },
                  "version": {
                    "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                    "asAtDate": "2019-01-01T12:00:00.0100000+00:00"
                  }
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      },
      "delete": {
        "tags": [
          "Legal Entities"
        ],
        "summary": "[EARLY ACCESS] DeleteLegalEntity: Delete Legal Entity",
        "description": "Delete a legal entity. Deletion will be valid from the legal entity's creation datetime.\r\nThis means that the legal entity will no longer exist at any effective datetime from the asAt datetime of deletion.",
        "operationId": "DeleteLegalEntity",
        "parameters": [
          {
            "name": "idTypeScope",
            "in": "path",
            "description": "The scope of the legal entity identifier type.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_.]*$",
              "type": "string",
              "description": "The scope of the legal entity identifier type."
            }
          },
          {
            "name": "idTypeCode",
            "in": "path",
            "description": "The code of the legal entity identifier type.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_.]*$",
              "type": "string",
              "description": "The code of the legal entity identifier type."
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "Code of the legal entity under specified identifier type's scope and code. This together with defined\r\n            identifier type uniquely identifies the legal entity to delete.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_.]*$",
              "type": "string",
              "description": "Code of the legal entity under specified identifier type's scope and code. This together with defined\r\n            identifier type uniquely identifies the legal entity to delete."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The response from deleting legal entity.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/legalentities/{idTypeScope}/{idTypeCode}/{code}/identifiers": {
      "delete": {
        "tags": [
          "Legal Entities"
        ],
        "summary": "[EARLY ACCESS] DeleteLegalEntityIdentifiers: Delete Legal Entity Identifiers",
        "description": "Delete identifiers that belong to the given property keys of the legal entity.",
        "operationId": "DeleteLegalEntityIdentifiers",
        "parameters": [
          {
            "name": "idTypeScope",
            "in": "path",
            "description": "Scope of the legal entity identifier type.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "Scope of the legal entity identifier type.",
              "nullable": true
            }
          },
          {
            "name": "idTypeCode",
            "in": "path",
            "description": "Code of the legal entity identifier type.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "Code of the legal entity identifier type.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "Code of the legal entity under specified identifier type's scope and code. This together with stated identifier type uniquely\r\n            identifies the legal entity.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "Code of the legal entity under specified identifier type's scope and code. This together with stated identifier type uniquely\r\n            identifies the legal entity.",
              "nullable": true
            }
          },
          {
            "name": "propertyKeys",
            "in": "query",
            "description": "The property keys of the identifiers to delete. These take the format\r\n            {domain}/{scope}/{code} e.g. \"LegalEntity/CreditAgency/Identifier\". Each property must be from the \"LegalEntity\" domain. Identifiers or identifiers not specified in request will not be changed.",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
              },
              "description": "The property keys of the identifiers to delete. These take the format\r\n            {domain}/{scope}/{code} e.g. \"LegalEntity/CreditAgency/Identifier\". Each property must be from the \"LegalEntity\" domain. Identifiers or identifiers not specified in request will not be changed."
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime or cut label at which to delete the identifiers. Defaults to the current LUSID system datetime if not specified.\r\n            Must not include an effective datetime if identifiers are perpetual.",
            "schema": {
              "type": "string",
              "description": "The effective datetime or cut label at which to delete the identifiers. Defaults to the current LUSID system datetime if not specified.\r\n            Must not include an effective datetime if identifiers are perpetual.",
              "format": "dateorcutlabel",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The datetime that the identifiers were deleted from the specified legal entity",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      },
      "post": {
        "tags": [
          "Legal Entities"
        ],
        "summary": "[EARLY ACCESS] SetLegalEntityIdentifiers: Set Legal Entity Identifiers",
        "description": "Set identifiers of the Legal Entity.",
        "operationId": "SetLegalEntityIdentifiers",
        "parameters": [
          {
            "name": "idTypeScope",
            "in": "path",
            "description": "Scope of the legal entity identifier type.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "Scope of the legal entity identifier type.",
              "nullable": true
            }
          },
          {
            "name": "idTypeCode",
            "in": "path",
            "description": "Code of the legal entity identifier type.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "Code of the legal entity identifier type.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "Code of the legal entity under specified identifier type's scope and code. This together with stated identifier type uniquely\r\n            identifies the legal entity.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "Code of the legal entity under specified identifier type's scope and code. This together with stated identifier type uniquely\r\n            identifies the legal entity.",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "Request containing identifiers to set for the legal entity. Identifiers not specified in request will not be changed.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SetLegalEntityIdentifiersRequest"
              },
              "example": {
                "identifiers": {
                  "legalEntity/ExternalIdentifier/LEI": {
                    "key": "LegalEntity/ExternalIdentifier/LEI",
                    "value": {
                      "labelValue": "LEI_12345678"
                    }
                  },
                  "legalEntity/InternalIdentifier/InternalLeiId": {
                    "key": "LegalEntity/InternalIdentifier/InternalLeiId",
                    "value": {
                      "labelValue": "Internal_XHSP2038"
                    }
                  }
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetLegalEntityIdentifiersRequest"
              },
              "example": {
                "identifiers": {
                  "legalEntity/ExternalIdentifier/LEI": {
                    "key": "LegalEntity/ExternalIdentifier/LEI",
                    "value": {
                      "labelValue": "LEI_12345678"
                    }
                  },
                  "legalEntity/InternalIdentifier/InternalLeiId": {
                    "key": "LegalEntity/InternalIdentifier/InternalLeiId",
                    "value": {
                      "labelValue": "Internal_XHSP2038"
                    }
                  }
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SetLegalEntityIdentifiersRequest"
              },
              "example": {
                "identifiers": {
                  "legalEntity/ExternalIdentifier/LEI": {
                    "key": "LegalEntity/ExternalIdentifier/LEI",
                    "value": {
                      "labelValue": "LEI_12345678"
                    }
                  },
                  "legalEntity/InternalIdentifier/InternalLeiId": {
                    "key": "LegalEntity/InternalIdentifier/InternalLeiId",
                    "value": {
                      "labelValue": "Internal_XHSP2038"
                    }
                  }
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SetLegalEntityIdentifiersRequest"
              },
              "example": {
                "identifiers": {
                  "legalEntity/ExternalIdentifier/LEI": {
                    "key": "LegalEntity/ExternalIdentifier/LEI",
                    "value": {
                      "labelValue": "LEI_12345678"
                    }
                  },
                  "legalEntity/InternalIdentifier/InternalLeiId": {
                    "key": "LegalEntity/InternalIdentifier/InternalLeiId",
                    "value": {
                      "labelValue": "Internal_XHSP2038"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The Legal Entity with updated identifiers",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LegalEntity"
                },
                "example": {
                  "displayName": "LegalEntity1DisplayName",
                  "description": "LegalEntity1Description",
                  "href": "https://example.com",
                  "lusidLegalEntityId": "LUID_00003D4V",
                  "identifiers": {
                    "legalEntity/ExternalIdentifier/LEI": {
                      "key": "LegalEntity/ExternalIdentifier/LEI",
                      "value": {
                        "labelValue": "LEI_12345678"
                      }
                    },
                    "legalEntity/InternalIdentifier/InternalLeiId": {
                      "key": "LegalEntity/InternalIdentifier/InternalLeiId",
                      "value": {
                        "labelValue": "Internal_XHSP2038"
                      }
                    },
                    "legalEntity/Details/Name": {
                      "key": "LegalEntity/Details/Name",
                      "value": {
                        "labelValue": "John Smith"
                      }
                    }
                  },
                  "properties": {
                    "legalEntity/Details/Name": {
                      "key": "LegalEntity/Details/Name",
                      "value": {
                        "labelValue": "John Smith"
                      },
                      "effectiveFrom": "2016-07-01T00:00:00.0000000+00:00"
                    },
                    "legalEntity/Details/Country": {
                      "key": "LegalEntity/Details/Country",
                      "value": {
                        "labelValue": "United Kingdom"
                      },
                      "effectiveFrom": "2016-07-01T00:00:00.0000000+00:00"
                    }
                  },
                  "counterpartyRiskInformation": {
                    "countryOfRisk": "UnitedKingdom",
                    "creditRatings": [
                      {
                        "ratingSource": "StandardAndPoors",
                        "rating": "AA+"
                      }
                    ],
                    "industryClassifiers": [
                      {
                        "classificationSystemName": "GICS2018",
                        "classificationCode": "10101010"
                      }
                    ]
                  },
                  "version": {
                    "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                    "asAtDate": "2019-01-01T12:00:00.0100000+00:00"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LegalEntity"
                },
                "example": {
                  "displayName": "LegalEntity1DisplayName",
                  "description": "LegalEntity1Description",
                  "href": "https://example.com",
                  "lusidLegalEntityId": "LUID_00003D4V",
                  "identifiers": {
                    "legalEntity/ExternalIdentifier/LEI": {
                      "key": "LegalEntity/ExternalIdentifier/LEI",
                      "value": {
                        "labelValue": "LEI_12345678"
                      }
                    },
                    "legalEntity/InternalIdentifier/InternalLeiId": {
                      "key": "LegalEntity/InternalIdentifier/InternalLeiId",
                      "value": {
                        "labelValue": "Internal_XHSP2038"
                      }
                    },
                    "legalEntity/Details/Name": {
                      "key": "LegalEntity/Details/Name",
                      "value": {
                        "labelValue": "John Smith"
                      }
                    }
                  },
                  "properties": {
                    "legalEntity/Details/Name": {
                      "key": "LegalEntity/Details/Name",
                      "value": {
                        "labelValue": "John Smith"
                      },
                      "effectiveFrom": "2016-07-01T00:00:00.0000000+00:00"
                    },
                    "legalEntity/Details/Country": {
                      "key": "LegalEntity/Details/Country",
                      "value": {
                        "labelValue": "United Kingdom"
                      },
                      "effectiveFrom": "2016-07-01T00:00:00.0000000+00:00"
                    }
                  },
                  "counterpartyRiskInformation": {
                    "countryOfRisk": "UnitedKingdom",
                    "creditRatings": [
                      {
                        "ratingSource": "StandardAndPoors",
                        "rating": "AA+"
                      }
                    ],
                    "industryClassifiers": [
                      {
                        "classificationSystemName": "GICS2018",
                        "classificationCode": "10101010"
                      }
                    ]
                  },
                  "version": {
                    "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                    "asAtDate": "2019-01-01T12:00:00.0100000+00:00"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LegalEntity"
                },
                "example": {
                  "displayName": "LegalEntity1DisplayName",
                  "description": "LegalEntity1Description",
                  "href": "https://example.com",
                  "lusidLegalEntityId": "LUID_00003D4V",
                  "identifiers": {
                    "legalEntity/ExternalIdentifier/LEI": {
                      "key": "LegalEntity/ExternalIdentifier/LEI",
                      "value": {
                        "labelValue": "LEI_12345678"
                      }
                    },
                    "legalEntity/InternalIdentifier/InternalLeiId": {
                      "key": "LegalEntity/InternalIdentifier/InternalLeiId",
                      "value": {
                        "labelValue": "Internal_XHSP2038"
                      }
                    },
                    "legalEntity/Details/Name": {
                      "key": "LegalEntity/Details/Name",
                      "value": {
                        "labelValue": "John Smith"
                      }
                    }
                  },
                  "properties": {
                    "legalEntity/Details/Name": {
                      "key": "LegalEntity/Details/Name",
                      "value": {
                        "labelValue": "John Smith"
                      },
                      "effectiveFrom": "2016-07-01T00:00:00.0000000+00:00"
                    },
                    "legalEntity/Details/Country": {
                      "key": "LegalEntity/Details/Country",
                      "value": {
                        "labelValue": "United Kingdom"
                      },
                      "effectiveFrom": "2016-07-01T00:00:00.0000000+00:00"
                    }
                  },
                  "counterpartyRiskInformation": {
                    "countryOfRisk": "UnitedKingdom",
                    "creditRatings": [
                      {
                        "ratingSource": "StandardAndPoors",
                        "rating": "AA+"
                      }
                    ],
                    "industryClassifiers": [
                      {
                        "classificationSystemName": "GICS2018",
                        "classificationCode": "10101010"
                      }
                    ]
                  },
                  "version": {
                    "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                    "asAtDate": "2019-01-01T12:00:00.0100000+00:00"
                  }
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/legalentities/{idTypeScope}/{idTypeCode}/{code}/metadata": {
      "get": {
        "tags": [
          "Legal Entities"
        ],
        "summary": "[EARLY ACCESS] GetAllLegalEntityAccessMetadata: Get Access Metadata rules for a Legal Entity",
        "description": "Pass the Scope and Code of the Legal Entity identifier along with the Legal Entity code parameter to retrieve the associated Access Metadata",
        "operationId": "GetAllLegalEntityAccessMetadata",
        "parameters": [
          {
            "name": "idTypeScope",
            "in": "path",
            "description": "Scope of the Legal Entity identifier.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "Scope of the Legal Entity identifier."
            }
          },
          {
            "name": "idTypeCode",
            "in": "path",
            "description": "Code of the Legal Entity identifier.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "Code of the Legal Entity identifier."
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "Code of the Legal Entity under specified identifier type's scope and code.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "Code of the Legal Entity under specified identifier type's scope and code."
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effectiveAt datetime at which to retrieve the Access Metadata",
            "schema": {
              "type": "string",
              "description": "The effectiveAt datetime at which to retrieve the Access Metadata",
              "format": "dateorcutlabel",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the Access Metadata",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to retrieve the Access Metadata",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The access metadata for the Legal Entity or any failure.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/AccessMetadataValue"
                    }
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/AccessMetadataValue"
                    }
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/AccessMetadataValue"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/legalentities/{idTypeScope}/{idTypeCode}/{code}/metadata/{metadataKey}": {
      "put": {
        "tags": [
          "Legal Entities"
        ],
        "summary": "[EARLY ACCESS] UpsertLegalEntityAccessMetadata: Upsert a Legal Entity Access Metadata entry associated with a specific metadataKey. This creates or updates the data in LUSID.",
        "description": "Update or insert one Legal Entity Access Metadata entry in a single scope. An item will be updated if it already exists\r\nand inserted if it does not.\r\n            \r\nThe response will return the successfully updated or inserted Legal Entity Access Metadata rule or failure message if unsuccessful.\r\n            \r\nIt is important to always check to verify success (or failure).\r\n            \r\nMultiple rules for a metadataKey can exist with different effective at dates, when resources are accessed the rule that is active for the current time will be fetched.",
        "operationId": "UpsertLegalEntityAccessMetadata",
        "parameters": [
          {
            "name": "idTypeScope",
            "in": "path",
            "description": "Scope of the Legal Entity identifier.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "Scope of the Legal Entity identifier."
            }
          },
          {
            "name": "idTypeCode",
            "in": "path",
            "description": "Code of the Legal Entity identifier.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "Code of the Legal Entity identifier."
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "Code of the Legal Entity under specified identifier type's scope and code.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "Code of the Legal Entity under specified identifier type's scope and code."
            }
          },
          {
            "name": "metadataKey",
            "in": "path",
            "description": "Key of the metadata entry to retrieve",
            "required": true,
            "schema": {
              "maxLength": 100,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "Key of the metadata entry to retrieve"
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effectiveAt datetime at which to upsert the Access Metadata",
            "schema": {
              "type": "string",
              "description": "The effectiveAt datetime at which to upsert the Access Metadata",
              "format": "dateorcutlabel",
              "nullable": true
            }
          },
          {
            "name": "effectiveUntil",
            "in": "query",
            "description": "The effective datetime until which the Access Metadata is valid. If not supplied this will be valid indefinitely, or until the next 'effectiveAt' datetime of the Access Metadata",
            "schema": {
              "type": "string",
              "description": "The effective datetime until which the Access Metadata is valid. If not supplied this will be valid indefinitely, or until the next 'effectiveAt' datetime of the Access Metadata",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "requestBody": {
          "description": "The Legal Entity Access Metadata entry to upsert",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertLegalEntityAccessMetadataRequest"
              },
              "example": {
                "metadata": [
                  {
                    "value": "SilverLicence",
                    "provider": "TestDataProvider"
                  }
                ]
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertLegalEntityAccessMetadataRequest"
              },
              "example": {
                "metadata": [
                  {
                    "value": "SilverLicence",
                    "provider": "TestDataProvider"
                  }
                ]
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertLegalEntityAccessMetadataRequest"
              },
              "example": {
                "metadata": [
                  {
                    "value": "SilverLicence",
                    "provider": "TestDataProvider"
                  }
                ]
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertLegalEntityAccessMetadataRequest"
              },
              "example": {
                "metadata": [
                  {
                    "value": "SilverLicence",
                    "provider": "TestDataProvider"
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The successfully updated or inserted item or any failure.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfAccessMetadataValueOf"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfAccessMetadataValueOf"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfAccessMetadataValueOf"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      },
      "get": {
        "tags": [
          "Legal Entities"
        ],
        "summary": "[EARLY ACCESS] GetLegalEntityAccessMetadataByKey: Get an entry identified by a metadataKey in the Access Metadata of a Legal Entity",
        "description": "Get a specific Legal Entity Access Metadata by specifying the corresponding identifier parts and Legal Entity code\r\n            \r\nNo matching will be performed through this endpoint. To retrieve an entry, it is necessary to specify, exactly, the identifier of the entry",
        "operationId": "GetLegalEntityAccessMetadataByKey",
        "parameters": [
          {
            "name": "idTypeScope",
            "in": "path",
            "description": "Scope of the Legal Entity identifier.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "Scope of the Legal Entity identifier."
            }
          },
          {
            "name": "idTypeCode",
            "in": "path",
            "description": "Code of the Legal Entity identifier.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "Code of the Legal Entity identifier."
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "Code of the Legal Entity under specified identifier type's scope and code.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "Code of the Legal Entity under specified identifier type's scope and code."
            }
          },
          {
            "name": "metadataKey",
            "in": "path",
            "description": "Key of the metadata entry to retrieve",
            "required": true,
            "schema": {
              "maxLength": 100,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "Key of the metadata entry to retrieve"
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effectiveAt datetime at which to retrieve the Access Metadata",
            "schema": {
              "type": "string",
              "description": "The effectiveAt datetime at which to retrieve the Access Metadata",
              "format": "dateorcutlabel",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the Access Metadata",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to retrieve the Access Metadata",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The successfully retrieved Legal Entity access metadata filtered by metadataKey or any failure.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AccessMetadataValue"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AccessMetadataValue"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AccessMetadataValue"
                  }
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      },
      "delete": {
        "tags": [
          "Legal Entities"
        ],
        "summary": "[EARLY ACCESS] DeleteLegalEntityAccessMetadata: Delete a Legal Entity Access Metadata entry",
        "description": "Deletes the Legal Entity Access Metadata entry that exactly matches the provided identifier parts.\r\n\r\nIt is important to always check to verify success (or failure).",
        "operationId": "DeleteLegalEntityAccessMetadata",
        "parameters": [
          {
            "name": "idTypeScope",
            "in": "path",
            "description": "Scope of the Legal Entity identifier.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "Scope of the Legal Entity identifier."
            }
          },
          {
            "name": "idTypeCode",
            "in": "path",
            "description": "Code of the Legal Entity identifier.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "Code of the Legal Entity identifier."
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "Code of the Legal Entity under specified identifier type's scope and code.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "Code of the Legal Entity under specified identifier type's scope and code."
            }
          },
          {
            "name": "metadataKey",
            "in": "path",
            "description": "Key of the metadata entry to retrieve",
            "required": true,
            "schema": {
              "maxLength": 100,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "Key of the metadata entry to retrieve"
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective date to delete at, if this is not supplied, it will delete all data found",
            "schema": {
              "type": "string",
              "description": "The effective date to delete at, if this is not supplied, it will delete all data found",
              "format": "dateorcutlabel",
              "nullable": true
            }
          },
          {
            "name": "effectiveUntil",
            "in": "query",
            "description": "The effective date until which the delete is valid. If not supplied this will be valid indefinitely, or until the next 'effectiveAt' date of the Access Metadata",
            "schema": {
              "type": "string",
              "description": "The effective date until which the delete is valid. If not supplied this will be valid indefinitely, or until the next 'effectiveAt' date of the Access Metadata",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The Access Metadata with the given metadataKey has been deleted",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/legalentities/{idTypeScope}/{idTypeCode}/{code}/properties": {
      "post": {
        "tags": [
          "Legal Entities"
        ],
        "summary": "[EARLY ACCESS] SetLegalEntityProperties: Set Legal Entity Properties",
        "description": "Set properties of the legal entity.",
        "operationId": "SetLegalEntityProperties",
        "parameters": [
          {
            "name": "idTypeScope",
            "in": "path",
            "description": "Scope of the legal entity identifier type.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "Scope of the legal entity identifier type.",
              "nullable": true
            }
          },
          {
            "name": "idTypeCode",
            "in": "path",
            "description": "Code of the legal entity identifier type.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "Code of the legal entity identifier type.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "Code of the legal entity under specified identifier type's scope and code. This together with stated identifier type uniquely\r\n            identifies the legal entity.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "Code of the legal entity under specified identifier type's scope and code. This together with stated identifier type uniquely\r\n            identifies the legal entity.",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "Request containing properties to set for the legal entity. Properties not specified in request will not be changed.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SetLegalEntityPropertiesRequest"
              },
              "example": {
                "properties": {
                  "legalEntity/Details/Name": {
                    "key": "LegalEntity/Details/Name",
                    "value": {
                      "labelValue": "John Smith"
                    },
                    "effectiveFrom": "2016-07-01T00:00:00.0000000+00:00"
                  },
                  "legalEntity/Details/Country": {
                    "key": "LegalEntity/Details/Country",
                    "value": {
                      "labelValue": "United Kingdom"
                    },
                    "effectiveFrom": "2016-07-01T00:00:00.0000000+00:00"
                  }
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetLegalEntityPropertiesRequest"
              },
              "example": {
                "properties": {
                  "legalEntity/Details/Name": {
                    "key": "LegalEntity/Details/Name",
                    "value": {
                      "labelValue": "John Smith"
                    },
                    "effectiveFrom": "2016-07-01T00:00:00.0000000+00:00"
                  },
                  "legalEntity/Details/Country": {
                    "key": "LegalEntity/Details/Country",
                    "value": {
                      "labelValue": "United Kingdom"
                    },
                    "effectiveFrom": "2016-07-01T00:00:00.0000000+00:00"
                  }
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SetLegalEntityPropertiesRequest"
              },
              "example": {
                "properties": {
                  "legalEntity/Details/Name": {
                    "key": "LegalEntity/Details/Name",
                    "value": {
                      "labelValue": "John Smith"
                    },
                    "effectiveFrom": "2016-07-01T00:00:00.0000000+00:00"
                  },
                  "legalEntity/Details/Country": {
                    "key": "LegalEntity/Details/Country",
                    "value": {
                      "labelValue": "United Kingdom"
                    },
                    "effectiveFrom": "2016-07-01T00:00:00.0000000+00:00"
                  }
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SetLegalEntityPropertiesRequest"
              },
              "example": {
                "properties": {
                  "legalEntity/Details/Name": {
                    "key": "LegalEntity/Details/Name",
                    "value": {
                      "labelValue": "John Smith"
                    },
                    "effectiveFrom": "2016-07-01T00:00:00.0000000+00:00"
                  },
                  "legalEntity/Details/Country": {
                    "key": "LegalEntity/Details/Country",
                    "value": {
                      "labelValue": "United Kingdom"
                    },
                    "effectiveFrom": "2016-07-01T00:00:00.0000000+00:00"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The Legal Entity with updated properties",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LegalEntity"
                },
                "example": {
                  "displayName": "LegalEntity1Description",
                  "description": "LegalEntity1DisplayName",
                  "lusidLegalEntityId": "LUID_00003D4V",
                  "identifiers": {
                    "legalEntity/ExternalIdentifier/LEI": {
                      "key": "LegalEntity/ExternalIdentifier/LEI",
                      "value": {
                        "labelValue": "LEI_12345678"
                      }
                    },
                    "legalEntity/InternalIdentifier/InternalLeiId": {
                      "key": "LegalEntity/InternalIdentifier/InternalLeiId",
                      "value": {
                        "labelValue": "Internal_XHSP2038"
                      }
                    }
                  },
                  "properties": {
                    "legalEntity/Details/Name": {
                      "key": "LegalEntity/Details/Name",
                      "value": {
                        "labelValue": "John Smith"
                      },
                      "effectiveFrom": "2016-07-01T00:00:00.0000000+00:00"
                    },
                    "legalEntity/Details/Country": {
                      "key": "LegalEntity/Details/Country",
                      "value": {
                        "labelValue": "United Kingdom"
                      },
                      "effectiveFrom": "2016-07-01T00:00:00.0000000+00:00"
                    }
                  },
                  "counterpartyRiskInformation": {
                    "countryOfRisk": "UnitedKingdom",
                    "creditRatings": [
                      {
                        "ratingSource": "StandardAndPoors",
                        "rating": "AA+"
                      }
                    ],
                    "industryClassifiers": [
                      {
                        "classificationSystemName": "GICS2018",
                        "classificationCode": "10101010"
                      }
                    ]
                  },
                  "version": {
                    "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                    "asAtDate": "2019-01-01T12:00:00.0100000+00:00"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LegalEntity"
                },
                "example": {
                  "displayName": "LegalEntity1Description",
                  "description": "LegalEntity1DisplayName",
                  "lusidLegalEntityId": "LUID_00003D4V",
                  "identifiers": {
                    "legalEntity/ExternalIdentifier/LEI": {
                      "key": "LegalEntity/ExternalIdentifier/LEI",
                      "value": {
                        "labelValue": "LEI_12345678"
                      }
                    },
                    "legalEntity/InternalIdentifier/InternalLeiId": {
                      "key": "LegalEntity/InternalIdentifier/InternalLeiId",
                      "value": {
                        "labelValue": "Internal_XHSP2038"
                      }
                    }
                  },
                  "properties": {
                    "legalEntity/Details/Name": {
                      "key": "LegalEntity/Details/Name",
                      "value": {
                        "labelValue": "John Smith"
                      },
                      "effectiveFrom": "2016-07-01T00:00:00.0000000+00:00"
                    },
                    "legalEntity/Details/Country": {
                      "key": "LegalEntity/Details/Country",
                      "value": {
                        "labelValue": "United Kingdom"
                      },
                      "effectiveFrom": "2016-07-01T00:00:00.0000000+00:00"
                    }
                  },
                  "counterpartyRiskInformation": {
                    "countryOfRisk": "UnitedKingdom",
                    "creditRatings": [
                      {
                        "ratingSource": "StandardAndPoors",
                        "rating": "AA+"
                      }
                    ],
                    "industryClassifiers": [
                      {
                        "classificationSystemName": "GICS2018",
                        "classificationCode": "10101010"
                      }
                    ]
                  },
                  "version": {
                    "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                    "asAtDate": "2019-01-01T12:00:00.0100000+00:00"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LegalEntity"
                },
                "example": {
                  "displayName": "LegalEntity1Description",
                  "description": "LegalEntity1DisplayName",
                  "lusidLegalEntityId": "LUID_00003D4V",
                  "identifiers": {
                    "legalEntity/ExternalIdentifier/LEI": {
                      "key": "LegalEntity/ExternalIdentifier/LEI",
                      "value": {
                        "labelValue": "LEI_12345678"
                      }
                    },
                    "legalEntity/InternalIdentifier/InternalLeiId": {
                      "key": "LegalEntity/InternalIdentifier/InternalLeiId",
                      "value": {
                        "labelValue": "Internal_XHSP2038"
                      }
                    }
                  },
                  "properties": {
                    "legalEntity/Details/Name": {
                      "key": "LegalEntity/Details/Name",
                      "value": {
                        "labelValue": "John Smith"
                      },
                      "effectiveFrom": "2016-07-01T00:00:00.0000000+00:00"
                    },
                    "legalEntity/Details/Country": {
                      "key": "LegalEntity/Details/Country",
                      "value": {
                        "labelValue": "United Kingdom"
                      },
                      "effectiveFrom": "2016-07-01T00:00:00.0000000+00:00"
                    }
                  },
                  "counterpartyRiskInformation": {
                    "countryOfRisk": "UnitedKingdom",
                    "creditRatings": [
                      {
                        "ratingSource": "StandardAndPoors",
                        "rating": "AA+"
                      }
                    ],
                    "industryClassifiers": [
                      {
                        "classificationSystemName": "GICS2018",
                        "classificationCode": "10101010"
                      }
                    ]
                  },
                  "version": {
                    "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                    "asAtDate": "2019-01-01T12:00:00.0100000+00:00"
                  }
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/legalentities/{idTypeScope}/{idTypeCode}/{code}/relationships": {
      "get": {
        "tags": [
          "Legal Entities"
        ],
        "summary": "[EARLY ACCESS] GetLegalEntityRelationships: Get Relationships for Legal Entity",
        "description": "Get Relationships for the specified Legal Entity",
        "operationId": "GetLegalEntityRelationships",
        "parameters": [
          {
            "name": "idTypeScope",
            "in": "path",
            "description": "Scope of the legal entity's identifier type.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "Scope of the legal entity's identifier type.",
              "nullable": true
            }
          },
          {
            "name": "idTypeCode",
            "in": "path",
            "description": "Code of the legal entity's identifier type.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "Code of the legal entity's identifier type.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "Code of the legal entity under specified identifier type's scope and code. This together with stated identifier type uniquely\r\n            identifies the legal entity.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "Code of the legal entity under specified identifier type's scope and code. This together with stated identifier type uniquely\r\n            identifies the legal entity.",
              "nullable": true
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime or cut label at which to get relationships. Defaults to the current LUSID system datetime if not specified.",
            "schema": {
              "maxLength": 256,
              "minLength": 0,
              "pattern": "^[a-zA-Z0-9\\-_\\+:\\.]+$",
              "type": "string",
              "description": "The effective datetime or cut label at which to get relationships. Defaults to the current LUSID system datetime if not specified.",
              "format": "dateorcutlabel",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve relationships. Defaults to return the latest LUSID AsAt time if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to retrieve relationships. Defaults to return the latest LUSID AsAt time if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter relationships. Users should provide null or empty string for this field until further notice.",
            "schema": {
              "maxLength": 16384,
              "minLength": 0,
              "pattern": "^[\\s\\S]*$",
              "type": "string",
              "description": "Expression to filter relationships. Users should provide null or empty string for this field until further notice.",
              "nullable": true
            }
          },
          {
            "name": "identifierTypes",
            "in": "query",
            "description": "Identifier types (as property keys) used for referencing Persons or Legal Entities.\r\n            These can be specified from the 'Person' or 'LegalEntity' domains and have the format {domain}/{scope}/{code}, for example\r\n            'Person/CompanyDetails/Role'. An Empty array may be used to return all related Entities.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
              },
              "description": "Identifier types (as property keys) used for referencing Persons or Legal Entities.\r\n            These can be specified from the 'Person' or 'LegalEntity' domains and have the format {domain}/{scope}/{code}, for example\r\n            'Person/CompanyDetails/Role'. An Empty array may be used to return all related Entities.",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The relationships for the specified legal entity.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfRelationship"
                },
                "example": {
                  "values": [
                    {
                      "relationshipDefinitionId": {
                        "scope": "PortfolioManagementTeam",
                        "code": "Traders"
                      },
                      "relatedEntity": {
                        "entityType": "LegalEntity",
                        "entityId": {
                          "idTypeScope": "HrSystem1",
                          "idTypeCode": "InternalId",
                          "code": "XY10001111"
                        },
                        "displayName": "James Smith",
                        "properties": {},
                        "identifiers": [
                          {
                            "identifierScope": "HrSystem1",
                            "identifierType": "InternalId",
                            "identifierValue": "XY10001111"
                          }
                        ]
                      },
                      "traversalDirection": "Out",
                      "traversalDescription": "is legal representative for",
                      "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                      "effectiveUntil": "2022-01-01T12:00:00.0000000+00:00"
                    }
                  ],
                  "href": "https://example.com",
                  "links": []
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfRelationship"
                },
                "example": {
                  "values": [
                    {
                      "relationshipDefinitionId": {
                        "scope": "PortfolioManagementTeam",
                        "code": "Traders"
                      },
                      "relatedEntity": {
                        "entityType": "LegalEntity",
                        "entityId": {
                          "idTypeScope": "HrSystem1",
                          "idTypeCode": "InternalId",
                          "code": "XY10001111"
                        },
                        "displayName": "James Smith",
                        "properties": {},
                        "identifiers": [
                          {
                            "identifierScope": "HrSystem1",
                            "identifierType": "InternalId",
                            "identifierValue": "XY10001111"
                          }
                        ]
                      },
                      "traversalDirection": "Out",
                      "traversalDescription": "is legal representative for",
                      "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                      "effectiveUntil": "2022-01-01T12:00:00.0000000+00:00"
                    }
                  ],
                  "href": "https://example.com",
                  "links": []
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfRelationship"
                },
                "example": {
                  "values": [
                    {
                      "relationshipDefinitionId": {
                        "scope": "PortfolioManagementTeam",
                        "code": "Traders"
                      },
                      "relatedEntity": {
                        "entityType": "LegalEntity",
                        "entityId": {
                          "idTypeScope": "HrSystem1",
                          "idTypeCode": "InternalId",
                          "code": "XY10001111"
                        },
                        "displayName": "James Smith",
                        "properties": {},
                        "identifiers": [
                          {
                            "identifierScope": "HrSystem1",
                            "identifierType": "InternalId",
                            "identifierValue": "XY10001111"
                          }
                        ]
                      },
                      "traversalDirection": "Out",
                      "traversalDescription": "is legal representative for",
                      "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                      "effectiveUntil": "2022-01-01T12:00:00.0000000+00:00"
                    }
                  ],
                  "href": "https://example.com",
                  "links": []
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/metadata/access/resources": {
      "get": {
        "tags": [
          "Application Metadata"
        ],
        "summary": "ListAccessControlledResources: Get resources available for access control",
        "description": "Get the comprehensive set of resources that are available for access control",
        "operationId": "ListAccessControlledResources",
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "description": "Optional. Expression to filter the result set. \r\n            For example, to filter on the Application, use \"application eq 'string'\"\r\n            Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "maxLength": 16384,
              "minLength": 0,
              "pattern": "^[\\s\\S]*$",
              "type": "string",
              "description": "Optional. Expression to filter the result set. \r\n            For example, to filter on the Application, use \"application eq 'string'\"\r\n            Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfAccessControlledResource"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfAccessControlledResource"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfAccessControlledResource"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      }
    },
    "/api/metadata/downloads/exceladdin": {
      "get": {
        "tags": [
          "Application Metadata"
        ],
        "summary": "GetExcelAddin: Download Excel Addin",
        "description": "Download the LUSID Excel Addin for Microsoft Excel. Not providing a specific value will return the latest version being returned",
        "operationId": "GetExcelAddin",
        "parameters": [
          {
            "name": "version",
            "in": "query",
            "description": "The requested version of the Excel plugin",
            "schema": {
              "maxLength": 30,
              "minLength": 1,
              "pattern": "^\\d+\\.\\d+(\\.)?\\d+(-[a-zA-Z0-9\\.-]{1,30})?$",
              "type": "string",
              "description": "The requested version of the Excel plugin",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/FileResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      }
    },
    "/api/metadata/versions": {
      "get": {
        "tags": [
          "Application Metadata"
        ],
        "summary": "GetLusidVersions: Get LUSID versions",
        "description": "Get the semantic versions associated with LUSID and its ecosystem",
        "operationId": "GetLusidVersions",
        "responses": {
          "200": {
            "description": "Collection of versions associated with LUSID",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/VersionSummaryDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VersionSummaryDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/VersionSummaryDto"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      }
    },
    "/api/orders": {
      "get": {
        "tags": [
          "Orders"
        ],
        "summary": "[EARLY ACCESS] ListOrders: List Orders",
        "description": "Fetch the last pre-AsAt date version of each order in scope (does not fetch the entire history).",
        "operationId": "ListOrders",
        "parameters": [
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the order. Defaults to return the latest version of the order if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to retrieve the order. Defaults to return the latest version of the order if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "page",
            "in": "query",
            "description": "The pagination token to use to continue listing orders from a previous call to list orders.\r\n            This value is returned from the previous call. If a pagination token is provided the sortBy, filter, effectiveAt, and asAt fields\r\n            must not have changed since the original request. Also, if set, a start value cannot be provided.",
            "schema": {
              "maxLength": 500,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\+/]*={0,3}$",
              "type": "string",
              "description": "The pagination token to use to continue listing orders from a previous call to list orders.\r\n            This value is returned from the previous call. If a pagination token is provided the sortBy, filter, effectiveAt, and asAt fields\r\n            must not have changed since the original request. Also, if set, a start value cannot be provided.",
              "nullable": true
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "Order the results by these fields. Use use the '-' sign to denote descending order e.g. -MyFieldName.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Order the results by these fields. Use use the '-' sign to denote descending order e.g. -MyFieldName.",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "start",
            "in": "query",
            "description": "When paginating, skip this number of results.",
            "schema": {
              "type": "integer",
              "description": "When paginating, skip this number of results.",
              "format": "int32",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "limit",
            "in": "query",
            "description": "When paginating, limit the number of returned results to this many.",
            "schema": {
              "maximum": 5000,
              "minimum": 1,
              "type": "integer",
              "description": "When paginating, limit the number of returned results to this many.",
              "format": "int32",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the result set. Read more about filtering results from LUSID here:\r\n            https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "maxLength": 16384,
              "minLength": 0,
              "pattern": "^[\\s\\S]*$",
              "type": "string",
              "description": "Expression to filter the result set. Read more about filtering results from LUSID here:\r\n            https://support.lusid.com/filtering-results-from-lusid.",
              "nullable": true
            }
          },
          {
            "name": "propertyKeys",
            "in": "query",
            "description": "A list of property keys from the \"Orders\" domain to decorate onto each order.\r\n                These take the format {domain}/{scope}/{code} e.g. \"Orders/system/Name\".",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
              },
              "description": "A list of property keys from the \"Orders\" domain to decorate onto each order.\r\n                These take the format {domain}/{scope}/{code} e.g. \"Orders/system/Name\".",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "Orders in scope.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfOrder"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfOrder"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfOrder"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      },
      "post": {
        "tags": [
          "Orders"
        ],
        "summary": "[EARLY ACCESS] UpsertOrders: Upsert Order",
        "description": "Upsert; update existing orders with given ids, or create new orders otherwise.",
        "operationId": "UpsertOrders",
        "requestBody": {
          "description": "The collection of order requests.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/OrderSetRequest"
              },
              "example": {
                "orderRequests": [
                  {
                    "properties": {
                      "order/MyScope/SomeOrderProperty": {
                        "key": "Order/MyScope/SomeOrderProperty",
                        "value": {
                          "labelValue": "XYZ000034567"
                        }
                      }
                    },
                    "instrumentIdentifiers": {
                      "instrument/default/Currency": "GBP"
                    },
                    "quantity": 100,
                    "side": "Buy",
                    "orderBookId": {
                      "scope": "MyScope",
                      "code": "UKEQ Orders"
                    },
                    "portfolioId": {
                      "scope": "MyScope",
                      "code": "UK Equity"
                    },
                    "id": {
                      "scope": "MyScope",
                      "code": "ORD00000123"
                    },
                    "state": "New",
                    "type": "Limit",
                    "timeInForce": "GoodTilCancel",
                    "date": "2023-05-02T00:00:00.0000000+00:00",
                    "price": {
                      "amount": 534,
                      "currency": "USD"
                    },
                    "orderInstruction": {
                      "scope": "MyScope",
                      "code": "Instruction-06"
                    },
                    "package": {
                      "scope": "MyScope",
                      "code": "UKEQ Package"
                    }
                  }
                ]
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderSetRequest"
              },
              "example": {
                "orderRequests": [
                  {
                    "properties": {
                      "order/MyScope/SomeOrderProperty": {
                        "key": "Order/MyScope/SomeOrderProperty",
                        "value": {
                          "labelValue": "XYZ000034567"
                        }
                      }
                    },
                    "instrumentIdentifiers": {
                      "instrument/default/Currency": "GBP"
                    },
                    "quantity": 100,
                    "side": "Buy",
                    "orderBookId": {
                      "scope": "MyScope",
                      "code": "UKEQ Orders"
                    },
                    "portfolioId": {
                      "scope": "MyScope",
                      "code": "UK Equity"
                    },
                    "id": {
                      "scope": "MyScope",
                      "code": "ORD00000123"
                    },
                    "state": "New",
                    "type": "Limit",
                    "timeInForce": "GoodTilCancel",
                    "date": "2023-05-02T00:00:00.0000000+00:00",
                    "price": {
                      "amount": 534,
                      "currency": "USD"
                    },
                    "orderInstruction": {
                      "scope": "MyScope",
                      "code": "Instruction-06"
                    },
                    "package": {
                      "scope": "MyScope",
                      "code": "UKEQ Package"
                    }
                  }
                ]
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderSetRequest"
              },
              "example": {
                "orderRequests": [
                  {
                    "properties": {
                      "order/MyScope/SomeOrderProperty": {
                        "key": "Order/MyScope/SomeOrderProperty",
                        "value": {
                          "labelValue": "XYZ000034567"
                        }
                      }
                    },
                    "instrumentIdentifiers": {
                      "instrument/default/Currency": "GBP"
                    },
                    "quantity": 100,
                    "side": "Buy",
                    "orderBookId": {
                      "scope": "MyScope",
                      "code": "UKEQ Orders"
                    },
                    "portfolioId": {
                      "scope": "MyScope",
                      "code": "UK Equity"
                    },
                    "id": {
                      "scope": "MyScope",
                      "code": "ORD00000123"
                    },
                    "state": "New",
                    "type": "Limit",
                    "timeInForce": "GoodTilCancel",
                    "date": "2023-05-02T00:00:00.0000000+00:00",
                    "price": {
                      "amount": 534,
                      "currency": "USD"
                    },
                    "orderInstruction": {
                      "scope": "MyScope",
                      "code": "Instruction-06"
                    },
                    "package": {
                      "scope": "MyScope",
                      "code": "UKEQ Package"
                    }
                  }
                ]
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/OrderSetRequest"
              },
              "example": {
                "orderRequests": [
                  {
                    "properties": {
                      "order/MyScope/SomeOrderProperty": {
                        "key": "Order/MyScope/SomeOrderProperty",
                        "value": {
                          "labelValue": "XYZ000034567"
                        }
                      }
                    },
                    "instrumentIdentifiers": {
                      "instrument/default/Currency": "GBP"
                    },
                    "quantity": 100,
                    "side": "Buy",
                    "orderBookId": {
                      "scope": "MyScope",
                      "code": "UKEQ Orders"
                    },
                    "portfolioId": {
                      "scope": "MyScope",
                      "code": "UK Equity"
                    },
                    "id": {
                      "scope": "MyScope",
                      "code": "ORD00000123"
                    },
                    "state": "New",
                    "type": "Limit",
                    "timeInForce": "GoodTilCancel",
                    "date": "2023-05-02T00:00:00.0000000+00:00",
                    "price": {
                      "amount": 534,
                      "currency": "USD"
                    },
                    "orderInstruction": {
                      "scope": "MyScope",
                      "code": "Instruction-06"
                    },
                    "package": {
                      "scope": "MyScope",
                      "code": "UKEQ Package"
                    }
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "A collection of orders.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfOrder"
                },
                "example": {
                  "values": [
                    {
                      "properties": {
                        "order/MyScope/SomeOrderProperty": {
                          "key": "Order/MyScope/SomeOrderProperty",
                          "value": {
                            "labelValue": "XYZ000034567"
                          }
                        }
                      },
                      "version": {
                        "effectiveFrom": "2018-03-05T10:10:10.0000000+00:00",
                        "asAtDate": "2018-03-05T10:10:10.0000000+00:00"
                      },
                      "instrumentIdentifiers": {
                        "instrument/default/Currency": "GBP"
                      },
                      "quantity": 100,
                      "side": "Buy",
                      "orderBookId": {
                        "scope": "MyScope",
                        "code": "UKEQ Orders"
                      },
                      "portfolioId": {
                        "scope": "MyScope",
                        "code": "testPortfolio"
                      },
                      "id": {
                        "scope": "MyScope",
                        "code": "ORD00000123"
                      },
                      "state": "New",
                      "type": "Limit",
                      "timeInForce": "GoodTilCancel",
                      "date": "1999-06-05T00:00:00.0000000+00:00",
                      "stopPrice": {
                        "amount": 534,
                        "currency": "USD"
                      },
                      "orderInstructionId": {
                        "scope": "MyScope",
                        "code": "Instruction-06"
                      },
                      "packageId": {
                        "scope": "MyScope",
                        "code": "UKEQ Package"
                      }
                    }
                  ],
                  "links": []
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfOrder"
                },
                "example": {
                  "values": [
                    {
                      "properties": {
                        "order/MyScope/SomeOrderProperty": {
                          "key": "Order/MyScope/SomeOrderProperty",
                          "value": {
                            "labelValue": "XYZ000034567"
                          }
                        }
                      },
                      "version": {
                        "effectiveFrom": "2018-03-05T10:10:10.0000000+00:00",
                        "asAtDate": "2018-03-05T10:10:10.0000000+00:00"
                      },
                      "instrumentIdentifiers": {
                        "instrument/default/Currency": "GBP"
                      },
                      "quantity": 100,
                      "side": "Buy",
                      "orderBookId": {
                        "scope": "MyScope",
                        "code": "UKEQ Orders"
                      },
                      "portfolioId": {
                        "scope": "MyScope",
                        "code": "testPortfolio"
                      },
                      "id": {
                        "scope": "MyScope",
                        "code": "ORD00000123"
                      },
                      "state": "New",
                      "type": "Limit",
                      "timeInForce": "GoodTilCancel",
                      "date": "1999-06-05T00:00:00.0000000+00:00",
                      "stopPrice": {
                        "amount": 534,
                        "currency": "USD"
                      },
                      "orderInstructionId": {
                        "scope": "MyScope",
                        "code": "Instruction-06"
                      },
                      "packageId": {
                        "scope": "MyScope",
                        "code": "UKEQ Package"
                      }
                    }
                  ],
                  "links": []
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfOrder"
                },
                "example": {
                  "values": [
                    {
                      "properties": {
                        "order/MyScope/SomeOrderProperty": {
                          "key": "Order/MyScope/SomeOrderProperty",
                          "value": {
                            "labelValue": "XYZ000034567"
                          }
                        }
                      },
                      "version": {
                        "effectiveFrom": "2018-03-05T10:10:10.0000000+00:00",
                        "asAtDate": "2018-03-05T10:10:10.0000000+00:00"
                      },
                      "instrumentIdentifiers": {
                        "instrument/default/Currency": "GBP"
                      },
                      "quantity": 100,
                      "side": "Buy",
                      "orderBookId": {
                        "scope": "MyScope",
                        "code": "UKEQ Orders"
                      },
                      "portfolioId": {
                        "scope": "MyScope",
                        "code": "testPortfolio"
                      },
                      "id": {
                        "scope": "MyScope",
                        "code": "ORD00000123"
                      },
                      "state": "New",
                      "type": "Limit",
                      "timeInForce": "GoodTilCancel",
                      "date": "1999-06-05T00:00:00.0000000+00:00",
                      "stopPrice": {
                        "amount": 534,
                        "currency": "USD"
                      },
                      "orderInstructionId": {
                        "scope": "MyScope",
                        "code": "Instruction-06"
                      },
                      "packageId": {
                        "scope": "MyScope",
                        "code": "UKEQ Package"
                      }
                    }
                  ],
                  "links": []
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/orders/{scope}/{code}": {
      "get": {
        "tags": [
          "Orders"
        ],
        "summary": "[EARLY ACCESS] GetOrder: Get Order",
        "description": "Fetch an Order that matches the specified identifier",
        "operationId": "GetOrder",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope to which the order belongs.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope to which the order belongs.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The order's unique identifier.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The order's unique identifier.",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the order. Defaults to return the latest version of the order if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to retrieve the order. Defaults to return the latest version of the order if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "propertyKeys",
            "in": "query",
            "description": "A list of property keys from the \"Orders\" domain to decorate onto the order.\r\n            These take the format {domain}/{scope}/{code} e.g. \"Orders/system/Name\".",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
              },
              "description": "A list of property keys from the \"Orders\" domain to decorate onto the order.\r\n            These take the format {domain}/{scope}/{code} e.g. \"Orders/system/Name\".",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The order matching the given identifier.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                },
                "example": {
                  "properties": {
                    "order/MyScope/SomeOrderProperty": {
                      "key": "Order/MyScope/SomeOrderProperty",
                      "value": {
                        "labelValue": "XYZ000034567"
                      }
                    }
                  },
                  "version": {
                    "effectiveFrom": "2018-03-05T10:10:10.0000000+00:00",
                    "asAtDate": "2018-03-05T10:10:10.0000000+00:00"
                  },
                  "instrumentIdentifiers": {
                    "instrument/default/Currency": "GBP"
                  },
                  "quantity": 100,
                  "side": "Buy",
                  "orderBookId": {
                    "scope": "MyScope",
                    "code": "UKEQ Orders"
                  },
                  "portfolioId": {
                    "scope": "MyScope",
                    "code": "testPortfolio"
                  },
                  "id": {
                    "scope": "MyScope",
                    "code": "ORD00000123"
                  },
                  "state": "New",
                  "type": "Limit",
                  "timeInForce": "GoodTilCancel",
                  "date": "1999-06-05T00:00:00.0000000+00:00",
                  "limitPrice": {
                    "amount": 534,
                    "currency": "USD"
                  },
                  "orderInstructionId": {
                    "scope": "MyScope",
                    "code": "Instruction-06"
                  },
                  "packageId": {
                    "scope": "MyScope",
                    "code": "UKEQ Package"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                },
                "example": {
                  "properties": {
                    "order/MyScope/SomeOrderProperty": {
                      "key": "Order/MyScope/SomeOrderProperty",
                      "value": {
                        "labelValue": "XYZ000034567"
                      }
                    }
                  },
                  "version": {
                    "effectiveFrom": "2018-03-05T10:10:10.0000000+00:00",
                    "asAtDate": "2018-03-05T10:10:10.0000000+00:00"
                  },
                  "instrumentIdentifiers": {
                    "instrument/default/Currency": "GBP"
                  },
                  "quantity": 100,
                  "side": "Buy",
                  "orderBookId": {
                    "scope": "MyScope",
                    "code": "UKEQ Orders"
                  },
                  "portfolioId": {
                    "scope": "MyScope",
                    "code": "testPortfolio"
                  },
                  "id": {
                    "scope": "MyScope",
                    "code": "ORD00000123"
                  },
                  "state": "New",
                  "type": "Limit",
                  "timeInForce": "GoodTilCancel",
                  "date": "1999-06-05T00:00:00.0000000+00:00",
                  "limitPrice": {
                    "amount": 534,
                    "currency": "USD"
                  },
                  "orderInstructionId": {
                    "scope": "MyScope",
                    "code": "Instruction-06"
                  },
                  "packageId": {
                    "scope": "MyScope",
                    "code": "UKEQ Package"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                },
                "example": {
                  "properties": {
                    "order/MyScope/SomeOrderProperty": {
                      "key": "Order/MyScope/SomeOrderProperty",
                      "value": {
                        "labelValue": "XYZ000034567"
                      }
                    }
                  },
                  "version": {
                    "effectiveFrom": "2018-03-05T10:10:10.0000000+00:00",
                    "asAtDate": "2018-03-05T10:10:10.0000000+00:00"
                  },
                  "instrumentIdentifiers": {
                    "instrument/default/Currency": "GBP"
                  },
                  "quantity": 100,
                  "side": "Buy",
                  "orderBookId": {
                    "scope": "MyScope",
                    "code": "UKEQ Orders"
                  },
                  "portfolioId": {
                    "scope": "MyScope",
                    "code": "testPortfolio"
                  },
                  "id": {
                    "scope": "MyScope",
                    "code": "ORD00000123"
                  },
                  "state": "New",
                  "type": "Limit",
                  "timeInForce": "GoodTilCancel",
                  "date": "1999-06-05T00:00:00.0000000+00:00",
                  "limitPrice": {
                    "amount": 534,
                    "currency": "USD"
                  },
                  "orderInstructionId": {
                    "scope": "MyScope",
                    "code": "Instruction-06"
                  },
                  "packageId": {
                    "scope": "MyScope",
                    "code": "UKEQ Package"
                  }
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      },
      "delete": {
        "tags": [
          "Orders"
        ],
        "summary": "[EARLY ACCESS] DeleteOrder: Delete order",
        "description": "Delete an order. Deletion will be valid from the order's creation datetime.\r\nThis means that the order will no longer exist at any effective datetime from the asAt datetime of deletion.",
        "operationId": "DeleteOrder",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The order scope.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The order scope."
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The order's code. This, together with the scope uniquely identifies the order to delete.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The order's code. This, together with the scope uniquely identifies the order to delete."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The response from deleting an order.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/persons/{idTypeScope}/{idTypeCode}/{code}/metadata": {
      "get": {
        "tags": [
          "Persons"
        ],
        "summary": "[EARLY ACCESS] GetAllPersonAccessMetadata: Get Access Metadata rules for a Person",
        "description": "Pass the Scope and Code of the Person identifier along with the person code parameter to retrieve the associated Access Metadata",
        "operationId": "GetAllPersonAccessMetadata",
        "parameters": [
          {
            "name": "idTypeScope",
            "in": "path",
            "description": "Scope of the person identifier.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Scope of the person identifier."
            }
          },
          {
            "name": "idTypeCode",
            "in": "path",
            "description": "Code of the person identifier.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Code of the person identifier."
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "Code of the person under specified identifier type's scope and code.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "Code of the person under specified identifier type's scope and code."
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effectiveAt datetime at which to retrieve the Access Metadata",
            "schema": {
              "type": "string",
              "description": "The effectiveAt datetime at which to retrieve the Access Metadata",
              "format": "dateorcutlabel",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the Access Metadata",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to retrieve the Access Metadata",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The access metadata for the Person or any failure.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/AccessMetadataValue"
                    }
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/AccessMetadataValue"
                    }
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/AccessMetadataValue"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/persons/{idTypeScope}/{idTypeCode}/{code}/metadata/{metadataKey}": {
      "put": {
        "tags": [
          "Persons"
        ],
        "summary": "[EARLY ACCESS] UpsertPersonAccessMetadata: Upsert a Person Access Metadata entry associated with a specific metadataKey. This creates or updates the data in LUSID.",
        "description": "Update or insert one Person Access Metadata entry in a single scope. An item will be updated if it already exists\r\nand inserted if it does not.\r\n            \r\nThe response will return the successfully updated or inserted Person Access Metadata rule or failure message if unsuccessful.\r\n            \r\nIt is important to always check to verify success (or failure).\r\n            \r\nMultiple rules for a metadataKey can exist with different effective at dates, when resources are accessed the rule that is active for the current time will be fetched.",
        "operationId": "UpsertPersonAccessMetadata",
        "parameters": [
          {
            "name": "idTypeScope",
            "in": "path",
            "description": "Scope of the person identifier.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Scope of the person identifier."
            }
          },
          {
            "name": "idTypeCode",
            "in": "path",
            "description": "Code of the person identifier.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Code of the person identifier."
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "Code of the person under specified identifier type's scope and code.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "Code of the person under specified identifier type's scope and code."
            }
          },
          {
            "name": "metadataKey",
            "in": "path",
            "description": "Key of the metadata entry to retrieve",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Key of the metadata entry to retrieve"
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effectiveAt datetime at which to upsert the Access Metadata",
            "schema": {
              "type": "string",
              "description": "The effectiveAt datetime at which to upsert the Access Metadata",
              "format": "dateorcutlabel",
              "nullable": true
            }
          },
          {
            "name": "effectiveUntil",
            "in": "query",
            "description": "The effective datetime until which the Access Metadata is valid. If not supplied this will be valid indefinitely, or until the next 'effectiveAt' datetime of the Access Metadata",
            "schema": {
              "type": "string",
              "description": "The effective datetime until which the Access Metadata is valid. If not supplied this will be valid indefinitely, or until the next 'effectiveAt' datetime of the Access Metadata",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "requestBody": {
          "description": "The Person Access Metadata entry to upsert",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertPersonAccessMetadataRequest"
              },
              "example": {
                "metadata": [
                  {
                    "value": "SilverLicence",
                    "provider": "TestDataProvider"
                  }
                ]
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertPersonAccessMetadataRequest"
              },
              "example": {
                "metadata": [
                  {
                    "value": "SilverLicence",
                    "provider": "TestDataProvider"
                  }
                ]
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertPersonAccessMetadataRequest"
              },
              "example": {
                "metadata": [
                  {
                    "value": "SilverLicence",
                    "provider": "TestDataProvider"
                  }
                ]
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertPersonAccessMetadataRequest"
              },
              "example": {
                "metadata": [
                  {
                    "value": "SilverLicence",
                    "provider": "TestDataProvider"
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The successfully updated or inserted item or any failure.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfAccessMetadataValueOf"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfAccessMetadataValueOf"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfAccessMetadataValueOf"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      },
      "get": {
        "tags": [
          "Persons"
        ],
        "summary": "[EARLY ACCESS] GetPersonAccessMetadataByKey: Get an entry identified by a metadataKey in the Access Metadata of a Person",
        "description": "Get a specific Person Access Metadata by specifying the corresponding identifier parts and Person code\r\n            \r\nNo matching will be performed through this endpoint. To retrieve an entry, it is necessary to specify, exactly, the identifier of the entry",
        "operationId": "GetPersonAccessMetadataByKey",
        "parameters": [
          {
            "name": "idTypeScope",
            "in": "path",
            "description": "Scope of the person identifier.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Scope of the person identifier."
            }
          },
          {
            "name": "idTypeCode",
            "in": "path",
            "description": "Code of the person identifier.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Code of the person identifier."
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "Code of the person under specified identifier type's scope and code.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "Code of the person under specified identifier type's scope and code."
            }
          },
          {
            "name": "metadataKey",
            "in": "path",
            "description": "Key of the metadata entry to retrieve",
            "required": true,
            "schema": {
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "Key of the metadata entry to retrieve"
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effectiveAt datetime at which to retrieve the Access Metadata",
            "schema": {
              "type": "string",
              "description": "The effectiveAt datetime at which to retrieve the Access Metadata",
              "format": "dateorcutlabel",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the Access Metadata",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to retrieve the Access Metadata",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The successfully retrieved Person access metadata filtered by metadataKey or any failure.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AccessMetadataValue"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AccessMetadataValue"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AccessMetadataValue"
                  }
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      },
      "delete": {
        "tags": [
          "Persons"
        ],
        "summary": "[EARLY ACCESS] DeletePersonAccessMetadata: Delete a Person Access Metadata entry",
        "description": "Deletes the Person Access Metadata entry that exactly matches the provided identifier parts.\r\n\r\nIt is important to always check to verify success (or failure).",
        "operationId": "DeletePersonAccessMetadata",
        "parameters": [
          {
            "name": "idTypeScope",
            "in": "path",
            "description": "Scope of the person identifier.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Scope of the person identifier."
            }
          },
          {
            "name": "idTypeCode",
            "in": "path",
            "description": "Code of the person identifier.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Code of the person identifier."
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "Code of the person under specified identifier type's scope and code.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "Code of the person under specified identifier type's scope and code."
            }
          },
          {
            "name": "metadataKey",
            "in": "path",
            "description": "Key of the metadata entry to retrieve",
            "required": true,
            "schema": {
              "maxLength": 256,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "Key of the metadata entry to retrieve"
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective date to delete at, if this is not supplied, it will delete all data found",
            "schema": {
              "type": "string",
              "description": "The effective date to delete at, if this is not supplied, it will delete all data found",
              "format": "dateorcutlabel",
              "nullable": true
            }
          },
          {
            "name": "effectiveUntil",
            "in": "query",
            "description": "The effective date until which the delete is valid. If not supplied this will be valid indefinitely, or until the next 'effectiveAt' date of the Access Metadata",
            "schema": {
              "type": "string",
              "description": "The effective date until which the delete is valid. If not supplied this will be valid indefinitely, or until the next 'effectiveAt' date of the Access Metadata",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The Access Metadata with the given metadataKey has been deleted",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/persons/{idTypeScope}/{idTypeCode}/{code}/relationships": {
      "get": {
        "tags": [
          "Persons"
        ],
        "summary": "[EARLY ACCESS] GetPersonRelationships: Get Relationships for Person",
        "description": "Get relationships for the specified person.",
        "operationId": "GetPersonRelationships",
        "parameters": [
          {
            "name": "idTypeScope",
            "in": "path",
            "description": "Scope of the person's identifier type.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "Scope of the person's identifier type.",
              "nullable": true
            }
          },
          {
            "name": "idTypeCode",
            "in": "path",
            "description": "Code of the person's identifier type.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "Code of the person's identifier type.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "Code of the person under specified identifier type's scope and code. This together with stated identifier type uniquely\r\n            identifies the person.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "Code of the person under specified identifier type's scope and code. This together with stated identifier type uniquely\r\n            identifies the person.",
              "nullable": true
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime or cut label at which to get relationships. Defaults to the current LUSID system datetime if not specified.",
            "schema": {
              "maxLength": 256,
              "minLength": 0,
              "pattern": "^[a-zA-Z0-9\\-_\\+:\\.]+$",
              "type": "string",
              "description": "The effective datetime or cut label at which to get relationships. Defaults to the current LUSID system datetime if not specified.",
              "format": "dateorcutlabel",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve relationships. Defaults to return the latest LUSID AsAt time if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to retrieve relationships. Defaults to return the latest LUSID AsAt time if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter relationships. Users should provide null or empty string for this field until further notice.",
            "schema": {
              "maxLength": 16384,
              "minLength": 0,
              "pattern": "^[\\s\\S]*$",
              "type": "string",
              "description": "Expression to filter relationships. Users should provide null or empty string for this field until further notice.",
              "nullable": true
            }
          },
          {
            "name": "identifierTypes",
            "in": "query",
            "description": "Identifier types (as property keys) used for referencing Persons or Legal Entities.\r\n            These can be specified from the 'Person' or 'LegalEntity' domains and have the format {domain}/{scope}/{code}, for example\r\n            'Person/CompanyDetails/Role'. An Empty array may be used to return all related Entities.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
              },
              "description": "Identifier types (as property keys) used for referencing Persons or Legal Entities.\r\n            These can be specified from the 'Person' or 'LegalEntity' domains and have the format {domain}/{scope}/{code}, for example\r\n            'Person/CompanyDetails/Role'. An Empty array may be used to return all related Entities.",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The relationships for the specified person.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfRelationship"
                },
                "example": {
                  "values": [
                    {
                      "relationshipDefinitionId": {
                        "scope": "PortfolioManagementTeam",
                        "code": "Traders"
                      },
                      "relatedEntity": {
                        "entityType": "Person",
                        "entityId": {
                          "scope": "UkPortfolio",
                          "code": "PortfolioId-148176"
                        },
                        "displayName": "James Smith",
                        "properties": {},
                        "scope": "UkPortfolio",
                        "identifiers": [
                          {
                            "identifierType": "code",
                            "identifierValue": "PortfolioId-148176"
                          }
                        ]
                      },
                      "traversalDirection": "In",
                      "traversalDescription": "can trade with portfolio",
                      "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                      "effectiveUntil": "2022-01-01T12:00:00.0000000+00:00"
                    }
                  ],
                  "links": []
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfRelationship"
                },
                "example": {
                  "values": [
                    {
                      "relationshipDefinitionId": {
                        "scope": "PortfolioManagementTeam",
                        "code": "Traders"
                      },
                      "relatedEntity": {
                        "entityType": "Person",
                        "entityId": {
                          "scope": "UkPortfolio",
                          "code": "PortfolioId-148176"
                        },
                        "displayName": "James Smith",
                        "properties": {},
                        "scope": "UkPortfolio",
                        "identifiers": [
                          {
                            "identifierType": "code",
                            "identifierValue": "PortfolioId-148176"
                          }
                        ]
                      },
                      "traversalDirection": "In",
                      "traversalDescription": "can trade with portfolio",
                      "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                      "effectiveUntil": "2022-01-01T12:00:00.0000000+00:00"
                    }
                  ],
                  "links": []
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfRelationship"
                },
                "example": {
                  "values": [
                    {
                      "relationshipDefinitionId": {
                        "scope": "PortfolioManagementTeam",
                        "code": "Traders"
                      },
                      "relatedEntity": {
                        "entityType": "Person",
                        "entityId": {
                          "scope": "UkPortfolio",
                          "code": "PortfolioId-148176"
                        },
                        "displayName": "James Smith",
                        "properties": {},
                        "scope": "UkPortfolio",
                        "identifiers": [
                          {
                            "identifierType": "code",
                            "identifierValue": "PortfolioId-148176"
                          }
                        ]
                      },
                      "traversalDirection": "In",
                      "traversalDescription": "can trade with portfolio",
                      "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                      "effectiveUntil": "2022-01-01T12:00:00.0000000+00:00"
                    }
                  ],
                  "links": []
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/portfoliogroups/{scope}": {
      "post": {
        "tags": [
          "Portfolio Groups"
        ],
        "summary": "CreatePortfolioGroup: Create portfolio group",
        "description": "Create a portfolio group in a specific scope.",
        "operationId": "CreatePortfolioGroup",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope that the portfolio group will be created in.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope that the portfolio group will be created in.",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "The definition and details of the portfolio group.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePortfolioGroupRequest"
              },
              "example": {
                "code": "MyGroupCode",
                "created": "2019-10-04T00:00:00.0000000+00:00",
                "values": [
                  {
                    "scope": "MyScope",
                    "code": "MyPortfolioCode1"
                  },
                  {
                    "scope": "MyScope",
                    "code": "MyPortfolioCode2"
                  }
                ],
                "subGroups": [
                  {
                    "scope": "MyScope",
                    "code": "MySubGroupCode"
                  }
                ],
                "properties": {},
                "displayName": "MyGroupName",
                "description": "My group description"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePortfolioGroupRequest"
              },
              "example": {
                "code": "MyGroupCode",
                "created": "2019-10-04T00:00:00.0000000+00:00",
                "values": [
                  {
                    "scope": "MyScope",
                    "code": "MyPortfolioCode1"
                  },
                  {
                    "scope": "MyScope",
                    "code": "MyPortfolioCode2"
                  }
                ],
                "subGroups": [
                  {
                    "scope": "MyScope",
                    "code": "MySubGroupCode"
                  }
                ],
                "properties": {},
                "displayName": "MyGroupName",
                "description": "My group description"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePortfolioGroupRequest"
              },
              "example": {
                "code": "MyGroupCode",
                "created": "2019-10-04T00:00:00.0000000+00:00",
                "values": [
                  {
                    "scope": "MyScope",
                    "code": "MyPortfolioCode1"
                  },
                  {
                    "scope": "MyScope",
                    "code": "MyPortfolioCode2"
                  }
                ],
                "subGroups": [
                  {
                    "scope": "MyScope",
                    "code": "MySubGroupCode"
                  }
                ],
                "properties": {},
                "displayName": "MyGroupName",
                "description": "My group description"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePortfolioGroupRequest"
              },
              "example": {
                "code": "MyGroupCode",
                "created": "2019-10-04T00:00:00.0000000+00:00",
                "values": [
                  {
                    "scope": "MyScope",
                    "code": "MyPortfolioCode1"
                  },
                  {
                    "scope": "MyScope",
                    "code": "MyPortfolioCode2"
                  }
                ],
                "subGroups": [
                  {
                    "scope": "MyScope",
                    "code": "MySubGroupCode"
                  }
                ],
                "properties": {},
                "displayName": "MyGroupName",
                "description": "My group description"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The newly created portfolio group",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioGroup"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioGroup"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioGroup"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      },
      "get": {
        "tags": [
          "Portfolio Groups"
        ],
        "summary": "[EARLY ACCESS] ListPortfolioGroups: List portfolio groups",
        "description": "List all the portfolio groups in a single scope.",
        "operationId": "ListPortfolioGroups",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope to list the portfolio groups in.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope to list the portfolio groups in.",
              "nullable": true
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime at which to list the portfolio groups. Defaults to the current LUSID system datetime if not specified.",
            "schema": {
              "type": "string",
              "description": "The effective datetime at which to list the portfolio groups. Defaults to the current LUSID system datetime if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to list the portfolio groups. Defaults to return the latest version of each portfolio group if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to list the portfolio groups. Defaults to return the latest version of each portfolio group if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the result set.\r\n            For example, to filter on the Display Name, use \"displayName eq 'string'\"\r\n            Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "maxLength": 16384,
              "minLength": 0,
              "pattern": "^[\\s\\S]*$",
              "type": "string",
              "description": "Expression to filter the result set.\r\n            For example, to filter on the Display Name, use \"displayName eq 'string'\"\r\n            Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The portfolio groups in the specified scope",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfPortfolioGroup"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfPortfolioGroup"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfPortfolioGroup"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/portfoliogroups/{scope}/{code}": {
      "put": {
        "tags": [
          "Portfolio Groups"
        ],
        "summary": "[EARLY ACCESS] UpdatePortfolioGroup: Update portfolio group",
        "description": "Update the definition of a single portfolio group. Not all elements within a portfolio group definition are modifiable\r\ndue to the potential implications for data already stored against the portfolio group.",
        "operationId": "UpdatePortfolioGroup",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the portfolio group to update the definition for.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the portfolio group to update the definition for.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the portfolio group to update the definition for. Together with the scope this uniquely identifies the portfolio group.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the portfolio group to update the definition for. Together with the scope this uniquely identifies the portfolio group.",
              "nullable": true
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime at which to update the definition.",
            "schema": {
              "type": "string",
              "description": "The effective datetime at which to update the definition.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "requestBody": {
          "description": "The updated portfolio group definition.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePortfolioGroupRequest"
              },
              "example": {
                "displayName": "MyGroupName",
                "description": "My Group Description"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePortfolioGroupRequest"
              },
              "example": {
                "displayName": "MyGroupName",
                "description": "My Group Description"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePortfolioGroupRequest"
              },
              "example": {
                "displayName": "MyGroupName",
                "description": "My Group Description"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePortfolioGroupRequest"
              },
              "example": {
                "displayName": "MyGroupName",
                "description": "My Group Description"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The updated definition of the portfolio group",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioGroup"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioGroup"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioGroup"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      },
      "delete": {
        "tags": [
          "Portfolio Groups"
        ],
        "summary": "[EARLY ACCESS] DeletePortfolioGroup: Delete portfolio group",
        "description": "Delete a single portfolio group. A portfolio group can be deleted while it still contains portfolios or sub groups.\r\nIn this case any portfolios or sub groups contained in this group will not be deleted, however they will no longer be grouped together by this portfolio group.\r\nThe deletion will be valid from the portfolio group's creation datetime, ie. the portfolio group will no longer exist at any effective datetime from the asAt datetime of deletion.",
        "operationId": "DeletePortfolioGroup",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the portfolio group to delete.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the portfolio group to delete.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the portfolio group to delete. Together with the scope this uniquely identifies the portfolio group to delete.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the portfolio group to delete. Together with the scope this uniquely identifies the portfolio group to delete.",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The datetime that the portfolio group was deleted",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      },
      "get": {
        "tags": [
          "Portfolio Groups"
        ],
        "summary": "GetPortfolioGroup: Get portfolio group",
        "description": "Retrieve the definition of a single portfolio group.",
        "operationId": "GetPortfolioGroup",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the portfolio group to retrieve the definition for.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the portfolio group to retrieve the definition for.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the portfolio group to retrieve the definition for. Together with the scope\r\n            this uniquely identifies the portfolio group.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the portfolio group to retrieve the definition for. Together with the scope\r\n            this uniquely identifies the portfolio group.",
              "nullable": true
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime at which to retrieve the portfolio group definition. Defaults to the current LUSID system datetime if not specified.",
            "schema": {
              "type": "string",
              "description": "The effective datetime at which to retrieve the portfolio group definition. Defaults to the current LUSID system datetime if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the portfolio group definition. Defaults to return\r\n            the latest version of the portfolio group definition if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to retrieve the portfolio group definition. Defaults to return\r\n            the latest version of the portfolio group definition if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The requested portfolio group definition",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioGroup"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioGroup"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioGroup"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      }
    },
    "/api/portfoliogroups/{scope}/{code}/commands": {
      "get": {
        "tags": [
          "Portfolio Groups"
        ],
        "summary": "GetPortfolioGroupCommands: Get portfolio group commands",
        "description": "Gets all the commands that modified a single portfolio group.",
        "operationId": "GetPortfolioGroupCommands",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the portfolio group to retrieve the commands for.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the portfolio group to retrieve the commands for.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the portfolio group to retrieve the commands for. Together with the scope this uniquely identifies the portfolio group.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the portfolio group to retrieve the commands for. Together with the scope this uniquely identifies the portfolio group.",
              "nullable": true
            }
          },
          {
            "name": "fromAsAt",
            "in": "query",
            "description": "The lower bound asAt datetime (inclusive) from which to retrieve commands. There is no lower bound if this is not specified.",
            "schema": {
              "type": "string",
              "description": "The lower bound asAt datetime (inclusive) from which to retrieve commands. There is no lower bound if this is not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "toAsAt",
            "in": "query",
            "description": "The upper bound asAt datetime (inclusive) from which to retrieve commands. There is no upper bound if this is not specified.",
            "schema": {
              "type": "string",
              "description": "The upper bound asAt datetime (inclusive) from which to retrieve commands. There is no upper bound if this is not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the result set.\r\n             For example, to filter on the User ID, use \"userId.id eq 'string'\"\r\n            Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "maxLength": 16384,
              "minLength": 0,
              "pattern": "^[\\s\\S]*$",
              "type": "string",
              "description": "Expression to filter the result set.\r\n             For example, to filter on the User ID, use \"userId.id eq 'string'\"\r\n            Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The commands that modified the specified portfolio group",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfProcessedCommand"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfProcessedCommand"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfProcessedCommand"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      }
    },
    "/api/portfoliogroups/{scope}/{code}/expansion": {
      "get": {
        "tags": [
          "Portfolio Groups"
        ],
        "summary": "[EARLY ACCESS] GetPortfolioGroupExpansion: Get portfolio group expansion",
        "description": "List all the portfolios in a group, including all portfolios within sub groups in the group. Each portfolio will be decorated with all of its properties unless a property filter is specified.",
        "operationId": "GetPortfolioGroupExpansion",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the portfolio group to expand.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the portfolio group to expand.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the portfolio group to expand. Together with the scope this uniquely identifies the portfolio\r\n            group to expand.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the portfolio group to expand. Together with the scope this uniquely identifies the portfolio\r\n            group to expand.",
              "nullable": true
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime at which to expand the portfolio group. Defaults to the current LUSID system datetime if not specified.",
            "schema": {
              "type": "string",
              "description": "The effective datetime at which to expand the portfolio group. Defaults to the current LUSID system datetime if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to expand the portfolio group. Defaults to return the latest version of each portfolio in the group if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to expand the portfolio group. Defaults to return the latest version of each portfolio in the group if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "propertyFilter",
            "in": "query",
            "description": "The restricted list of property keys from the \"Portfolio\" domain which will be decorated onto each portfolio. These take the format {domain}/{scope}/{code} e.g. \"Portfolio/Manager/Id\".",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
              },
              "description": "The restricted list of property keys from the \"Portfolio\" domain which will be decorated onto each portfolio. These take the format {domain}/{scope}/{code} e.g. \"Portfolio/Manager/Id\".",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The expanded portfolio group",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ExpandedGroup"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExpandedGroup"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExpandedGroup"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/portfoliogroups/{scope}/{code}/holdings": {
      "get": {
        "tags": [
          "Portfolio Groups"
        ],
        "summary": "GetHoldingsForPortfolioGroup: Get holdings for transaction portfolios in portfolio group",
        "description": "Get the holdings of transaction portfolios in specified portfolio group.",
        "operationId": "GetHoldingsForPortfolioGroup",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the portfolio group.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the portfolio group.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the portfolio group. Together with the scope this uniquely identifies\r\n            the portfolio group.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the portfolio group. Together with the scope this uniquely identifies\r\n            the portfolio group.",
              "nullable": true
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime or cut label at which to retrieve the holdings of transaction\r\n            portfolios in the portfolio group. Defaults to the current LUSID system datetime if not specified.",
            "schema": {
              "type": "string",
              "description": "The effective datetime or cut label at which to retrieve the holdings of transaction\r\n            portfolios in the portfolio group. Defaults to the current LUSID system datetime if not specified.",
              "format": "dateorcutlabel",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the holdings of transaction portfolios in the portfolio group. Defaults\r\n            to return the latest version of the holdings if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to retrieve the holdings of transaction portfolios in the portfolio group. Defaults\r\n            to return the latest version of the holdings if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the result set. Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "maxLength": 16384,
              "minLength": 0,
              "pattern": "^[\\s\\S]*$",
              "type": "string",
              "description": "Expression to filter the result set. Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
              "nullable": true
            }
          },
          {
            "name": "propertyKeys",
            "in": "query",
            "description": "A list of property keys from the \"Instrument\" or \"Holding\" domain to decorate onto\r\n            the holdings. These take the format {domain}/{scope}/{code} e.g. \"Instrument/system/Name\" or \"Holding/system/Cost\".",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
              },
              "description": "A list of property keys from the \"Instrument\" or \"Holding\" domain to decorate onto\r\n            the holdings. These take the format {domain}/{scope}/{code} e.g. \"Instrument/system/Name\" or \"Holding/system/Cost\".",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "byTaxlots",
            "in": "query",
            "description": "Whether or not to expand the holdings to return the underlying tax-lots. Defaults to\r\n            False.",
            "schema": {
              "type": "boolean",
              "description": "Whether or not to expand the holdings to return the underlying tax-lots. Defaults to\r\n            False.",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The holdings of transaction portfolios in a specific version of portfolio group",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/VersionedResourceListOfPortfolioHolding"
                },
                "example": {
                  "version": {
                    "effectiveFrom": "2019-03-05T12:00:00.0000000+00:00",
                    "asAtDate": "2019-03-05T12:00:00.0000000+00:00"
                  },
                  "values": [
                    {
                      "instrumentScope": "default",
                      "instrumentUid": "LUID_XH4GNUEX",
                      "subHoldingKeys": {
                        "transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "Algo1"
                          }
                        }
                      },
                      "properties": {
                        "instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "Example Instrument 1"
                          },
                          "effectiveFrom": "2010-01-01T00:00:00.0000000+00:00"
                        }
                      },
                      "holdingType": "P",
                      "units": 10,
                      "settledUnits": 10,
                      "cost": {
                        "amount": 2.5,
                        "currency": "GBP"
                      },
                      "costPortfolioCcy": {
                        "amount": 2.5,
                        "currency": "GBP"
                      },
                      "currency": "ZZZ",
                      "holdingTypeName": "Position"
                    }
                  ],
                  "links": []
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VersionedResourceListOfPortfolioHolding"
                },
                "example": {
                  "version": {
                    "effectiveFrom": "2019-03-05T12:00:00.0000000+00:00",
                    "asAtDate": "2019-03-05T12:00:00.0000000+00:00"
                  },
                  "values": [
                    {
                      "instrumentScope": "default",
                      "instrumentUid": "LUID_XH4GNUEX",
                      "subHoldingKeys": {
                        "transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "Algo1"
                          }
                        }
                      },
                      "properties": {
                        "instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "Example Instrument 1"
                          },
                          "effectiveFrom": "2010-01-01T00:00:00.0000000+00:00"
                        }
                      },
                      "holdingType": "P",
                      "units": 10,
                      "settledUnits": 10,
                      "cost": {
                        "amount": 2.5,
                        "currency": "GBP"
                      },
                      "costPortfolioCcy": {
                        "amount": 2.5,
                        "currency": "GBP"
                      },
                      "currency": "ZZZ",
                      "holdingTypeName": "Position"
                    }
                  ],
                  "links": []
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/VersionedResourceListOfPortfolioHolding"
                },
                "example": {
                  "version": {
                    "effectiveFrom": "2019-03-05T12:00:00.0000000+00:00",
                    "asAtDate": "2019-03-05T12:00:00.0000000+00:00"
                  },
                  "values": [
                    {
                      "instrumentScope": "default",
                      "instrumentUid": "LUID_XH4GNUEX",
                      "subHoldingKeys": {
                        "transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "Algo1"
                          }
                        }
                      },
                      "properties": {
                        "instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "Example Instrument 1"
                          },
                          "effectiveFrom": "2010-01-01T00:00:00.0000000+00:00"
                        }
                      },
                      "holdingType": "P",
                      "units": 10,
                      "settledUnits": 10,
                      "cost": {
                        "amount": 2.5,
                        "currency": "GBP"
                      },
                      "costPortfolioCcy": {
                        "amount": 2.5,
                        "currency": "GBP"
                      },
                      "currency": "ZZZ",
                      "holdingTypeName": "Position"
                    }
                  ],
                  "links": []
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      }
    },
    "/api/portfoliogroups/{scope}/{code}/metadata": {
      "get": {
        "tags": [
          "Portfolio Groups"
        ],
        "summary": "[EARLY ACCESS] GetPortfolioGroupMetadata: Get Access Metadata rules for Portfolio Group",
        "description": "Pass the scope and Portfolio Group code parameters to retrieve the associated Access Metadata",
        "operationId": "GetPortfolioGroupMetadata",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the Portfolio Group",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the Portfolio Group"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The Portfolio Group code",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The Portfolio Group code"
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effectiveAt datetime at which to retrieve the Access Metadata",
            "schema": {
              "type": "string",
              "description": "The effectiveAt datetime at which to retrieve the Access Metadata",
              "format": "dateorcutlabel",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the Access Metadata",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to retrieve the Access Metadata",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The access metadata for the portfolio group or any failure.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/AccessMetadataValue"
                    }
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/AccessMetadataValue"
                    }
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/AccessMetadataValue"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/portfoliogroups/{scope}/{code}/metadata/{metadataKey}": {
      "get": {
        "tags": [
          "Portfolio Groups"
        ],
        "summary": "[EARLY ACCESS] GetPortfolioGroupAccessMetadataByKey: Get an entry identified by a metadataKey in the Access Metadata of a Portfolio Group",
        "description": "Get a specific Portfolio Group access metadata by specifying the corresponding identifier parts\r\n            \r\nNo matching will be performed through this endpoint. To retrieve a rule, it is necessary to specify, exactly, the identifier of the rule",
        "operationId": "GetPortfolioGroupAccessMetadataByKey",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the Portfolio Group",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the Portfolio Group"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The Portfolio Group code",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The Portfolio Group code"
            }
          },
          {
            "name": "metadataKey",
            "in": "path",
            "description": "Key of the metadata entry to retrieve",
            "required": true,
            "schema": {
              "maxLength": 256,
              "minLength": 1,
              "type": "string",
              "description": "Key of the metadata entry to retrieve"
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effectiveAt datetime at which to retrieve the access metadata",
            "schema": {
              "type": "string",
              "description": "The effectiveAt datetime at which to retrieve the access metadata",
              "format": "dateorcutlabel",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the access metadata",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to retrieve the access metadata",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The successfully retrieved Portfolio group access metadata filtered by metadataKey or any failure.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AccessMetadataValue"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AccessMetadataValue"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AccessMetadataValue"
                  }
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      },
      "put": {
        "tags": [
          "Portfolio Groups"
        ],
        "summary": "[EARLY ACCESS] UpsertPortfolioGroupAccessMetadata: Upsert a Portfolio Group Access Metadata entry associated with a specific metadataKey. This creates or updates the data in LUSID.",
        "description": "Update or insert one Portfolio Group Access Metadata Entry in a single scope. An item will be updated if it already exists\r\nand inserted if it does not.\r\n            \r\nThe response will return the successfully updated or inserted Portfolio Group Access Metadata rule or failure message if unsuccessful.\r\n            \r\nIt is important to always check to verify success (or failure).\r\n            \r\nMultiple rules for a metadataKey can exist with different effective at dates, when resources are accessed the rule that is active for the current time will be fetched.",
        "operationId": "UpsertPortfolioGroupAccessMetadata",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the Portfolio Group",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the Portfolio Group"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The Portfolio Group code",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The Portfolio Group code"
            }
          },
          {
            "name": "metadataKey",
            "in": "path",
            "description": "Key of the access metadata entry to upsert",
            "required": true,
            "schema": {
              "maxLength": 256,
              "minLength": 1,
              "type": "string",
              "description": "Key of the access metadata entry to upsert"
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The date this rule will be effective from",
            "schema": {
              "type": "string",
              "description": "The date this rule will be effective from",
              "format": "dateorcutlabel",
              "nullable": true
            }
          },
          {
            "name": "effectiveUntil",
            "in": "query",
            "description": "The effective date until which the Access Metadata is valid. If not supplied this will be valid indefinitely, or until the next 'effectiveAt' date of the Access Metadata",
            "schema": {
              "type": "string",
              "description": "The effective date until which the Access Metadata is valid. If not supplied this will be valid indefinitely, or until the next 'effectiveAt' date of the Access Metadata",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "requestBody": {
          "description": "The Portfolio Group Access Metadata rule to upsert",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertPortfolioGroupAccessMetadataRequest"
              },
              "example": {
                "metadata": [
                  {
                    "value": "SilverLicence",
                    "provider": "TestDataProvider"
                  }
                ]
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertPortfolioGroupAccessMetadataRequest"
              },
              "example": {
                "metadata": [
                  {
                    "value": "SilverLicence",
                    "provider": "TestDataProvider"
                  }
                ]
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertPortfolioGroupAccessMetadataRequest"
              },
              "example": {
                "metadata": [
                  {
                    "value": "SilverLicence",
                    "provider": "TestDataProvider"
                  }
                ]
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertPortfolioGroupAccessMetadataRequest"
              },
              "example": {
                "metadata": [
                  {
                    "value": "SilverLicence",
                    "provider": "TestDataProvider"
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The successfully updated or inserted item or any failure.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfAccessMetadataValueOf"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfAccessMetadataValueOf"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfAccessMetadataValueOf"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      },
      "delete": {
        "tags": [
          "Portfolio Groups"
        ],
        "summary": "[EARLY ACCESS] DeleteKeyFromPortfolioGroupAccessMetadata: Delete a Portfolio Group Access Metadata entry",
        "description": "Deletes the Portfolio Group Access Metadata entry that exactly matches the provided identifier parts.\r\n\r\nIt is important to always check to verify success (or failure).",
        "operationId": "DeleteKeyFromPortfolioGroupAccessMetadata",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the Portfolio Group",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the Portfolio Group"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The Portfolio Group code",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The Portfolio Group code"
            }
          },
          {
            "name": "metadataKey",
            "in": "path",
            "description": "Key of the Access Metadata entry to delete",
            "required": true,
            "schema": {
              "maxLength": 256,
              "minLength": 1,
              "type": "string",
              "description": "Key of the Access Metadata entry to delete"
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective date to delete at, if this is not supplied, it will delete all data found",
            "schema": {
              "type": "string",
              "description": "The effective date to delete at, if this is not supplied, it will delete all data found",
              "format": "dateorcutlabel",
              "nullable": true
            }
          },
          {
            "name": "effectiveUntil",
            "in": "query",
            "description": "The effective date until which the delete is valid. If not supplied this will be valid indefinitely, or until the next 'effectiveAt' date of the Access Metadata",
            "schema": {
              "type": "string",
              "description": "The effective date until which the delete is valid. If not supplied this will be valid indefinitely, or until the next 'effectiveAt' date of the Access Metadata",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The has been deleted",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/portfoliogroups/{scope}/{code}/portfolios": {
      "post": {
        "tags": [
          "Portfolio Groups"
        ],
        "summary": "[EARLY ACCESS] AddPortfolioToGroup: Add portfolio to group",
        "description": "Add a single portfolio to a portfolio group.",
        "operationId": "AddPortfolioToGroup",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the portfolio group to add a portfolio to.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the portfolio group to add a portfolio to.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the portfolio group to add a portfolio to. Together with the scope this uniquely identifies the portfolio group.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the portfolio group to add a portfolio to. Together with the scope this uniquely identifies the portfolio group.",
              "nullable": true
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime from which the portfolio will be added to the group.",
            "schema": {
              "type": "string",
              "description": "The effective datetime from which the portfolio will be added to the group.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "requestBody": {
          "description": "The resource identifier of the portfolio to add to the portfolio group.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/ResourceId"
              },
              "example": {
                "scope": "MyScope",
                "code": "MyCode"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResourceId"
              },
              "example": {
                "scope": "MyScope",
                "code": "MyCode"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ResourceId"
              },
              "example": {
                "scope": "MyScope",
                "code": "MyCode"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ResourceId"
              },
              "example": {
                "scope": "MyScope",
                "code": "MyCode"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The portfolio group containing the newly added portfolio",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioGroup"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioGroup"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioGroup"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/portfoliogroups/{scope}/{code}/portfolios/{portfolioScope}/{portfolioCode}": {
      "delete": {
        "tags": [
          "Portfolio Groups"
        ],
        "summary": "[EARLY ACCESS] DeletePortfolioFromGroup: Delete portfolio from group",
        "description": "Remove a single portfolio from a portfolio group.",
        "operationId": "DeletePortfolioFromGroup",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the portfolio group to remove the portfolio from.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the portfolio group to remove the portfolio from.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the portfolio group to remove the portfolio from. Together with the scope this uniquely identifies the portfolio group.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the portfolio group to remove the portfolio from. Together with the scope this uniquely identifies the portfolio group.",
              "nullable": true
            }
          },
          {
            "name": "portfolioScope",
            "in": "path",
            "description": "The scope of the portfolio being removed from the portfolio group.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the portfolio being removed from the portfolio group.",
              "nullable": true
            }
          },
          {
            "name": "portfolioCode",
            "in": "path",
            "description": "The code of the portfolio being removed from the portfolio group. Together with the scope this uniquely identifies the portfolio to remove.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the portfolio being removed from the portfolio group. Together with the scope this uniquely identifies the portfolio to remove.",
              "nullable": true
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime from which the portfolio will be removed from the portfolio group.",
            "schema": {
              "type": "string",
              "description": "The effective datetime from which the portfolio will be removed from the portfolio group.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The portfolio group with the portfolio removed from the group",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioGroup"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioGroup"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioGroup"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/portfoliogroups/{scope}/{code}/properties": {
      "get": {
        "tags": [
          "Portfolio Groups"
        ],
        "summary": "[EARLY ACCESS] GetGroupProperties: Get group properties",
        "description": "List all the properties of a single portfolio group.",
        "operationId": "GetGroupProperties",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the group to list the properties for.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the group to list the properties for.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the group to list the properties for. Together with the scope this uniquely identifies the group.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the group to list the properties for. Together with the scope this uniquely identifies the group.",
              "nullable": true
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective date time or cut label at which to list the group's properties. Defaults to the current LUSID system datetime if not specified.",
            "schema": {
              "type": "string",
              "description": "The effective date time or cut label at which to list the group's properties. Defaults to the current LUSID system datetime if not specified.",
              "format": "dateorcutlabel",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt date time at which to list the group's properties. Defaults to return the latest version of each property if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt date time at which to list the group's properties. Defaults to return the latest version of each property if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The properties of the specified group",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioGroupProperties"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioGroupProperties"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioGroupProperties"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/portfoliogroups/{scope}/{code}/properties/$delete": {
      "post": {
        "tags": [
          "Portfolio Groups"
        ],
        "summary": "[EARLY ACCESS] DeleteGroupProperties: Delete group properties",
        "description": "Delete one or more properties from a single portfolio group. If the properties are time variant then an effective date time from which the properties\r\nwill be deleted must be specified. If the properties are perpetual then it is invalid to specify an effective date time for deletion.",
        "operationId": "DeleteGroupProperties",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the group to delete properties from.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the group to delete properties from.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the group to delete properties from. Together with the scope this uniquely identifies the group.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the group to delete properties from. Together with the scope this uniquely identifies the group.",
              "nullable": true
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime or cut label at which to delete time-variant properties from.\r\n            The property must exist at the specified 'effectiveAt' datetime. If the 'effectiveAt' is not provided or is\r\n            before the time-variant property exists then a failure is returned. Do not specify this parameter if any of\r\n            the properties to delete are perpetual.",
            "schema": {
              "type": "string",
              "description": "The effective datetime or cut label at which to delete time-variant properties from.\r\n            The property must exist at the specified 'effectiveAt' datetime. If the 'effectiveAt' is not provided or is\r\n            before the time-variant property exists then a failure is returned. Do not specify this parameter if any of\r\n            the properties to delete are perpetual.",
              "format": "dateorcutlabel",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "The property keys of the properties to delete. These take the format\r\n            {domain}/{scope}/{code} e.g. \"PortfolioGroup/Manager/Id\". Each property must be from the \"PortfolioGroup\" domain.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
                },
                "description": "The property keys of the properties to delete. These take the format\r\n            {domain}/{scope}/{code} e.g. \"PortfolioGroup/Manager/Id\". Each property must be from the \"PortfolioGroup\" domain."
              },
              "example": [
                "PortfolioGroup/MyScope/MyPropertyName",
                "PortfolioGroup/MyScope/MyPropertyName2"
              ]
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
                },
                "description": "The property keys of the properties to delete. These take the format\r\n            {domain}/{scope}/{code} e.g. \"PortfolioGroup/Manager/Id\". Each property must be from the \"PortfolioGroup\" domain."
              },
              "example": [
                "PortfolioGroup/MyScope/MyPropertyName",
                "PortfolioGroup/MyScope/MyPropertyName2"
              ]
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
                },
                "description": "The property keys of the properties to delete. These take the format\r\n            {domain}/{scope}/{code} e.g. \"PortfolioGroup/Manager/Id\". Each property must be from the \"PortfolioGroup\" domain."
              },
              "example": [
                "PortfolioGroup/MyScope/MyPropertyName",
                "PortfolioGroup/MyScope/MyPropertyName2"
              ]
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
                },
                "description": "The property keys of the properties to delete. These take the format\r\n            {domain}/{scope}/{code} e.g. \"PortfolioGroup/Manager/Id\". Each property must be from the \"PortfolioGroup\" domain."
              },
              "example": [
                "PortfolioGroup/MyScope/MyPropertyName",
                "PortfolioGroup/MyScope/MyPropertyName2"
              ]
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The datetime that the properties were deleted from the specified group",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/portfoliogroups/{scope}/{code}/properties/$upsert": {
      "post": {
        "tags": [
          "Portfolio Groups"
        ],
        "summary": "[EARLY ACCESS] UpsertGroupProperties: Upsert group properties",
        "description": "Update or insert one or more properties onto a single group. A property will be updated if it\r\nalready exists and inserted if it does not. All properties must be of the domain 'PortfolioGroup'.\r\n            \r\nUpserting a property that exists for a group, with a null value, will delete the instance of the property for that group.\r\n            \r\nProperties have an <i>effectiveFrom</i> datetime for which the property is valid, and an <i>effectiveUntil</i>\r\ndatetime until which the property is valid. Not supplying an <i>effectiveUntil</i> datetime results in the property being\r\nvalid indefinitely, or until the next <i>effectiveFrom</i> datetime of the property.",
        "operationId": "UpsertGroupProperties",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the group to update or insert the properties onto.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the group to update or insert the properties onto.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the group to update or insert the properties onto. Together with the scope this uniquely identifies the group.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the group to update or insert the properties onto. Together with the scope this uniquely identifies the group.",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "The properties to be updated or inserted onto the group. Each property in\r\n             the request must be keyed by its unique property key. This has the format {domain}/{scope}/{code} e.g. \"PortfolioGroup/Manager/Id\".",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/Property"
                },
                "description": "The properties to be updated or inserted onto the group. Each property in\r\n             the request must be keyed by its unique property key. This has the format {domain}/{scope}/{code} e.g. \"PortfolioGroup/Manager/Id\".",
                "nullable": true
              },
              "example": {
                "portfolioGroup/MyScope/FundManagerName": {
                  "key": "PortfolioGroup/MyScope/FundManagerName",
                  "value": {
                    "labelValue": "Smith"
                  },
                  "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00"
                },
                "portfolioGroup/MyScope/SomeProperty": {
                  "key": "PortfolioGroup/MyScope/SomeProperty",
                  "value": {
                    "labelValue": "SomeValue"
                  },
                  "effectiveFrom": "2016-01-01T00:00:00.0000000+00:00"
                },
                "portfolioGroup/MyScope/AnotherProperty": {
                  "key": "PortfolioGroup/MyScope/AnotherProperty",
                  "value": {
                    "labelValue": "AnotherValue"
                  },
                  "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00",
                  "effectiveUntil": "2020-01-01T00:00:00.0000000+00:00"
                },
                "portfolioGroup/MyScope/ReBalanceInterval": {
                  "key": "PortfolioGroup/MyScope/ReBalanceInterval",
                  "value": {
                    "metricValue": {
                      "value": 30,
                      "unit": "Days"
                    }
                  }
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/Property"
                },
                "description": "The properties to be updated or inserted onto the group. Each property in\r\n             the request must be keyed by its unique property key. This has the format {domain}/{scope}/{code} e.g. \"PortfolioGroup/Manager/Id\".",
                "nullable": true
              },
              "example": {
                "portfolioGroup/MyScope/FundManagerName": {
                  "key": "PortfolioGroup/MyScope/FundManagerName",
                  "value": {
                    "labelValue": "Smith"
                  },
                  "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00"
                },
                "portfolioGroup/MyScope/SomeProperty": {
                  "key": "PortfolioGroup/MyScope/SomeProperty",
                  "value": {
                    "labelValue": "SomeValue"
                  },
                  "effectiveFrom": "2016-01-01T00:00:00.0000000+00:00"
                },
                "portfolioGroup/MyScope/AnotherProperty": {
                  "key": "PortfolioGroup/MyScope/AnotherProperty",
                  "value": {
                    "labelValue": "AnotherValue"
                  },
                  "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00",
                  "effectiveUntil": "2020-01-01T00:00:00.0000000+00:00"
                },
                "portfolioGroup/MyScope/ReBalanceInterval": {
                  "key": "PortfolioGroup/MyScope/ReBalanceInterval",
                  "value": {
                    "metricValue": {
                      "value": 30,
                      "unit": "Days"
                    }
                  }
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/Property"
                },
                "description": "The properties to be updated or inserted onto the group. Each property in\r\n             the request must be keyed by its unique property key. This has the format {domain}/{scope}/{code} e.g. \"PortfolioGroup/Manager/Id\".",
                "nullable": true
              },
              "example": {
                "portfolioGroup/MyScope/FundManagerName": {
                  "key": "PortfolioGroup/MyScope/FundManagerName",
                  "value": {
                    "labelValue": "Smith"
                  },
                  "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00"
                },
                "portfolioGroup/MyScope/SomeProperty": {
                  "key": "PortfolioGroup/MyScope/SomeProperty",
                  "value": {
                    "labelValue": "SomeValue"
                  },
                  "effectiveFrom": "2016-01-01T00:00:00.0000000+00:00"
                },
                "portfolioGroup/MyScope/AnotherProperty": {
                  "key": "PortfolioGroup/MyScope/AnotherProperty",
                  "value": {
                    "labelValue": "AnotherValue"
                  },
                  "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00",
                  "effectiveUntil": "2020-01-01T00:00:00.0000000+00:00"
                },
                "portfolioGroup/MyScope/ReBalanceInterval": {
                  "key": "PortfolioGroup/MyScope/ReBalanceInterval",
                  "value": {
                    "metricValue": {
                      "value": 30,
                      "unit": "Days"
                    }
                  }
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/Property"
                },
                "description": "The properties to be updated or inserted onto the group. Each property in\r\n             the request must be keyed by its unique property key. This has the format {domain}/{scope}/{code} e.g. \"PortfolioGroup/Manager/Id\".",
                "nullable": true
              },
              "example": {
                "portfolioGroup/MyScope/FundManagerName": {
                  "key": "PortfolioGroup/MyScope/FundManagerName",
                  "value": {
                    "labelValue": "Smith"
                  },
                  "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00"
                },
                "portfolioGroup/MyScope/SomeProperty": {
                  "key": "PortfolioGroup/MyScope/SomeProperty",
                  "value": {
                    "labelValue": "SomeValue"
                  },
                  "effectiveFrom": "2016-01-01T00:00:00.0000000+00:00"
                },
                "portfolioGroup/MyScope/AnotherProperty": {
                  "key": "PortfolioGroup/MyScope/AnotherProperty",
                  "value": {
                    "labelValue": "AnotherValue"
                  },
                  "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00",
                  "effectiveUntil": "2020-01-01T00:00:00.0000000+00:00"
                },
                "portfolioGroup/MyScope/ReBalanceInterval": {
                  "key": "PortfolioGroup/MyScope/ReBalanceInterval",
                  "value": {
                    "metricValue": {
                      "value": 30,
                      "unit": "Days"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The updated or inserted properties",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioGroupProperties"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioGroupProperties"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioGroupProperties"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/portfoliogroups/{scope}/{code}/properties/time-series": {
      "get": {
        "tags": [
          "Portfolio Groups"
        ],
        "summary": "[EARLY ACCESS] GetPortfolioGroupPropertyTimeSeries: Get the time series of a portfolio group property",
        "description": "List the complete time series of a portfolio group property.",
        "operationId": "GetPortfolioGroupPropertyTimeSeries",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the group.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the group.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the group. Together with the scope this uniquely identifies\r\n            the portfolio group.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the group. Together with the scope this uniquely identifies\r\n            the portfolio group.",
              "nullable": true
            }
          },
          {
            "name": "propertyKey",
            "in": "query",
            "description": "The property key of the property that will have its history shown. These must be in the format {domain}/{scope}/{code} e.g. \"PortfolioGroup/Manager/Id\".\r\n            Each property must be from the \"PortfolioGroup\" domain.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
            }
          },
          {
            "name": "portfolioGroupEffectiveAt",
            "in": "query",
            "description": "The effective datetime used to resolve the portfolio group. Defaults to the current LUSID system datetime if not specified.",
            "schema": {
              "type": "string",
              "description": "The effective datetime used to resolve the portfolio group. Defaults to the current LUSID system datetime if not specified.",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to list the portfolio group's property history. Defaults to return the current datetime if not supplied.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to list the portfolio group's property history. Defaults to return the current datetime if not supplied.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the result set. Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "maxLength": 16384,
              "minLength": 0,
              "pattern": "^[\\s\\S]*$",
              "type": "string",
              "description": "Expression to filter the result set. Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
              "nullable": true
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "The pagination token to use to continue listing properties from a previous call to get property time series.\r\n            This value is returned from the previous call. If a pagination token is provided the filter, effectiveAt, and asAt fields\r\n            must not have changed since the original request.",
            "schema": {
              "maxLength": 500,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\+/]*={0,3}$",
              "type": "string",
              "description": "The pagination token to use to continue listing properties from a previous call to get property time series.\r\n            This value is returned from the previous call. If a pagination token is provided the filter, effectiveAt, and asAt fields\r\n            must not have changed since the original request.",
              "nullable": true
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "When paginating, limit the number of returned results to this many.",
            "schema": {
              "maximum": 5000,
              "minimum": 1,
              "type": "integer",
              "description": "When paginating, limit the number of returned results to this many.",
              "format": "int32",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The time series of the property",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfPropertyInterval"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfPropertyInterval"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfPropertyInterval"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/portfoliogroups/{scope}/{code}/relationships": {
      "get": {
        "tags": [
          "Portfolio Groups"
        ],
        "summary": "[EARLY ACCESS] GetPortfolioGroupRelationships: Get Relationships for Portfolio Group",
        "description": "Get relationships for the specified Portfolio Group",
        "operationId": "GetPortfolioGroupRelationships",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the portfolio group.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the portfolio group.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the portfolio group. Together with the scope this uniquely identifies\r\n            the portfolio group.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the portfolio group. Together with the scope this uniquely identifies\r\n            the portfolio group.",
              "nullable": true
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime or cut label at which to retrieve relationship. Defaults to the current LUSID system datetime if not specified.",
            "schema": {
              "maxLength": 256,
              "minLength": 0,
              "pattern": "^[a-zA-Z0-9\\-_\\+:\\.]+$",
              "type": "string",
              "description": "The effective datetime or cut label at which to retrieve relationship. Defaults to the current LUSID system datetime if not specified.",
              "format": "dateorcutlabel",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve relationships. Defaults to return the latest LUSID AsAt time if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to retrieve relationships. Defaults to return the latest LUSID AsAt time if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter relationships. Users should provide null or empty string for this field until further notice.",
            "schema": {
              "maxLength": 16384,
              "minLength": 0,
              "pattern": "^[\\s\\S]*$",
              "type": "string",
              "description": "Expression to filter relationships. Users should provide null or empty string for this field until further notice.",
              "nullable": true
            }
          },
          {
            "name": "identifierTypes",
            "in": "query",
            "description": "Identifier types (as property keys) used for referencing Persons or Legal Entities.\r\n            These can be specified from the 'Person' or 'LegalEntity' domains and have the format {domain}/{scope}/{code}, for example\r\n            'Person/CompanyDetails/Role'. An Empty array may be used to return all related Entities.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
              },
              "description": "Identifier types (as property keys) used for referencing Persons or Legal Entities.\r\n            These can be specified from the 'Person' or 'LegalEntity' domains and have the format {domain}/{scope}/{code}, for example\r\n            'Person/CompanyDetails/Role'. An Empty array may be used to return all related Entities.",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The relationships for the specific portfolio group.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfRelationship"
                },
                "example": {
                  "values": [
                    {
                      "relationshipDefinitionId": {
                        "scope": "PortfolioManagementTeam",
                        "code": "Traders"
                      },
                      "relatedEntity": {
                        "entityType": "Person",
                        "entityId": {
                          "idTypeScope": "HrSystem1",
                          "idTypeCode": "InternalId",
                          "code": "XY10001111"
                        },
                        "displayName": "James Smith",
                        "properties": {},
                        "identifiers": [
                          {
                            "identifierScope": "HrSystem1",
                            "identifierType": "InternalId",
                            "identifierValue": "XY10001111"
                          }
                        ]
                      },
                      "traversalDirection": "Out",
                      "traversalDescription": "can be traded by",
                      "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                      "effectiveUntil": "2022-01-01T12:00:00.0000000+00:00"
                    }
                  ],
                  "links": []
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfRelationship"
                },
                "example": {
                  "values": [
                    {
                      "relationshipDefinitionId": {
                        "scope": "PortfolioManagementTeam",
                        "code": "Traders"
                      },
                      "relatedEntity": {
                        "entityType": "Person",
                        "entityId": {
                          "idTypeScope": "HrSystem1",
                          "idTypeCode": "InternalId",
                          "code": "XY10001111"
                        },
                        "displayName": "James Smith",
                        "properties": {},
                        "identifiers": [
                          {
                            "identifierScope": "HrSystem1",
                            "identifierType": "InternalId",
                            "identifierValue": "XY10001111"
                          }
                        ]
                      },
                      "traversalDirection": "Out",
                      "traversalDescription": "can be traded by",
                      "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                      "effectiveUntil": "2022-01-01T12:00:00.0000000+00:00"
                    }
                  ],
                  "links": []
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfRelationship"
                },
                "example": {
                  "values": [
                    {
                      "relationshipDefinitionId": {
                        "scope": "PortfolioManagementTeam",
                        "code": "Traders"
                      },
                      "relatedEntity": {
                        "entityType": "Person",
                        "entityId": {
                          "idTypeScope": "HrSystem1",
                          "idTypeCode": "InternalId",
                          "code": "XY10001111"
                        },
                        "displayName": "James Smith",
                        "properties": {},
                        "identifiers": [
                          {
                            "identifierScope": "HrSystem1",
                            "identifierType": "InternalId",
                            "identifierValue": "XY10001111"
                          }
                        ]
                      },
                      "traversalDirection": "Out",
                      "traversalDescription": "can be traded by",
                      "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                      "effectiveUntil": "2022-01-01T12:00:00.0000000+00:00"
                    }
                  ],
                  "links": []
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/portfoliogroups/{scope}/{code}/subgroups": {
      "post": {
        "tags": [
          "Portfolio Groups"
        ],
        "summary": "[EARLY ACCESS] AddSubGroupToGroup: Add sub group to group",
        "description": "Add a portfolio group to a portfolio group as a sub group.",
        "operationId": "AddSubGroupToGroup",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the portfolio group to add a portfolio group to.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the portfolio group to add a portfolio group to.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the portfolio group to add a portfolio group to. Together with the scope this uniquely identifies the portfolio group.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the portfolio group to add a portfolio group to. Together with the scope this uniquely identifies the portfolio group.",
              "nullable": true
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime from which the sub group will be added to the group.",
            "schema": {
              "type": "string",
              "description": "The effective datetime from which the sub group will be added to the group.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "requestBody": {
          "description": "The resource identifier of the portfolio group to add to the portfolio group as a sub group.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/ResourceId"
              },
              "example": {
                "scope": "MyScope",
                "code": "MyCode"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResourceId"
              },
              "example": {
                "scope": "MyScope",
                "code": "MyCode"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ResourceId"
              },
              "example": {
                "scope": "MyScope",
                "code": "MyCode"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ResourceId"
              },
              "example": {
                "scope": "MyScope",
                "code": "MyCode"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The portfolio group containing the newly added portfolio group as a sub group",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioGroup"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioGroup"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioGroup"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/portfoliogroups/{scope}/{code}/subgroups/{subgroupScope}/{subgroupCode}": {
      "delete": {
        "tags": [
          "Portfolio Groups"
        ],
        "summary": "[EARLY ACCESS] DeleteSubGroupFromGroup: Delete sub group from group",
        "description": "Remove a single portfolio group (sub group) from a portfolio group.",
        "operationId": "DeleteSubGroupFromGroup",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the portfolio group to remove the sub group from.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the portfolio group to remove the sub group from.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the portfolio group to remove the sub group from. Together with the scope this uniquely identifies the portfolio group.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the portfolio group to remove the sub group from. Together with the scope this uniquely identifies the portfolio group.",
              "nullable": true
            }
          },
          {
            "name": "subgroupScope",
            "in": "path",
            "description": "The scope of the sub group to remove from the portfolio group.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The scope of the sub group to remove from the portfolio group.",
              "nullable": true
            }
          },
          {
            "name": "subgroupCode",
            "in": "path",
            "description": "The code of the sub group to remove from the portfolio group. Together with the scope this uniquely identifies the sub group.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The code of the sub group to remove from the portfolio group. Together with the scope this uniquely identifies the sub group.",
              "nullable": true
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime from which the sub group will be removed from the portfolio group.",
            "schema": {
              "type": "string",
              "description": "The effective datetime from which the sub group will be removed from the portfolio group.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The portfolio group with the sub group removed from the group",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioGroup"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioGroup"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioGroup"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/portfoliogroups/{scope}/{code}/transactions": {
      "get": {
        "tags": [
          "Portfolio Groups"
        ],
        "summary": "GetTransactionsForPortfolioGroup: Get transactions for transaction portfolios in a portfolio group",
        "description": "Get transactions for transaction portfolios in a portfolio group over a given interval of effective time.\r\n            \r\nWhen the specified portfolio in a portfolio group is a derived transaction portfolio, the returned set of transactions is the\r\nunion set of all transactions of the parent (and any grandparents etc.) and the specified derived transaction portfolio itself.",
        "operationId": "GetTransactionsForPortfolioGroup",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the portfolio group.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the portfolio group.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the portfolio group. Together with the scope this uniquely identifies\r\n             the portfolio group.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the portfolio group. Together with the scope this uniquely identifies\r\n             the portfolio group.",
              "nullable": true
            }
          },
          {
            "name": "fromTransactionDate",
            "in": "query",
            "description": "The lower bound effective datetime or cut label (inclusive) from which to retrieve the transactions.\r\n             There is no lower bound if this is not specified.",
            "schema": {
              "type": "string",
              "description": "The lower bound effective datetime or cut label (inclusive) from which to retrieve the transactions.\r\n             There is no lower bound if this is not specified.",
              "format": "dateorcutlabel",
              "nullable": true
            }
          },
          {
            "name": "toTransactionDate",
            "in": "query",
            "description": "The upper bound effective datetime or cut label (inclusive) from which to retrieve transactions.\r\n             There is no upper bound if this is not specified.",
            "schema": {
              "type": "string",
              "description": "The upper bound effective datetime or cut label (inclusive) from which to retrieve transactions.\r\n             There is no upper bound if this is not specified.",
              "format": "dateorcutlabel",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the transactions. Defaults to return the latest version\r\n             of each transaction if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to retrieve the transactions. Defaults to return the latest version\r\n             of each transaction if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the result set.\r\n             For example, to filter on the Transaction Type, use \"type eq 'Buy'\"\r\n             Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "maxLength": 16384,
              "minLength": 0,
              "pattern": "^[\\s\\S]*$",
              "type": "string",
              "description": "Expression to filter the result set.\r\n             For example, to filter on the Transaction Type, use \"type eq 'Buy'\"\r\n             Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
              "nullable": true
            }
          },
          {
            "name": "propertyKeys",
            "in": "query",
            "description": "A list of property keys from the \"Instrument\" or \"Transaction\" domain to decorate onto\r\n             the transactions. These take the format {domain}/{scope}/{code} e.g. \"Instrument/system/Name\" or\r\n             \"Transaction/strategy/quantsignal\".",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
              },
              "description": "A list of property keys from the \"Instrument\" or \"Transaction\" domain to decorate onto\r\n             the transactions. These take the format {domain}/{scope}/{code} e.g. \"Instrument/system/Name\" or\r\n             \"Transaction/strategy/quantsignal\".",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "limit",
            "in": "query",
            "description": "When paginating, limit the number of returned results to this many. Defaults to 100 if not specified.",
            "schema": {
              "type": "integer",
              "description": "When paginating, limit the number of returned results to this many. Defaults to 100 if not specified.",
              "format": "int32",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "page",
            "in": "query",
            "description": "The pagination token to use to continue listing transactions from a previous call to GetTransactions.",
            "schema": {
              "maxLength": 500,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\+/]*={0,3}$",
              "type": "string",
              "description": "The pagination token to use to continue listing transactions from a previous call to GetTransactions.",
              "nullable": true
            }
          },
          {
            "name": "showCancelledTransactions",
            "in": "query",
            "description": "Option to specify whether or not to include cancelled transactions,\r\n             including previous versions of transactions which have since been amended.\r\n             Defaults to False if not specified.",
            "schema": {
              "type": "boolean",
              "description": "Option to specify whether or not to include cancelled transactions,\r\n             including previous versions of transactions which have since been amended.\r\n             Defaults to False if not specified.",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The requested transactions from transaction portfolios in the specified portfolio group",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/VersionedResourceListOfTransaction"
                },
                "example": {
                  "version": {
                    "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00",
                    "asAtDate": "2018-03-04T23:50:00.0000000+00:00"
                  },
                  "values": [
                    {
                      "transactionId": "TXN-00001",
                      "type": "Buy",
                      "instrumentIdentifiers": {
                        "instrument/default/RIC": "RIC.L"
                      },
                      "instrumentScope": "default",
                      "instrumentUid": "LUID_1C7YTL5M",
                      "transactionDate": "2018-08-04T00:00:00.0000000+00:00",
                      "settlementDate": "2018-08-06T00:00:00.0000000+00:00",
                      "units": 1000,
                      "transactionPrice": {
                        "price": 88.8,
                        "type": "Price"
                      },
                      "totalConsideration": {
                        "amount": 88800,
                        "currency": "USD"
                      },
                      "properties": {
                        "transaction/default/TradeToPortfolioRate": {
                          "key": "Transaction/default/TradeToPortfolioRate",
                          "value": {
                            "metricValue": {
                              "value": 0.765
                            }
                          }
                        },
                        "transaction/default/SourcePortfolioId": {
                          "key": "Transaction/default/SourcePortfolioId",
                          "value": {
                            "labelValue": "DEMO-PORTFOLIO-ID"
                          }
                        },
                        "transaction/default/SourcePortfolioScope": {
                          "key": "Transaction/default/SourcePortfolioScope",
                          "value": {
                            "labelValue": "DEMO-SCOPE"
                          }
                        }
                      },
                      "source": "",
                      "entryDateTime": "2018-03-04T23:50:00.0000000+00:00",
                      "transactionStatus": "Active"
                    }
                  ],
                  "href": "http://example.com",
                  "links": []
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VersionedResourceListOfTransaction"
                },
                "example": {
                  "version": {
                    "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00",
                    "asAtDate": "2018-03-04T23:50:00.0000000+00:00"
                  },
                  "values": [
                    {
                      "transactionId": "TXN-00001",
                      "type": "Buy",
                      "instrumentIdentifiers": {
                        "instrument/default/RIC": "RIC.L"
                      },
                      "instrumentScope": "default",
                      "instrumentUid": "LUID_1C7YTL5M",
                      "transactionDate": "2018-08-04T00:00:00.0000000+00:00",
                      "settlementDate": "2018-08-06T00:00:00.0000000+00:00",
                      "units": 1000,
                      "transactionPrice": {
                        "price": 88.8,
                        "type": "Price"
                      },
                      "totalConsideration": {
                        "amount": 88800,
                        "currency": "USD"
                      },
                      "properties": {
                        "transaction/default/TradeToPortfolioRate": {
                          "key": "Transaction/default/TradeToPortfolioRate",
                          "value": {
                            "metricValue": {
                              "value": 0.765
                            }
                          }
                        },
                        "transaction/default/SourcePortfolioId": {
                          "key": "Transaction/default/SourcePortfolioId",
                          "value": {
                            "labelValue": "DEMO-PORTFOLIO-ID"
                          }
                        },
                        "transaction/default/SourcePortfolioScope": {
                          "key": "Transaction/default/SourcePortfolioScope",
                          "value": {
                            "labelValue": "DEMO-SCOPE"
                          }
                        }
                      },
                      "source": "",
                      "entryDateTime": "2018-03-04T23:50:00.0000000+00:00",
                      "transactionStatus": "Active"
                    }
                  ],
                  "href": "http://example.com",
                  "links": []
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/VersionedResourceListOfTransaction"
                },
                "example": {
                  "version": {
                    "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00",
                    "asAtDate": "2018-03-04T23:50:00.0000000+00:00"
                  },
                  "values": [
                    {
                      "transactionId": "TXN-00001",
                      "type": "Buy",
                      "instrumentIdentifiers": {
                        "instrument/default/RIC": "RIC.L"
                      },
                      "instrumentScope": "default",
                      "instrumentUid": "LUID_1C7YTL5M",
                      "transactionDate": "2018-08-04T00:00:00.0000000+00:00",
                      "settlementDate": "2018-08-06T00:00:00.0000000+00:00",
                      "units": 1000,
                      "transactionPrice": {
                        "price": 88.8,
                        "type": "Price"
                      },
                      "totalConsideration": {
                        "amount": 88800,
                        "currency": "USD"
                      },
                      "properties": {
                        "transaction/default/TradeToPortfolioRate": {
                          "key": "Transaction/default/TradeToPortfolioRate",
                          "value": {
                            "metricValue": {
                              "value": 0.765
                            }
                          }
                        },
                        "transaction/default/SourcePortfolioId": {
                          "key": "Transaction/default/SourcePortfolioId",
                          "value": {
                            "labelValue": "DEMO-PORTFOLIO-ID"
                          }
                        },
                        "transaction/default/SourcePortfolioScope": {
                          "key": "Transaction/default/SourcePortfolioScope",
                          "value": {
                            "labelValue": "DEMO-SCOPE"
                          }
                        }
                      },
                      "source": "",
                      "entryDateTime": "2018-03-04T23:50:00.0000000+00:00",
                      "transactionStatus": "Active"
                    }
                  ],
                  "href": "http://example.com",
                  "links": []
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      }
    },
    "/api/portfoliogroups/{scope}/{code}/transactions/$build": {
      "post": {
        "tags": [
          "Portfolio Groups"
        ],
        "summary": "BuildTransactionsForPortfolioGroup: Build transactions for transaction portfolios in a portfolio group",
        "description": "Build transactions for transaction portfolios in a portfolio group over a given interval of effective time.\r\n            \r\nWhen the specified portfolio in a portfolio group is a derived transaction portfolio, the returned set of transactions is the\r\nunion set of all transactions of the parent (and any grandparents etc.) and the specified derived transaction portfolio itself.",
        "operationId": "BuildTransactionsForPortfolioGroup",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the portfolio group.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the portfolio group.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the portfolio group. Together with the scope this uniquely identifies\r\n             the portfolio group.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the portfolio group. Together with the scope this uniquely identifies\r\n             the portfolio group.",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to build the transactions. Defaults to return the latest\r\n             version of each transaction if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to build the transactions. Defaults to return the latest\r\n             version of each transaction if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the result set.\r\n             For example, to filter on the Transaction Type, use \"type eq 'Buy'\"\r\n             Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "maxLength": 16384,
              "minLength": 0,
              "pattern": "^[\\s\\S]*$",
              "type": "string",
              "description": "Expression to filter the result set.\r\n             For example, to filter on the Transaction Type, use \"type eq 'Buy'\"\r\n             Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
              "nullable": true
            }
          },
          {
            "name": "propertyKeys",
            "in": "query",
            "description": "A list of property keys from the \"Instrument\" or \"Transaction\" domain to decorate onto\r\n             the transactions. These take the format {domain}/{scope}/{code} e.g. \"Instrument/system/Name\" or\r\n             \"Transaction/strategy/quantsignal\".",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
              },
              "description": "A list of property keys from the \"Instrument\" or \"Transaction\" domain to decorate onto\r\n             the transactions. These take the format {domain}/{scope}/{code} e.g. \"Instrument/system/Name\" or\r\n             \"Transaction/strategy/quantsignal\".",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "limit",
            "in": "query",
            "description": "When paginating, limit the number of returned results to this many. Defaults to 100 if not specified.",
            "schema": {
              "type": "integer",
              "description": "When paginating, limit the number of returned results to this many. Defaults to 100 if not specified.",
              "format": "int32",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "page",
            "in": "query",
            "description": "The pagination token to use to continue listing transactions from a previous call to BuildTransactions.",
            "schema": {
              "maxLength": 500,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\+/]*={0,3}$",
              "type": "string",
              "description": "The pagination token to use to continue listing transactions from a previous call to BuildTransactions.",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "The query queryParameters which control how the output transactions are built.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/TransactionQueryParameters"
              },
              "example": {
                "startDate": "2018-03-05T00:00:00.0000000+00:00",
                "endDate": "2018-03-19T00:00:00.0000000+00:00",
                "queryMode": "TradeDate",
                "showCancelledTransactions": false
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TransactionQueryParameters"
              },
              "example": {
                "startDate": "2018-03-05T00:00:00.0000000+00:00",
                "endDate": "2018-03-19T00:00:00.0000000+00:00",
                "queryMode": "TradeDate",
                "showCancelledTransactions": false
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/TransactionQueryParameters"
              },
              "example": {
                "startDate": "2018-03-05T00:00:00.0000000+00:00",
                "endDate": "2018-03-19T00:00:00.0000000+00:00",
                "queryMode": "TradeDate",
                "showCancelledTransactions": false
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/TransactionQueryParameters"
              },
              "example": {
                "startDate": "2018-03-05T00:00:00.0000000+00:00",
                "endDate": "2018-03-19T00:00:00.0000000+00:00",
                "queryMode": "TradeDate",
                "showCancelledTransactions": false
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The requested transactions from transaction portfolios in the specified portfolio group",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/VersionedResourceListOfOutputTransaction"
                },
                "example": {
                  "version": {
                    "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00",
                    "asAtDate": "2018-03-04T23:50:00.0000000+00:00"
                  },
                  "values": [
                    {
                      "transactionId": "TXN-00001",
                      "type": "Buy",
                      "description": "Purchase",
                      "instrumentIdentifiers": {
                        "instrument/default/RIC": "RIC.L"
                      },
                      "instrumentScope": "default",
                      "instrumentUid": "LUID_JLH24106",
                      "transactionDate": "2018-08-04T00:00:00.0000000+00:00",
                      "settlementDate": "2018-08-06T00:00:00.0000000+00:00",
                      "units": 1000,
                      "transactionAmount": 88800,
                      "transactionPrice": {
                        "price": 88.8,
                        "type": "Price"
                      },
                      "totalConsideration": {
                        "amount": 88800,
                        "currency": "USD"
                      },
                      "exchangeRate": 1,
                      "transactionToPortfolioRate": 0.7648,
                      "transactionCurrency": "USD",
                      "properties": {
                        "transaction/default/TradeToPortfolioRate": {
                          "key": "Transaction/default/TradeToPortfolioRate",
                          "value": {
                            "metricValue": {
                              "value": 0.765
                            }
                          }
                        },
                        "transaction/default/SourcePortfolioId": {
                          "key": "Transaction/default/SourcePortfolioId",
                          "value": {
                            "labelValue": "DEMO-PORTFOLIO-ID"
                          }
                        },
                        "transaction/default/SourcePortfolioScope": {
                          "key": "Transaction/default/SourcePortfolioScope",
                          "value": {
                            "labelValue": "DEMO-SCOPE"
                          }
                        }
                      },
                      "source": "",
                      "transactionStatus": "Cancelled",
                      "entryDateTime": "2018-08-04T12:22:06.0000000+00:00",
                      "cancelDateTime": "2018-08-04T12:25:14.0000000+00:00"
                    },
                    {
                      "transactionId": "TXN-00002",
                      "type": "Sell",
                      "description": "Sale",
                      "instrumentIdentifiers": {
                        "instrument/default/ClientInternal": "INT:00024106"
                      },
                      "instrumentScope": "default",
                      "instrumentUid": "LUID_OI5JX1V7",
                      "transactionDate": "2018-08-07T00:00:00.0000000+00:00",
                      "settlementDate": "2018-08-10T00:00:00.0000000+00:00",
                      "units": 10000,
                      "transactionAmount": 1470100,
                      "transactionPrice": {
                        "price": 147.01,
                        "type": "Price"
                      },
                      "totalConsideration": {
                        "amount": 1470100,
                        "currency": "USD"
                      },
                      "exchangeRate": 1,
                      "transactionToPortfolioRate": 0.772,
                      "transactionCurrency": "USD",
                      "properties": {
                        "transaction/default/TradeToPortfolioRate": {
                          "key": "Transaction/default/TradeToPortfolioRate",
                          "value": {
                            "metricValue": {
                              "value": 0.772
                            }
                          }
                        },
                        "transaction/default/SourcePortfolioId": {
                          "key": "Transaction/default/SourcePortfolioId",
                          "value": {
                            "labelValue": "DEMO-PORTFOLIO-ID"
                          }
                        },
                        "transaction/default/SourcePortfolioScope": {
                          "key": "Transaction/default/SourcePortfolioScope",
                          "value": {
                            "labelValue": "DEMO-SCOPE"
                          }
                        },
                        "transaction/default/ResultantHolding": {
                          "key": "Transaction/default/ResultantHolding",
                          "value": {
                            "metricValue": {
                              "value": 3500
                            }
                          }
                        }
                      },
                      "source": "",
                      "transactionStatus": "Active",
                      "entryDateTime": "2018-08-07T10:30:12.0000000+00:00",
                      "realisedGainLoss": [
                        {
                          "instrumentScope": "default",
                          "instrumentUid": "LUID_OI5JX1V7",
                          "units": 4500,
                          "purchaseTradeDate": "2018-08-02T00:00:00.0000000+00:00",
                          "purchaseSettlementDate": "2018-08-05T00:00:00.0000000+00:00",
                          "purchasePrice": 142.96,
                          "costTradeCcy": {
                            "amount": 643320,
                            "currency": "USD"
                          },
                          "costPortfolioCcy": {
                            "amount": 493619.44,
                            "currency": "GBP"
                          },
                          "realisedTradeCcy": {
                            "amount": 18225,
                            "currency": "USD"
                          },
                          "realisedTotal": {
                            "amount": 17093.3,
                            "currency": "GBP"
                          },
                          "realisedMarket": {
                            "amount": 14069.7,
                            "currency": "GBP"
                          },
                          "realisedCurrency": {
                            "amount": 3023.6,
                            "currency": "GBP"
                          }
                        },
                        {
                          "instrumentScope": "default",
                          "instrumentUid": "LUID_OI5JX1V7",
                          "units": 4500,
                          "purchaseTradeDate": "2018-08-03T00:00:00.0000000+00:00",
                          "purchaseSettlementDate": "2018-08-06T00:00:00.0000000+00:00",
                          "purchasePrice": 147.7,
                          "costTradeCcy": {
                            "amount": 664650,
                            "currency": "USD"
                          },
                          "costPortfolioCcy": {
                            "amount": 510517.67,
                            "currency": "GBP"
                          },
                          "realisedTradeCcy": {
                            "amount": -3105,
                            "currency": "USD"
                          },
                          "realisedTotal": {
                            "amount": 195.07,
                            "currency": "GBP"
                          },
                          "realisedMarket": {
                            "amount": -2397.06,
                            "currency": "GBP"
                          },
                          "realisedCurrency": {
                            "amount": 2592.13,
                            "currency": "GBP"
                          }
                        },
                        {
                          "instrumentScope": "default",
                          "instrumentUid": "LUID_OI5JX1V7",
                          "units": 1000,
                          "purchaseTradeDate": "2018-08-06T00:00:00.0000000+00:00",
                          "purchaseSettlementDate": "2018-08-08T00:00:00.0000000+00:00",
                          "purchasePrice": 146.03,
                          "costTradeCcy": {
                            "amount": 146030,
                            "currency": "USD"
                          },
                          "costPortfolioCcy": {
                            "amount": 112851.98,
                            "currency": "GBP"
                          },
                          "realisedTradeCcy": {
                            "amount": 980,
                            "currency": "USD"
                          },
                          "realisedTotal": {
                            "amount": 639.74,
                            "currency": "GBP"
                          },
                          "realisedMarket": {
                            "amount": 756.56,
                            "currency": "GBP"
                          },
                          "realisedCurrency": {
                            "amount": -116.82,
                            "currency": "GBP"
                          }
                        }
                      ]
                    }
                  ],
                  "href": "http://example.com",
                  "links": []
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VersionedResourceListOfOutputTransaction"
                },
                "example": {
                  "version": {
                    "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00",
                    "asAtDate": "2018-03-04T23:50:00.0000000+00:00"
                  },
                  "values": [
                    {
                      "transactionId": "TXN-00001",
                      "type": "Buy",
                      "description": "Purchase",
                      "instrumentIdentifiers": {
                        "instrument/default/RIC": "RIC.L"
                      },
                      "instrumentScope": "default",
                      "instrumentUid": "LUID_JLH24106",
                      "transactionDate": "2018-08-04T00:00:00.0000000+00:00",
                      "settlementDate": "2018-08-06T00:00:00.0000000+00:00",
                      "units": 1000,
                      "transactionAmount": 88800,
                      "transactionPrice": {
                        "price": 88.8,
                        "type": "Price"
                      },
                      "totalConsideration": {
                        "amount": 88800,
                        "currency": "USD"
                      },
                      "exchangeRate": 1,
                      "transactionToPortfolioRate": 0.7648,
                      "transactionCurrency": "USD",
                      "properties": {
                        "transaction/default/TradeToPortfolioRate": {
                          "key": "Transaction/default/TradeToPortfolioRate",
                          "value": {
                            "metricValue": {
                              "value": 0.765
                            }
                          }
                        },
                        "transaction/default/SourcePortfolioId": {
                          "key": "Transaction/default/SourcePortfolioId",
                          "value": {
                            "labelValue": "DEMO-PORTFOLIO-ID"
                          }
                        },
                        "transaction/default/SourcePortfolioScope": {
                          "key": "Transaction/default/SourcePortfolioScope",
                          "value": {
                            "labelValue": "DEMO-SCOPE"
                          }
                        }
                      },
                      "source": "",
                      "transactionStatus": "Cancelled",
                      "entryDateTime": "2018-08-04T12:22:06.0000000+00:00",
                      "cancelDateTime": "2018-08-04T12:25:14.0000000+00:00"
                    },
                    {
                      "transactionId": "TXN-00002",
                      "type": "Sell",
                      "description": "Sale",
                      "instrumentIdentifiers": {
                        "instrument/default/ClientInternal": "INT:00024106"
                      },
                      "instrumentScope": "default",
                      "instrumentUid": "LUID_OI5JX1V7",
                      "transactionDate": "2018-08-07T00:00:00.0000000+00:00",
                      "settlementDate": "2018-08-10T00:00:00.0000000+00:00",
                      "units": 10000,
                      "transactionAmount": 1470100,
                      "transactionPrice": {
                        "price": 147.01,
                        "type": "Price"
                      },
                      "totalConsideration": {
                        "amount": 1470100,
                        "currency": "USD"
                      },
                      "exchangeRate": 1,
                      "transactionToPortfolioRate": 0.772,
                      "transactionCurrency": "USD",
                      "properties": {
                        "transaction/default/TradeToPortfolioRate": {
                          "key": "Transaction/default/TradeToPortfolioRate",
                          "value": {
                            "metricValue": {
                              "value": 0.772
                            }
                          }
                        },
                        "transaction/default/SourcePortfolioId": {
                          "key": "Transaction/default/SourcePortfolioId",
                          "value": {
                            "labelValue": "DEMO-PORTFOLIO-ID"
                          }
                        },
                        "transaction/default/SourcePortfolioScope": {
                          "key": "Transaction/default/SourcePortfolioScope",
                          "value": {
                            "labelValue": "DEMO-SCOPE"
                          }
                        },
                        "transaction/default/ResultantHolding": {
                          "key": "Transaction/default/ResultantHolding",
                          "value": {
                            "metricValue": {
                              "value": 3500
                            }
                          }
                        }
                      },
                      "source": "",
                      "transactionStatus": "Active",
                      "entryDateTime": "2018-08-07T10:30:12.0000000+00:00",
                      "realisedGainLoss": [
                        {
                          "instrumentScope": "default",
                          "instrumentUid": "LUID_OI5JX1V7",
                          "units": 4500,
                          "purchaseTradeDate": "2018-08-02T00:00:00.0000000+00:00",
                          "purchaseSettlementDate": "2018-08-05T00:00:00.0000000+00:00",
                          "purchasePrice": 142.96,
                          "costTradeCcy": {
                            "amount": 643320,
                            "currency": "USD"
                          },
                          "costPortfolioCcy": {
                            "amount": 493619.44,
                            "currency": "GBP"
                          },
                          "realisedTradeCcy": {
                            "amount": 18225,
                            "currency": "USD"
                          },
                          "realisedTotal": {
                            "amount": 17093.3,
                            "currency": "GBP"
                          },
                          "realisedMarket": {
                            "amount": 14069.7,
                            "currency": "GBP"
                          },
                          "realisedCurrency": {
                            "amount": 3023.6,
                            "currency": "GBP"
                          }
                        },
                        {
                          "instrumentScope": "default",
                          "instrumentUid": "LUID_OI5JX1V7",
                          "units": 4500,
                          "purchaseTradeDate": "2018-08-03T00:00:00.0000000+00:00",
                          "purchaseSettlementDate": "2018-08-06T00:00:00.0000000+00:00",
                          "purchasePrice": 147.7,
                          "costTradeCcy": {
                            "amount": 664650,
                            "currency": "USD"
                          },
                          "costPortfolioCcy": {
                            "amount": 510517.67,
                            "currency": "GBP"
                          },
                          "realisedTradeCcy": {
                            "amount": -3105,
                            "currency": "USD"
                          },
                          "realisedTotal": {
                            "amount": 195.07,
                            "currency": "GBP"
                          },
                          "realisedMarket": {
                            "amount": -2397.06,
                            "currency": "GBP"
                          },
                          "realisedCurrency": {
                            "amount": 2592.13,
                            "currency": "GBP"
                          }
                        },
                        {
                          "instrumentScope": "default",
                          "instrumentUid": "LUID_OI5JX1V7",
                          "units": 1000,
                          "purchaseTradeDate": "2018-08-06T00:00:00.0000000+00:00",
                          "purchaseSettlementDate": "2018-08-08T00:00:00.0000000+00:00",
                          "purchasePrice": 146.03,
                          "costTradeCcy": {
                            "amount": 146030,
                            "currency": "USD"
                          },
                          "costPortfolioCcy": {
                            "amount": 112851.98,
                            "currency": "GBP"
                          },
                          "realisedTradeCcy": {
                            "amount": 980,
                            "currency": "USD"
                          },
                          "realisedTotal": {
                            "amount": 639.74,
                            "currency": "GBP"
                          },
                          "realisedMarket": {
                            "amount": 756.56,
                            "currency": "GBP"
                          },
                          "realisedCurrency": {
                            "amount": -116.82,
                            "currency": "GBP"
                          }
                        }
                      ]
                    }
                  ],
                  "href": "http://example.com",
                  "links": []
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/VersionedResourceListOfOutputTransaction"
                },
                "example": {
                  "version": {
                    "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00",
                    "asAtDate": "2018-03-04T23:50:00.0000000+00:00"
                  },
                  "values": [
                    {
                      "transactionId": "TXN-00001",
                      "type": "Buy",
                      "description": "Purchase",
                      "instrumentIdentifiers": {
                        "instrument/default/RIC": "RIC.L"
                      },
                      "instrumentScope": "default",
                      "instrumentUid": "LUID_JLH24106",
                      "transactionDate": "2018-08-04T00:00:00.0000000+00:00",
                      "settlementDate": "2018-08-06T00:00:00.0000000+00:00",
                      "units": 1000,
                      "transactionAmount": 88800,
                      "transactionPrice": {
                        "price": 88.8,
                        "type": "Price"
                      },
                      "totalConsideration": {
                        "amount": 88800,
                        "currency": "USD"
                      },
                      "exchangeRate": 1,
                      "transactionToPortfolioRate": 0.7648,
                      "transactionCurrency": "USD",
                      "properties": {
                        "transaction/default/TradeToPortfolioRate": {
                          "key": "Transaction/default/TradeToPortfolioRate",
                          "value": {
                            "metricValue": {
                              "value": 0.765
                            }
                          }
                        },
                        "transaction/default/SourcePortfolioId": {
                          "key": "Transaction/default/SourcePortfolioId",
                          "value": {
                            "labelValue": "DEMO-PORTFOLIO-ID"
                          }
                        },
                        "transaction/default/SourcePortfolioScope": {
                          "key": "Transaction/default/SourcePortfolioScope",
                          "value": {
                            "labelValue": "DEMO-SCOPE"
                          }
                        }
                      },
                      "source": "",
                      "transactionStatus": "Cancelled",
                      "entryDateTime": "2018-08-04T12:22:06.0000000+00:00",
                      "cancelDateTime": "2018-08-04T12:25:14.0000000+00:00"
                    },
                    {
                      "transactionId": "TXN-00002",
                      "type": "Sell",
                      "description": "Sale",
                      "instrumentIdentifiers": {
                        "instrument/default/ClientInternal": "INT:00024106"
                      },
                      "instrumentScope": "default",
                      "instrumentUid": "LUID_OI5JX1V7",
                      "transactionDate": "2018-08-07T00:00:00.0000000+00:00",
                      "settlementDate": "2018-08-10T00:00:00.0000000+00:00",
                      "units": 10000,
                      "transactionAmount": 1470100,
                      "transactionPrice": {
                        "price": 147.01,
                        "type": "Price"
                      },
                      "totalConsideration": {
                        "amount": 1470100,
                        "currency": "USD"
                      },
                      "exchangeRate": 1,
                      "transactionToPortfolioRate": 0.772,
                      "transactionCurrency": "USD",
                      "properties": {
                        "transaction/default/TradeToPortfolioRate": {
                          "key": "Transaction/default/TradeToPortfolioRate",
                          "value": {
                            "metricValue": {
                              "value": 0.772
                            }
                          }
                        },
                        "transaction/default/SourcePortfolioId": {
                          "key": "Transaction/default/SourcePortfolioId",
                          "value": {
                            "labelValue": "DEMO-PORTFOLIO-ID"
                          }
                        },
                        "transaction/default/SourcePortfolioScope": {
                          "key": "Transaction/default/SourcePortfolioScope",
                          "value": {
                            "labelValue": "DEMO-SCOPE"
                          }
                        },
                        "transaction/default/ResultantHolding": {
                          "key": "Transaction/default/ResultantHolding",
                          "value": {
                            "metricValue": {
                              "value": 3500
                            }
                          }
                        }
                      },
                      "source": "",
                      "transactionStatus": "Active",
                      "entryDateTime": "2018-08-07T10:30:12.0000000+00:00",
                      "realisedGainLoss": [
                        {
                          "instrumentScope": "default",
                          "instrumentUid": "LUID_OI5JX1V7",
                          "units": 4500,
                          "purchaseTradeDate": "2018-08-02T00:00:00.0000000+00:00",
                          "purchaseSettlementDate": "2018-08-05T00:00:00.0000000+00:00",
                          "purchasePrice": 142.96,
                          "costTradeCcy": {
                            "amount": 643320,
                            "currency": "USD"
                          },
                          "costPortfolioCcy": {
                            "amount": 493619.44,
                            "currency": "GBP"
                          },
                          "realisedTradeCcy": {
                            "amount": 18225,
                            "currency": "USD"
                          },
                          "realisedTotal": {
                            "amount": 17093.3,
                            "currency": "GBP"
                          },
                          "realisedMarket": {
                            "amount": 14069.7,
                            "currency": "GBP"
                          },
                          "realisedCurrency": {
                            "amount": 3023.6,
                            "currency": "GBP"
                          }
                        },
                        {
                          "instrumentScope": "default",
                          "instrumentUid": "LUID_OI5JX1V7",
                          "units": 4500,
                          "purchaseTradeDate": "2018-08-03T00:00:00.0000000+00:00",
                          "purchaseSettlementDate": "2018-08-06T00:00:00.0000000+00:00",
                          "purchasePrice": 147.7,
                          "costTradeCcy": {
                            "amount": 664650,
                            "currency": "USD"
                          },
                          "costPortfolioCcy": {
                            "amount": 510517.67,
                            "currency": "GBP"
                          },
                          "realisedTradeCcy": {
                            "amount": -3105,
                            "currency": "USD"
                          },
                          "realisedTotal": {
                            "amount": 195.07,
                            "currency": "GBP"
                          },
                          "realisedMarket": {
                            "amount": -2397.06,
                            "currency": "GBP"
                          },
                          "realisedCurrency": {
                            "amount": 2592.13,
                            "currency": "GBP"
                          }
                        },
                        {
                          "instrumentScope": "default",
                          "instrumentUid": "LUID_OI5JX1V7",
                          "units": 1000,
                          "purchaseTradeDate": "2018-08-06T00:00:00.0000000+00:00",
                          "purchaseSettlementDate": "2018-08-08T00:00:00.0000000+00:00",
                          "purchasePrice": 146.03,
                          "costTradeCcy": {
                            "amount": 146030,
                            "currency": "USD"
                          },
                          "costPortfolioCcy": {
                            "amount": 112851.98,
                            "currency": "GBP"
                          },
                          "realisedTradeCcy": {
                            "amount": 980,
                            "currency": "USD"
                          },
                          "realisedTotal": {
                            "amount": 639.74,
                            "currency": "GBP"
                          },
                          "realisedMarket": {
                            "amount": 756.56,
                            "currency": "GBP"
                          },
                          "realisedCurrency": {
                            "amount": -116.82,
                            "currency": "GBP"
                          }
                        }
                      ]
                    }
                  ],
                  "href": "http://example.com",
                  "links": []
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      }
    },
    "/api/portfolios": {
      "get": {
        "tags": [
          "Portfolios"
        ],
        "summary": "ListPortfolios: List portfolios",
        "description": "List all the portfolios matching particular criteria.",
        "operationId": "ListPortfolios",
        "parameters": [
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime or cut label at which to list the portfolios. Defaults to the current LUSID\r\n            system datetime if not specified.",
            "schema": {
              "type": "string",
              "description": "The effective datetime or cut label at which to list the portfolios. Defaults to the current LUSID\r\n            system datetime if not specified.",
              "format": "dateorcutlabel",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to list the portfolios. Defaults to returning the latest version\r\n            of each portfolio if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to list the portfolios. Defaults to returning the latest version\r\n            of each portfolio if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "page",
            "in": "query",
            "description": "The pagination token to use to continue listing portfolios; this\r\n            value is returned from the previous call. If a pagination token is provided, the filter, effectiveAt\r\n            and asAt fields must not have changed since the original request. Also, if set, a start value cannot be provided.",
            "schema": {
              "maxLength": 500,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\+/]*={0,3}$",
              "type": "string",
              "description": "The pagination token to use to continue listing portfolios; this\r\n            value is returned from the previous call. If a pagination token is provided, the filter, effectiveAt\r\n            and asAt fields must not have changed since the original request. Also, if set, a start value cannot be provided.",
              "nullable": true
            }
          },
          {
            "name": "start",
            "in": "query",
            "description": "When paginating, skip this number of results.",
            "schema": {
              "type": "integer",
              "description": "When paginating, skip this number of results.",
              "format": "int32",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "limit",
            "in": "query",
            "description": "When paginating, limit the results to this number. Defaults to 100 if not specified.",
            "schema": {
              "maximum": 5000,
              "minimum": 1,
              "type": "integer",
              "description": "When paginating, limit the results to this number. Defaults to 100 if not specified.",
              "format": "int32",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the results.\r\n            For example, to filter on the transaction type, specify \"type eq 'Transaction'\". For more information about filtering\r\n            results, see https://support.lusid.com/knowledgebase/article/KA-01914.",
            "schema": {
              "maxLength": 16384,
              "minLength": 0,
              "pattern": "^[\\s\\S]*$",
              "type": "string",
              "description": "Expression to filter the results.\r\n            For example, to filter on the transaction type, specify \"type eq 'Transaction'\". For more information about filtering\r\n            results, see https://support.lusid.com/knowledgebase/article/KA-01914.",
              "nullable": true
            }
          },
          {
            "name": "query",
            "in": "query",
            "description": "Expression specifying the criteria that the returned portfolios must meet. For example, to see which\r\n            portfolios have holdings in instruments with a LusidInstrumentId (LUID) of 'LUID_PPA8HI6M' or a Figi of 'BBG000BLNNH6',\r\n            specify \"instrument.identifiers in (('LusidInstrumentId', 'LUID_PPA8HI6M'), ('Figi', 'BBG000BLNNH6'))\".",
            "schema": {
              "maxLength": 16384,
              "minLength": 0,
              "pattern": "^[\\s\\S]*$",
              "type": "string",
              "description": "Expression specifying the criteria that the returned portfolios must meet. For example, to see which\r\n            portfolios have holdings in instruments with a LusidInstrumentId (LUID) of 'LUID_PPA8HI6M' or a Figi of 'BBG000BLNNH6',\r\n            specify \"instrument.identifiers in (('LusidInstrumentId', 'LUID_PPA8HI6M'), ('Figi', 'BBG000BLNNH6'))\".",
              "nullable": true
            }
          },
          {
            "name": "propertyKeys",
            "in": "query",
            "description": "A list of property keys from the 'Portfolio' domain to decorate onto each portfolio.\r\n            These must take the format {domain}/{scope}/{code}, for example 'Portfolio/Manager/Id'.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
              },
              "description": "A list of property keys from the 'Portfolio' domain to decorate onto each portfolio.\r\n            These must take the format {domain}/{scope}/{code}, for example 'Portfolio/Manager/Id'.",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The requested portfolios",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfPortfolio"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfPortfolio"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfPortfolio"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      }
    },
    "/api/portfolios/$reconcileholdings": {
      "post": {
        "tags": [
          "Reconciliations"
        ],
        "summary": "[EARLY ACCESS] ReconcileHoldings: Reconcile portfolio holdings",
        "description": "Reconcile the holdings of two portfolios.",
        "operationId": "ReconcileHoldings",
        "parameters": [
          {
            "name": "sortBy",
            "in": "query",
            "description": "Optional. Order the results by these fields. Use use the '-' sign to denote descending order e.g. -MyFieldName",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Optional. Order the results by these fields. Use use the '-' sign to denote descending order e.g. -MyFieldName",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "start",
            "in": "query",
            "description": "Optional. When paginating, skip this number of results",
            "schema": {
              "type": "integer",
              "description": "Optional. When paginating, skip this number of results",
              "format": "int32",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Optional. When paginating, limit the number of returned results to this many.",
            "schema": {
              "type": "integer",
              "description": "Optional. When paginating, limit the number of returned results to this many.",
              "format": "int32",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Optional. Expression to filter the result set.\r\n            For example, to filter on the left portfolio Code, use \"left.portfolioId.code eq 'string'\"\r\n            Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "maxLength": 16384,
              "minLength": 0,
              "pattern": "^[\\s\\S]*$",
              "type": "string",
              "description": "Optional. Expression to filter the result set.\r\n            For example, to filter on the left portfolio Code, use \"left.portfolioId.code eq 'string'\"\r\n            Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "The specifications of the inputs to the reconciliation",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/PortfoliosReconciliationRequest"
              },
              "example": {
                "left": {
                  "portfolioId": {
                    "scope": "MySourceScope",
                    "code": "MySourcePortfolioCode"
                  },
                  "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                  "asAt": "2018-03-05T00:00:00.0000000+00:00"
                },
                "right": {
                  "portfolioId": {
                    "scope": "MyTargetScope",
                    "code": "MyTargetPortfolioCode"
                  },
                  "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                  "asAt": "2018-03-05T00:00:00.0000000+00:00"
                },
                "instrumentPropertyKeys": [
                  "Instrument/default/Name"
                ]
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PortfoliosReconciliationRequest"
              },
              "example": {
                "left": {
                  "portfolioId": {
                    "scope": "MySourceScope",
                    "code": "MySourcePortfolioCode"
                  },
                  "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                  "asAt": "2018-03-05T00:00:00.0000000+00:00"
                },
                "right": {
                  "portfolioId": {
                    "scope": "MyTargetScope",
                    "code": "MyTargetPortfolioCode"
                  },
                  "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                  "asAt": "2018-03-05T00:00:00.0000000+00:00"
                },
                "instrumentPropertyKeys": [
                  "Instrument/default/Name"
                ]
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/PortfoliosReconciliationRequest"
              },
              "example": {
                "left": {
                  "portfolioId": {
                    "scope": "MySourceScope",
                    "code": "MySourcePortfolioCode"
                  },
                  "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                  "asAt": "2018-03-05T00:00:00.0000000+00:00"
                },
                "right": {
                  "portfolioId": {
                    "scope": "MyTargetScope",
                    "code": "MyTargetPortfolioCode"
                  },
                  "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                  "asAt": "2018-03-05T00:00:00.0000000+00:00"
                },
                "instrumentPropertyKeys": [
                  "Instrument/default/Name"
                ]
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/PortfoliosReconciliationRequest"
              },
              "example": {
                "left": {
                  "portfolioId": {
                    "scope": "MySourceScope",
                    "code": "MySourcePortfolioCode"
                  },
                  "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                  "asAt": "2018-03-05T00:00:00.0000000+00:00"
                },
                "right": {
                  "portfolioId": {
                    "scope": "MyTargetScope",
                    "code": "MyTargetPortfolioCode"
                  },
                  "effectiveAt": "2018-03-05T00:00:00.0000000+00:00",
                  "asAt": "2018-03-05T00:00:00.0000000+00:00"
                },
                "instrumentPropertyKeys": [
                  "Instrument/default/Name"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The requested reconciliation",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfReconciliationBreak"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfReconciliationBreak"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfReconciliationBreak"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/portfolios/{scope}": {
      "get": {
        "tags": [
          "Portfolios"
        ],
        "summary": "ListPortfoliosForScope: List portfolios for scope",
        "description": "List all the portfolios in a particular scope.",
        "operationId": "ListPortfoliosForScope",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope whose portfolios to list.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope whose portfolios to list.",
              "nullable": true
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime or cut label at which to list the portfolios. Defaults to the current LUSID\r\n            system datetime if not specified.",
            "schema": {
              "type": "string",
              "description": "The effective datetime or cut label at which to list the portfolios. Defaults to the current LUSID\r\n            system datetime if not specified.",
              "format": "dateorcutlabel",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to list the portfolios. Defaults to returning the latest version\r\n            of each portfolio if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to list the portfolios. Defaults to returning the latest version\r\n            of each portfolio if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "page",
            "in": "query",
            "description": "The pagination token to use to continue listing portfolios. This\r\nvalue is returned from the previous call. If a pagination token is provided, the filter, effectiveAt\r\nand asAt fields must not have changed since the original request. Also, if set, a start value cannot be provided.",
            "schema": {
              "maxLength": 500,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\+/]*={0,3}$",
              "type": "string",
              "description": "The pagination token to use to continue listing portfolios. This\r\nvalue is returned from the previous call. If a pagination token is provided, the filter, effectiveAt\r\nand asAt fields must not have changed since the original request. Also, if set, a start value cannot be provided.",
              "nullable": true
            }
          },
          {
            "name": "start",
            "in": "query",
            "description": "When paginating, skip this number of results.",
            "schema": {
              "type": "integer",
              "description": "When paginating, skip this number of results.",
              "format": "int32",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "limit",
            "in": "query",
            "description": "When paginating, limit the results to this number. Defaults to 100 if not specified.",
            "schema": {
              "maximum": 5000,
              "minimum": 1,
              "type": "integer",
              "description": "When paginating, limit the results to this number. Defaults to 100 if not specified.",
              "format": "int32",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the results.\r\n            For example, to return only transactions with a transaction type of 'Buy', specify \"type eq 'Buy'\".\r\n            For more information about filtering results, see https://support.lusid.com/knowledgebase/article/KA-01914.",
            "schema": {
              "maxLength": 16384,
              "minLength": 0,
              "pattern": "^[\\s\\S]*$",
              "type": "string",
              "description": "Expression to filter the results.\r\n            For example, to return only transactions with a transaction type of 'Buy', specify \"type eq 'Buy'\".\r\n            For more information about filtering results, see https://support.lusid.com/knowledgebase/article/KA-01914.",
              "nullable": true
            }
          },
          {
            "name": "propertyKeys",
            "in": "query",
            "description": "A list of property keys from the 'Portfolio' domain to decorate onto each portfolio.\r\n            These must take the format {domain}/{scope}/{code}, for example 'Portfolio/Manager/Id'.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
              },
              "description": "A list of property keys from the 'Portfolio' domain to decorate onto each portfolio.\r\n            These must take the format {domain}/{scope}/{code}, for example 'Portfolio/Manager/Id'.",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The portfolios in the specified scope",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfPortfolio"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfPortfolio"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfPortfolio"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      }
    },
    "/api/portfolios/{scope}/{code}": {
      "get": {
        "tags": [
          "Portfolios"
        ],
        "summary": "GetPortfolio: Get portfolio",
        "description": "Retrieve the definition of a particular portfolio.",
        "operationId": "GetPortfolio",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the portfolio.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the portfolio. Together with the scope this uniquely identifies the portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the portfolio. Together with the scope this uniquely identifies the portfolio.",
              "nullable": true
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime or cut label at which to retrieve the portfolio definition. Defaults to the current LUSID system datetime if not specified.",
            "schema": {
              "type": "string",
              "description": "The effective datetime or cut label at which to retrieve the portfolio definition. Defaults to the current LUSID system datetime if not specified.",
              "format": "dateorcutlabel",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the portfolio definition. Defaults to returning the latest version of the portfolio definition if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to retrieve the portfolio definition. Defaults to returning the latest version of the portfolio definition if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "propertyKeys",
            "in": "query",
            "description": "A list of property keys from the 'Portfolio' domain to decorate onto the portfolio.\r\n            These must take the format {domain}/{scope}/{code}, for example 'Portfolio/Manager/Id'.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
              },
              "description": "A list of property keys from the 'Portfolio' domain to decorate onto the portfolio.\r\n            These must take the format {domain}/{scope}/{code}, for example 'Portfolio/Manager/Id'.",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The requested portfolio definition",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Portfolio"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Portfolio"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Portfolio"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      },
      "delete": {
        "tags": [
          "Portfolios"
        ],
        "summary": "DeletePortfolio: Delete portfolio",
        "description": "Delete a particular portfolio.\r\n            \r\nThe deletion will take effect from the portfolio's creation datetime. This means that the portfolio will no longer exist at any effective datetime, as per the asAt datetime of deletion.",
        "operationId": "DeletePortfolio",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the portfolio.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the portfolio. Together with the scope this uniquely identifies the portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the portfolio. Together with the scope this uniquely identifies the portfolio.",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The datetime that the portfolio was deleted",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      },
      "put": {
        "tags": [
          "Portfolios"
        ],
        "summary": "UpdatePortfolio: Update portfolio",
        "description": "Update the definition of a particular portfolio.\r\n            \r\nNote that not all elements of a portfolio definition are\r\nmodifiable due to the potential implications for data already stored.",
        "operationId": "UpdatePortfolio",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the portfolio.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the portfolio. Together with the scope this uniquely identifies the portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the portfolio. Together with the scope this uniquely identifies the portfolio.",
              "nullable": true
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime or cut label at which to update the definition. Defaults to the current\r\n             LUSID system datetime if not specified.",
            "schema": {
              "type": "string",
              "description": "The effective datetime or cut label at which to update the definition. Defaults to the current\r\n             LUSID system datetime if not specified.",
              "format": "dateorcutlabel",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "The updated portfolio definition.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePortfolioRequest"
              },
              "example": {
                "displayName": "MyPortfolioName",
                "description": "Long form description of portfolio"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePortfolioRequest"
              },
              "example": {
                "displayName": "MyPortfolioName",
                "description": "Long form description of portfolio"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePortfolioRequest"
              },
              "example": {
                "displayName": "MyPortfolioName",
                "description": "Long form description of portfolio"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePortfolioRequest"
              },
              "example": {
                "displayName": "MyPortfolioName",
                "description": "Long form description of portfolio"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The updated definition of the portfolio",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Portfolio"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Portfolio"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Portfolio"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      }
    },
    "/api/portfolios/{scope}/{code}/commands": {
      "get": {
        "tags": [
          "Portfolios"
        ],
        "summary": "GetPortfolioCommands: Get portfolio commands",
        "description": "Get all the commands that modified a particular portfolio, including any input transactions.",
        "operationId": "GetPortfolioCommands",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the portfolio.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the portfolio. Together with the scope this uniquely identifies the portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the portfolio. Together with the scope this uniquely identifies the portfolio.",
              "nullable": true
            }
          },
          {
            "name": "fromAsAt",
            "in": "query",
            "description": "The lower bound asAt datetime (inclusive) from which to retrieve commands. There is no lower bound if this is not specified.",
            "schema": {
              "type": "string",
              "description": "The lower bound asAt datetime (inclusive) from which to retrieve commands. There is no lower bound if this is not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "toAsAt",
            "in": "query",
            "description": "The upper bound asAt datetime (inclusive) from which to retrieve commands. There is no upper bound if this is not specified.",
            "schema": {
              "type": "string",
              "description": "The upper bound asAt datetime (inclusive) from which to retrieve commands. There is no upper bound if this is not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the results.\r\n            For example, to filter on the User ID, specify \"userId.id eq 'string'\".\r\n            For more information about filtering, see https://support.lusid.com/knowledgebase/article/KA-01914.",
            "schema": {
              "maxLength": 16384,
              "minLength": 0,
              "pattern": "^[\\s\\S]*$",
              "type": "string",
              "description": "Expression to filter the results.\r\n            For example, to filter on the User ID, specify \"userId.id eq 'string'\".\r\n            For more information about filtering, see https://support.lusid.com/knowledgebase/article/KA-01914.",
              "nullable": true
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "The pagination token to use to continue listing commands; this value is returned from the previous call.",
            "schema": {
              "maxLength": 500,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\+/]*={0,3}$",
              "type": "string",
              "description": "The pagination token to use to continue listing commands; this value is returned from the previous call.",
              "nullable": true
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "When paginating, limit the results to this number. Defaults to 500 if not specified.",
            "schema": {
              "maximum": 5000,
              "minimum": 1,
              "type": "integer",
              "description": "When paginating, limit the results to this number. Defaults to 500 if not specified.",
              "format": "int32",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The commands that modified the specified portfolio.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfProcessedCommand"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfProcessedCommand"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfProcessedCommand"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      }
    },
    "/api/portfolios/{scope}/{code}/metadata": {
      "get": {
        "tags": [
          "Portfolios"
        ],
        "summary": "[EARLY ACCESS] GetPortfolioMetadata: Get access metadata rules for a portfolio",
        "description": "Pass the scope and portfolio code parameters to retrieve the AccessMetadata associated with a portfolio",
        "operationId": "GetPortfolioMetadata",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the Portfolio Access Metadata Rule to retrieve.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the Portfolio Access Metadata Rule to retrieve."
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "Portfolio code",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "Portfolio code"
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effectiveAt datetime at which to retrieve the access metadata rule.",
            "schema": {
              "type": "string",
              "description": "The effectiveAt datetime at which to retrieve the access metadata rule.",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the portfolio access metadata.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to retrieve the portfolio access metadata.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The filtered list of results",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/AccessMetadataValue"
                    }
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/AccessMetadataValue"
                    }
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/AccessMetadataValue"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/portfolios/{scope}/{code}/metadata/{metadataKey}": {
      "get": {
        "tags": [
          "Portfolios"
        ],
        "summary": "[EARLY ACCESS] GetPortfoliosAccessMetadataByKey: Get an entry identified by a metadataKey in the access metadata object",
        "description": "Get a specific portfolio access metadata rule by specifying the corresponding identifier parts\r\n            \r\nNo matching will be performed through this endpoint. To retrieve a rule, it is necessary to specify, exactly, the identifier of the rule",
        "operationId": "GetPortfoliosAccessMetadataByKey",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the Portfolio Access Metadata Rule to retrieve.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the Portfolio Access Metadata Rule to retrieve."
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the portfolio",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the portfolio"
            }
          },
          {
            "name": "metadataKey",
            "in": "path",
            "description": "Key of the metadata to retrieve",
            "required": true,
            "schema": {
              "maxLength": 256,
              "minLength": 1,
              "type": "string",
              "description": "Key of the metadata to retrieve"
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective date of the rule",
            "schema": {
              "type": "string",
              "description": "The effective date of the rule",
              "format": "dateorcutlabel",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the portfolio access metadata.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to retrieve the portfolio access metadata.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The successfully retrieved Portfolio Access Metadata Rule or any failure",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AccessMetadataValue"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AccessMetadataValue"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AccessMetadataValue"
                  }
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      },
      "put": {
        "tags": [
          "Portfolios"
        ],
        "summary": "[EARLY ACCESS] UpsertPortfolioAccessMetadata: Upsert a Portfolio Access Metadata Rule associated with specific metadataKey. This creates or updates the data in LUSID.",
        "description": "Update or insert one Portfolio Access Metadata Rule in a single scope. An item will be updated if it already exists\r\nand inserted if it does not.\r\n\r\nThe response will return the successfully updated or inserted Portfolio Access Metadata Rule or failure message if unsuccessful\r\n\r\nIt is important to always check to verify success (or failure).\r\n            \r\nMultiple rules for a metadataKey can exists with different effective at dates, when resources are accessed the rule that is active for the current time will be fetched",
        "operationId": "UpsertPortfolioAccessMetadata",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope to use when updating or inserting the Portfolio Access Metadata Rule.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope to use when updating or inserting the Portfolio Access Metadata Rule."
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "Portfolio code",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "Portfolio code"
            }
          },
          {
            "name": "metadataKey",
            "in": "path",
            "description": "Key of the access metadata to upsert",
            "required": true,
            "schema": {
              "maxLength": 256,
              "minLength": 1,
              "type": "string",
              "description": "Key of the access metadata to upsert"
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The date this rule will effective from",
            "schema": {
              "type": "string",
              "description": "The date this rule will effective from",
              "format": "dateorcutlabel",
              "nullable": true
            }
          },
          {
            "name": "effectiveUntil",
            "in": "query",
            "description": "The effective date until which the Access Metadata is valid. If not supplied this will be valid indefinitely, or until the next 'effectiveAt' date of the Access Metadata",
            "schema": {
              "type": "string",
              "description": "The effective date until which the Access Metadata is valid. If not supplied this will be valid indefinitely, or until the next 'effectiveAt' date of the Access Metadata",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "requestBody": {
          "description": "The Portfolio Access Metadata Rule to update or insert",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertPortfolioAccessMetadataRequest"
              },
              "example": {
                "metadata": [
                  {
                    "value": "SilverLicence",
                    "provider": "TestDataProvider"
                  }
                ]
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertPortfolioAccessMetadataRequest"
              },
              "example": {
                "metadata": [
                  {
                    "value": "SilverLicence",
                    "provider": "TestDataProvider"
                  }
                ]
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertPortfolioAccessMetadataRequest"
              },
              "example": {
                "metadata": [
                  {
                    "value": "SilverLicence",
                    "provider": "TestDataProvider"
                  }
                ]
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertPortfolioAccessMetadataRequest"
              },
              "example": {
                "metadata": [
                  {
                    "value": "SilverLicence",
                    "provider": "TestDataProvider"
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The successfully updated or inserted item or any failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfAccessMetadataValueOf"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfAccessMetadataValueOf"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfAccessMetadataValueOf"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      },
      "delete": {
        "tags": [
          "Portfolios"
        ],
        "summary": "[EARLY ACCESS] DeleteKeyFromPortfolioAccessMetadata: Delete a Portfolio Access Metadata Rule",
        "description": "Delete the Portfolio Access Metadata Rule that exactly matches the provided identifier parts",
        "operationId": "DeleteKeyFromPortfolioAccessMetadata",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the Quote Access Metadata Rule to retrieve.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the Quote Access Metadata Rule to retrieve."
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "Portfolio code",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "Portfolio code"
            }
          },
          {
            "name": "metadataKey",
            "in": "path",
            "description": "The metadataKey identifying the access metadata entry to delete",
            "required": true,
            "schema": {
              "maxLength": 256,
              "minLength": 1,
              "type": "string",
              "description": "The metadataKey identifying the access metadata entry to delete"
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective date to delete at, if this is not supplied, it will delete all data found",
            "schema": {
              "type": "string",
              "description": "The effective date to delete at, if this is not supplied, it will delete all data found",
              "format": "dateorcutlabel",
              "nullable": true
            }
          },
          {
            "name": "effectiveUntil",
            "in": "query",
            "description": "The effective date until which the delete is valid. If not supplied this will be valid indefinitely, or until the next 'effectiveAt' date of the Access Metadata",
            "schema": {
              "type": "string",
              "description": "The effective date until which the delete is valid. If not supplied this will be valid indefinitely, or until the next 'effectiveAt' date of the Access Metadata",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The rule that has been deleted",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/portfolios/{scope}/{code}/properties": {
      "get": {
        "tags": [
          "Portfolios"
        ],
        "summary": "GetPortfolioProperties: Get portfolio properties",
        "description": "List all the properties of a particular portfolio.",
        "operationId": "GetPortfolioProperties",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the portfolio.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the portfolio. Together with the scope this uniquely identifies the portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the portfolio. Together with the scope this uniquely identifies the portfolio.",
              "nullable": true
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime or cut label at which to list the portfolio's properties. Defaults to the current LUSID system datetime if not specified.",
            "schema": {
              "type": "string",
              "description": "The effective datetime or cut label at which to list the portfolio's properties. Defaults to the current LUSID system datetime if not specified.",
              "format": "dateorcutlabel",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to list the portfolio's properties. Defaults to returning the latest version of each property if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to list the portfolio's properties. Defaults to returning the latest version of each property if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The properties of the specified portfolio",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioProperties"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioProperties"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioProperties"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      },
      "delete": {
        "tags": [
          "Portfolios"
        ],
        "summary": "DeletePortfolioProperties: Delete portfolio properties",
        "description": "Delete one or more properties from a particular portfolio. If the properties are time-variant then an effective datetime from which\r\nto delete properties must be specified. If the properties are perpetual then it is invalid to specify an effective datetime for deletion.",
        "operationId": "DeletePortfolioProperties",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the portfolio.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the portfolio. Together with the scope this uniquely identifies the portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the portfolio. Together with the scope this uniquely identifies the portfolio.",
              "nullable": true
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime or cut label at which to delete time-variant properties from.\r\n            The property must exist at the specified 'effectiveAt' datetime. If the 'effectiveAt' is not provided or is\r\n            before the time-variant property exists then a failure is returned. Do not specify this parameter if any of\r\n            the properties to delete are perpetual.",
            "schema": {
              "type": "string",
              "description": "The effective datetime or cut label at which to delete time-variant properties from.\r\n            The property must exist at the specified 'effectiveAt' datetime. If the 'effectiveAt' is not provided or is\r\n            before the time-variant property exists then a failure is returned. Do not specify this parameter if any of\r\n            the properties to delete are perpetual.",
              "format": "dateorcutlabel",
              "nullable": true
            }
          },
          {
            "name": "propertyKeys",
            "in": "query",
            "description": "The property keys of the properties to delete. These must take the format\r\n            {domain}/{scope}/{code}, for example 'Portfolio/Manager/Id'. Each property must be from the 'Portfolio' domain.",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
              },
              "description": "The property keys of the properties to delete. These must take the format\r\n            {domain}/{scope}/{code}, for example 'Portfolio/Manager/Id'. Each property must be from the 'Portfolio' domain."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The datetime that the properties were deleted from the specified portfolio",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      },
      "post": {
        "tags": [
          "Portfolios"
        ],
        "summary": "UpsertPortfolioProperties: Upsert portfolio properties",
        "description": "Create or update one or more properties for a particular portfolio. A property is updated if it\r\nalready exists and created if it does not. All properties must be from the 'Portfolio' domain.\r\n            \r\nProperties have an <i>effectiveFrom</i> datetime from which the property is valid, and an <i>effectiveUntil</i>\r\ndatetime until which it is valid. Not supplying an <i>effectiveUntil</i> datetime results in the property being\r\nvalid indefinitely, or until the next <i>effectiveFrom</i> datetime of the property.",
        "operationId": "UpsertPortfolioProperties",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the portfolio.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the portfolio. Together with the scope this uniquely identifies the portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the portfolio. Together with the scope this uniquely identifies the portfolio.",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "The properties to be created or updated. Each property in\r\n             the request must be keyed by its unique property key. This has the format {domain}/{scope}/{code}, for example\r\n             'Portfolio/Manager/Id'.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/Property"
                },
                "description": "The properties to be created or updated. Each property in\r\n             the request must be keyed by its unique property key. This has the format {domain}/{scope}/{code}, for example\r\n             'Portfolio/Manager/Id'."
              },
              "example": {
                "portfolio/MyScope/FundManagerName": {
                  "key": "Portfolio/MyScope/FundManagerName",
                  "value": {
                    "labelValue": "Smith"
                  },
                  "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00"
                },
                "portfolio/MyScope/SomeProperty": {
                  "key": "Portfolio/MyScope/SomeProperty",
                  "value": {
                    "labelValue": "SomeValue"
                  },
                  "effectiveFrom": "2016-01-01T00:00:00.0000000+00:00"
                },
                "portfolio/MyScope/AnotherProperty": {
                  "key": "Portfolio/MyScope/AnotherProperty",
                  "value": {
                    "labelValue": "AnotherValue"
                  },
                  "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00",
                  "effectiveUntil": "2020-01-01T00:00:00.0000000+00:00"
                },
                "portfolio/MyScope/ReBalanceInterval": {
                  "key": "Portfolio/MyScope/ReBalanceInterval",
                  "value": {
                    "metricValue": {
                      "value": 30,
                      "unit": "Days"
                    }
                  }
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/Property"
                },
                "description": "The properties to be created or updated. Each property in\r\n             the request must be keyed by its unique property key. This has the format {domain}/{scope}/{code}, for example\r\n             'Portfolio/Manager/Id'."
              },
              "example": {
                "portfolio/MyScope/FundManagerName": {
                  "key": "Portfolio/MyScope/FundManagerName",
                  "value": {
                    "labelValue": "Smith"
                  },
                  "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00"
                },
                "portfolio/MyScope/SomeProperty": {
                  "key": "Portfolio/MyScope/SomeProperty",
                  "value": {
                    "labelValue": "SomeValue"
                  },
                  "effectiveFrom": "2016-01-01T00:00:00.0000000+00:00"
                },
                "portfolio/MyScope/AnotherProperty": {
                  "key": "Portfolio/MyScope/AnotherProperty",
                  "value": {
                    "labelValue": "AnotherValue"
                  },
                  "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00",
                  "effectiveUntil": "2020-01-01T00:00:00.0000000+00:00"
                },
                "portfolio/MyScope/ReBalanceInterval": {
                  "key": "Portfolio/MyScope/ReBalanceInterval",
                  "value": {
                    "metricValue": {
                      "value": 30,
                      "unit": "Days"
                    }
                  }
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/Property"
                },
                "description": "The properties to be created or updated. Each property in\r\n             the request must be keyed by its unique property key. This has the format {domain}/{scope}/{code}, for example\r\n             'Portfolio/Manager/Id'."
              },
              "example": {
                "portfolio/MyScope/FundManagerName": {
                  "key": "Portfolio/MyScope/FundManagerName",
                  "value": {
                    "labelValue": "Smith"
                  },
                  "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00"
                },
                "portfolio/MyScope/SomeProperty": {
                  "key": "Portfolio/MyScope/SomeProperty",
                  "value": {
                    "labelValue": "SomeValue"
                  },
                  "effectiveFrom": "2016-01-01T00:00:00.0000000+00:00"
                },
                "portfolio/MyScope/AnotherProperty": {
                  "key": "Portfolio/MyScope/AnotherProperty",
                  "value": {
                    "labelValue": "AnotherValue"
                  },
                  "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00",
                  "effectiveUntil": "2020-01-01T00:00:00.0000000+00:00"
                },
                "portfolio/MyScope/ReBalanceInterval": {
                  "key": "Portfolio/MyScope/ReBalanceInterval",
                  "value": {
                    "metricValue": {
                      "value": 30,
                      "unit": "Days"
                    }
                  }
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/Property"
                },
                "description": "The properties to be created or updated. Each property in\r\n             the request must be keyed by its unique property key. This has the format {domain}/{scope}/{code}, for example\r\n             'Portfolio/Manager/Id'."
              },
              "example": {
                "portfolio/MyScope/FundManagerName": {
                  "key": "Portfolio/MyScope/FundManagerName",
                  "value": {
                    "labelValue": "Smith"
                  },
                  "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00"
                },
                "portfolio/MyScope/SomeProperty": {
                  "key": "Portfolio/MyScope/SomeProperty",
                  "value": {
                    "labelValue": "SomeValue"
                  },
                  "effectiveFrom": "2016-01-01T00:00:00.0000000+00:00"
                },
                "portfolio/MyScope/AnotherProperty": {
                  "key": "Portfolio/MyScope/AnotherProperty",
                  "value": {
                    "labelValue": "AnotherValue"
                  },
                  "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00",
                  "effectiveUntil": "2020-01-01T00:00:00.0000000+00:00"
                },
                "portfolio/MyScope/ReBalanceInterval": {
                  "key": "Portfolio/MyScope/ReBalanceInterval",
                  "value": {
                    "metricValue": {
                      "value": 30,
                      "unit": "Days"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The updated or inserted properties",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioProperties"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioProperties"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioProperties"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      }
    },
    "/api/portfolios/{scope}/{code}/relationships": {
      "get": {
        "tags": [
          "Portfolios"
        ],
        "summary": "[EARLY ACCESS] GetPortfolioRelationships: Get portfolio relationships",
        "description": "Get relationships for a particular portfolio.",
        "operationId": "GetPortfolioRelationships",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the portfolio.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the portfolio. Together with the scope this uniquely identifies the portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the portfolio. Together with the scope this uniquely identifies the portfolio.",
              "nullable": true
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime or cut label at which to retrieve relationships. Defaults to the current LUSID system datetime if not specified.",
            "schema": {
              "maxLength": 256,
              "minLength": 0,
              "pattern": "^[a-zA-Z0-9\\-_\\+:\\.]+$",
              "type": "string",
              "description": "The effective datetime or cut label at which to retrieve relationships. Defaults to the current LUSID system datetime if not specified.",
              "format": "dateorcutlabel",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve relationships. Defaults to returning the latest LUSID AsAt time if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to retrieve relationships. Defaults to returning the latest LUSID AsAt time if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the relationships. Provide a null or empty string for this field until further notice.",
            "schema": {
              "maxLength": 16384,
              "minLength": 0,
              "pattern": "^[\\s\\S]*$",
              "type": "string",
              "description": "Expression to filter the relationships. Provide a null or empty string for this field until further notice.",
              "nullable": true
            }
          },
          {
            "name": "identifierTypes",
            "in": "query",
            "description": "Identifier types (as property keys) used for referencing Persons or Legal Entities.\r\n            These can be specified from the 'Person' or 'LegalEntity' domains and have the format {domain}/{scope}/{code}, for example\r\n            'Person/CompanyDetails/Role'. An Empty array may be used to return all related Entities.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
              },
              "description": "Identifier types (as property keys) used for referencing Persons or Legal Entities.\r\n            These can be specified from the 'Person' or 'LegalEntity' domains and have the format {domain}/{scope}/{code}, for example\r\n            'Person/CompanyDetails/Role'. An Empty array may be used to return all related Entities.",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The relationships for the specified portfolio.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfRelationship"
                },
                "example": {
                  "values": [
                    {
                      "relationshipDefinitionId": {
                        "scope": "PortfolioManagementTeam",
                        "code": "Traders"
                      },
                      "relatedEntity": {
                        "entityType": "Person",
                        "entityId": {
                          "idTypeScope": "HrSystem1",
                          "idTypeCode": "InternalId",
                          "code": "XY10001111"
                        },
                        "displayName": "James Smith",
                        "properties": {},
                        "identifiers": [
                          {
                            "identifierScope": "HrSystem1",
                            "identifierType": "InternalId",
                            "identifierValue": "XY10001111"
                          }
                        ]
                      },
                      "traversalDirection": "Out",
                      "traversalDescription": "can be traded by",
                      "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                      "effectiveUntil": "2022-01-01T12:00:00.0000000+00:00"
                    },
                    {
                      "relationshipDefinitionId": {
                        "scope": "PortfolioManagementTeam",
                        "code": "Traders"
                      },
                      "relatedEntity": {
                        "entityType": "PortfolioGroup",
                        "entityId": {
                          "scope": "PortfolioGroupEmea",
                          "code": "PortfolioGroupId-867312"
                        },
                        "displayName": "UK Portfolios",
                        "properties": {},
                        "scope": "PortfolioGroupEmea",
                        "identifiers": [
                          {
                            "identifierType": "code",
                            "identifierValue": "PortfolioGroupId-867312"
                          }
                        ]
                      },
                      "traversalDirection": "In",
                      "traversalDescription": "can trade with portfolio",
                      "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                      "effectiveUntil": "2022-01-01T12:00:00.0000000+00:00"
                    }
                  ],
                  "links": []
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfRelationship"
                },
                "example": {
                  "values": [
                    {
                      "relationshipDefinitionId": {
                        "scope": "PortfolioManagementTeam",
                        "code": "Traders"
                      },
                      "relatedEntity": {
                        "entityType": "Person",
                        "entityId": {
                          "idTypeScope": "HrSystem1",
                          "idTypeCode": "InternalId",
                          "code": "XY10001111"
                        },
                        "displayName": "James Smith",
                        "properties": {},
                        "identifiers": [
                          {
                            "identifierScope": "HrSystem1",
                            "identifierType": "InternalId",
                            "identifierValue": "XY10001111"
                          }
                        ]
                      },
                      "traversalDirection": "Out",
                      "traversalDescription": "can be traded by",
                      "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                      "effectiveUntil": "2022-01-01T12:00:00.0000000+00:00"
                    },
                    {
                      "relationshipDefinitionId": {
                        "scope": "PortfolioManagementTeam",
                        "code": "Traders"
                      },
                      "relatedEntity": {
                        "entityType": "PortfolioGroup",
                        "entityId": {
                          "scope": "PortfolioGroupEmea",
                          "code": "PortfolioGroupId-867312"
                        },
                        "displayName": "UK Portfolios",
                        "properties": {},
                        "scope": "PortfolioGroupEmea",
                        "identifiers": [
                          {
                            "identifierType": "code",
                            "identifierValue": "PortfolioGroupId-867312"
                          }
                        ]
                      },
                      "traversalDirection": "In",
                      "traversalDescription": "can trade with portfolio",
                      "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                      "effectiveUntil": "2022-01-01T12:00:00.0000000+00:00"
                    }
                  ],
                  "links": []
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfRelationship"
                },
                "example": {
                  "values": [
                    {
                      "relationshipDefinitionId": {
                        "scope": "PortfolioManagementTeam",
                        "code": "Traders"
                      },
                      "relatedEntity": {
                        "entityType": "Person",
                        "entityId": {
                          "idTypeScope": "HrSystem1",
                          "idTypeCode": "InternalId",
                          "code": "XY10001111"
                        },
                        "displayName": "James Smith",
                        "properties": {},
                        "identifiers": [
                          {
                            "identifierScope": "HrSystem1",
                            "identifierType": "InternalId",
                            "identifierValue": "XY10001111"
                          }
                        ]
                      },
                      "traversalDirection": "Out",
                      "traversalDescription": "can be traded by",
                      "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                      "effectiveUntil": "2022-01-01T12:00:00.0000000+00:00"
                    },
                    {
                      "relationshipDefinitionId": {
                        "scope": "PortfolioManagementTeam",
                        "code": "Traders"
                      },
                      "relatedEntity": {
                        "entityType": "PortfolioGroup",
                        "entityId": {
                          "scope": "PortfolioGroupEmea",
                          "code": "PortfolioGroupId-867312"
                        },
                        "displayName": "UK Portfolios",
                        "properties": {},
                        "scope": "PortfolioGroupEmea",
                        "identifiers": [
                          {
                            "identifierType": "code",
                            "identifierValue": "PortfolioGroupId-867312"
                          }
                        ]
                      },
                      "traversalDirection": "In",
                      "traversalDescription": "can trade with portfolio",
                      "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                      "effectiveUntil": "2022-01-01T12:00:00.0000000+00:00"
                    }
                  ],
                  "links": []
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/portfolios/{scope}/{code}/returns/$aggregated": {
      "post": {
        "tags": [
          "Portfolios"
        ],
        "summary": "[EARLY ACCESS] GetPortfolioAggregatedReturns: Aggregated Returns",
        "description": "Aggregate Returns which are on the specified portfolio.",
        "operationId": "GetPortfolioAggregatedReturns",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the Portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the Portfolio.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the  Portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the  Portfolio.",
              "nullable": true
            }
          },
          {
            "name": "fromEffectiveAt",
            "in": "query",
            "description": "The start date from which to calculate the Returns.",
            "schema": {
              "type": "string",
              "description": "The start date from which to calculate the Returns.",
              "format": "dateorcutlabel",
              "nullable": true
            }
          },
          {
            "name": "toEffectiveAt",
            "in": "query",
            "description": "The end date for which to calculate the Returns.",
            "schema": {
              "type": "string",
              "description": "The end date for which to calculate the Returns.",
              "format": "dateorcutlabel",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the Returns. Defaults to the latest.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to retrieve the Returns. Defaults to the latest.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "requestBody": {
          "description": "The request used in the AggregatedReturns.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/AggregatedReturnsRequest"
              },
              "example": {
                "metrics": [
                  {
                    "type": "Return",
                    "window": "1Y",
                    "allowPartial": false,
                    "annualised": false,
                    "withFee": true,
                    "alias": "1M"
                  }
                ],
                "returnIds": [
                  {
                    "scope": "TestScope",
                    "code": "default"
                  }
                ],
                "recipeId": {
                  "scope": "ReturnsScope",
                  "code": "ReturnCode"
                },
                "compositeMethod": "Asset",
                "period": "Daily",
                "outputFrequency": "Daily",
                "alternativeInceptionDate": "2020-01-01"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AggregatedReturnsRequest"
              },
              "example": {
                "metrics": [
                  {
                    "type": "Return",
                    "window": "1Y",
                    "allowPartial": false,
                    "annualised": false,
                    "withFee": true,
                    "alias": "1M"
                  }
                ],
                "returnIds": [
                  {
                    "scope": "TestScope",
                    "code": "default"
                  }
                ],
                "recipeId": {
                  "scope": "ReturnsScope",
                  "code": "ReturnCode"
                },
                "compositeMethod": "Asset",
                "period": "Daily",
                "outputFrequency": "Daily",
                "alternativeInceptionDate": "2020-01-01"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AggregatedReturnsRequest"
              },
              "example": {
                "metrics": [
                  {
                    "type": "Return",
                    "window": "1Y",
                    "allowPartial": false,
                    "annualised": false,
                    "withFee": true,
                    "alias": "1M"
                  }
                ],
                "returnIds": [
                  {
                    "scope": "TestScope",
                    "code": "default"
                  }
                ],
                "recipeId": {
                  "scope": "ReturnsScope",
                  "code": "ReturnCode"
                },
                "compositeMethod": "Asset",
                "period": "Daily",
                "outputFrequency": "Daily",
                "alternativeInceptionDate": "2020-01-01"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AggregatedReturnsRequest"
              },
              "example": {
                "metrics": [
                  {
                    "type": "Return",
                    "window": "1Y",
                    "allowPartial": false,
                    "annualised": false,
                    "withFee": true,
                    "alias": "1M"
                  }
                ],
                "returnIds": [
                  {
                    "scope": "TestScope",
                    "code": "default"
                  }
                ],
                "recipeId": {
                  "scope": "ReturnsScope",
                  "code": "ReturnCode"
                },
                "compositeMethod": "Asset",
                "period": "Daily",
                "outputFrequency": "Daily",
                "alternativeInceptionDate": "2020-01-01"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The aggregated returns grouped by return stream.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AggregatedReturnsResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AggregatedReturnsResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AggregatedReturnsResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/portfolios/{scope}/{code}/returns/{returnScope}/{returnCode}": {
      "post": {
        "tags": [
          "Portfolios"
        ],
        "summary": "[EARLY ACCESS] UpsertPortfolioReturns: Upsert Returns",
        "description": "Update or insert returns into the specified portfolio.",
        "operationId": "UpsertPortfolioReturns",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the Portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the Portfolio.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the  Portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the  Portfolio.",
              "nullable": true
            }
          },
          {
            "name": "returnScope",
            "in": "path",
            "description": "The scope of the Returns.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the Returns.",
              "nullable": true
            }
          },
          {
            "name": "returnCode",
            "in": "path",
            "description": "The code of the Returns.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the Returns.",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "This contains the Returns which need to be upsert.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PerformanceReturn"
                },
                "description": "This contains the Returns which need to be upsert."
              },
              "example": [
                {
                  "effectiveAt": "2019-11-28T00:00:00.0000000+00:00",
                  "rateOfReturn": 0.1,
                  "openingMarketValue": 500,
                  "closingMarketValue": 550,
                  "period": "Daily"
                },
                {
                  "effectiveAt": "2019-11-29T00:00:00.0000000+00:00",
                  "rateOfReturn": -0.2,
                  "openingMarketValue": 550,
                  "closingMarketValue": 440,
                  "period": "Daily"
                }
              ]
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PerformanceReturn"
                },
                "description": "This contains the Returns which need to be upsert."
              },
              "example": [
                {
                  "effectiveAt": "2019-11-28T00:00:00.0000000+00:00",
                  "rateOfReturn": 0.1,
                  "openingMarketValue": 500,
                  "closingMarketValue": 550,
                  "period": "Daily"
                },
                {
                  "effectiveAt": "2019-11-29T00:00:00.0000000+00:00",
                  "rateOfReturn": -0.2,
                  "openingMarketValue": 550,
                  "closingMarketValue": 440,
                  "period": "Daily"
                }
              ]
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PerformanceReturn"
                },
                "description": "This contains the Returns which need to be upsert."
              },
              "example": [
                {
                  "effectiveAt": "2019-11-28T00:00:00.0000000+00:00",
                  "rateOfReturn": 0.1,
                  "openingMarketValue": 500,
                  "closingMarketValue": 550,
                  "period": "Daily"
                },
                {
                  "effectiveAt": "2019-11-29T00:00:00.0000000+00:00",
                  "rateOfReturn": -0.2,
                  "openingMarketValue": 550,
                  "closingMarketValue": 440,
                  "period": "Daily"
                }
              ]
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PerformanceReturn"
                },
                "description": "This contains the Returns which need to be upsert."
              },
              "example": [
                {
                  "effectiveAt": "2019-11-28T00:00:00.0000000+00:00",
                  "rateOfReturn": 0.1,
                  "openingMarketValue": 500,
                  "closingMarketValue": 550,
                  "period": "Daily"
                },
                {
                  "effectiveAt": "2019-11-29T00:00:00.0000000+00:00",
                  "rateOfReturn": -0.2,
                  "openingMarketValue": 550,
                  "closingMarketValue": 440,
                  "period": "Daily"
                }
              ]
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The version of the portfolio that contains the newly updated or inserted Returns.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertReturnsResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertReturnsResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertReturnsResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      },
      "get": {
        "tags": [
          "Portfolios"
        ],
        "summary": "[EARLY ACCESS] GetPortfolioReturns: Get Returns",
        "description": "Get Returns which are on the specified portfolio.",
        "operationId": "GetPortfolioReturns",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the Portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the Portfolio.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the  Portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the  Portfolio.",
              "nullable": true
            }
          },
          {
            "name": "returnScope",
            "in": "path",
            "description": "The scope of the Returns.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the Returns.",
              "nullable": true
            }
          },
          {
            "name": "returnCode",
            "in": "path",
            "description": "The code of the Returns.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the Returns.",
              "nullable": true
            }
          },
          {
            "name": "fromEffectiveAt",
            "in": "query",
            "description": "The start date from which to get the Returns.",
            "schema": {
              "type": "string",
              "description": "The start date from which to get the Returns.",
              "format": "dateorcutlabel",
              "nullable": true
            }
          },
          {
            "name": "toEffectiveAt",
            "in": "query",
            "description": "The end date from which to get the Returns.",
            "schema": {
              "type": "string",
              "description": "The end date from which to get the Returns.",
              "format": "dateorcutlabel",
              "nullable": true
            }
          },
          {
            "name": "period",
            "in": "query",
            "description": "Show the Returns on a Daily or Monthly period. Defaults to Daily.",
            "schema": {
              "type": "string",
              "description": "Show the Returns on a Daily or Monthly period. Defaults to Daily.",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the Returns. Defaults to the latest.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to retrieve the Returns. Defaults to the latest.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The Returns on the given time period.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfPerformanceReturn"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfPerformanceReturn"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfPerformanceReturn"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/portfolios/{scope}/{code}/returns/{returnScope}/{returnCode}/$delete": {
      "delete": {
        "tags": [
          "Portfolios"
        ],
        "summary": "[EARLY ACCESS] DeletePortfolioReturns: Delete Returns",
        "description": "Cancel one or more Returns which exist into the specified portfolio.",
        "operationId": "DeletePortfolioReturns",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the Portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the Portfolio.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the  Portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the  Portfolio.",
              "nullable": true
            }
          },
          {
            "name": "returnScope",
            "in": "path",
            "description": "The scope of the Returns.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the Returns.",
              "nullable": true
            }
          },
          {
            "name": "returnCode",
            "in": "path",
            "description": "The code of the Returns.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the Returns.",
              "nullable": true
            }
          },
          {
            "name": "fromEffectiveAt",
            "in": "query",
            "description": "The start date from which to delete the Returns.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The start date from which to delete the Returns.",
              "format": "dateorcutlabel"
            }
          },
          {
            "name": "toEffectiveAt",
            "in": "query",
            "description": "The end date from which to delete the Returns.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The end date from which to delete the Returns.",
              "format": "dateorcutlabel"
            }
          },
          {
            "name": "period",
            "in": "query",
            "description": "The Period (Daily or Monthly) of the Returns to be deleted. Defaults to Daily.",
            "schema": {
              "type": "string",
              "description": "The Period (Daily or Monthly) of the Returns to be deleted. Defaults to Daily.",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The successfully deleted Returns data along with any failures",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/propertydefinitions": {
      "post": {
        "tags": [
          "Property Definitions"
        ],
        "summary": "CreatePropertyDefinition: Create property definition",
        "description": "Define a new property.",
        "operationId": "CreatePropertyDefinition",
        "requestBody": {
          "description": "The definition of the new property.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePropertyDefinitionRequest"
              },
              "example": {
                "domain": "Portfolio",
                "scope": "MyScope",
                "code": "MyPropertyName",
                "valueRequired": false,
                "displayName": "My Property Display Name",
                "dataTypeId": {
                  "scope": "system",
                  "code": "string"
                },
                "lifeTime": "Perpetual",
                "constraintStyle": "Property",
                "propertyDescription": "Optional property description"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePropertyDefinitionRequest"
              },
              "example": {
                "domain": "Portfolio",
                "scope": "MyScope",
                "code": "MyPropertyName",
                "valueRequired": false,
                "displayName": "My Property Display Name",
                "dataTypeId": {
                  "scope": "system",
                  "code": "string"
                },
                "lifeTime": "Perpetual",
                "constraintStyle": "Property",
                "propertyDescription": "Optional property description"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePropertyDefinitionRequest"
              },
              "example": {
                "domain": "Portfolio",
                "scope": "MyScope",
                "code": "MyPropertyName",
                "valueRequired": false,
                "displayName": "My Property Display Name",
                "dataTypeId": {
                  "scope": "system",
                  "code": "string"
                },
                "lifeTime": "Perpetual",
                "constraintStyle": "Property",
                "propertyDescription": "Optional property description"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePropertyDefinitionRequest"
              },
              "example": {
                "domain": "Portfolio",
                "scope": "MyScope",
                "code": "MyPropertyName",
                "valueRequired": false,
                "displayName": "My Property Display Name",
                "dataTypeId": {
                  "scope": "system",
                  "code": "string"
                },
                "lifeTime": "Perpetual",
                "constraintStyle": "Property",
                "propertyDescription": "Optional property description"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "The newly created property definition",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PropertyDefinition"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PropertyDefinition"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PropertyDefinition"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      },
      "get": {
        "tags": [
          "Property Definitions"
        ],
        "summary": "GetMultiplePropertyDefinitions: Get multiple property definitions",
        "description": "Retrieve the definition of one or more specified properties.",
        "operationId": "GetMultiplePropertyDefinitions",
        "parameters": [
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the property definitions. Defaults to return\r\n            the latest version of each definition if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to retrieve the property definitions. Defaults to return\r\n            the latest version of each definition if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the result set. \r\n            For example, to filter on the Lifetime, use \"lifeTime eq 'Perpetual'\"\r\n            Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "maxLength": 16384,
              "minLength": 0,
              "pattern": "^[\\s\\S]*$",
              "type": "string",
              "description": "Expression to filter the result set. \r\n            For example, to filter on the Lifetime, use \"lifeTime eq 'Perpetual'\"\r\n            Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
              "nullable": true
            }
          },
          {
            "name": "propertyKeys",
            "in": "query",
            "description": "One or more property keys which identify each property that a definition should\r\n            be retrieved for. The format for each property key is {domain}/{scope}/{code}, e.g. 'Portfolio/Manager/Id'.",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
              },
              "description": "One or more property keys which identify each property that a definition should\r\n            be retrieved for. The format for each property key is {domain}/{scope}/{code}, e.g. 'Portfolio/Manager/Id'."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested property definitions",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfPropertyDefinition"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfPropertyDefinition"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfPropertyDefinition"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      }
    },
    "/api/propertydefinitions/derived": {
      "post": {
        "tags": [
          "Property Definitions"
        ],
        "summary": "[EARLY ACCESS] CreateDerivedPropertyDefinition: Create derived property definition",
        "description": "Define a new derived property.",
        "operationId": "CreateDerivedPropertyDefinition",
        "requestBody": {
          "description": "The definition of the new derived property.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateDerivedPropertyDefinitionRequest"
              },
              "example": {
                "domain": "Instrument",
                "scope": "MyScope",
                "code": "MyDerivedPropertyName",
                "displayName": "My Property Display Name",
                "dataTypeId": {
                  "scope": "system",
                  "code": "string"
                },
                "propertyDescription": "My Property Description",
                "derivationFormula": "(Properties[Instrument/default/Price] * Properties[Instrument/default/Cost]) / Properties[Instrument/default/Shares]"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateDerivedPropertyDefinitionRequest"
              },
              "example": {
                "domain": "Instrument",
                "scope": "MyScope",
                "code": "MyDerivedPropertyName",
                "displayName": "My Property Display Name",
                "dataTypeId": {
                  "scope": "system",
                  "code": "string"
                },
                "propertyDescription": "My Property Description",
                "derivationFormula": "(Properties[Instrument/default/Price] * Properties[Instrument/default/Cost]) / Properties[Instrument/default/Shares]"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateDerivedPropertyDefinitionRequest"
              },
              "example": {
                "domain": "Instrument",
                "scope": "MyScope",
                "code": "MyDerivedPropertyName",
                "displayName": "My Property Display Name",
                "dataTypeId": {
                  "scope": "system",
                  "code": "string"
                },
                "propertyDescription": "My Property Description",
                "derivationFormula": "(Properties[Instrument/default/Price] * Properties[Instrument/default/Cost]) / Properties[Instrument/default/Shares]"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateDerivedPropertyDefinitionRequest"
              },
              "example": {
                "domain": "Instrument",
                "scope": "MyScope",
                "code": "MyDerivedPropertyName",
                "displayName": "My Property Display Name",
                "dataTypeId": {
                  "scope": "system",
                  "code": "string"
                },
                "propertyDescription": "My Property Description",
                "derivationFormula": "(Properties[Instrument/default/Price] * Properties[Instrument/default/Cost]) / Properties[Instrument/default/Shares]"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "The newly created derived property definition",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PropertyDefinition"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PropertyDefinition"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PropertyDefinition"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/propertydefinitions/{domain}/{scope}/{code}": {
      "put": {
        "tags": [
          "Property Definitions"
        ],
        "summary": "UpdatePropertyDefinition: Update property definition",
        "description": "Update the definition of a specified existing property. Not all elements within a property definition\r\nare modifiable due to the potential implications for values already stored against the property.",
        "operationId": "UpdatePropertyDefinition",
        "parameters": [
          {
            "name": "domain",
            "in": "path",
            "description": "The domain of the property being updated.",
            "required": true,
            "schema": {
              "enum": [
                "NotDefined",
                "Transaction",
                "Portfolio",
                "Holding",
                "ReferenceHolding",
                "TransactionConfiguration",
                "Instrument",
                "CutLabelDefinition",
                "Analytic",
                "PortfolioGroup",
                "Person",
                "AccessMetadata",
                "Order",
                "UnitResult",
                "MarketData",
                "ConfigurationRecipe",
                "Allocation",
                "Calendar",
                "LegalEntity",
                "Placement",
                "Execution",
                "Block",
                "Participation",
                "Package",
                "OrderInstruction",
                "NextBestAction",
                "CustomEntity",
                "InstrumentEvent"
              ],
              "type": "string",
              "description": "The available values are: NotDefined, Transaction, Portfolio, Holding, ReferenceHolding, TransactionConfiguration, Instrument, CutLabelDefinition, Analytic, PortfolioGroup, Person, AccessMetadata, Order, UnitResult, MarketData, ConfigurationRecipe, Allocation, Calendar, LegalEntity, Placement, Execution, Block, Participation, Package, OrderInstruction, NextBestAction, CustomEntity, InstrumentEvent"
            }
          },
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the property being updated.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the property being updated.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the property being updated. Together with the domain and scope this uniquely\r\n            identifies the property.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the property being updated. Together with the domain and scope this uniquely\r\n            identifies the property.",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "The updated definition of the property.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePropertyDefinitionRequest"
              },
              "example": {
                "displayName": "MyPropertyName",
                "propertyDescription": "Option Property description"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePropertyDefinitionRequest"
              },
              "example": {
                "displayName": "MyPropertyName",
                "propertyDescription": "Option Property description"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePropertyDefinitionRequest"
              },
              "example": {
                "displayName": "MyPropertyName",
                "propertyDescription": "Option Property description"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePropertyDefinitionRequest"
              },
              "example": {
                "displayName": "MyPropertyName",
                "propertyDescription": "Option Property description"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The updated property definition",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PropertyDefinition"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PropertyDefinition"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PropertyDefinition"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      },
      "delete": {
        "tags": [
          "Property Definitions"
        ],
        "summary": "DeletePropertyDefinition: Delete property definition",
        "description": "Delete the definition of the specified property.",
        "operationId": "DeletePropertyDefinition",
        "parameters": [
          {
            "name": "domain",
            "in": "path",
            "description": "The domain of the property to be deleted.",
            "required": true,
            "schema": {
              "enum": [
                "NotDefined",
                "Transaction",
                "Portfolio",
                "Holding",
                "ReferenceHolding",
                "TransactionConfiguration",
                "Instrument",
                "CutLabelDefinition",
                "Analytic",
                "PortfolioGroup",
                "Person",
                "AccessMetadata",
                "Order",
                "UnitResult",
                "MarketData",
                "ConfigurationRecipe",
                "Allocation",
                "Calendar",
                "LegalEntity",
                "Placement",
                "Execution",
                "Block",
                "Participation",
                "Package",
                "OrderInstruction",
                "NextBestAction",
                "CustomEntity",
                "InstrumentEvent"
              ],
              "type": "string",
              "description": "The available values are: NotDefined, Transaction, Portfolio, Holding, ReferenceHolding, TransactionConfiguration, Instrument, CutLabelDefinition, Analytic, PortfolioGroup, Person, AccessMetadata, Order, UnitResult, MarketData, ConfigurationRecipe, Allocation, Calendar, LegalEntity, Placement, Execution, Block, Participation, Package, OrderInstruction, NextBestAction, CustomEntity, InstrumentEvent"
            }
          },
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the property to be deleted.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the property to be deleted.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the property to be deleted. Together with the domain and scope this uniquely\r\n            identifies the property.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the property to be deleted. Together with the domain and scope this uniquely\r\n            identifies the property.",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The time that the property definition was deleted",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      },
      "get": {
        "tags": [
          "Property Definitions"
        ],
        "summary": "GetPropertyDefinition: Get property definition",
        "description": "Retrieve the definition of a specified property.",
        "operationId": "GetPropertyDefinition",
        "parameters": [
          {
            "name": "domain",
            "in": "path",
            "description": "The domain of the specified property.",
            "required": true,
            "schema": {
              "enum": [
                "NotDefined",
                "Transaction",
                "Portfolio",
                "Holding",
                "ReferenceHolding",
                "TransactionConfiguration",
                "Instrument",
                "CutLabelDefinition",
                "Analytic",
                "PortfolioGroup",
                "Person",
                "AccessMetadata",
                "Order",
                "UnitResult",
                "MarketData",
                "ConfigurationRecipe",
                "Allocation",
                "Calendar",
                "LegalEntity",
                "Placement",
                "Execution",
                "Block",
                "Participation",
                "Package",
                "OrderInstruction",
                "NextBestAction",
                "CustomEntity",
                "InstrumentEvent"
              ],
              "type": "string",
              "description": "The available values are: NotDefined, Transaction, Portfolio, Holding, ReferenceHolding, TransactionConfiguration, Instrument, CutLabelDefinition, Analytic, PortfolioGroup, Person, AccessMetadata, Order, UnitResult, MarketData, ConfigurationRecipe, Allocation, Calendar, LegalEntity, Placement, Execution, Block, Participation, Package, OrderInstruction, NextBestAction, CustomEntity, InstrumentEvent"
            }
          },
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the specified property.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the specified property.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the specified property. Together with the domain and scope this uniquely\r\n            identifies the property.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the specified property. Together with the domain and scope this uniquely\r\n            identifies the property.",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the property definition. Defaults to return\r\n            the latest version of the definition if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to retrieve the property definition. Defaults to return\r\n            the latest version of the definition if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The requested property definition",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PropertyDefinition"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PropertyDefinition"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PropertyDefinition"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      }
    },
    "/api/quotes/{scope}": {
      "post": {
        "tags": [
          "Quotes"
        ],
        "summary": "UpsertQuotes: Upsert quotes",
        "description": "Update or insert one or more quotes in a single scope. A quote will be updated if it already exists\r\nand inserted if it does not.\r\n            \r\nIn the request each quote must be keyed by a unique correlation id. This id is ephemeral and is not stored by LUSID.\r\nIt serves only as a way to easily identify each quote in the response.\r\n            \r\nThe response will return both the collection of successfully updated or inserted quotes, as well as those that failed.\r\nFor the failures a reason will be provided explaining why the quote could not be updated or inserted.\r\n            \r\nIt is important to always check the failed set for any unsuccessful results.\n\nThe maximum number of quotes that this method can upsert per request is 2,000.",
        "operationId": "UpsertQuotes",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope to use when updating or inserting the quotes.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope to use when updating or inserting the quotes.",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "The quotes to update or insert keyed by a unique correlation id.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/UpsertQuoteRequest"
                },
                "description": "The quotes to update or insert keyed by a unique correlation id.",
                "nullable": true
              },
              "example": {
                "dS-VOD-PRICE-MID": {
                  "quoteId": {
                    "quoteSeriesId": {
                      "provider": "DataScope",
                      "priceSource": "",
                      "instrumentId": "GB00BH4HKS39",
                      "instrumentIdType": "Isin",
                      "quoteType": "Price",
                      "field": "mid"
                    },
                    "effectiveAt": "2018-03-05T00:00:00.0000000+00:00"
                  },
                  "metricValue": {
                    "value": 1460,
                    "unit": "CNY"
                  }
                },
                "o-C-EURUSD-PRICE-BID": {
                  "quoteId": {
                    "quoteSeriesId": {
                      "provider": "Oanda",
                      "priceSource": "Citi",
                      "instrumentId": "EUR/USD",
                      "instrumentIdType": "CurrencyPair",
                      "quoteType": "Price",
                      "field": "bid"
                    },
                    "effectiveAt": "2018-03-05T00:00:00.0000000+00:00"
                  },
                  "metricValue": {
                    "value": 1.367,
                    "unit": "EUR/USD"
                  },
                  "lineage": "Oanda/FxRates_2018-10-22T00:00:00.0000000+00:00.csv"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/UpsertQuoteRequest"
                },
                "description": "The quotes to update or insert keyed by a unique correlation id.",
                "nullable": true
              },
              "example": {
                "dS-VOD-PRICE-MID": {
                  "quoteId": {
                    "quoteSeriesId": {
                      "provider": "DataScope",
                      "priceSource": "",
                      "instrumentId": "GB00BH4HKS39",
                      "instrumentIdType": "Isin",
                      "quoteType": "Price",
                      "field": "mid"
                    },
                    "effectiveAt": "2018-03-05T00:00:00.0000000+00:00"
                  },
                  "metricValue": {
                    "value": 1460,
                    "unit": "CNY"
                  }
                },
                "o-C-EURUSD-PRICE-BID": {
                  "quoteId": {
                    "quoteSeriesId": {
                      "provider": "Oanda",
                      "priceSource": "Citi",
                      "instrumentId": "EUR/USD",
                      "instrumentIdType": "CurrencyPair",
                      "quoteType": "Price",
                      "field": "bid"
                    },
                    "effectiveAt": "2018-03-05T00:00:00.0000000+00:00"
                  },
                  "metricValue": {
                    "value": 1.367,
                    "unit": "EUR/USD"
                  },
                  "lineage": "Oanda/FxRates_2018-10-22T00:00:00.0000000+00:00.csv"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/UpsertQuoteRequest"
                },
                "description": "The quotes to update or insert keyed by a unique correlation id.",
                "nullable": true
              },
              "example": {
                "dS-VOD-PRICE-MID": {
                  "quoteId": {
                    "quoteSeriesId": {
                      "provider": "DataScope",
                      "priceSource": "",
                      "instrumentId": "GB00BH4HKS39",
                      "instrumentIdType": "Isin",
                      "quoteType": "Price",
                      "field": "mid"
                    },
                    "effectiveAt": "2018-03-05T00:00:00.0000000+00:00"
                  },
                  "metricValue": {
                    "value": 1460,
                    "unit": "CNY"
                  }
                },
                "o-C-EURUSD-PRICE-BID": {
                  "quoteId": {
                    "quoteSeriesId": {
                      "provider": "Oanda",
                      "priceSource": "Citi",
                      "instrumentId": "EUR/USD",
                      "instrumentIdType": "CurrencyPair",
                      "quoteType": "Price",
                      "field": "bid"
                    },
                    "effectiveAt": "2018-03-05T00:00:00.0000000+00:00"
                  },
                  "metricValue": {
                    "value": 1.367,
                    "unit": "EUR/USD"
                  },
                  "lineage": "Oanda/FxRates_2018-10-22T00:00:00.0000000+00:00.csv"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/UpsertQuoteRequest"
                },
                "description": "The quotes to update or insert keyed by a unique correlation id.",
                "nullable": true
              },
              "example": {
                "dS-VOD-PRICE-MID": {
                  "quoteId": {
                    "quoteSeriesId": {
                      "provider": "DataScope",
                      "priceSource": "",
                      "instrumentId": "GB00BH4HKS39",
                      "instrumentIdType": "Isin",
                      "quoteType": "Price",
                      "field": "mid"
                    },
                    "effectiveAt": "2018-03-05T00:00:00.0000000+00:00"
                  },
                  "metricValue": {
                    "value": 1460,
                    "unit": "CNY"
                  }
                },
                "o-C-EURUSD-PRICE-BID": {
                  "quoteId": {
                    "quoteSeriesId": {
                      "provider": "Oanda",
                      "priceSource": "Citi",
                      "instrumentId": "EUR/USD",
                      "instrumentIdType": "CurrencyPair",
                      "quoteType": "Price",
                      "field": "bid"
                    },
                    "effectiveAt": "2018-03-05T00:00:00.0000000+00:00"
                  },
                  "metricValue": {
                    "value": 1.367,
                    "unit": "EUR/USD"
                  },
                  "lineage": "Oanda/FxRates_2018-10-22T00:00:00.0000000+00:00.csv"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The successfully updated or inserted quotes along with any failures",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertQuotesResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertQuotesResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertQuotesResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      },
      "get": {
        "tags": [
          "Quotes"
        ],
        "summary": "ListQuotesForScope: List quotes for scope",
        "description": "List all the quotes from a single scope at the specified date/time",
        "operationId": "ListQuotesForScope",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the quotes to list.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the quotes to list.",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to list the quotes. Defaults to latest if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to list the quotes. Defaults to latest if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "page",
            "in": "query",
            "description": "The pagination token to use to continue listing quotes from a previous call to list quotes.\r\n            This value is returned from the previous call. If a pagination token is provided the sortBy, filter, effectiveAt, and asAt fields\r\n            must not have changed since the original request. Also, if set, a start value cannot be provided.",
            "schema": {
              "maxLength": 500,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\+/]*={0,3}$",
              "type": "string",
              "description": "The pagination token to use to continue listing quotes from a previous call to list quotes.\r\n            This value is returned from the previous call. If a pagination token is provided the sortBy, filter, effectiveAt, and asAt fields\r\n            must not have changed since the original request. Also, if set, a start value cannot be provided.",
              "nullable": true
            }
          },
          {
            "name": "start",
            "in": "query",
            "description": "When paginating, skip this number of results.",
            "schema": {
              "type": "integer",
              "description": "When paginating, skip this number of results.",
              "format": "int32",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "limit",
            "in": "query",
            "description": "When paginating, limit the number of returned results to this many.",
            "schema": {
              "type": "integer",
              "description": "When paginating, limit the number of returned results to this many.",
              "format": "int32",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the result set.\r\n            Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "maxLength": 16384,
              "minLength": 0,
              "pattern": "^[\\s\\S]*$",
              "type": "string",
              "description": "Expression to filter the result set.\r\n            Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested quotes",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfQuote"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfQuote"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfQuote"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      }
    },
    "/api/quotes/{scope}/$delete": {
      "post": {
        "tags": [
          "Quotes"
        ],
        "summary": "DeleteQuotes: Delete quotes",
        "description": "Delete one or more specified quotes from a single scope. A quote is identified by its unique id which includes information about\r\nthe type of quote as well as the exact effective datetime (to the microsecond) from which it became valid.\r\n            \r\nIn the request each quote must be keyed by a unique correlation id. This id is ephemeral and is not stored by LUSID.\r\nIt serves only as a way to easily identify each quote in the response.\r\n            \r\nThe response will return both the collection of successfully deleted quotes, as well as those that failed.\r\nFor the failures a reason will be provided explaining why the quote could not be deleted.\r\n            \r\nIt is important to always check the failed set for any unsuccessful results.",
        "operationId": "DeleteQuotes",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the quotes to delete.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the quotes to delete.",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "The quotes to delete keyed by a unique correlation id.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/QuoteId"
                },
                "description": "The quotes to delete keyed by a unique correlation id.",
                "nullable": true
              },
              "example": {
                "dS-VOD-PRICE-MID": {
                  "quoteSeriesId": {
                    "provider": "DataScope",
                    "priceSource": "",
                    "instrumentId": "GB00BH4HKS39",
                    "instrumentIdType": "Isin",
                    "quoteType": "Price",
                    "field": "mid"
                  },
                  "effectiveAt": "2018-03-05T00:00:00.0000000+00:00"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/QuoteId"
                },
                "description": "The quotes to delete keyed by a unique correlation id.",
                "nullable": true
              },
              "example": {
                "dS-VOD-PRICE-MID": {
                  "quoteSeriesId": {
                    "provider": "DataScope",
                    "priceSource": "",
                    "instrumentId": "GB00BH4HKS39",
                    "instrumentIdType": "Isin",
                    "quoteType": "Price",
                    "field": "mid"
                  },
                  "effectiveAt": "2018-03-05T00:00:00.0000000+00:00"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/QuoteId"
                },
                "description": "The quotes to delete keyed by a unique correlation id.",
                "nullable": true
              },
              "example": {
                "dS-VOD-PRICE-MID": {
                  "quoteSeriesId": {
                    "provider": "DataScope",
                    "priceSource": "",
                    "instrumentId": "GB00BH4HKS39",
                    "instrumentIdType": "Isin",
                    "quoteType": "Price",
                    "field": "mid"
                  },
                  "effectiveAt": "2018-03-05T00:00:00.0000000+00:00"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/QuoteId"
                },
                "description": "The quotes to delete keyed by a unique correlation id.",
                "nullable": true
              },
              "example": {
                "dS-VOD-PRICE-MID": {
                  "quoteSeriesId": {
                    "provider": "DataScope",
                    "priceSource": "",
                    "instrumentId": "GB00BH4HKS39",
                    "instrumentIdType": "Isin",
                    "quoteType": "Price",
                    "field": "mid"
                  },
                  "effectiveAt": "2018-03-05T00:00:00.0000000+00:00"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The successfully deleted quotes along with any failures",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AnnulQuotesResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnnulQuotesResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnnulQuotesResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      }
    },
    "/api/quotes/{scope}/$deprecated": {
      "get": {
        "tags": [
          "Quotes"
        ],
        "summary": "[DEPRECATED] ListQuotes: List quotes",
        "description": "List all the quotes from a single scope at the specified date/time\r\nPlease use M:Finbourne.WebApi.Controllers.QuotesController.ListQuotesForScope(System.String,System.Nullable{System.DateTimeOffset},System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.String) - the signature and behaviour of this endpoint will be changing to omit scope",
        "operationId": "ListQuotes",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the quotes to list.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the quotes to list.",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to list the quotes. Defaults to latest if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to list the quotes. Defaults to latest if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "page",
            "in": "query",
            "description": "The pagination token to use to continue listing quotes from a previous call to list quotes.\r\n            This value is returned from the previous call. If a pagination token is provided the sortBy, filter, effectiveAt, and asAt fields\r\n            must not have changed since the original request. Also, if set, a start value cannot be provided.",
            "schema": {
              "maxLength": 500,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\+/]*={0,3}$",
              "type": "string",
              "description": "The pagination token to use to continue listing quotes from a previous call to list quotes.\r\n            This value is returned from the previous call. If a pagination token is provided the sortBy, filter, effectiveAt, and asAt fields\r\n            must not have changed since the original request. Also, if set, a start value cannot be provided.",
              "nullable": true
            }
          },
          {
            "name": "start",
            "in": "query",
            "description": "When paginating, skip this number of results.",
            "schema": {
              "type": "integer",
              "description": "When paginating, skip this number of results.",
              "format": "int32",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "limit",
            "in": "query",
            "description": "When paginating, limit the number of returned results to this many.",
            "schema": {
              "type": "integer",
              "description": "When paginating, limit the number of returned results to this many.",
              "format": "int32",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the result set.\r\n            Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "maxLength": 16384,
              "minLength": 0,
              "pattern": "^[\\s\\S]*$",
              "type": "string",
              "description": "Expression to filter the result set.\r\n            Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested quotes",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfQuote"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfQuote"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfQuote"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Deprecated"
      }
    },
    "/api/quotes/{scope}/$get": {
      "post": {
        "tags": [
          "Quotes"
        ],
        "summary": "[EARLY ACCESS] GetQuotes: Get quotes",
        "description": "Get one or more quotes from a single scope.\r\n            \r\nEach quote can be identified by its time invariant quote series id.\r\n            \r\nFor each quote series id LUSID will return the most recent quote with respect to the provided (or default) effective datetime. \r\n            \r\nAn optional maximum age range window can be specified which defines how far back to look back for a quote from the specified effective datetime.\r\nLUSID will return the most recent quote within this window.\r\n            \r\nIn the request each quote series id must be keyed by a unique correlation id. This id is ephemeral and is not stored by LUSID.\r\nIt serves only as a way to easily identify each quote in the response.\r\n            \r\nThe response will return three collections. One, the successfully retrieved quotes. Two, those that had a\r\nvalid quote series id but could not be found. Three, those that failed because LUSID could not construct a valid quote series id from the request.\r\n\r\nFor the quotes that failed or could not be found a reason will be provided explaining why the quote could not be retrieved.\r\n            \r\nIt is important to always check the failed and not found sets for any unsuccessful results.\n\nThe maximum number of quotes that this method can get per request is 2,000.",
        "operationId": "GetQuotes",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the quotes to retrieve.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the quotes to retrieve.",
              "nullable": true
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime or cut label at which to retrieve the quotes. Defaults to the current LUSID system datetime if not specified.",
            "schema": {
              "type": "string",
              "description": "The effective datetime or cut label at which to retrieve the quotes. Defaults to the current LUSID system datetime if not specified.",
              "format": "dateorcutlabel",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the quotes. Defaults to return the latest version of each quote if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to retrieve the quotes. Defaults to return the latest version of each quote if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "maxAge",
            "in": "query",
            "description": "The duration of the look back window in an ISO8601 time interval format e.g. P1Y2M3DT4H30M (1 year, 2 months, 3 days, 4 hours and 30 minutes).\r\n             This is subtracted from the provided effectiveAt datetime or cut label to generate a effective datetime window inside which a quote must exist to be retrieved.",
            "schema": {
              "type": "string",
              "description": "The duration of the look back window in an ISO8601 time interval format e.g. P1Y2M3DT4H30M (1 year, 2 months, 3 days, 4 hours and 30 minutes).\r\n             This is subtracted from the provided effectiveAt datetime or cut label to generate a effective datetime window inside which a quote must exist to be retrieved.",
              "format": "date-span",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "The time invariant quote series ids of the quotes to retrieve. These need to be\r\n             keyed by a unique correlation id allowing the retrieved quote to be identified in the response.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/QuoteSeriesId"
                },
                "description": "The time invariant quote series ids of the quotes to retrieve. These need to be\r\n             keyed by a unique correlation id allowing the retrieved quote to be identified in the response.",
                "nullable": true
              },
              "example": {
                "dS-VOD-PRICE-MID": {
                  "provider": "DataScope",
                  "priceSource": "",
                  "instrumentId": "GB00BH4HKS39",
                  "instrumentIdType": "Isin",
                  "quoteType": "Price",
                  "field": "mid"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/QuoteSeriesId"
                },
                "description": "The time invariant quote series ids of the quotes to retrieve. These need to be\r\n             keyed by a unique correlation id allowing the retrieved quote to be identified in the response.",
                "nullable": true
              },
              "example": {
                "dS-VOD-PRICE-MID": {
                  "provider": "DataScope",
                  "priceSource": "",
                  "instrumentId": "GB00BH4HKS39",
                  "instrumentIdType": "Isin",
                  "quoteType": "Price",
                  "field": "mid"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/QuoteSeriesId"
                },
                "description": "The time invariant quote series ids of the quotes to retrieve. These need to be\r\n             keyed by a unique correlation id allowing the retrieved quote to be identified in the response.",
                "nullable": true
              },
              "example": {
                "dS-VOD-PRICE-MID": {
                  "provider": "DataScope",
                  "priceSource": "",
                  "instrumentId": "GB00BH4HKS39",
                  "instrumentIdType": "Isin",
                  "quoteType": "Price",
                  "field": "mid"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/QuoteSeriesId"
                },
                "description": "The time invariant quote series ids of the quotes to retrieve. These need to be\r\n             keyed by a unique correlation id allowing the retrieved quote to be identified in the response.",
                "nullable": true
              },
              "example": {
                "dS-VOD-PRICE-MID": {
                  "provider": "DataScope",
                  "priceSource": "",
                  "instrumentId": "GB00BH4HKS39",
                  "instrumentIdType": "Isin",
                  "quoteType": "Price",
                  "field": "mid"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The successfully retrieved quotes along with any failures",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GetQuotesResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetQuotesResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetQuotesResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/recipes": {
      "post": {
        "tags": [
          "Configuration Recipe"
        ],
        "summary": "UpsertConfigurationRecipe: Upsert a Configuration Recipe. This creates or updates the data in Lusid.",
        "description": "Update or insert one Configuration Recipe in a single scope. An item will be updated if it already exists\r\nand inserted if it does not.\r\n            \r\nThe response will return the successfully updated or inserted Configuration Recipe or failure message if unsuccessful\r\n            \r\nIt is important to always check to verify success (or failure).",
        "operationId": "UpsertConfigurationRecipe",
        "requestBody": {
          "description": "The Configuration Recipe to update or insert",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertRecipeRequest"
              },
              "example": {
                "configurationRecipe": {
                  "scope": "scopeName",
                  "code": "MyNamedRecipe12345",
                  "market": {
                    "marketRules": [
                      {
                        "key": "Fx.CurrencyPair.*",
                        "supplier": "DataScope",
                        "dataScope": "SomeScopeToLookAt",
                        "quoteType": "Rate",
                        "field": "Mid",
                        "priceSource": ""
                      }
                    ],
                    "suppliers": {},
                    "options": {
                      "defaultSupplier": "Lusid",
                      "defaultInstrumentCodeType": "LusidInstrumentId",
                      "defaultScope": "default",
                      "attemptToInferMissingFx": false,
                      "calendarScope": "CoppClarkHolidayCalendars",
                      "conventionScope": "Conventions"
                    },
                    "specificRules": []
                  },
                  "pricing": {
                    "modelRules": [],
                    "modelChoice": {},
                    "options": {
                      "modelSelection": {
                        "library": "Lusid",
                        "model": "SimpleStatic"
                      },
                      "useInstrumentTypeToDeterminePricer": false,
                      "allowAnyInstrumentsWithSecUidToPriceOffLookup": false,
                      "allowPartiallySuccessfulEvaluation": false,
                      "produceSeparateResultForLinearOtcLegs": false,
                      "enableUseOfCachedUnitResults": false,
                      "windowValuationOnInstrumentStartEnd": false,
                      "removeContingentCashflowsInPaymentDiary": false,
                      "useChildSubHoldingKeysForPortfolioExpansion": false,
                      "validateDomesticAndQuoteCurrenciesAreConsistent": false
                    },
                    "resultDataRules": []
                  },
                  "aggregation": {
                    "options": {
                      "useAnsiLikeSyntax": false,
                      "allowPartialEntitlementSuccess": false,
                      "applyIso4217Rounding": false
                    }
                  },
                  "inheritedRecipes": [],
                  "description": "",
                  "holding": {
                    "taxLotLevelHoldings": true
                  }
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertRecipeRequest"
              },
              "example": {
                "configurationRecipe": {
                  "scope": "scopeName",
                  "code": "MyNamedRecipe12345",
                  "market": {
                    "marketRules": [
                      {
                        "key": "Fx.CurrencyPair.*",
                        "supplier": "DataScope",
                        "dataScope": "SomeScopeToLookAt",
                        "quoteType": "Rate",
                        "field": "Mid",
                        "priceSource": ""
                      }
                    ],
                    "suppliers": {},
                    "options": {
                      "defaultSupplier": "Lusid",
                      "defaultInstrumentCodeType": "LusidInstrumentId",
                      "defaultScope": "default",
                      "attemptToInferMissingFx": false,
                      "calendarScope": "CoppClarkHolidayCalendars",
                      "conventionScope": "Conventions"
                    },
                    "specificRules": []
                  },
                  "pricing": {
                    "modelRules": [],
                    "modelChoice": {},
                    "options": {
                      "modelSelection": {
                        "library": "Lusid",
                        "model": "SimpleStatic"
                      },
                      "useInstrumentTypeToDeterminePricer": false,
                      "allowAnyInstrumentsWithSecUidToPriceOffLookup": false,
                      "allowPartiallySuccessfulEvaluation": false,
                      "produceSeparateResultForLinearOtcLegs": false,
                      "enableUseOfCachedUnitResults": false,
                      "windowValuationOnInstrumentStartEnd": false,
                      "removeContingentCashflowsInPaymentDiary": false,
                      "useChildSubHoldingKeysForPortfolioExpansion": false,
                      "validateDomesticAndQuoteCurrenciesAreConsistent": false
                    },
                    "resultDataRules": []
                  },
                  "aggregation": {
                    "options": {
                      "useAnsiLikeSyntax": false,
                      "allowPartialEntitlementSuccess": false,
                      "applyIso4217Rounding": false
                    }
                  },
                  "inheritedRecipes": [],
                  "description": "",
                  "holding": {
                    "taxLotLevelHoldings": true
                  }
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertRecipeRequest"
              },
              "example": {
                "configurationRecipe": {
                  "scope": "scopeName",
                  "code": "MyNamedRecipe12345",
                  "market": {
                    "marketRules": [
                      {
                        "key": "Fx.CurrencyPair.*",
                        "supplier": "DataScope",
                        "dataScope": "SomeScopeToLookAt",
                        "quoteType": "Rate",
                        "field": "Mid",
                        "priceSource": ""
                      }
                    ],
                    "suppliers": {},
                    "options": {
                      "defaultSupplier": "Lusid",
                      "defaultInstrumentCodeType": "LusidInstrumentId",
                      "defaultScope": "default",
                      "attemptToInferMissingFx": false,
                      "calendarScope": "CoppClarkHolidayCalendars",
                      "conventionScope": "Conventions"
                    },
                    "specificRules": []
                  },
                  "pricing": {
                    "modelRules": [],
                    "modelChoice": {},
                    "options": {
                      "modelSelection": {
                        "library": "Lusid",
                        "model": "SimpleStatic"
                      },
                      "useInstrumentTypeToDeterminePricer": false,
                      "allowAnyInstrumentsWithSecUidToPriceOffLookup": false,
                      "allowPartiallySuccessfulEvaluation": false,
                      "produceSeparateResultForLinearOtcLegs": false,
                      "enableUseOfCachedUnitResults": false,
                      "windowValuationOnInstrumentStartEnd": false,
                      "removeContingentCashflowsInPaymentDiary": false,
                      "useChildSubHoldingKeysForPortfolioExpansion": false,
                      "validateDomesticAndQuoteCurrenciesAreConsistent": false
                    },
                    "resultDataRules": []
                  },
                  "aggregation": {
                    "options": {
                      "useAnsiLikeSyntax": false,
                      "allowPartialEntitlementSuccess": false,
                      "applyIso4217Rounding": false
                    }
                  },
                  "inheritedRecipes": [],
                  "description": "",
                  "holding": {
                    "taxLotLevelHoldings": true
                  }
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertRecipeRequest"
              },
              "example": {
                "configurationRecipe": {
                  "scope": "scopeName",
                  "code": "MyNamedRecipe12345",
                  "market": {
                    "marketRules": [
                      {
                        "key": "Fx.CurrencyPair.*",
                        "supplier": "DataScope",
                        "dataScope": "SomeScopeToLookAt",
                        "quoteType": "Rate",
                        "field": "Mid",
                        "priceSource": ""
                      }
                    ],
                    "suppliers": {},
                    "options": {
                      "defaultSupplier": "Lusid",
                      "defaultInstrumentCodeType": "LusidInstrumentId",
                      "defaultScope": "default",
                      "attemptToInferMissingFx": false,
                      "calendarScope": "CoppClarkHolidayCalendars",
                      "conventionScope": "Conventions"
                    },
                    "specificRules": []
                  },
                  "pricing": {
                    "modelRules": [],
                    "modelChoice": {},
                    "options": {
                      "modelSelection": {
                        "library": "Lusid",
                        "model": "SimpleStatic"
                      },
                      "useInstrumentTypeToDeterminePricer": false,
                      "allowAnyInstrumentsWithSecUidToPriceOffLookup": false,
                      "allowPartiallySuccessfulEvaluation": false,
                      "produceSeparateResultForLinearOtcLegs": false,
                      "enableUseOfCachedUnitResults": false,
                      "windowValuationOnInstrumentStartEnd": false,
                      "removeContingentCashflowsInPaymentDiary": false,
                      "useChildSubHoldingKeysForPortfolioExpansion": false,
                      "validateDomesticAndQuoteCurrenciesAreConsistent": false
                    },
                    "resultDataRules": []
                  },
                  "aggregation": {
                    "options": {
                      "useAnsiLikeSyntax": false,
                      "allowPartialEntitlementSuccess": false,
                      "applyIso4217Rounding": false
                    }
                  },
                  "inheritedRecipes": [],
                  "description": "",
                  "holding": {
                    "taxLotLevelHoldings": true
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The successfully updated or inserted item or any failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertSingleStructuredDataResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertSingleStructuredDataResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertSingleStructuredDataResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      },
      "get": {
        "tags": [
          "Configuration Recipe"
        ],
        "summary": "ListConfigurationRecipes: List the set of Configuration Recipes",
        "description": "List the set of configuration recipes at the specified date/time and scope",
        "operationId": "ListConfigurationRecipes",
        "parameters": [
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to list the Configuration Recipes. Defaults to latest if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to list the Configuration Recipes. Defaults to latest if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the result set. Read more about filtering results from LUSID here:\r\n            https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "maxLength": 16384,
              "minLength": 0,
              "pattern": "^[\\s\\S]*$",
              "type": "string",
              "description": "Expression to filter the result set. Read more about filtering results from LUSID here:\r\n            https://support.lusid.com/filtering-results-from-lusid.",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested configuration recipes",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfGetRecipeResponse"
                },
                "example": {
                  "values": [
                    {
                      "value": {
                        "scope": "scopeName",
                        "code": "MyNamedRecipe12345",
                        "market": {
                          "marketRules": [
                            {
                              "key": "Fx.CurrencyPair.*",
                              "supplier": "Lusid",
                              "dataScope": "SomeScopeToLookAt",
                              "quoteType": "Price",
                              "field": "Ask",
                              "priceSource": ""
                            }
                          ],
                          "suppliers": {},
                          "options": {
                            "defaultSupplier": "Lusid",
                            "defaultInstrumentCodeType": "LusidInstrumentId",
                            "defaultScope": "default",
                            "attemptToInferMissingFx": false,
                            "calendarScope": "CoppClarkHolidayCalendars",
                            "conventionScope": "Conventions"
                          },
                          "specificRules": []
                        },
                        "pricing": {
                          "modelRules": [
                            {
                              "supplier": "Lusid",
                              "modelName": "Discounting",
                              "instrumentType": "Bond",
                              "parameters": "",
                              "modelOptions": {
                                "modelOptionsType": "EmptyModelOptions"
                              },
                              "instrumentId": ""
                            }
                          ],
                          "modelChoice": {},
                          "options": {
                            "modelSelection": {
                              "library": "Lusid",
                              "model": "SimpleStatic"
                            },
                            "useInstrumentTypeToDeterminePricer": false,
                            "allowAnyInstrumentsWithSecUidToPriceOffLookup": false,
                            "allowPartiallySuccessfulEvaluation": false,
                            "produceSeparateResultForLinearOtcLegs": false,
                            "enableUseOfCachedUnitResults": false,
                            "windowValuationOnInstrumentStartEnd": false,
                            "removeContingentCashflowsInPaymentDiary": false,
                            "useChildSubHoldingKeysForPortfolioExpansion": false,
                            "validateDomesticAndQuoteCurrenciesAreConsistent": false
                          },
                          "resultDataRules": []
                        },
                        "aggregation": {
                          "options": {
                            "useAnsiLikeSyntax": false,
                            "allowPartialEntitlementSuccess": false,
                            "applyIso4217Rounding": false
                          }
                        },
                        "inheritedRecipes": [],
                        "description": "",
                        "holding": {
                          "taxLotLevelHoldings": true
                        }
                      }
                    },
                    {
                      "value": {
                        "scope": "anotherScopeName",
                        "code": "MyNamedRecipe98765",
                        "market": {
                          "marketRules": [
                            {
                              "key": "Fx.CurrencyPair.*",
                              "supplier": "DataScope",
                              "dataScope": "SomeScopeToLookAt",
                              "quoteType": "Spread",
                              "field": "Bid",
                              "priceSource": ""
                            }
                          ],
                          "suppliers": {},
                          "options": {
                            "defaultSupplier": "Lusid",
                            "defaultInstrumentCodeType": "LusidInstrumentId",
                            "defaultScope": "default",
                            "attemptToInferMissingFx": false,
                            "calendarScope": "CoppClarkHolidayCalendars",
                            "conventionScope": "Conventions"
                          },
                          "specificRules": []
                        },
                        "pricing": {
                          "modelRules": [],
                          "modelChoice": {},
                          "options": {
                            "modelSelection": {
                              "library": "Lusid",
                              "model": "SimpleStatic"
                            },
                            "useInstrumentTypeToDeterminePricer": false,
                            "allowAnyInstrumentsWithSecUidToPriceOffLookup": false,
                            "allowPartiallySuccessfulEvaluation": false,
                            "produceSeparateResultForLinearOtcLegs": false,
                            "enableUseOfCachedUnitResults": false,
                            "windowValuationOnInstrumentStartEnd": false,
                            "removeContingentCashflowsInPaymentDiary": false,
                            "useChildSubHoldingKeysForPortfolioExpansion": false,
                            "validateDomesticAndQuoteCurrenciesAreConsistent": false
                          },
                          "resultDataRules": []
                        },
                        "aggregation": {
                          "options": {
                            "useAnsiLikeSyntax": false,
                            "allowPartialEntitlementSuccess": false,
                            "applyIso4217Rounding": false
                          }
                        },
                        "inheritedRecipes": [],
                        "description": "",
                        "holding": {
                          "taxLotLevelHoldings": true
                        }
                      }
                    }
                  ],
                  "href": "https://lusid.com/api/",
                  "links": [
                    {
                      "relation": "RequestLogs",
                      "href": "https://lusid.com/app/insights/logs/0HMA57L9MHR7R:00000001",
                      "description": "A link to the LUSID Insights website showing all logs related to this request",
                      "method": "GET"
                    }
                  ]
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfGetRecipeResponse"
                },
                "example": {
                  "values": [
                    {
                      "value": {
                        "scope": "scopeName",
                        "code": "MyNamedRecipe12345",
                        "market": {
                          "marketRules": [
                            {
                              "key": "Fx.CurrencyPair.*",
                              "supplier": "Lusid",
                              "dataScope": "SomeScopeToLookAt",
                              "quoteType": "Price",
                              "field": "Ask",
                              "priceSource": ""
                            }
                          ],
                          "suppliers": {},
                          "options": {
                            "defaultSupplier": "Lusid",
                            "defaultInstrumentCodeType": "LusidInstrumentId",
                            "defaultScope": "default",
                            "attemptToInferMissingFx": false,
                            "calendarScope": "CoppClarkHolidayCalendars",
                            "conventionScope": "Conventions"
                          },
                          "specificRules": []
                        },
                        "pricing": {
                          "modelRules": [
                            {
                              "supplier": "Lusid",
                              "modelName": "Discounting",
                              "instrumentType": "Bond",
                              "parameters": "",
                              "modelOptions": {
                                "modelOptionsType": "EmptyModelOptions"
                              },
                              "instrumentId": ""
                            }
                          ],
                          "modelChoice": {},
                          "options": {
                            "modelSelection": {
                              "library": "Lusid",
                              "model": "SimpleStatic"
                            },
                            "useInstrumentTypeToDeterminePricer": false,
                            "allowAnyInstrumentsWithSecUidToPriceOffLookup": false,
                            "allowPartiallySuccessfulEvaluation": false,
                            "produceSeparateResultForLinearOtcLegs": false,
                            "enableUseOfCachedUnitResults": false,
                            "windowValuationOnInstrumentStartEnd": false,
                            "removeContingentCashflowsInPaymentDiary": false,
                            "useChildSubHoldingKeysForPortfolioExpansion": false,
                            "validateDomesticAndQuoteCurrenciesAreConsistent": false
                          },
                          "resultDataRules": []
                        },
                        "aggregation": {
                          "options": {
                            "useAnsiLikeSyntax": false,
                            "allowPartialEntitlementSuccess": false,
                            "applyIso4217Rounding": false
                          }
                        },
                        "inheritedRecipes": [],
                        "description": "",
                        "holding": {
                          "taxLotLevelHoldings": true
                        }
                      }
                    },
                    {
                      "value": {
                        "scope": "anotherScopeName",
                        "code": "MyNamedRecipe98765",
                        "market": {
                          "marketRules": [
                            {
                              "key": "Fx.CurrencyPair.*",
                              "supplier": "DataScope",
                              "dataScope": "SomeScopeToLookAt",
                              "quoteType": "Spread",
                              "field": "Bid",
                              "priceSource": ""
                            }
                          ],
                          "suppliers": {},
                          "options": {
                            "defaultSupplier": "Lusid",
                            "defaultInstrumentCodeType": "LusidInstrumentId",
                            "defaultScope": "default",
                            "attemptToInferMissingFx": false,
                            "calendarScope": "CoppClarkHolidayCalendars",
                            "conventionScope": "Conventions"
                          },
                          "specificRules": []
                        },
                        "pricing": {
                          "modelRules": [],
                          "modelChoice": {},
                          "options": {
                            "modelSelection": {
                              "library": "Lusid",
                              "model": "SimpleStatic"
                            },
                            "useInstrumentTypeToDeterminePricer": false,
                            "allowAnyInstrumentsWithSecUidToPriceOffLookup": false,
                            "allowPartiallySuccessfulEvaluation": false,
                            "produceSeparateResultForLinearOtcLegs": false,
                            "enableUseOfCachedUnitResults": false,
                            "windowValuationOnInstrumentStartEnd": false,
                            "removeContingentCashflowsInPaymentDiary": false,
                            "useChildSubHoldingKeysForPortfolioExpansion": false,
                            "validateDomesticAndQuoteCurrenciesAreConsistent": false
                          },
                          "resultDataRules": []
                        },
                        "aggregation": {
                          "options": {
                            "useAnsiLikeSyntax": false,
                            "allowPartialEntitlementSuccess": false,
                            "applyIso4217Rounding": false
                          }
                        },
                        "inheritedRecipes": [],
                        "description": "",
                        "holding": {
                          "taxLotLevelHoldings": true
                        }
                      }
                    }
                  ],
                  "href": "https://lusid.com/api/",
                  "links": [
                    {
                      "relation": "RequestLogs",
                      "href": "https://lusid.com/app/insights/logs/0HMA57L9MHR7R:00000001",
                      "description": "A link to the LUSID Insights website showing all logs related to this request",
                      "method": "GET"
                    }
                  ]
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfGetRecipeResponse"
                },
                "example": {
                  "values": [
                    {
                      "value": {
                        "scope": "scopeName",
                        "code": "MyNamedRecipe12345",
                        "market": {
                          "marketRules": [
                            {
                              "key": "Fx.CurrencyPair.*",
                              "supplier": "Lusid",
                              "dataScope": "SomeScopeToLookAt",
                              "quoteType": "Price",
                              "field": "Ask",
                              "priceSource": ""
                            }
                          ],
                          "suppliers": {},
                          "options": {
                            "defaultSupplier": "Lusid",
                            "defaultInstrumentCodeType": "LusidInstrumentId",
                            "defaultScope": "default",
                            "attemptToInferMissingFx": false,
                            "calendarScope": "CoppClarkHolidayCalendars",
                            "conventionScope": "Conventions"
                          },
                          "specificRules": []
                        },
                        "pricing": {
                          "modelRules": [
                            {
                              "supplier": "Lusid",
                              "modelName": "Discounting",
                              "instrumentType": "Bond",
                              "parameters": "",
                              "modelOptions": {
                                "modelOptionsType": "EmptyModelOptions"
                              },
                              "instrumentId": ""
                            }
                          ],
                          "modelChoice": {},
                          "options": {
                            "modelSelection": {
                              "library": "Lusid",
                              "model": "SimpleStatic"
                            },
                            "useInstrumentTypeToDeterminePricer": false,
                            "allowAnyInstrumentsWithSecUidToPriceOffLookup": false,
                            "allowPartiallySuccessfulEvaluation": false,
                            "produceSeparateResultForLinearOtcLegs": false,
                            "enableUseOfCachedUnitResults": false,
                            "windowValuationOnInstrumentStartEnd": false,
                            "removeContingentCashflowsInPaymentDiary": false,
                            "useChildSubHoldingKeysForPortfolioExpansion": false,
                            "validateDomesticAndQuoteCurrenciesAreConsistent": false
                          },
                          "resultDataRules": []
                        },
                        "aggregation": {
                          "options": {
                            "useAnsiLikeSyntax": false,
                            "allowPartialEntitlementSuccess": false,
                            "applyIso4217Rounding": false
                          }
                        },
                        "inheritedRecipes": [],
                        "description": "",
                        "holding": {
                          "taxLotLevelHoldings": true
                        }
                      }
                    },
                    {
                      "value": {
                        "scope": "anotherScopeName",
                        "code": "MyNamedRecipe98765",
                        "market": {
                          "marketRules": [
                            {
                              "key": "Fx.CurrencyPair.*",
                              "supplier": "DataScope",
                              "dataScope": "SomeScopeToLookAt",
                              "quoteType": "Spread",
                              "field": "Bid",
                              "priceSource": ""
                            }
                          ],
                          "suppliers": {},
                          "options": {
                            "defaultSupplier": "Lusid",
                            "defaultInstrumentCodeType": "LusidInstrumentId",
                            "defaultScope": "default",
                            "attemptToInferMissingFx": false,
                            "calendarScope": "CoppClarkHolidayCalendars",
                            "conventionScope": "Conventions"
                          },
                          "specificRules": []
                        },
                        "pricing": {
                          "modelRules": [],
                          "modelChoice": {},
                          "options": {
                            "modelSelection": {
                              "library": "Lusid",
                              "model": "SimpleStatic"
                            },
                            "useInstrumentTypeToDeterminePricer": false,
                            "allowAnyInstrumentsWithSecUidToPriceOffLookup": false,
                            "allowPartiallySuccessfulEvaluation": false,
                            "produceSeparateResultForLinearOtcLegs": false,
                            "enableUseOfCachedUnitResults": false,
                            "windowValuationOnInstrumentStartEnd": false,
                            "removeContingentCashflowsInPaymentDiary": false,
                            "useChildSubHoldingKeysForPortfolioExpansion": false,
                            "validateDomesticAndQuoteCurrenciesAreConsistent": false
                          },
                          "resultDataRules": []
                        },
                        "aggregation": {
                          "options": {
                            "useAnsiLikeSyntax": false,
                            "allowPartialEntitlementSuccess": false,
                            "applyIso4217Rounding": false
                          }
                        },
                        "inheritedRecipes": [],
                        "description": "",
                        "holding": {
                          "taxLotLevelHoldings": true
                        }
                      }
                    }
                  ],
                  "href": "https://lusid.com/api/",
                  "links": [
                    {
                      "relation": "RequestLogs",
                      "href": "https://lusid.com/app/insights/logs/0HMA57L9MHR7R:00000001",
                      "description": "A link to the LUSID Insights website showing all logs related to this request",
                      "method": "GET"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      }
    },
    "/api/recipes/{scope}/{code}": {
      "get": {
        "tags": [
          "Configuration Recipe"
        ],
        "summary": "GetConfigurationRecipe: Get Configuration Recipe",
        "description": "Get a Configuration Recipe from a single scope.\r\n            \r\nThe response will return either the recipe that has been stored, or a failure explaining why the request was unsuccessful.\r\n            \r\nIt is important to always check for any unsuccessful requests (failures).",
        "operationId": "GetConfigurationRecipe",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the Configuration Recipe to retrieve.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the Configuration Recipe to retrieve."
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The name of the recipe to retrieve the data for.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The name of the recipe to retrieve the data for."
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the Configuration Recipe. Defaults to return the latest version if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to retrieve the Configuration Recipe. Defaults to return the latest version if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The successfully retrieved Configuration Recipe or any failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GetRecipeResponse"
                },
                "example": {
                  "value": {
                    "scope": "scopeName",
                    "code": "MyNamedRecipe12345",
                    "market": {
                      "marketRules": [
                        {
                          "key": "Fx.CurrencyPair.*",
                          "supplier": "Lusid",
                          "dataScope": "SomeScopeToLookAt",
                          "quoteType": "Price",
                          "field": "Ask",
                          "priceSource": ""
                        }
                      ],
                      "suppliers": {},
                      "options": {
                        "defaultSupplier": "Lusid",
                        "defaultInstrumentCodeType": "LusidInstrumentId",
                        "defaultScope": "default",
                        "attemptToInferMissingFx": false,
                        "calendarScope": "CoppClarkHolidayCalendars",
                        "conventionScope": "Conventions"
                      },
                      "specificRules": []
                    },
                    "pricing": {
                      "modelRules": [
                        {
                          "supplier": "Lusid",
                          "modelName": "Discounting",
                          "instrumentType": "Bond",
                          "parameters": "",
                          "modelOptions": {
                            "modelOptionsType": "EmptyModelOptions"
                          },
                          "instrumentId": ""
                        }
                      ],
                      "modelChoice": {},
                      "options": {
                        "modelSelection": {
                          "library": "Lusid",
                          "model": "SimpleStatic"
                        },
                        "useInstrumentTypeToDeterminePricer": false,
                        "allowAnyInstrumentsWithSecUidToPriceOffLookup": false,
                        "allowPartiallySuccessfulEvaluation": false,
                        "produceSeparateResultForLinearOtcLegs": false,
                        "enableUseOfCachedUnitResults": false,
                        "windowValuationOnInstrumentStartEnd": false,
                        "removeContingentCashflowsInPaymentDiary": false,
                        "useChildSubHoldingKeysForPortfolioExpansion": false,
                        "validateDomesticAndQuoteCurrenciesAreConsistent": false
                      },
                      "resultDataRules": []
                    },
                    "aggregation": {
                      "options": {
                        "useAnsiLikeSyntax": false,
                        "allowPartialEntitlementSuccess": false,
                        "applyIso4217Rounding": false
                      }
                    },
                    "inheritedRecipes": [],
                    "description": "",
                    "holding": {
                      "taxLotLevelHoldings": true
                    }
                  }
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetRecipeResponse"
                },
                "example": {
                  "value": {
                    "scope": "scopeName",
                    "code": "MyNamedRecipe12345",
                    "market": {
                      "marketRules": [
                        {
                          "key": "Fx.CurrencyPair.*",
                          "supplier": "Lusid",
                          "dataScope": "SomeScopeToLookAt",
                          "quoteType": "Price",
                          "field": "Ask",
                          "priceSource": ""
                        }
                      ],
                      "suppliers": {},
                      "options": {
                        "defaultSupplier": "Lusid",
                        "defaultInstrumentCodeType": "LusidInstrumentId",
                        "defaultScope": "default",
                        "attemptToInferMissingFx": false,
                        "calendarScope": "CoppClarkHolidayCalendars",
                        "conventionScope": "Conventions"
                      },
                      "specificRules": []
                    },
                    "pricing": {
                      "modelRules": [
                        {
                          "supplier": "Lusid",
                          "modelName": "Discounting",
                          "instrumentType": "Bond",
                          "parameters": "",
                          "modelOptions": {
                            "modelOptionsType": "EmptyModelOptions"
                          },
                          "instrumentId": ""
                        }
                      ],
                      "modelChoice": {},
                      "options": {
                        "modelSelection": {
                          "library": "Lusid",
                          "model": "SimpleStatic"
                        },
                        "useInstrumentTypeToDeterminePricer": false,
                        "allowAnyInstrumentsWithSecUidToPriceOffLookup": false,
                        "allowPartiallySuccessfulEvaluation": false,
                        "produceSeparateResultForLinearOtcLegs": false,
                        "enableUseOfCachedUnitResults": false,
                        "windowValuationOnInstrumentStartEnd": false,
                        "removeContingentCashflowsInPaymentDiary": false,
                        "useChildSubHoldingKeysForPortfolioExpansion": false,
                        "validateDomesticAndQuoteCurrenciesAreConsistent": false
                      },
                      "resultDataRules": []
                    },
                    "aggregation": {
                      "options": {
                        "useAnsiLikeSyntax": false,
                        "allowPartialEntitlementSuccess": false,
                        "applyIso4217Rounding": false
                      }
                    },
                    "inheritedRecipes": [],
                    "description": "",
                    "holding": {
                      "taxLotLevelHoldings": true
                    }
                  }
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetRecipeResponse"
                },
                "example": {
                  "value": {
                    "scope": "scopeName",
                    "code": "MyNamedRecipe12345",
                    "market": {
                      "marketRules": [
                        {
                          "key": "Fx.CurrencyPair.*",
                          "supplier": "Lusid",
                          "dataScope": "SomeScopeToLookAt",
                          "quoteType": "Price",
                          "field": "Ask",
                          "priceSource": ""
                        }
                      ],
                      "suppliers": {},
                      "options": {
                        "defaultSupplier": "Lusid",
                        "defaultInstrumentCodeType": "LusidInstrumentId",
                        "defaultScope": "default",
                        "attemptToInferMissingFx": false,
                        "calendarScope": "CoppClarkHolidayCalendars",
                        "conventionScope": "Conventions"
                      },
                      "specificRules": []
                    },
                    "pricing": {
                      "modelRules": [
                        {
                          "supplier": "Lusid",
                          "modelName": "Discounting",
                          "instrumentType": "Bond",
                          "parameters": "",
                          "modelOptions": {
                            "modelOptionsType": "EmptyModelOptions"
                          },
                          "instrumentId": ""
                        }
                      ],
                      "modelChoice": {},
                      "options": {
                        "modelSelection": {
                          "library": "Lusid",
                          "model": "SimpleStatic"
                        },
                        "useInstrumentTypeToDeterminePricer": false,
                        "allowAnyInstrumentsWithSecUidToPriceOffLookup": false,
                        "allowPartiallySuccessfulEvaluation": false,
                        "produceSeparateResultForLinearOtcLegs": false,
                        "enableUseOfCachedUnitResults": false,
                        "windowValuationOnInstrumentStartEnd": false,
                        "removeContingentCashflowsInPaymentDiary": false,
                        "useChildSubHoldingKeysForPortfolioExpansion": false,
                        "validateDomesticAndQuoteCurrenciesAreConsistent": false
                      },
                      "resultDataRules": []
                    },
                    "aggregation": {
                      "options": {
                        "useAnsiLikeSyntax": false,
                        "allowPartialEntitlementSuccess": false,
                        "applyIso4217Rounding": false
                      }
                    },
                    "inheritedRecipes": [],
                    "description": "",
                    "holding": {
                      "taxLotLevelHoldings": true
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      },
      "delete": {
        "tags": [
          "Configuration Recipe"
        ],
        "summary": "DeleteConfigurationRecipe: Delete a Configuration Recipe, assuming that it is present.",
        "description": "Delete the specified Configuration Recipe from a single scope.\r\n            \r\nThe response will return either detail of the deleted item, or an explanation (failure) as to why this did not succeed.\r\n            \r\nIt is important to always check for any unsuccessful response.",
        "operationId": "DeleteConfigurationRecipe",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the Configuration Recipe to delete.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the Configuration Recipe to delete."
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The Configuration Recipe to delete.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The Configuration Recipe to delete."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The AsAt of deletion or failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AnnulSingleStructuredDataResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnnulSingleStructuredDataResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnnulSingleStructuredDataResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      }
    },
    "/api/referenceportfolios/{scope}": {
      "post": {
        "tags": [
          "Reference Portfolio"
        ],
        "summary": "CreateReferencePortfolio: Create reference portfolio",
        "description": "Create a reference portfolio in a particular scope.",
        "operationId": "CreateReferencePortfolio",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope in which to create the reference portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope in which to create the reference portfolio.",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "The definition of the reference portfolio.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateReferencePortfolioRequest"
              },
              "example": {
                "displayName": "MyPortfolioName",
                "description": "Description of my portfolio",
                "code": "MyPortfolioCode",
                "created": "2018-03-05T00:00:00.0000000+00:00",
                "properties": {},
                "instrumentScopes": [],
                "baseCurrency": "GBP"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateReferencePortfolioRequest"
              },
              "example": {
                "displayName": "MyPortfolioName",
                "description": "Description of my portfolio",
                "code": "MyPortfolioCode",
                "created": "2018-03-05T00:00:00.0000000+00:00",
                "properties": {},
                "instrumentScopes": [],
                "baseCurrency": "GBP"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateReferencePortfolioRequest"
              },
              "example": {
                "displayName": "MyPortfolioName",
                "description": "Description of my portfolio",
                "code": "MyPortfolioCode",
                "created": "2018-03-05T00:00:00.0000000+00:00",
                "properties": {},
                "instrumentScopes": [],
                "baseCurrency": "GBP"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateReferencePortfolioRequest"
              },
              "example": {
                "displayName": "MyPortfolioName",
                "description": "Description of my portfolio",
                "code": "MyPortfolioCode",
                "created": "2018-03-05T00:00:00.0000000+00:00",
                "properties": {},
                "instrumentScopes": [],
                "baseCurrency": "GBP"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "The created reference portfolio, with populated id",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Portfolio"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Portfolio"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Portfolio"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      }
    },
    "/api/referenceportfolios/{scope}/{code}/constituents": {
      "post": {
        "tags": [
          "Reference Portfolio"
        ],
        "summary": "UpsertReferencePortfolioConstituents: Upsert reference portfolio constituents",
        "description": "Add constituents to a reference portfolio.",
        "operationId": "UpsertReferencePortfolioConstituents",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the reference portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the reference portfolio.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the reference portfolio. Together with the scope this uniquely identifies\r\n            the reference portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the reference portfolio. Together with the scope this uniquely identifies\r\n            the reference portfolio.",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "The constituents to upload to the reference portfolio.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertReferencePortfolioConstituentsRequest"
              },
              "example": {
                "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00",
                "weightType": "Periodical",
                "periodType": "Quarterly",
                "periodCount": 2,
                "constituents": [
                  {
                    "instrumentIdentifiers": {
                      "instrument/default/Figi": "BBG0077GZM13",
                      "instrument/default/Isin": "GB00BH4HKS39"
                    },
                    "properties": {
                      "portfolio/MyScope/MyPropertyKey": {
                        "key": "Portfolio/MyScope/MyPropertyKey",
                        "value": {
                          "metricValue": {
                            "value": 12345.5672,
                            "unit": "Unit"
                          }
                        }
                      }
                    },
                    "weight": 100,
                    "currency": "GBP"
                  },
                  {
                    "instrumentIdentifiers": {
                      "instrument/default/Figi": "BBG0077H2WN1",
                      "instrument/default/Isin": "US0378331005"
                    },
                    "properties": {},
                    "weight": 50,
                    "currency": "USD"
                  }
                ]
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertReferencePortfolioConstituentsRequest"
              },
              "example": {
                "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00",
                "weightType": "Periodical",
                "periodType": "Quarterly",
                "periodCount": 2,
                "constituents": [
                  {
                    "instrumentIdentifiers": {
                      "instrument/default/Figi": "BBG0077GZM13",
                      "instrument/default/Isin": "GB00BH4HKS39"
                    },
                    "properties": {
                      "portfolio/MyScope/MyPropertyKey": {
                        "key": "Portfolio/MyScope/MyPropertyKey",
                        "value": {
                          "metricValue": {
                            "value": 12345.5672,
                            "unit": "Unit"
                          }
                        }
                      }
                    },
                    "weight": 100,
                    "currency": "GBP"
                  },
                  {
                    "instrumentIdentifiers": {
                      "instrument/default/Figi": "BBG0077H2WN1",
                      "instrument/default/Isin": "US0378331005"
                    },
                    "properties": {},
                    "weight": 50,
                    "currency": "USD"
                  }
                ]
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertReferencePortfolioConstituentsRequest"
              },
              "example": {
                "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00",
                "weightType": "Periodical",
                "periodType": "Quarterly",
                "periodCount": 2,
                "constituents": [
                  {
                    "instrumentIdentifiers": {
                      "instrument/default/Figi": "BBG0077GZM13",
                      "instrument/default/Isin": "GB00BH4HKS39"
                    },
                    "properties": {
                      "portfolio/MyScope/MyPropertyKey": {
                        "key": "Portfolio/MyScope/MyPropertyKey",
                        "value": {
                          "metricValue": {
                            "value": 12345.5672,
                            "unit": "Unit"
                          }
                        }
                      }
                    },
                    "weight": 100,
                    "currency": "GBP"
                  },
                  {
                    "instrumentIdentifiers": {
                      "instrument/default/Figi": "BBG0077H2WN1",
                      "instrument/default/Isin": "US0378331005"
                    },
                    "properties": {},
                    "weight": 50,
                    "currency": "USD"
                  }
                ]
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertReferencePortfolioConstituentsRequest"
              },
              "example": {
                "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00",
                "weightType": "Periodical",
                "periodType": "Quarterly",
                "periodCount": 2,
                "constituents": [
                  {
                    "instrumentIdentifiers": {
                      "instrument/default/Figi": "BBG0077GZM13",
                      "instrument/default/Isin": "GB00BH4HKS39"
                    },
                    "properties": {
                      "portfolio/MyScope/MyPropertyKey": {
                        "key": "Portfolio/MyScope/MyPropertyKey",
                        "value": {
                          "metricValue": {
                            "value": 12345.5672,
                            "unit": "Unit"
                          }
                        }
                      }
                    },
                    "weight": 100,
                    "currency": "GBP"
                  },
                  {
                    "instrumentIdentifiers": {
                      "instrument/default/Figi": "BBG0077H2WN1",
                      "instrument/default/Isin": "US0378331005"
                    },
                    "properties": {},
                    "weight": 50,
                    "currency": "USD"
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertReferencePortfolioConstituentsResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertReferencePortfolioConstituentsResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertReferencePortfolioConstituentsResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      },
      "get": {
        "tags": [
          "Reference Portfolio"
        ],
        "summary": "GetReferencePortfolioConstituents: Get reference portfolio constituents",
        "description": "Get constituents from a reference portfolio at a particular effective time.",
        "operationId": "GetReferencePortfolioConstituents",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the reference portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the reference portfolio.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the reference portfolio. Together with the scope this uniquely identifies\r\n            the reference portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the reference portfolio. Together with the scope this uniquely identifies\r\n            the reference portfolio.",
              "nullable": true
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective date of the constituents to retrieve. Defaults to the current LUSID system datetime if not specified.",
            "schema": {
              "type": "string",
              "description": "The effective date of the constituents to retrieve. Defaults to the current LUSID system datetime if not specified.",
              "format": "dateorcutlabel",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve constituents. Defaults to return the latest version\r\n            of each constituent if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to retrieve constituents. Defaults to return the latest version\r\n            of each constituent if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "propertyKeys",
            "in": "query",
            "description": "A list of property keys from the 'Instrument' or 'ReferenceHolding' domain to decorate onto\r\n            constituents. These take the format {domain}/{scope}/{code} e.g. 'Instrument/system/Name' or\r\n            'ReferenceHolding/strategy/quantsignal'. Defaults to return all available instrument and reference holding properties if not specified.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
              },
              "description": "A list of property keys from the 'Instrument' or 'ReferenceHolding' domain to decorate onto\r\n            constituents. These take the format {domain}/{scope}/{code} e.g. 'Instrument/system/Name' or\r\n            'ReferenceHolding/strategy/quantsignal'. Defaults to return all available instrument and reference holding properties if not specified.",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The requested reference portfolio constituents",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GetReferencePortfolioConstituentsResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetReferencePortfolioConstituentsResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetReferencePortfolioConstituentsResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      }
    },
    "/api/referenceportfolios/{scope}/{code}/constituentsadjustments": {
      "get": {
        "tags": [
          "Reference Portfolio"
        ],
        "summary": "ListConstituentsAdjustments: List constituents adjustments",
        "description": "List adjustments made to constituents in a reference portfolio.",
        "operationId": "ListConstituentsAdjustments",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the reference portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the reference portfolio.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the reference portfolio. Together with the scope this uniquely identifies\r\n            the reference portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the reference portfolio. Together with the scope this uniquely identifies\r\n            the reference portfolio.",
              "nullable": true
            }
          },
          {
            "name": "fromEffectiveAt",
            "in": "query",
            "description": "Events between this time (inclusive) and the toEffectiveAt are returned.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Events between this time (inclusive) and the toEffectiveAt are returned.",
              "format": "dateorcutlabel"
            }
          },
          {
            "name": "toEffectiveAt",
            "in": "query",
            "description": "Events between this time (inclusive) and the fromEffectiveAt are returned.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Events between this time (inclusive) and the fromEffectiveAt are returned.",
              "format": "dateorcutlabel"
            }
          },
          {
            "name": "asAtTime",
            "in": "query",
            "description": "The asAt time for which the result is valid.",
            "schema": {
              "type": "string",
              "description": "The asAt time for which the result is valid.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfConstituentsAdjustmentHeader"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfConstituentsAdjustmentHeader"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfConstituentsAdjustmentHeader"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      }
    },
    "/api/relationshipdefinitions": {
      "post": {
        "tags": [
          "Relationship Definitions"
        ],
        "summary": "[EARLY ACCESS] CreateRelationshipDefinition: Create Relationship Definition",
        "description": "Create a new relationship definition to be used for creating relationships between entities.",
        "operationId": "CreateRelationshipDefinition",
        "requestBody": {
          "description": "The definition of the new relationship.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRelationshipDefinitionRequest"
              },
              "example": {
                "scope": "PortfolioManagementTeam",
                "code": "Traders",
                "sourceEntityType": "Portfolio",
                "targetEntityType": "Person",
                "displayName": "Authorised traders to trade for specific portfolio ",
                "outwardDescription": "can be traded by",
                "inwardDescription": "can trade with portfolio",
                "lifeTime": "TimeVariant",
                "relationshipCardinality": "ManyToMany"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRelationshipDefinitionRequest"
              },
              "example": {
                "scope": "PortfolioManagementTeam",
                "code": "Traders",
                "sourceEntityType": "Portfolio",
                "targetEntityType": "Person",
                "displayName": "Authorised traders to trade for specific portfolio ",
                "outwardDescription": "can be traded by",
                "inwardDescription": "can trade with portfolio",
                "lifeTime": "TimeVariant",
                "relationshipCardinality": "ManyToMany"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRelationshipDefinitionRequest"
              },
              "example": {
                "scope": "PortfolioManagementTeam",
                "code": "Traders",
                "sourceEntityType": "Portfolio",
                "targetEntityType": "Person",
                "displayName": "Authorised traders to trade for specific portfolio ",
                "outwardDescription": "can be traded by",
                "inwardDescription": "can trade with portfolio",
                "lifeTime": "TimeVariant",
                "relationshipCardinality": "ManyToMany"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRelationshipDefinitionRequest"
              },
              "example": {
                "scope": "PortfolioManagementTeam",
                "code": "Traders",
                "sourceEntityType": "Portfolio",
                "targetEntityType": "Person",
                "displayName": "Authorised traders to trade for specific portfolio ",
                "outwardDescription": "can be traded by",
                "inwardDescription": "can trade with portfolio",
                "lifeTime": "TimeVariant",
                "relationshipCardinality": "ManyToMany"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "The newly created relationship definition",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/RelationshipDefinition"
                },
                "example": {
                  "version": {
                    "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                    "asAtDate": "2019-01-01T12:00:00.0100000+00:00"
                  },
                  "relationshipDefinitionId": {
                    "scope": "PortfolioManagementTeam",
                    "code": "Traders"
                  },
                  "sourceEntityType": "Portfolio",
                  "targetEntityType": "Person",
                  "displayName": "Authorised traders to trade for specific portfolio ",
                  "outwardDescription": "can be traded by",
                  "inwardDescription": "can trade with portfolio",
                  "lifeTime": "TimeVariant",
                  "relationshipCardinality": "ManyToMany"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RelationshipDefinition"
                },
                "example": {
                  "version": {
                    "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                    "asAtDate": "2019-01-01T12:00:00.0100000+00:00"
                  },
                  "relationshipDefinitionId": {
                    "scope": "PortfolioManagementTeam",
                    "code": "Traders"
                  },
                  "sourceEntityType": "Portfolio",
                  "targetEntityType": "Person",
                  "displayName": "Authorised traders to trade for specific portfolio ",
                  "outwardDescription": "can be traded by",
                  "inwardDescription": "can trade with portfolio",
                  "lifeTime": "TimeVariant",
                  "relationshipCardinality": "ManyToMany"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/RelationshipDefinition"
                },
                "example": {
                  "version": {
                    "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                    "asAtDate": "2019-01-01T12:00:00.0100000+00:00"
                  },
                  "relationshipDefinitionId": {
                    "scope": "PortfolioManagementTeam",
                    "code": "Traders"
                  },
                  "sourceEntityType": "Portfolio",
                  "targetEntityType": "Person",
                  "displayName": "Authorised traders to trade for specific portfolio ",
                  "outwardDescription": "can be traded by",
                  "inwardDescription": "can trade with portfolio",
                  "lifeTime": "TimeVariant",
                  "relationshipCardinality": "ManyToMany"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      },
      "get": {
        "tags": [
          "Relationship Definitions"
        ],
        "summary": "[EARLY ACCESS] ListRelationshipDefinitions: List relationship definitions",
        "description": "Retrieve one or more specified relationship definitions.",
        "operationId": "ListRelationshipDefinitions",
        "parameters": [
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the relationship definitions. Defaults to return\r\n            the latest version of each definition if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to retrieve the relationship definitions. Defaults to return\r\n            the latest version of each definition if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "page",
            "in": "query",
            "description": "The pagination token to use to continue listing relationship definitions from a previous call to list relationship definitions. This\r\nvalue is returned from the previous call. If a pagination token is provided the filter, asAt field\r\nmust not have changed since the original request.",
            "schema": {
              "maxLength": 500,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\+/]*={0,3}$",
              "type": "string",
              "description": "The pagination token to use to continue listing relationship definitions from a previous call to list relationship definitions. This\r\nvalue is returned from the previous call. If a pagination token is provided the filter, asAt field\r\nmust not have changed since the original request.",
              "nullable": true
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "When paginating, limit the number of returned results to this many. Defaults to 100 if not specified.",
            "schema": {
              "type": "integer",
              "description": "When paginating, limit the number of returned results to this many. Defaults to 100 if not specified.",
              "format": "int32",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the result set.\r\n            For example, to filter on the Scope, use \"scope eq 'ExampleScope'\"\r\n            Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "maxLength": 16384,
              "minLength": 0,
              "pattern": "^[\\s\\S]*$",
              "type": "string",
              "description": "Expression to filter the result set.\r\n            For example, to filter on the Scope, use \"scope eq 'ExampleScope'\"\r\n            Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested relationship definitions",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfRelationshipDefinition"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfRelationshipDefinition"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfRelationshipDefinition"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/relationshipdefinitions/{scope}/{code}": {
      "put": {
        "tags": [
          "Relationship Definitions"
        ],
        "summary": "[EARLY ACCESS] UpdateRelationshipDefinition: Update Relationship Definition",
        "description": "Update the definition of a specified existing relationship. Not all elements within a relationship definition\r\nare modifiable due to the potential implications for values already stored against the relationship.",
        "operationId": "UpdateRelationshipDefinition",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the relationship definition being updated.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the relationship definition being updated.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the relationship definition being updated. Together with the scope this uniquely\r\n            identifies the relationship definition.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the relationship definition being updated. Together with the scope this uniquely\r\n            identifies the relationship definition.",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "The details of relationship definition to update.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRelationshipDefinitionRequest"
              },
              "example": {
                "displayName": "Authorised traders to trade for specific portfolio ",
                "outwardDescription": "can be traded by",
                "inwardDescription": "can trade with portfolio"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRelationshipDefinitionRequest"
              },
              "example": {
                "displayName": "Authorised traders to trade for specific portfolio ",
                "outwardDescription": "can be traded by",
                "inwardDescription": "can trade with portfolio"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRelationshipDefinitionRequest"
              },
              "example": {
                "displayName": "Authorised traders to trade for specific portfolio ",
                "outwardDescription": "can be traded by",
                "inwardDescription": "can trade with portfolio"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRelationshipDefinitionRequest"
              },
              "example": {
                "displayName": "Authorised traders to trade for specific portfolio ",
                "outwardDescription": "can be traded by",
                "inwardDescription": "can trade with portfolio"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The updated relationship definition",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/RelationshipDefinition"
                },
                "example": {
                  "version": {
                    "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                    "asAtDate": "2019-01-01T12:00:00.0100000+00:00"
                  },
                  "relationshipDefinitionId": {
                    "scope": "PortfolioManagementTeam",
                    "code": "Traders"
                  },
                  "sourceEntityType": "Portfolio",
                  "targetEntityType": "Person",
                  "displayName": "Authorised traders to trade for specific portfolio ",
                  "outwardDescription": "can be traded by",
                  "inwardDescription": "can trade with portfolio",
                  "lifeTime": "TimeVariant",
                  "relationshipCardinality": "ManyToMany"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RelationshipDefinition"
                },
                "example": {
                  "version": {
                    "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                    "asAtDate": "2019-01-01T12:00:00.0100000+00:00"
                  },
                  "relationshipDefinitionId": {
                    "scope": "PortfolioManagementTeam",
                    "code": "Traders"
                  },
                  "sourceEntityType": "Portfolio",
                  "targetEntityType": "Person",
                  "displayName": "Authorised traders to trade for specific portfolio ",
                  "outwardDescription": "can be traded by",
                  "inwardDescription": "can trade with portfolio",
                  "lifeTime": "TimeVariant",
                  "relationshipCardinality": "ManyToMany"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/RelationshipDefinition"
                },
                "example": {
                  "version": {
                    "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                    "asAtDate": "2019-01-01T12:00:00.0100000+00:00"
                  },
                  "relationshipDefinitionId": {
                    "scope": "PortfolioManagementTeam",
                    "code": "Traders"
                  },
                  "sourceEntityType": "Portfolio",
                  "targetEntityType": "Person",
                  "displayName": "Authorised traders to trade for specific portfolio ",
                  "outwardDescription": "can be traded by",
                  "inwardDescription": "can trade with portfolio",
                  "lifeTime": "TimeVariant",
                  "relationshipCardinality": "ManyToMany"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      },
      "delete": {
        "tags": [
          "Relationship Definitions"
        ],
        "summary": "[EARLY ACCESS] DeleteRelationshipDefinition: Delete Relationship Definition",
        "description": "Delete the definition of the specified relationship.",
        "operationId": "DeleteRelationshipDefinition",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the relationship definition to be deleted.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the relationship definition to be deleted.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the relationship definition to be deleted. Together with the domain and scope this uniquely\r\n            identifies the relationship.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the relationship definition to be deleted. Together with the domain and scope this uniquely\r\n            identifies the relationship.",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The time that the relationship definition was deleted",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      },
      "get": {
        "tags": [
          "Relationship Definitions"
        ],
        "summary": "[EARLY ACCESS] GetRelationshipDefinition: Get relationship definition",
        "description": "Retrieve the specified relationship definition",
        "operationId": "GetRelationshipDefinition",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the specified relationship definition.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the specified relationship definition.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the specified relationship definition. Together with the domain and scope this uniquely\r\n            identifies the relationship definition.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the specified relationship definition. Together with the domain and scope this uniquely\r\n            identifies the relationship definition.",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the relationship definition. Defaults to return\r\n            the latest version of the definition if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to retrieve the relationship definition. Defaults to return\r\n            the latest version of the definition if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The requested relationship definition",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/RelationshipDefinition"
                },
                "example": {
                  "version": {
                    "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                    "asAtDate": "2019-01-01T12:00:00.0100000+00:00"
                  },
                  "relationshipDefinitionId": {
                    "scope": "PortfolioManagementTeam",
                    "code": "Traders"
                  },
                  "sourceEntityType": "Portfolio",
                  "targetEntityType": "Person",
                  "displayName": "Authorised traders to trade for specific portfolio ",
                  "outwardDescription": "can be traded by",
                  "inwardDescription": "can trade with portfolio",
                  "lifeTime": "TimeVariant",
                  "relationshipCardinality": "ManyToMany"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RelationshipDefinition"
                },
                "example": {
                  "version": {
                    "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                    "asAtDate": "2019-01-01T12:00:00.0100000+00:00"
                  },
                  "relationshipDefinitionId": {
                    "scope": "PortfolioManagementTeam",
                    "code": "Traders"
                  },
                  "sourceEntityType": "Portfolio",
                  "targetEntityType": "Person",
                  "displayName": "Authorised traders to trade for specific portfolio ",
                  "outwardDescription": "can be traded by",
                  "inwardDescription": "can trade with portfolio",
                  "lifeTime": "TimeVariant",
                  "relationshipCardinality": "ManyToMany"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/RelationshipDefinition"
                },
                "example": {
                  "version": {
                    "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                    "asAtDate": "2019-01-01T12:00:00.0100000+00:00"
                  },
                  "relationshipDefinitionId": {
                    "scope": "PortfolioManagementTeam",
                    "code": "Traders"
                  },
                  "sourceEntityType": "Portfolio",
                  "targetEntityType": "Person",
                  "displayName": "Authorised traders to trade for specific portfolio ",
                  "outwardDescription": "can be traded by",
                  "inwardDescription": "can trade with portfolio",
                  "lifeTime": "TimeVariant",
                  "relationshipCardinality": "ManyToMany"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/relationshipdefinitions/{scope}/{code}/relationships": {
      "post": {
        "tags": [
          "Relationships"
        ],
        "summary": "[EARLY ACCESS] CreateRelationship: Create Relationship",
        "description": "Create a relationship between two entity objects by their identifiers",
        "operationId": "CreateRelationship",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the relationship",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the relationship",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the relationship",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the relationship",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "The details of the relationship to create.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRelationshipRequest"
              },
              "example": {
                "sourceEntityId": {
                  "scope": "UkPortfolio",
                  "code": "PortfolioId-148176"
                },
                "targetEntityId": {
                  "idTypeScope": "HrSystem1",
                  "idTypeCode": "InternalId",
                  "code": "XY10001111"
                },
                "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                "effectiveUntil": "2022-01-01T12:00:00.0000000+00:00"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRelationshipRequest"
              },
              "example": {
                "sourceEntityId": {
                  "scope": "UkPortfolio",
                  "code": "PortfolioId-148176"
                },
                "targetEntityId": {
                  "idTypeScope": "HrSystem1",
                  "idTypeCode": "InternalId",
                  "code": "XY10001111"
                },
                "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                "effectiveUntil": "2022-01-01T12:00:00.0000000+00:00"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRelationshipRequest"
              },
              "example": {
                "sourceEntityId": {
                  "scope": "UkPortfolio",
                  "code": "PortfolioId-148176"
                },
                "targetEntityId": {
                  "idTypeScope": "HrSystem1",
                  "idTypeCode": "InternalId",
                  "code": "XY10001111"
                },
                "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                "effectiveUntil": "2022-01-01T12:00:00.0000000+00:00"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRelationshipRequest"
              },
              "example": {
                "sourceEntityId": {
                  "scope": "UkPortfolio",
                  "code": "PortfolioId-148176"
                },
                "targetEntityId": {
                  "idTypeScope": "HrSystem1",
                  "idTypeCode": "InternalId",
                  "code": "XY10001111"
                },
                "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                "effectiveUntil": "2022-01-01T12:00:00.0000000+00:00"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "The newly created relationship.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CompleteRelationship"
                },
                "example": {
                  "relationshipDefinitionId": {
                    "scope": "PortfolioManagementTeam",
                    "code": "Traders"
                  },
                  "sourceEntity": {
                    "entityType": "PortfolioGroup",
                    "entityId": {
                      "scope": "UkPortfolio",
                      "code": "PortfolioId-148176"
                    },
                    "displayName": "UK Portfolios",
                    "properties": {},
                    "scope": "UkPortfolio",
                    "identifiers": [
                      {
                        "identifierType": "code",
                        "identifierValue": "PortfolioId-148176"
                      }
                    ]
                  },
                  "targetEntity": {
                    "entityType": "Person",
                    "entityId": {
                      "idTypeScope": "HrSystem1",
                      "idTypeCode": "InternalId",
                      "code": "XY10001111"
                    },
                    "displayName": "James Smith",
                    "properties": {},
                    "identifiers": [
                      {
                        "identifierScope": "HrSystem1",
                        "identifierType": "InternalId",
                        "identifierValue": "XY10001111"
                      }
                    ]
                  },
                  "outwardDescription": "can be traded by",
                  "inwardDescription": "can trade with portfolio",
                  "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                  "effectiveUntil": "2022-01-01T12:00:00.0000000+00:00"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompleteRelationship"
                },
                "example": {
                  "relationshipDefinitionId": {
                    "scope": "PortfolioManagementTeam",
                    "code": "Traders"
                  },
                  "sourceEntity": {
                    "entityType": "PortfolioGroup",
                    "entityId": {
                      "scope": "UkPortfolio",
                      "code": "PortfolioId-148176"
                    },
                    "displayName": "UK Portfolios",
                    "properties": {},
                    "scope": "UkPortfolio",
                    "identifiers": [
                      {
                        "identifierType": "code",
                        "identifierValue": "PortfolioId-148176"
                      }
                    ]
                  },
                  "targetEntity": {
                    "entityType": "Person",
                    "entityId": {
                      "idTypeScope": "HrSystem1",
                      "idTypeCode": "InternalId",
                      "code": "XY10001111"
                    },
                    "displayName": "James Smith",
                    "properties": {},
                    "identifiers": [
                      {
                        "identifierScope": "HrSystem1",
                        "identifierType": "InternalId",
                        "identifierValue": "XY10001111"
                      }
                    ]
                  },
                  "outwardDescription": "can be traded by",
                  "inwardDescription": "can trade with portfolio",
                  "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                  "effectiveUntil": "2022-01-01T12:00:00.0000000+00:00"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompleteRelationship"
                },
                "example": {
                  "relationshipDefinitionId": {
                    "scope": "PortfolioManagementTeam",
                    "code": "Traders"
                  },
                  "sourceEntity": {
                    "entityType": "PortfolioGroup",
                    "entityId": {
                      "scope": "UkPortfolio",
                      "code": "PortfolioId-148176"
                    },
                    "displayName": "UK Portfolios",
                    "properties": {},
                    "scope": "UkPortfolio",
                    "identifiers": [
                      {
                        "identifierType": "code",
                        "identifierValue": "PortfolioId-148176"
                      }
                    ]
                  },
                  "targetEntity": {
                    "entityType": "Person",
                    "entityId": {
                      "idTypeScope": "HrSystem1",
                      "idTypeCode": "InternalId",
                      "code": "XY10001111"
                    },
                    "displayName": "James Smith",
                    "properties": {},
                    "identifiers": [
                      {
                        "identifierScope": "HrSystem1",
                        "identifierType": "InternalId",
                        "identifierValue": "XY10001111"
                      }
                    ]
                  },
                  "outwardDescription": "can be traded by",
                  "inwardDescription": "can trade with portfolio",
                  "effectiveFrom": "2019-01-01T12:00:00.0000000+00:00",
                  "effectiveUntil": "2022-01-01T12:00:00.0000000+00:00"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/relationshipdefinitions/{scope}/{code}/relationships/$delete": {
      "post": {
        "tags": [
          "Relationships"
        ],
        "summary": "[EARLY ACCESS] DeleteRelationship: Delete Relationship",
        "description": "Delete a relationship between two entity objects represented by their identifiers",
        "operationId": "DeleteRelationship",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the relationship",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the relationship",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the relationship",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the relationship",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "The details of the relationship to delete.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteRelationshipRequest"
              },
              "example": {
                "sourceEntityId": {
                  "scope": "UkPortfolio",
                  "code": "PortfolioId-148176"
                },
                "targetEntityId": {
                  "idTypeScope": "HrSystem1",
                  "idTypeCode": "InternalId",
                  "code": "XY10001111"
                },
                "effectiveFrom": "2019-01-10T00:00:00.0000000+00:00"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteRelationshipRequest"
              },
              "example": {
                "sourceEntityId": {
                  "scope": "UkPortfolio",
                  "code": "PortfolioId-148176"
                },
                "targetEntityId": {
                  "idTypeScope": "HrSystem1",
                  "idTypeCode": "InternalId",
                  "code": "XY10001111"
                },
                "effectiveFrom": "2019-01-10T00:00:00.0000000+00:00"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteRelationshipRequest"
              },
              "example": {
                "sourceEntityId": {
                  "scope": "UkPortfolio",
                  "code": "PortfolioId-148176"
                },
                "targetEntityId": {
                  "idTypeScope": "HrSystem1",
                  "idTypeCode": "InternalId",
                  "code": "XY10001111"
                },
                "effectiveFrom": "2019-01-10T00:00:00.0000000+00:00"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteRelationshipRequest"
              },
              "example": {
                "sourceEntityId": {
                  "scope": "UkPortfolio",
                  "code": "PortfolioId-148176"
                },
                "targetEntityId": {
                  "idTypeScope": "HrSystem1",
                  "idTypeCode": "InternalId",
                  "code": "XY10001111"
                },
                "effectiveFrom": "2019-01-10T00:00:00.0000000+00:00"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The datetime that the relationship is deleted",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/scopes": {
      "get": {
        "tags": [
          "Scopes"
        ],
        "summary": "ListScopes: List Scopes",
        "description": "List all the scopes that contain data.",
        "operationId": "ListScopes",
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the result set.\r\n            For example, to filter on the Scope, use \"scope eq 'string'\"\r\n            Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "maxLength": 16384,
              "minLength": 0,
              "pattern": "^[\\s\\S]*$",
              "type": "string",
              "description": "Expression to filter the result set.\r\n            For example, to filter on the Scope, use \"scope eq 'string'\"\r\n            Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of scopes",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfScopeDefinition"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfScopeDefinition"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfScopeDefinition"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      }
    },
    "/api/search/portfoliogroups": {
      "get": {
        "tags": [
          "Search"
        ],
        "summary": "SearchPortfolioGroups: Search Portfolio Groups",
        "description": "Search through all portfolio groups",
        "operationId": "SearchPortfolioGroups",
        "parameters": [
          {
            "name": "search",
            "in": "query",
            "description": "A parameter used for searching any portfolio group field. Wildcards(*) are supported at the end of words (e.g. 'Port*'). Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "type": "string",
              "description": "A parameter used for searching any portfolio group field. Wildcards(*) are supported at the end of words (e.g. 'Port*'). Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
              "nullable": true
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the result set. \r\nFor example, to filter on the Scope, use \"id.scope eq 'string'\"\r\nRead more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "maxLength": 16384,
              "minLength": 0,
              "pattern": "^[\\s\\S]*$",
              "type": "string",
              "description": "Expression to filter the result set. \r\nFor example, to filter on the Scope, use \"id.scope eq 'string'\"\r\nRead more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
              "nullable": true
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "Order the results by these fields. Use use the '-' sign to denote descending order e.g. -MyFieldName. Multiple fields can be denoted by a comma e.g. -MyFieldName,AnotherFieldName,-AFurtherFieldName",
            "schema": {
              "maxLength": 16384,
              "minLength": 1,
              "pattern": "^[\\s\\S]*$",
              "type": "string",
              "description": "Order the results by these fields. Use use the '-' sign to denote descending order e.g. -MyFieldName. Multiple fields can be denoted by a comma e.g. -MyFieldName,AnotherFieldName,-AFurtherFieldName",
              "nullable": true
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "When paginating, only return this number of records",
            "schema": {
              "type": "integer",
              "description": "When paginating, only return this number of records",
              "format": "int32"
            },
            "x-nullable": true
          },
          {
            "name": "page",
            "in": "query",
            "description": "Encoded page string returned from a previous search result that will retrieve the next page of data. When this field is supplied, filter, sortBy and search fields should not be supplied.",
            "schema": {
              "maxLength": 500,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\+/]*={0,3}$",
              "type": "string",
              "description": "Encoded page string returned from a previous search result that will retrieve the next page of data. When this field is supplied, filter, sortBy and search fields should not be supplied.",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfPortfolioGroupSearchResult"
                },
                "example": {
                  "values": [
                    {
                      "href": "https://example.lusid.com/api/portfoliogroups/demo-scope/demo-code",
                      "id": {
                        "scope": "demo-scope",
                        "code": "demo-group-code"
                      },
                      "displayName": "Test portfolio group",
                      "description": "UK Portfolio",
                      "created": "2020-03-28T00:00:00.0000000+00:00",
                      "portfolios": [
                        {
                          "scope": "demo-scope",
                          "code": "demo-portfolio"
                        }
                      ],
                      "subGroups": [
                        {
                          "scope": "demo-scope",
                          "code": "demo-sub-group"
                        }
                      ]
                    }
                  ],
                  "href": "https://example.lusid.com/api/portfoliogroups",
                  "links": []
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfPortfolioGroupSearchResult"
                },
                "example": {
                  "values": [
                    {
                      "href": "https://example.lusid.com/api/portfoliogroups/demo-scope/demo-code",
                      "id": {
                        "scope": "demo-scope",
                        "code": "demo-group-code"
                      },
                      "displayName": "Test portfolio group",
                      "description": "UK Portfolio",
                      "created": "2020-03-28T00:00:00.0000000+00:00",
                      "portfolios": [
                        {
                          "scope": "demo-scope",
                          "code": "demo-portfolio"
                        }
                      ],
                      "subGroups": [
                        {
                          "scope": "demo-scope",
                          "code": "demo-sub-group"
                        }
                      ]
                    }
                  ],
                  "href": "https://example.lusid.com/api/portfoliogroups",
                  "links": []
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfPortfolioGroupSearchResult"
                },
                "example": {
                  "values": [
                    {
                      "href": "https://example.lusid.com/api/portfoliogroups/demo-scope/demo-code",
                      "id": {
                        "scope": "demo-scope",
                        "code": "demo-group-code"
                      },
                      "displayName": "Test portfolio group",
                      "description": "UK Portfolio",
                      "created": "2020-03-28T00:00:00.0000000+00:00",
                      "portfolios": [
                        {
                          "scope": "demo-scope",
                          "code": "demo-portfolio"
                        }
                      ],
                      "subGroups": [
                        {
                          "scope": "demo-scope",
                          "code": "demo-sub-group"
                        }
                      ]
                    }
                  ],
                  "href": "https://example.lusid.com/api/portfoliogroups",
                  "links": []
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      }
    },
    "/api/search/portfolios": {
      "get": {
        "tags": [
          "Search"
        ],
        "summary": "SearchPortfolios: Search Portfolios",
        "description": "Search through all portfolios",
        "operationId": "SearchPortfolios",
        "parameters": [
          {
            "name": "search",
            "in": "query",
            "description": "A parameter used for searching any portfolio field. Wildcards(*) are supported at the end of words (e.g. 'Port*'). Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "type": "string",
              "description": "A parameter used for searching any portfolio field. Wildcards(*) are supported at the end of words (e.g. 'Port*'). Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
              "nullable": true
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the result set. \r\nFor example, to filter on the portfolio Type, use \"type eq 'Transaction'\"\r\nRead more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "maxLength": 16384,
              "minLength": 0,
              "pattern": "^[\\s\\S]*$",
              "type": "string",
              "description": "Expression to filter the result set. \r\nFor example, to filter on the portfolio Type, use \"type eq 'Transaction'\"\r\nRead more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
              "nullable": true
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "Order the results by these fields. Use use the '-' sign to denote descending order e.g. -MyFieldName. Multiple fields can be denoted by a comma e.g. -MyFieldName,AnotherFieldName,-AFurtherFieldName",
            "schema": {
              "maxLength": 16384,
              "minLength": 1,
              "pattern": "^[\\s\\S]*$",
              "type": "string",
              "description": "Order the results by these fields. Use use the '-' sign to denote descending order e.g. -MyFieldName. Multiple fields can be denoted by a comma e.g. -MyFieldName,AnotherFieldName,-AFurtherFieldName",
              "nullable": true
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "When paginating, only return this number of records",
            "schema": {
              "type": "integer",
              "description": "When paginating, only return this number of records",
              "format": "int32"
            },
            "x-nullable": true
          },
          {
            "name": "page",
            "in": "query",
            "description": "Encoded page string returned from a previous search result that will retrieve the next page of data. When this field is supplied, filter, sortBy and search fields should not be supplied.",
            "schema": {
              "maxLength": 500,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\+/]*={0,3}$",
              "type": "string",
              "description": "Encoded page string returned from a previous search result that will retrieve the next page of data. When this field is supplied, filter, sortBy and search fields should not be supplied.",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfPortfolioSearchResult"
                },
                "example": {
                  "values": [
                    {
                      "id": {
                        "scope": "demo-scope",
                        "code": "demo-code"
                      },
                      "type": "Transaction",
                      "href": "https://example.lusid.com/api/portfolios/demo-scope/demo-code",
                      "description": "UK Holidings",
                      "displayName": "UK Portfolio",
                      "isDerived": true,
                      "created": "2019-04-06T12:00:05.0000000+00:00",
                      "parentPortfolioId": {
                        "scope": "demo-parent",
                        "code": "demo-parent"
                      },
                      "baseCurrency": "GBP",
                      "properties": [
                        {
                          "key": "Portfolio/default/Country",
                          "value": {
                            "labelValue": "UK"
                          },
                          "effectiveFrom": "2019-04-06T12:00:05.0000000+00:00"
                        }
                      ]
                    }
                  ],
                  "href": "https://example.lusid.com/api/portfolios",
                  "links": []
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfPortfolioSearchResult"
                },
                "example": {
                  "values": [
                    {
                      "id": {
                        "scope": "demo-scope",
                        "code": "demo-code"
                      },
                      "type": "Transaction",
                      "href": "https://example.lusid.com/api/portfolios/demo-scope/demo-code",
                      "description": "UK Holidings",
                      "displayName": "UK Portfolio",
                      "isDerived": true,
                      "created": "2019-04-06T12:00:05.0000000+00:00",
                      "parentPortfolioId": {
                        "scope": "demo-parent",
                        "code": "demo-parent"
                      },
                      "baseCurrency": "GBP",
                      "properties": [
                        {
                          "key": "Portfolio/default/Country",
                          "value": {
                            "labelValue": "UK"
                          },
                          "effectiveFrom": "2019-04-06T12:00:05.0000000+00:00"
                        }
                      ]
                    }
                  ],
                  "href": "https://example.lusid.com/api/portfolios",
                  "links": []
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfPortfolioSearchResult"
                },
                "example": {
                  "values": [
                    {
                      "id": {
                        "scope": "demo-scope",
                        "code": "demo-code"
                      },
                      "type": "Transaction",
                      "href": "https://example.lusid.com/api/portfolios/demo-scope/demo-code",
                      "description": "UK Holidings",
                      "displayName": "UK Portfolio",
                      "isDerived": true,
                      "created": "2019-04-06T12:00:05.0000000+00:00",
                      "parentPortfolioId": {
                        "scope": "demo-parent",
                        "code": "demo-parent"
                      },
                      "baseCurrency": "GBP",
                      "properties": [
                        {
                          "key": "Portfolio/default/Country",
                          "value": {
                            "labelValue": "UK"
                          },
                          "effectiveFrom": "2019-04-06T12:00:05.0000000+00:00"
                        }
                      ]
                    }
                  ],
                  "href": "https://example.lusid.com/api/portfolios",
                  "links": []
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      }
    },
    "/api/search/propertydefinitions": {
      "get": {
        "tags": [
          "Search"
        ],
        "summary": "SearchProperties: Search Property Definitions",
        "description": "Search through all Property Definitions",
        "operationId": "SearchProperties",
        "parameters": [
          {
            "name": "search",
            "in": "query",
            "description": "A parameter used for searching any field. Wildcards(*) are supported at the end of words (e.g. 'Port*'). Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "type": "string",
              "description": "A parameter used for searching any field. Wildcards(*) are supported at the end of words (e.g. 'Port*'). Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
              "nullable": true
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the result set. \r\nFor example, to filter on the Value Type, use \"valueType eq 'string'\"\r\nRead more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "maxLength": 16384,
              "minLength": 0,
              "pattern": "^[\\s\\S]*$",
              "type": "string",
              "description": "Expression to filter the result set. \r\nFor example, to filter on the Value Type, use \"valueType eq 'string'\"\r\nRead more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
              "nullable": true
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "Order the results by these fields. Use use the '-' sign to denote descending order e.g. -MyFieldName. Multiple fields can be denoted by a comma e.g. -MyFieldName,AnotherFieldName,-AFurtherFieldName",
            "schema": {
              "maxLength": 16384,
              "minLength": 1,
              "pattern": "^[\\s\\S]*$",
              "type": "string",
              "description": "Order the results by these fields. Use use the '-' sign to denote descending order e.g. -MyFieldName. Multiple fields can be denoted by a comma e.g. -MyFieldName,AnotherFieldName,-AFurtherFieldName",
              "nullable": true
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "When paginating, only return this number of records",
            "schema": {
              "type": "integer",
              "description": "When paginating, only return this number of records",
              "format": "int32"
            },
            "x-nullable": true
          },
          {
            "name": "page",
            "in": "query",
            "description": "Encoded page string returned from a previous search result that will retrieve the next page of data. When this field is supplied, filter, sortBy and search fields should not be supplied.",
            "schema": {
              "maxLength": 500,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\+/]*={0,3}$",
              "type": "string",
              "description": "Encoded page string returned from a previous search result that will retrieve the next page of data. When this field is supplied, filter, sortBy and search fields should not be supplied.",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfPropertyDefinitionSearchResult"
                },
                "example": {
                  "values": [
                    {
                      "href": "https://example.lusid.com/api/properties/demo-scope/demo-code",
                      "key": "Portfolio/default/Country",
                      "valueType": "String",
                      "displayName": "Country",
                      "dataTypeId": {
                        "scope": "demo-scope",
                        "code": "demo-code"
                      },
                      "type": "Information",
                      "unitSchema": "Basic",
                      "domain": "Portfolio",
                      "scope": "default",
                      "code": "Country",
                      "valueRequired": false,
                      "lifeTime": "Perpetual",
                      "constraintStyle": "Property",
                      "propertyDefinitionType": "ValueProperty",
                      "propertyDescription": "A demonstration property definition search result"
                    }
                  ],
                  "href": "https://example.lusid.com/api/properties",
                  "links": []
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfPropertyDefinitionSearchResult"
                },
                "example": {
                  "values": [
                    {
                      "href": "https://example.lusid.com/api/properties/demo-scope/demo-code",
                      "key": "Portfolio/default/Country",
                      "valueType": "String",
                      "displayName": "Country",
                      "dataTypeId": {
                        "scope": "demo-scope",
                        "code": "demo-code"
                      },
                      "type": "Information",
                      "unitSchema": "Basic",
                      "domain": "Portfolio",
                      "scope": "default",
                      "code": "Country",
                      "valueRequired": false,
                      "lifeTime": "Perpetual",
                      "constraintStyle": "Property",
                      "propertyDefinitionType": "ValueProperty",
                      "propertyDescription": "A demonstration property definition search result"
                    }
                  ],
                  "href": "https://example.lusid.com/api/properties",
                  "links": []
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfPropertyDefinitionSearchResult"
                },
                "example": {
                  "values": [
                    {
                      "href": "https://example.lusid.com/api/properties/demo-scope/demo-code",
                      "key": "Portfolio/default/Country",
                      "valueType": "String",
                      "displayName": "Country",
                      "dataTypeId": {
                        "scope": "demo-scope",
                        "code": "demo-code"
                      },
                      "type": "Information",
                      "unitSchema": "Basic",
                      "domain": "Portfolio",
                      "scope": "default",
                      "code": "Country",
                      "valueRequired": false,
                      "lifeTime": "Perpetual",
                      "constraintStyle": "Property",
                      "propertyDefinitionType": "ValueProperty",
                      "propertyDescription": "A demonstration property definition search result"
                    }
                  ],
                  "href": "https://example.lusid.com/api/properties",
                  "links": []
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      }
    },
    "/api/sequences": {
      "get": {
        "tags": [
          "Sequences"
        ],
        "summary": "[EARLY ACCESS] ListSequences: List Sequences",
        "description": "List sequences which satisfies filtering criteria.",
        "operationId": "ListSequences",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "The pagination token to use to continue listing sequences from a previous call to list sequences. This\r\nvalue is returned from the previous call.",
            "schema": {
              "maxLength": 500,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\+/]*={0,3}$",
              "type": "string",
              "description": "The pagination token to use to continue listing sequences from a previous call to list sequences. This\r\nvalue is returned from the previous call.",
              "nullable": true
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "When paginating, limit the number of returned results to this many. Defaults to 500 if not specified.",
            "schema": {
              "maximum": 5000,
              "minimum": 1,
              "type": "integer",
              "description": "When paginating, limit the number of returned results to this many. Defaults to 500 if not specified.",
              "format": "int32",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the result set. \r\n            Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "maxLength": 16384,
              "minLength": 0,
              "pattern": "^[\\s\\S]*$",
              "type": "string",
              "description": "Expression to filter the result set. \r\n            Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The sequences matching filtering criteria",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfSequenceDefinition"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfSequenceDefinition"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfSequenceDefinition"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/sequences/{scope}": {
      "post": {
        "tags": [
          "Sequences"
        ],
        "summary": "[EARLY ACCESS] CreateSequence: Create a new sequence",
        "description": "Create a new sequence",
        "operationId": "CreateSequence",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "Scope of the sequence.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "Scope of the sequence.",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "Request to create sequence",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSequenceRequest"
              },
              "example": {
                "code": "TestCode",
                "increment": 1,
                "minValue": 0,
                "maxValue": 10,
                "start": 0,
                "cycle": false,
                "pattern": "TXN-{{seqValue}}"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSequenceRequest"
              },
              "example": {
                "code": "TestCode",
                "increment": 1,
                "minValue": 0,
                "maxValue": 10,
                "start": 0,
                "cycle": false,
                "pattern": "TXN-{{seqValue}}"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSequenceRequest"
              },
              "example": {
                "code": "TestCode",
                "increment": 1,
                "minValue": 0,
                "maxValue": 10,
                "start": 0,
                "cycle": false,
                "pattern": "TXN-{{seqValue}}"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSequenceRequest"
              },
              "example": {
                "code": "TestCode",
                "increment": 1,
                "minValue": 0,
                "maxValue": 10,
                "start": 0,
                "cycle": false,
                "pattern": "TXN-{{seqValue}}"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "The newly created Sequence",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SequenceDefinition"
                },
                "example": {
                  "id": {
                    "scope": "TestScope",
                    "code": "TestCode"
                  },
                  "increment": 1,
                  "minValue": 0,
                  "maxValue": 10,
                  "start": 1,
                  "value": 3,
                  "cycle": false,
                  "pattern": "TXN-{{seqValue}}"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SequenceDefinition"
                },
                "example": {
                  "id": {
                    "scope": "TestScope",
                    "code": "TestCode"
                  },
                  "increment": 1,
                  "minValue": 0,
                  "maxValue": 10,
                  "start": 1,
                  "value": 3,
                  "cycle": false,
                  "pattern": "TXN-{{seqValue}}"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SequenceDefinition"
                },
                "example": {
                  "id": {
                    "scope": "TestScope",
                    "code": "TestCode"
                  },
                  "increment": 1,
                  "minValue": 0,
                  "maxValue": 10,
                  "start": 1,
                  "value": 3,
                  "cycle": false,
                  "pattern": "TXN-{{seqValue}}"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/sequences/{scope}/{code}": {
      "get": {
        "tags": [
          "Sequences"
        ],
        "summary": "[EARLY ACCESS] GetSequence: Get a specified sequence",
        "description": "Return the details of a specified sequence",
        "operationId": "GetSequence",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "Scope of the sequence.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "Scope of the sequence.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "Code of the sequence. This together with stated scope uniquely\r\n            identifies the sequence.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "Code of the sequence. This together with stated scope uniquely\r\n            identifies the sequence.",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested sequence",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SequenceDefinition"
                },
                "example": {
                  "id": {
                    "scope": "TestScope",
                    "code": "TestCode"
                  },
                  "increment": 1,
                  "minValue": 0,
                  "maxValue": 10,
                  "start": 1,
                  "value": 3,
                  "cycle": false,
                  "pattern": "TXN-{{seqValue}}"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SequenceDefinition"
                },
                "example": {
                  "id": {
                    "scope": "TestScope",
                    "code": "TestCode"
                  },
                  "increment": 1,
                  "minValue": 0,
                  "maxValue": 10,
                  "start": 1,
                  "value": 3,
                  "cycle": false,
                  "pattern": "TXN-{{seqValue}}"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SequenceDefinition"
                },
                "example": {
                  "id": {
                    "scope": "TestScope",
                    "code": "TestCode"
                  },
                  "increment": 1,
                  "minValue": 0,
                  "maxValue": 10,
                  "start": 1,
                  "value": 3,
                  "cycle": false,
                  "pattern": "TXN-{{seqValue}}"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/sequences/{scope}/{code}/next": {
      "get": {
        "tags": [
          "Sequences"
        ],
        "summary": "[EARLY ACCESS] Next: Get next values from sequence",
        "description": "Get the next set of values from a specified sequence",
        "operationId": "Next",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "Scope of the sequence.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "Scope of the sequence.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "Code of the sequence. This together with stated scope uniquely\r\n            identifies the sequence.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "Code of the sequence. This together with stated scope uniquely\r\n            identifies the sequence.",
              "nullable": true
            }
          },
          {
            "name": "batch",
            "in": "query",
            "description": "Number of sequences items to return for the specified sequence. Default to 1 if not specified.",
            "schema": {
              "maximum": 5000,
              "minimum": 1,
              "type": "integer",
              "description": "Number of sequences items to return for the specified sequence. Default to 1 if not specified.",
              "format": "int32",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The response containing next available values in specified sequence.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/NextValueInSequenceResponse"
                },
                "example": {
                  "values": [
                    "TXN-0",
                    "TXN-1",
                    "TXN-2"
                  ]
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NextValueInSequenceResponse"
                },
                "example": {
                  "values": [
                    "TXN-0",
                    "TXN-1",
                    "TXN-2"
                  ]
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/NextValueInSequenceResponse"
                },
                "example": {
                  "values": [
                    "TXN-0",
                    "TXN-1",
                    "TXN-2"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/systemconfiguration/cutlabels": {
      "post": {
        "tags": [
          "Cut Label Definitions"
        ],
        "summary": "CreateCutLabelDefinition: Create a Cut Label",
        "description": "Create a Cut Label valid in all scopes",
        "operationId": "CreateCutLabelDefinition",
        "requestBody": {
          "description": "The cut label definition",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCutLabelDefinitionRequest"
              },
              "example": {
                "code": "CutLabelCode",
                "displayName": "CutLabelDisplayName",
                "description": "description of cut label",
                "cutLocalTime": {
                  "hours": 17,
                  "minutes": 0
                },
                "timeZone": "GB"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCutLabelDefinitionRequest"
              },
              "example": {
                "code": "CutLabelCode",
                "displayName": "CutLabelDisplayName",
                "description": "description of cut label",
                "cutLocalTime": {
                  "hours": 17,
                  "minutes": 0
                },
                "timeZone": "GB"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCutLabelDefinitionRequest"
              },
              "example": {
                "code": "CutLabelCode",
                "displayName": "CutLabelDisplayName",
                "description": "description of cut label",
                "cutLocalTime": {
                  "hours": 17,
                  "minutes": 0
                },
                "timeZone": "GB"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCutLabelDefinitionRequest"
              },
              "example": {
                "code": "CutLabelCode",
                "displayName": "CutLabelDisplayName",
                "description": "description of cut label",
                "cutLocalTime": {
                  "hours": 17,
                  "minutes": 0
                },
                "timeZone": "GB"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The created cut label",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CutLabelDefinition"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CutLabelDefinition"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CutLabelDefinition"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      },
      "get": {
        "tags": [
          "Cut Label Definitions"
        ],
        "summary": "ListCutLabelDefinitions: List Existing Cut Labels",
        "description": "List all the Cut Label Definitions that are valid at the given AsAt time",
        "operationId": "ListCutLabelDefinitions",
        "parameters": [
          {
            "name": "asAt",
            "in": "query",
            "description": "Optional. The As At time at which listed Cut Labels are valid",
            "schema": {
              "type": "string",
              "description": "Optional. The As At time at which listed Cut Labels are valid",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "Optional. Order the results by these fields. Use use the '-' sign to denote descending order e.g. -MyFieldName",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Optional. Order the results by these fields. Use use the '-' sign to denote descending order e.g. -MyFieldName",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "start",
            "in": "query",
            "description": "Optional. When paginating, skip this number of results",
            "schema": {
              "type": "integer",
              "description": "Optional. When paginating, skip this number of results",
              "format": "int32",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Optional. When paginating, limit the number of returned results to this many.",
            "schema": {
              "type": "integer",
              "description": "Optional. When paginating, limit the number of returned results to this many.",
              "format": "int32",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Optional. Expression to filter the result set.\r\n            For example, to filter on code, use \"code eq 'string'\"\r\n            Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "maxLength": 16384,
              "minLength": 0,
              "pattern": "^[\\s\\S]*$",
              "type": "string",
              "description": "Optional. Expression to filter the result set.\r\n            For example, to filter on code, use \"code eq 'string'\"\r\n            Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
              "nullable": true
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "The pagination token to use to continue listing cut labels from a previous call This value is returned from the previous call.\r\nIf a pagination token is provided the sortBy, filter, and asAt fields\r\nmust not have changed since the original request. Also, if set, a start value cannot be provided.",
            "schema": {
              "maxLength": 500,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\+/]*={0,3}$",
              "type": "string",
              "description": "The pagination token to use to continue listing cut labels from a previous call This value is returned from the previous call.\r\nIf a pagination token is provided the sortBy, filter, and asAt fields\r\nmust not have changed since the original request. Also, if set, a start value cannot be provided.",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of cut labels",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfCutLabelDefinition"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfCutLabelDefinition"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResourceListOfCutLabelDefinition"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      }
    },
    "/api/systemconfiguration/cutlabels/{code}": {
      "put": {
        "tags": [
          "Cut Label Definitions"
        ],
        "summary": "UpdateCutLabelDefinition: Update a Cut Label",
        "description": "Update a specified cut label",
        "operationId": "UpdateCutLabelDefinition",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "description": "The Code of the Cut Label that is being updated",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The Code of the Cut Label that is being updated",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "The cut label update definition",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCutLabelDefinitionRequest"
              },
              "example": {
                "displayName": "CutLabelDisplayName",
                "description": "description of cut label",
                "cutLocalTime": {
                  "hours": 17,
                  "minutes": 0
                },
                "timeZone": "GB"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCutLabelDefinitionRequest"
              },
              "example": {
                "displayName": "CutLabelDisplayName",
                "description": "description of cut label",
                "cutLocalTime": {
                  "hours": 17,
                  "minutes": 0
                },
                "timeZone": "GB"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCutLabelDefinitionRequest"
              },
              "example": {
                "displayName": "CutLabelDisplayName",
                "description": "description of cut label",
                "cutLocalTime": {
                  "hours": 17,
                  "minutes": 0
                },
                "timeZone": "GB"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCutLabelDefinitionRequest"
              },
              "example": {
                "displayName": "CutLabelDisplayName",
                "description": "description of cut label",
                "cutLocalTime": {
                  "hours": 17,
                  "minutes": 0
                },
                "timeZone": "GB"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The updated cut label",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CutLabelDefinition"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CutLabelDefinition"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CutLabelDefinition"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      },
      "get": {
        "tags": [
          "Cut Label Definitions"
        ],
        "summary": "GetCutLabelDefinition: Get a Cut Label",
        "description": "Get a specified cut label at a given time",
        "operationId": "GetCutLabelDefinition",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "description": "The Code of the Cut Label that is being queried",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The Code of the Cut Label that is being queried",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The time at which to get the Cut Label",
            "schema": {
              "type": "string",
              "description": "The time at which to get the Cut Label",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The requested cut label",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CutLabelDefinition"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CutLabelDefinition"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CutLabelDefinition"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      },
      "delete": {
        "tags": [
          "Cut Label Definitions"
        ],
        "summary": "DeleteCutLabelDefinition: Delete a Cut Label",
        "description": "Delete a specified cut label",
        "operationId": "DeleteCutLabelDefinition",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "description": "The Code of the Cut Label that is being Deleted",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The Code of the Cut Label that is being Deleted",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The time of deletion",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "format": "date-time"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "date-time"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      }
    },
    "/api/systemconfiguration/transactions": {
      "get": {
        "tags": [
          "System Configuration"
        ],
        "summary": "[EARLY ACCESS] ListConfigurationTransactionTypes: List transaction types",
        "description": "Get the list of current transaction types. For information on the default transaction types provided with\r\nLUSID, see https://support.lusid.com/knowledgebase/article/KA-01873/.",
        "operationId": "ListConfigurationTransactionTypes",
        "parameters": [
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the transaction types. Defaults\r\n            to returning the latest versions if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to retrieve the transaction types. Defaults\r\n            to returning the latest versions if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionSetConfigurationData"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionSetConfigurationData"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionSetConfigurationData"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/systemconfiguration/transactions/type": {
      "post": {
        "tags": [
          "System Configuration"
        ],
        "summary": "[EARLY ACCESS] CreateConfigurationTransactionType: Create transaction type",
        "description": "Create a new transaction type by specifying a definition and mappings to movements.",
        "operationId": "CreateConfigurationTransactionType",
        "requestBody": {
          "description": "A transaction type definition.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/TransactionConfigurationDataRequest"
              },
              "example": {
                "aliases": [
                  {
                    "type": "Another-Sell",
                    "description": "Sale",
                    "transactionClass": "MyDefault",
                    "transactionGroup": "mysource",
                    "source": "mysource",
                    "transactionRoles": "LongShorter",
                    "isDefault": false
                  }
                ],
                "movements": [
                  {
                    "movementTypes": "StockMovement",
                    "side": "Side1",
                    "direction": -1,
                    "properties": {},
                    "mappings": []
                  },
                  {
                    "movementTypes": "CashCommitment",
                    "side": "Side2",
                    "direction": 1,
                    "properties": {},
                    "mappings": []
                  }
                ],
                "properties": {}
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TransactionConfigurationDataRequest"
              },
              "example": {
                "aliases": [
                  {
                    "type": "Another-Sell",
                    "description": "Sale",
                    "transactionClass": "MyDefault",
                    "transactionGroup": "mysource",
                    "source": "mysource",
                    "transactionRoles": "LongShorter",
                    "isDefault": false
                  }
                ],
                "movements": [
                  {
                    "movementTypes": "StockMovement",
                    "side": "Side1",
                    "direction": -1,
                    "properties": {},
                    "mappings": []
                  },
                  {
                    "movementTypes": "CashCommitment",
                    "side": "Side2",
                    "direction": 1,
                    "properties": {},
                    "mappings": []
                  }
                ],
                "properties": {}
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/TransactionConfigurationDataRequest"
              },
              "example": {
                "aliases": [
                  {
                    "type": "Another-Sell",
                    "description": "Sale",
                    "transactionClass": "MyDefault",
                    "transactionGroup": "mysource",
                    "source": "mysource",
                    "transactionRoles": "LongShorter",
                    "isDefault": false
                  }
                ],
                "movements": [
                  {
                    "movementTypes": "StockMovement",
                    "side": "Side1",
                    "direction": -1,
                    "properties": {},
                    "mappings": []
                  },
                  {
                    "movementTypes": "CashCommitment",
                    "side": "Side2",
                    "direction": 1,
                    "properties": {},
                    "mappings": []
                  }
                ],
                "properties": {}
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/TransactionConfigurationDataRequest"
              },
              "example": {
                "aliases": [
                  {
                    "type": "Another-Sell",
                    "description": "Sale",
                    "transactionClass": "MyDefault",
                    "transactionGroup": "mysource",
                    "source": "mysource",
                    "transactionRoles": "LongShorter",
                    "isDefault": false
                  }
                ],
                "movements": [
                  {
                    "movementTypes": "StockMovement",
                    "side": "Side1",
                    "direction": -1,
                    "properties": {},
                    "mappings": []
                  },
                  {
                    "movementTypes": "CashCommitment",
                    "side": "Side2",
                    "direction": 1,
                    "properties": {},
                    "mappings": []
                  }
                ],
                "properties": {}
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionSetConfigurationData"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionSetConfigurationData"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionSetConfigurationData"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/transactionportfolios/{scope}": {
      "post": {
        "tags": [
          "Transaction Portfolios"
        ],
        "summary": "CreatePortfolio: Create portfolio",
        "description": "Create a transaction portfolio in a particular scope.",
        "operationId": "CreatePortfolio",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope in which to create the transaction portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope in which to create the transaction portfolio.",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "The definition of the transaction portfolio.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTransactionPortfolioRequest"
              },
              "example": {
                "displayName": "Portfolio UK",
                "description": "Portfolio for UK market",
                "code": "PortfolioUk",
                "created": "2018-03-05T12:00:00.0000000+00:00",
                "baseCurrency": "GBP",
                "corporateActionSourceId": {
                  "scope": "Sources",
                  "code": "Vendor1"
                },
                "accountingMethod": "Default",
                "subHoldingKeys": [],
                "properties": {
                  "portfolio/Manager/Name": {
                    "key": "Portfolio/Manager/Name",
                    "value": {
                      "labelValue": "Matt Smith"
                    },
                    "effectiveFrom": "2018-03-05T12:00:00.0000000+00:00"
                  },
                  "portfolio/Manager/Id": {
                    "key": "Portfolio/Manager/Id",
                    "value": {
                      "metricValue": {
                        "value": 1628483,
                        "unit": "NoUnits"
                      }
                    },
                    "effectiveFrom": "2018-03-05T12:00:00.0000000+00:00"
                  }
                },
                "instrumentScopes": []
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTransactionPortfolioRequest"
              },
              "example": {
                "displayName": "Portfolio UK",
                "description": "Portfolio for UK market",
                "code": "PortfolioUk",
                "created": "2018-03-05T12:00:00.0000000+00:00",
                "baseCurrency": "GBP",
                "corporateActionSourceId": {
                  "scope": "Sources",
                  "code": "Vendor1"
                },
                "accountingMethod": "Default",
                "subHoldingKeys": [],
                "properties": {
                  "portfolio/Manager/Name": {
                    "key": "Portfolio/Manager/Name",
                    "value": {
                      "labelValue": "Matt Smith"
                    },
                    "effectiveFrom": "2018-03-05T12:00:00.0000000+00:00"
                  },
                  "portfolio/Manager/Id": {
                    "key": "Portfolio/Manager/Id",
                    "value": {
                      "metricValue": {
                        "value": 1628483,
                        "unit": "NoUnits"
                      }
                    },
                    "effectiveFrom": "2018-03-05T12:00:00.0000000+00:00"
                  }
                },
                "instrumentScopes": []
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTransactionPortfolioRequest"
              },
              "example": {
                "displayName": "Portfolio UK",
                "description": "Portfolio for UK market",
                "code": "PortfolioUk",
                "created": "2018-03-05T12:00:00.0000000+00:00",
                "baseCurrency": "GBP",
                "corporateActionSourceId": {
                  "scope": "Sources",
                  "code": "Vendor1"
                },
                "accountingMethod": "Default",
                "subHoldingKeys": [],
                "properties": {
                  "portfolio/Manager/Name": {
                    "key": "Portfolio/Manager/Name",
                    "value": {
                      "labelValue": "Matt Smith"
                    },
                    "effectiveFrom": "2018-03-05T12:00:00.0000000+00:00"
                  },
                  "portfolio/Manager/Id": {
                    "key": "Portfolio/Manager/Id",
                    "value": {
                      "metricValue": {
                        "value": 1628483,
                        "unit": "NoUnits"
                      }
                    },
                    "effectiveFrom": "2018-03-05T12:00:00.0000000+00:00"
                  }
                },
                "instrumentScopes": []
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTransactionPortfolioRequest"
              },
              "example": {
                "displayName": "Portfolio UK",
                "description": "Portfolio for UK market",
                "code": "PortfolioUk",
                "created": "2018-03-05T12:00:00.0000000+00:00",
                "baseCurrency": "GBP",
                "corporateActionSourceId": {
                  "scope": "Sources",
                  "code": "Vendor1"
                },
                "accountingMethod": "Default",
                "subHoldingKeys": [],
                "properties": {
                  "portfolio/Manager/Name": {
                    "key": "Portfolio/Manager/Name",
                    "value": {
                      "labelValue": "Matt Smith"
                    },
                    "effectiveFrom": "2018-03-05T12:00:00.0000000+00:00"
                  },
                  "portfolio/Manager/Id": {
                    "key": "Portfolio/Manager/Id",
                    "value": {
                      "metricValue": {
                        "value": 1628483,
                        "unit": "NoUnits"
                      }
                    },
                    "effectiveFrom": "2018-03-05T12:00:00.0000000+00:00"
                  }
                },
                "instrumentScopes": []
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "The newly-created transaction portfolio",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Portfolio"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Portfolio"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Portfolio"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      }
    },
    "/api/transactionportfolios/{scope}/{code}/$resolve": {
      "post": {
        "tags": [
          "Transaction Portfolios"
        ],
        "summary": "[EARLY ACCESS] ResolveInstrument: Resolve instrument",
        "description": "Try to resolve the instrument for transaction and holdings for a given instrument identifier and a specified\r\nperiod of time. Also update the instrument identifiers with the given instrument identifiers collection.",
        "operationId": "ResolveInstrument",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the transaction portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the transaction portfolio.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the transaction portfolio. Together with the scope this uniquely identifies\r\n            the transaction portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the transaction portfolio. Together with the scope this uniquely identifies\r\n            the transaction portfolio.",
              "nullable": true
            }
          },
          {
            "name": "instrumentIdentifierType",
            "in": "query",
            "description": "The instrument identifier type.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
            }
          },
          {
            "name": "instrumentIdentifierValue",
            "in": "query",
            "description": "The value for the given instrument identifier.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The value for the given instrument identifier."
            }
          },
          {
            "name": "fromEffectiveAt",
            "in": "query",
            "description": "The lower bound effective datetime or cut label (inclusive) from which to retrieve the data.\r\n            There is no lower bound if this is not specified.",
            "schema": {
              "type": "string",
              "description": "The lower bound effective datetime or cut label (inclusive) from which to retrieve the data.\r\n            There is no lower bound if this is not specified.",
              "format": "dateorcutlabel",
              "nullable": true
            }
          },
          {
            "name": "reResolve",
            "in": "query",
            "description": "When set to true, instrument resolution will be attempted for all transactions and holdings for the given identifier and date range.\r\n            When set to false (default behaviour), instrument resolution will only be attempted for those transactions and holdings that were previously unresolved.",
            "schema": {
              "type": "boolean",
              "description": "When set to true, instrument resolution will be attempted for all transactions and holdings for the given identifier and date range.\r\n            When set to false (default behaviour), instrument resolution will only be attempted for those transactions and holdings that were previously unresolved.",
              "default": false
            },
            "x-nullable": true
          }
        ],
        "requestBody": {
          "description": "The dictionary with the instrument identifiers to be updated on the\r\n           transaction and holdings.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                },
                "description": "The dictionary with the instrument identifiers to be updated on the\r\n           transaction and holdings.",
                "nullable": true
              },
              "example": {
                "instrument/default/Figi": "BBG000C6K6G9",
                "instrument/default/Isin": "GB00BH4HKS39"
              }
            },
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                },
                "description": "The dictionary with the instrument identifiers to be updated on the\r\n           transaction and holdings.",
                "nullable": true
              },
              "example": {
                "instrument/default/Figi": "BBG000C6K6G9",
                "instrument/default/Isin": "GB00BH4HKS39"
              }
            },
            "text/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                },
                "description": "The dictionary with the instrument identifiers to be updated on the\r\n           transaction and holdings.",
                "nullable": true
              },
              "example": {
                "instrument/default/Figi": "BBG000C6K6G9",
                "instrument/default/Isin": "GB00BH4HKS39"
              }
            },
            "application/*+json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                },
                "description": "The dictionary with the instrument identifiers to be updated on the\r\n           transaction and holdings.",
                "nullable": true
              },
              "example": {
                "instrument/default/Figi": "BBG000C6K6G9",
                "instrument/default/Isin": "GB00BH4HKS39"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The version of the transaction portfolio that contains the newly updated or inserted transactions",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertPortfolioTransactionsResponse"
                },
                "example": {
                  "version": {
                    "effectiveFrom": "2018-03-05T11:32:15.0000000+00:00",
                    "asAtDate": "2022-03-05T10:09:01.0000000+00:00"
                  },
                  "metadata": {
                    "warnings": [
                      {
                        "type": "TransactionTypesNotFound",
                        "description": "No transaction types could be found for the listed transactions",
                        "identifierType": "TransactionId",
                        "identifiers": [
                          "Transaction-001",
                          "Transaction-123"
                        ]
                      }
                    ]
                  }
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertPortfolioTransactionsResponse"
                },
                "example": {
                  "version": {
                    "effectiveFrom": "2018-03-05T11:32:15.0000000+00:00",
                    "asAtDate": "2022-03-05T10:09:01.0000000+00:00"
                  },
                  "metadata": {
                    "warnings": [
                      {
                        "type": "TransactionTypesNotFound",
                        "description": "No transaction types could be found for the listed transactions",
                        "identifierType": "TransactionId",
                        "identifiers": [
                          "Transaction-001",
                          "Transaction-123"
                        ]
                      }
                    ]
                  }
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertPortfolioTransactionsResponse"
                },
                "example": {
                  "version": {
                    "effectiveFrom": "2018-03-05T11:32:15.0000000+00:00",
                    "asAtDate": "2022-03-05T10:09:01.0000000+00:00"
                  },
                  "metadata": {
                    "warnings": [
                      {
                        "type": "TransactionTypesNotFound",
                        "description": "No transaction types could be found for the listed transactions",
                        "identifierType": "TransactionId",
                        "identifiers": [
                          "Transaction-001",
                          "Transaction-123"
                        ]
                      }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/transactionportfolios/{scope}/{code}/a2b": {
      "get": {
        "tags": [
          "Transaction Portfolios"
        ],
        "summary": "GetA2BData: Get A2B data",
        "description": "Get an A2B report for the given portfolio.",
        "operationId": "GetA2BData",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the portfolio to retrieve the A2B report for.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the portfolio to retrieve the A2B report for.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the portfolio to retrieve the A2B report for. Together with the scope this\r\n            uniquely identifies the portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the portfolio to retrieve the A2B report for. Together with the scope this\r\n            uniquely identifies the portfolio.",
              "nullable": true
            }
          },
          {
            "name": "fromEffectiveAt",
            "in": "query",
            "description": "The lower bound effective datetime or cut label (inclusive) from which to retrieve the data.\r\n            There is no lower bound if this is not specified.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The lower bound effective datetime or cut label (inclusive) from which to retrieve the data.\r\n            There is no lower bound if this is not specified.",
              "format": "dateorcutlabel"
            }
          },
          {
            "name": "toEffectiveAt",
            "in": "query",
            "description": "The upper bound effective datetime or cut label (inclusive) from which to retrieve the data.\r\n            There is no upper bound if this is not specified.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The upper bound effective datetime or cut label (inclusive) from which to retrieve the data.\r\n            There is no upper bound if this is not specified.",
              "format": "dateorcutlabel"
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the portfolio. Defaults to return the latest version\r\n            of each transaction if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to retrieve the portfolio. Defaults to return the latest version\r\n            of each transaction if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "recipeIdScope",
            "in": "query",
            "description": "The scope of the given recipeId",
            "schema": {
              "type": "string",
              "description": "The scope of the given recipeId",
              "nullable": true
            }
          },
          {
            "name": "recipeIdCode",
            "in": "query",
            "description": "The code of the given recipeId",
            "schema": {
              "type": "string",
              "description": "The code of the given recipeId",
              "nullable": true
            }
          },
          {
            "name": "propertyKeys",
            "in": "query",
            "description": "A list of property keys from the \"Instrument\" domain to decorate onto\r\n            the results. These take the format {domain}/{scope}/{code} e.g. \"Instrument/system/Name\".",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
              },
              "description": "A list of property keys from the \"Instrument\" domain to decorate onto\r\n            the results. These take the format {domain}/{scope}/{code} e.g. \"Instrument/system/Name\".",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the result set.\r\n            Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "maxLength": 16384,
              "minLength": 0,
              "pattern": "^[\\s\\S]*$",
              "type": "string",
              "description": "Expression to filter the result set.\r\n            Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested portfolio A2B data",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/VersionedResourceListOfA2BDataRecord"
                },
                "example": {
                  "version": {
                    "effectiveFrom": "2020-10-31T00:00:00.0000000+00:00",
                    "asAtDate": "2021-10-31T00:00:00.0000000+00:00"
                  },
                  "values": [
                    {
                      "portfolioId": {
                        "scope": "Example",
                        "code": "Portfolio"
                      },
                      "holdingType": "B",
                      "instrumentScope": "default",
                      "instrumentUid": "CCY_EUR",
                      "subHoldingKeys": {
                        "transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "CASH"
                          }
                        }
                      },
                      "currency": "EUR",
                      "start": {
                        "holdingCurrency": {
                          "total": 20000,
                          "currency": "EUR",
                          "components": {
                            "cost": 20000
                          }
                        },
                        "portfolioCurrency": {
                          "total": 17400,
                          "currency": "GBP",
                          "components": {
                            "cost": 16720,
                            "currencyGain": 680
                          }
                        }
                      },
                      "flows": {
                        "holdingCurrency": {
                          "total": -10415,
                          "currency": "EUR",
                          "components": {
                            "in": 192548,
                            "out": -202963
                          }
                        },
                        "portfolioCurrency": {
                          "total": -9424.94,
                          "currency": "GBP",
                          "components": {
                            "in": 163473.25,
                            "out": -172898.19
                          }
                        }
                      },
                      "gains": {
                        "portfolioCurrency": {
                          "total": -19.51,
                          "currency": "GBP",
                          "components": {
                            "realCurrencyGain": 830.88,
                            "deltaCurrencyGain": -850.39
                          }
                        }
                      },
                      "end": {
                        "holdingCurrency": {
                          "total": 9585,
                          "currency": "EUR",
                          "components": {
                            "cost": 9585
                          }
                        },
                        "portfolioCurrency": {
                          "total": 7955.55,
                          "currency": "GBP",
                          "components": {
                            "cost": 8125.94,
                            "currencyGain": -170.39
                          }
                        }
                      },
                      "properties": {
                        "instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "EURO"
                          }
                        },
                        "instrument/default/Currency": {
                          "key": "Instrument/default/Currency",
                          "value": {
                            "labelValue": "EUR"
                          }
                        }
                      },
                      "groupId": "Grp1"
                    },
                    {
                      "portfolioId": {
                        "scope": "Example",
                        "code": "Portfolio"
                      },
                      "holdingType": "B",
                      "instrumentScope": "default",
                      "instrumentUid": "CCY_GBP",
                      "subHoldingKeys": {
                        "transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "CASH"
                          }
                        }
                      },
                      "currency": "GBP",
                      "start": {
                        "holdingCurrency": {
                          "total": 50000,
                          "currency": "GBP",
                          "components": {
                            "cost": 50000
                          }
                        },
                        "portfolioCurrency": {
                          "total": 50000,
                          "currency": "GBP",
                          "components": {
                            "cost": 50000
                          }
                        }
                      },
                      "end": {
                        "holdingCurrency": {
                          "total": 50000,
                          "currency": "GBP",
                          "components": {
                            "cost": 50000
                          }
                        },
                        "portfolioCurrency": {
                          "total": 50000,
                          "currency": "GBP",
                          "components": {
                            "cost": 50000
                          }
                        }
                      },
                      "properties": {
                        "instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "BRITISH POUND STERLING"
                          }
                        },
                        "instrument/default/Currency": {
                          "key": "Instrument/default/Currency",
                          "value": {
                            "labelValue": "GBP"
                          }
                        }
                      },
                      "groupId": "Grp2"
                    },
                    {
                      "portfolioId": {
                        "scope": "Example",
                        "code": "Portfolio"
                      },
                      "holdingType": "B",
                      "instrumentScope": "default",
                      "instrumentUid": "CCY_USD",
                      "subHoldingKeys": {
                        "transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "CASH"
                          }
                        }
                      },
                      "currency": "USD",
                      "flows": {
                        "holdingCurrency": {
                          "total": 3525865,
                          "currency": "USD",
                          "components": {
                            "in": 3525865
                          }
                        },
                        "portfolioCurrency": {
                          "total": 2525548.82,
                          "currency": "GBP",
                          "components": {
                            "in": 2525548.82
                          }
                        }
                      },
                      "gains": {
                        "portfolioCurrency": {
                          "total": 13073.98,
                          "currency": "GBP",
                          "components": {
                            "deltaCurrencyGain": 13073.98
                          }
                        }
                      },
                      "end": {
                        "holdingCurrency": {
                          "total": 3525865,
                          "currency": "USD",
                          "components": {
                            "cost": 3525865
                          }
                        },
                        "portfolioCurrency": {
                          "total": 2538622.8,
                          "currency": "GBP",
                          "components": {
                            "cost": 2525548.82,
                            "currencyGain": 13073.98
                          }
                        }
                      },
                      "properties": {
                        "instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "UNITED STATES DOLLAR"
                          }
                        },
                        "instrument/default/Currency": {
                          "key": "Instrument/default/Currency",
                          "value": {
                            "labelValue": "USD"
                          }
                        }
                      },
                      "groupId": "Grp3"
                    },
                    {
                      "portfolioId": {
                        "scope": "Example",
                        "code": "Portfolio"
                      },
                      "holdingType": "B",
                      "instrumentScope": "default",
                      "instrumentUid": "CCY_ZAR",
                      "subHoldingKeys": {
                        "transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "CASH"
                          }
                        }
                      },
                      "currency": "ZAR",
                      "flows": {
                        "holdingCurrency": {
                          "total": 454975.26,
                          "currency": "ZAR",
                          "components": {
                            "out": -1271770.65,
                            "in": 1726745.91
                          }
                        },
                        "portfolioCurrency": {
                          "total": 24155.02,
                          "currency": "GBP",
                          "components": {
                            "out": -66256.57,
                            "in": 90411.59
                          }
                        }
                      },
                      "gains": {
                        "portfolioCurrency": {
                          "total": -951.28,
                          "currency": "GBP",
                          "components": {
                            "realCurrencyGain": -132.33,
                            "deltaCurrencyGain": -818.95
                          }
                        }
                      },
                      "end": {
                        "holdingCurrency": {
                          "total": 454975.26,
                          "currency": "ZAR",
                          "components": {
                            "cost": 454975.26
                          }
                        },
                        "portfolioCurrency": {
                          "total": 23203.74,
                          "currency": "GBP",
                          "components": {
                            "cost": 24022.69,
                            "currencyGain": -818.95
                          }
                        }
                      },
                      "properties": {
                        "instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "SOUTH AFRICAN RAND"
                          }
                        },
                        "instrument/default/Currency": {
                          "key": "Instrument/default/Currency",
                          "value": {
                            "labelValue": "ZAR"
                          }
                        }
                      },
                      "groupId": "Grp4"
                    },
                    {
                      "portfolioId": {
                        "scope": "Example",
                        "code": "Portfolio"
                      },
                      "holdingType": "P",
                      "instrumentScope": "default",
                      "instrumentUid": "LUID_DF10C5QL",
                      "subHoldingKeys": {
                        "transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "Algo1"
                          }
                        }
                      },
                      "currency": "EUR",
                      "start": {
                        "holdingCurrency": {
                          "total": -142482.23,
                          "currency": "EUR",
                          "components": {
                            "cost": -133842.94,
                            "marketGain": -8639.29
                          }
                        },
                        "portfolioCurrency": {
                          "total": -123959.54,
                          "currency": "GBP",
                          "components": {
                            "cost": -111625.01,
                            "marketGain": -7516.18,
                            "currencyGain": -4818.35
                          }
                        }
                      },
                      "flows": {
                        "holdingCurrency": {
                          "total": 41349.22,
                          "currency": "EUR",
                          "components": {
                            "in": 41349.22
                          }
                        },
                        "portfolioCurrency": {
                          "total": 35436.28,
                          "currency": "GBP",
                          "components": {
                            "in": 35436.28
                          }
                        }
                      },
                      "gains": {
                        "holdingCurrency": {
                          "total": -12655.79,
                          "currency": "EUR",
                          "components": {
                            "realMarketGain": -4846.6,
                            "carry": 144.22,
                            "deltaMarketGain": -7953.41
                          }
                        },
                        "portfolioCurrency": {
                          "total": -5917.55,
                          "currency": "GBP",
                          "components": {
                            "realMarketGain": -4153.54,
                            "realCurrencyGain": -839.56,
                            "carry": 123.6,
                            "deltaMarketGain": -6255.76,
                            "deltaCurrencyGain": 5207.71
                          }
                        }
                      },
                      "carry": {
                        "holdingCurrency": {
                          "total": -144.22,
                          "currency": "EUR",
                          "components": {
                            "coverWithCommission": -144.22
                          }
                        },
                        "portfolioCurrency": {
                          "total": -123.6,
                          "currency": "GBP",
                          "components": {
                            "coverWithCommission": -123.6
                          }
                        }
                      },
                      "end": {
                        "holdingCurrency": {
                          "total": -113933.02,
                          "currency": "EUR",
                          "components": {
                            "cost": -97340.32,
                            "marketGain": -16592.7
                          }
                        },
                        "portfolioCurrency": {
                          "total": -94564.41,
                          "currency": "GBP",
                          "components": {
                            "cost": -81181.83,
                            "marketGain": -13771.94,
                            "currencyGain": 389.36
                          }
                        }
                      },
                      "properties": {
                        "instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "Eur CFD #3"
                          }
                        },
                        "instrument/default/ClientInternal": {
                          "key": "Instrument/default/ClientInternal",
                          "value": {
                            "labelValue": "SAMPLE03"
                          }
                        }
                      },
                      "groupId": "Grp5"
                    },
                    {
                      "portfolioId": {
                        "scope": "Example",
                        "code": "Portfolio"
                      },
                      "holdingType": "P",
                      "instrumentScope": "default",
                      "instrumentUid": "LUID_DHBQ1SFH",
                      "subHoldingKeys": {
                        "transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "Algo1"
                          }
                        }
                      },
                      "currency": "ZAR",
                      "start": {
                        "holdingCurrency": {
                          "total": 10748488,
                          "currency": "ZAR",
                          "components": {
                            "cost": 10748488
                          }
                        },
                        "portfolioCurrency": {
                          "total": 569669.86,
                          "currency": "GBP",
                          "components": {
                            "cost": 505178.94,
                            "currencyGain": 64490.92
                          }
                        }
                      },
                      "flows": {
                        "holdingCurrency": {
                          "total": 1271770.65,
                          "currency": "ZAR",
                          "components": {
                            "in": 1271770.65
                          }
                        },
                        "portfolioCurrency": {
                          "total": 66256.57,
                          "currency": "GBP",
                          "components": {
                            "in": 66256.57
                          }
                        }
                      },
                      "gains": {
                        "holdingCurrency": {
                          "total": 774645.35,
                          "currency": "ZAR",
                          "components": {
                            "deltaMarketGain": 774645.35
                          }
                        },
                        "portfolioCurrency": {
                          "total": 16613.67,
                          "currency": "GBP",
                          "components": {
                            "deltaMarketGain": 39506.91,
                            "deltaCurrencyGain": -22893.24
                          }
                        }
                      },
                      "end": {
                        "holdingCurrency": {
                          "total": 12794904,
                          "currency": "ZAR",
                          "components": {
                            "cost": 12020258.65,
                            "marketGain": 774645.35
                          }
                        },
                        "portfolioCurrency": {
                          "total": 652540.1,
                          "currency": "GBP",
                          "components": {
                            "cost": 571435.51,
                            "marketGain": 39506.91,
                            "currencyGain": 41597.68
                          }
                        }
                      },
                      "properties": {
                        "instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "Zar Equity #2"
                          }
                        },
                        "instrument/default/ClientInternal": {
                          "key": "Instrument/default/ClientInternal",
                          "value": {
                            "labelValue": "SAMPLE05"
                          }
                        }
                      },
                      "groupId": "Grp6"
                    },
                    {
                      "portfolioId": {
                        "scope": "Example",
                        "code": "Portfolio"
                      },
                      "holdingType": "P",
                      "instrumentScope": "default",
                      "instrumentUid": "LUID_GMJL7YDH",
                      "subHoldingKeys": {
                        "transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "Algo1"
                          }
                        }
                      },
                      "currency": "EUR",
                      "start": {
                        "holdingCurrency": {
                          "total": -282505.92,
                          "currency": "EUR",
                          "components": {
                            "cost": -331495.14,
                            "marketGain": 48989.22
                          }
                        },
                        "portfolioCurrency": {
                          "total": -245780.15,
                          "currency": "GBP",
                          "components": {
                            "cost": -276798.44,
                            "marketGain": 42620.62,
                            "currencyGain": -11602.33
                          }
                        }
                      },
                      "flows": {
                        "holdingCurrency": {
                          "total": 116514.38,
                          "currency": "EUR",
                          "components": {
                            "in": 116514.38
                          }
                        },
                        "portfolioCurrency": {
                          "total": 99037.22,
                          "currency": "GBP",
                          "components": {
                            "in": 99037.22
                          }
                        }
                      },
                      "gains": {
                        "holdingCurrency": {
                          "total": -70290.08,
                          "currency": "EUR",
                          "components": {
                            "realMarketGain": -6016,
                            "carry": 406.38,
                            "deltaMarketGain": -64680.46
                          }
                        },
                        "portfolioCurrency": {
                          "total": -49362.69,
                          "currency": "GBP",
                          "components": {
                            "realMarketGain": -5113.59,
                            "realCurrencyGain": -1657.48,
                            "carry": 345.42,
                            "deltaMarketGain": -55644.35,
                            "deltaCurrencyGain": 12707.31
                          }
                        }
                      },
                      "carry": {
                        "holdingCurrency": {
                          "total": -406.38,
                          "currency": "EUR",
                          "components": {
                            "coverWithCommission": -406.38
                          }
                        },
                        "portfolioCurrency": {
                          "total": -345.42,
                          "currency": "GBP",
                          "components": {
                            "coverWithCommission": -345.42
                          }
                        }
                      },
                      "end": {
                        "holdingCurrency": {
                          "total": -236688,
                          "currency": "EUR",
                          "components": {
                            "cost": -220996.76,
                            "marketGain": -15691.24
                          }
                        },
                        "portfolioCurrency": {
                          "total": -196451.04,
                          "currency": "GBP",
                          "components": {
                            "cost": -184532.29,
                            "marketGain": -13023.73,
                            "currencyGain": 1104.98
                          }
                        }
                      },
                      "properties": {
                        "instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "Eur CFD #1"
                          }
                        },
                        "instrument/default/ClientInternal": {
                          "key": "Instrument/default/ClientInternal",
                          "value": {
                            "labelValue": "SAMPLE01"
                          }
                        }
                      },
                      "groupId": "Grp7"
                    },
                    {
                      "portfolioId": {
                        "scope": "Example",
                        "code": "Portfolio"
                      },
                      "holdingType": "P",
                      "instrumentScope": "default",
                      "instrumentUid": "LUID_HPHFXRXM",
                      "subHoldingKeys": {
                        "transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "Algo1"
                          }
                        }
                      },
                      "currency": "USD",
                      "start": {
                        "holdingCurrency": {
                          "total": 4696,
                          "currency": "USD",
                          "components": {
                            "cost": 4800,
                            "marketGain": -104
                          }
                        },
                        "portfolioCurrency": {
                          "total": 3334.16,
                          "currency": "GBP",
                          "components": {
                            "cost": 3470.4,
                            "marketGain": -73.84,
                            "currencyGain": -62.4
                          }
                        }
                      },
                      "flows": {
                        "holdingCurrency": {
                          "total": -25,
                          "currency": "USD",
                          "components": {
                            "out": -25
                          }
                        },
                        "portfolioCurrency": {
                          "total": -17.82,
                          "currency": "GBP",
                          "components": {
                            "out": -17.82
                          }
                        }
                      },
                      "gains": {
                        "holdingCurrency": {
                          "total": -21,
                          "currency": "USD",
                          "components": {
                            "deltaMarketGain": -21
                          }
                        },
                        "portfolioCurrency": {
                          "total": 31.84,
                          "currency": "GBP",
                          "components": {
                            "deltaMarketGain": -16.16,
                            "deltaCurrencyGain": 48
                          }
                        }
                      },
                      "carry": {
                        "holdingCurrency": {
                          "total": 25,
                          "currency": "USD",
                          "components": {
                            "dividend": 25
                          }
                        },
                        "portfolioCurrency": {
                          "total": 17.82,
                          "currency": "GBP",
                          "components": {
                            "dividend": 17.82
                          }
                        }
                      },
                      "end": {
                        "holdingCurrency": {
                          "total": 4675,
                          "currency": "USD",
                          "components": {
                            "cost": 4800,
                            "marketGain": -125
                          }
                        },
                        "portfolioCurrency": {
                          "total": 3366,
                          "currency": "GBP",
                          "components": {
                            "cost": 3470.4,
                            "marketGain": -90,
                            "currencyGain": -14.4
                          }
                        }
                      },
                      "properties": {
                        "instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "Usd Equity #2"
                          }
                        },
                        "instrument/default/ClientInternal": {
                          "key": "Instrument/default/ClientInternal",
                          "value": {
                            "labelValue": "SAMPLE10"
                          }
                        }
                      },
                      "groupId": "Grp8"
                    },
                    {
                      "portfolioId": {
                        "scope": "Example",
                        "code": "Portfolio"
                      },
                      "holdingType": "P",
                      "instrumentScope": "default",
                      "instrumentUid": "LUID_LD560F1M",
                      "subHoldingKeys": {
                        "transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "Algo1"
                          }
                        }
                      },
                      "currency": "EUR",
                      "start": {
                        "holdingCurrency": {
                          "total": 171560,
                          "currency": "EUR",
                          "components": {
                            "cost": 163259.7,
                            "marketGain": 8300.3
                          }
                        },
                        "portfolioCurrency": {
                          "total": 149257.2,
                          "currency": "GBP",
                          "components": {
                            "cost": 136321.85,
                            "marketGain": 7221.26,
                            "currencyGain": 5714.09
                          }
                        }
                      },
                      "flows": {
                        "holdingCurrency": {
                          "total": -192548,
                          "currency": "EUR",
                          "components": {
                            "out": -192548
                          }
                        },
                        "portfolioCurrency": {
                          "total": -163473.25,
                          "currency": "GBP",
                          "components": {
                            "out": -163473.25
                          }
                        }
                      },
                      "gains": {
                        "holdingCurrency": {
                          "total": 20988,
                          "currency": "EUR",
                          "components": {
                            "realMarketGain": 29288.3,
                            "deltaMarketGain": -8300.3
                          }
                        },
                        "portfolioCurrency": {
                          "total": 14216.05,
                          "currency": "GBP",
                          "components": {
                            "realMarketGain": 24865.76,
                            "realCurrencyGain": 2285.64,
                            "deltaMarketGain": -7221.26,
                            "deltaCurrencyGain": -5714.09
                          }
                        }
                      },
                      "properties": {
                        "instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "Eur Equity"
                          }
                        },
                        "instrument/default/ClientInternal": {
                          "key": "Instrument/default/ClientInternal",
                          "value": {
                            "labelValue": "SAMPLE09"
                          }
                        }
                      },
                      "groupId": "Grp9"
                    },
                    {
                      "portfolioId": {
                        "scope": "Example",
                        "code": "Portfolio"
                      },
                      "holdingType": "P",
                      "instrumentScope": "default",
                      "instrumentUid": "LUID_QH2V2O68",
                      "subHoldingKeys": {
                        "transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "Algo1"
                          }
                        }
                      },
                      "currency": "ZAR",
                      "start": {
                        "holdingCurrency": {
                          "total": 3940650,
                          "currency": "ZAR",
                          "components": {
                            "cost": 4480295.86,
                            "marketGain": -539645.86
                          }
                        },
                        "portfolioCurrency": {
                          "total": 208854.45,
                          "currency": "GBP",
                          "components": {
                            "cost": 215054.2,
                            "marketGain": -28601.23,
                            "currencyGain": 22401.48
                          }
                        }
                      },
                      "flows": {
                        "holdingCurrency": {
                          "total": -950751.25,
                          "currency": "ZAR",
                          "components": {
                            "out": -950751.25
                          }
                        },
                        "portfolioCurrency": {
                          "total": -49439.07,
                          "currency": "GBP",
                          "components": {
                            "out": -49439.07
                          }
                        }
                      },
                      "gains": {
                        "holdingCurrency": {
                          "total": 258101.25,
                          "currency": "ZAR",
                          "components": {
                            "realMarketGain": -115985.86,
                            "deltaMarketGain": 374087.11
                          }
                        },
                        "portfolioCurrency": {
                          "total": 6232.62,
                          "currency": "GBP",
                          "components": {
                            "realMarketGain": -6031.26,
                            "realCurrencyGain": 4266.95,
                            "deltaMarketGain": 20157.73,
                            "deltaCurrencyGain": -12160.8
                          }
                        }
                      },
                      "end": {
                        "holdingCurrency": {
                          "total": 3248000,
                          "currency": "ZAR",
                          "components": {
                            "cost": 3413558.75,
                            "marketGain": -165558.75
                          }
                        },
                        "portfolioCurrency": {
                          "total": 165648,
                          "currency": "GBP",
                          "components": {
                            "cost": 163850.82,
                            "marketGain": -8443.5,
                            "currencyGain": 10240.68
                          }
                        }
                      },
                      "properties": {
                        "instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "Zar Equity #1"
                          }
                        },
                        "instrument/default/ClientInternal": {
                          "key": "Instrument/default/ClientInternal",
                          "value": {
                            "labelValue": "SAMPLE04"
                          }
                        }
                      },
                      "groupId": "Grp10"
                    },
                    {
                      "portfolioId": {
                        "scope": "Example",
                        "code": "Portfolio"
                      },
                      "holdingType": "P",
                      "instrumentScope": "default",
                      "instrumentUid": "LUID_QTKKFOKC",
                      "subHoldingKeys": {
                        "transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "Algo1"
                          }
                        }
                      },
                      "currency": "EUR",
                      "start": {
                        "holdingCurrency": {
                          "total": -238437.31,
                          "currency": "EUR",
                          "components": {
                            "cost": -234688.46,
                            "marketGain": -3748.85
                          }
                        },
                        "portfolioCurrency": {
                          "total": -207440.46,
                          "currency": "GBP",
                          "components": {
                            "cost": -195495.49,
                            "marketGain": -3261.5,
                            "currencyGain": -8683.47
                          }
                        }
                      },
                      "flows": {
                        "holdingCurrency": {
                          "total": 45099.4,
                          "currency": "EUR",
                          "components": {
                            "in": 45099.4
                          }
                        },
                        "portfolioCurrency": {
                          "total": 38424.69,
                          "currency": "GBP",
                          "components": {
                            "in": 38424.69
                          }
                        }
                      },
                      "gains": {
                        "holdingCurrency": {
                          "total": -66223.84,
                          "currency": "EUR",
                          "components": {
                            "realMarketGain": -10145.8,
                            "carry": 157.3,
                            "deltaMarketGain": -56235.34
                          }
                        },
                        "portfolioCurrency": {
                          "total": -46417.02,
                          "currency": "GBP",
                          "components": {
                            "realMarketGain": -8644.22,
                            "realCurrencyGain": -664.12,
                            "carry": 134.02,
                            "deltaMarketGain": -46525.38,
                            "deltaCurrencyGain": 9282.68
                          }
                        }
                      },
                      "carry": {
                        "holdingCurrency": {
                          "total": -157.3,
                          "currency": "EUR",
                          "components": {
                            "coverWithCommission": -157.3
                          }
                        },
                        "portfolioCurrency": {
                          "total": -134.02,
                          "currency": "GBP",
                          "components": {
                            "coverWithCommission": -134.02
                          }
                        }
                      },
                      "end": {
                        "holdingCurrency": {
                          "total": -259719.05,
                          "currency": "EUR",
                          "components": {
                            "cost": -199734.86,
                            "marketGain": -59984.19
                          }
                        },
                        "portfolioCurrency": {
                          "total": -215566.81,
                          "currency": "GBP",
                          "components": {
                            "cost": -166379.14,
                            "marketGain": -49786.88,
                            "currencyGain": 599.21
                          }
                        }
                      },
                      "properties": {
                        "instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "Eur CFD #2"
                          }
                        },
                        "instrument/default/ClientInternal": {
                          "key": "Instrument/default/ClientInternal",
                          "value": {
                            "labelValue": "SAMPLE02"
                          }
                        }
                      },
                      "groupId": "Grp11"
                    },
                    {
                      "portfolioId": {
                        "scope": "Example",
                        "code": "Portfolio"
                      },
                      "holdingType": "P",
                      "instrumentScope": "default",
                      "instrumentUid": "LUID_T6YOHML7",
                      "subHoldingKeys": {
                        "transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "Algo1"
                          }
                        }
                      },
                      "currency": "USD",
                      "start": {
                        "holdingCurrency": {
                          "total": 3313875,
                          "currency": "USD",
                          "components": {
                            "cost": 3509200,
                            "marketGain": -195325
                          }
                        },
                        "portfolioCurrency": {
                          "total": 2352851.25,
                          "currency": "GBP",
                          "components": {
                            "cost": 2485778.5,
                            "marketGain": -138680.75,
                            "currencyGain": 5753.5
                          }
                        }
                      },
                      "flows": {
                        "holdingCurrency": {
                          "total": -3525840,
                          "currency": "USD",
                          "components": {
                            "out": -3525840
                          }
                        },
                        "portfolioCurrency": {
                          "total": -2525531,
                          "currency": "GBP",
                          "components": {
                            "out": -2525531
                          }
                        }
                      },
                      "gains": {
                        "holdingCurrency": {
                          "total": 211965,
                          "currency": "USD",
                          "components": {
                            "realMarketGain": 16640,
                            "deltaMarketGain": 195325
                          }
                        },
                        "portfolioCurrency": {
                          "total": 172679.75,
                          "currency": "GBP",
                          "components": {
                            "realMarketGain": 11825,
                            "realCurrencyGain": 27927.5,
                            "deltaMarketGain": 138680.75,
                            "deltaCurrencyGain": -5753.5
                          }
                        }
                      },
                      "properties": {
                        "instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "Usd CFD #1"
                          }
                        },
                        "instrument/default/ClientInternal": {
                          "key": "Instrument/default/ClientInternal",
                          "value": {
                            "labelValue": "SAMPLE07"
                          }
                        }
                      },
                      "groupId": "Grp12"
                    },
                    {
                      "portfolioId": {
                        "scope": "Example",
                        "code": "Portfolio"
                      },
                      "holdingType": "P",
                      "instrumentScope": "default",
                      "instrumentUid": "LUID_VYWV6V8Y",
                      "subHoldingKeys": {
                        "transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "Algo1"
                          }
                        }
                      },
                      "currency": "ZAR",
                      "start": {
                        "holdingCurrency": {
                          "total": 9783000,
                          "currency": "ZAR",
                          "components": {
                            "cost": 10824063.04,
                            "marketGain": -1041063.04
                          }
                        },
                        "portfolioCurrency": {
                          "total": 518499,
                          "currency": "GBP",
                          "components": {
                            "cost": 530379.09,
                            "marketGain": -55176.34,
                            "currencyGain": 43296.25
                          }
                        }
                      },
                      "flows": {
                        "holdingCurrency": {
                          "total": -775994.66,
                          "currency": "ZAR",
                          "components": {
                            "out": -775994.66
                          }
                        },
                        "portfolioCurrency": {
                          "total": -40972.52,
                          "currency": "GBP",
                          "components": {
                            "out": -40972.52
                          }
                        }
                      },
                      "gains": {
                        "holdingCurrency": {
                          "total": 952994.66,
                          "currency": "ZAR",
                          "components": {
                            "realMarketGain": -65876.91,
                            "deltaMarketGain": 1018871.57
                          }
                        },
                        "portfolioCurrency": {
                          "total": 30433.52,
                          "currency": "GBP",
                          "components": {
                            "realMarketGain": -3478.3,
                            "realCurrencyGain": 3199.11,
                            "deltaMarketGain": 54044.58,
                            "deltaCurrencyGain": -23331.87
                          }
                        }
                      },
                      "end": {
                        "holdingCurrency": {
                          "total": 9960000,
                          "currency": "ZAR",
                          "components": {
                            "cost": 9982191.47,
                            "marketGain": -22191.47
                          }
                        },
                        "portfolioCurrency": {
                          "total": 507960,
                          "currency": "GBP",
                          "components": {
                            "cost": 489127.38,
                            "marketGain": -1131.76,
                            "currencyGain": 19964.38
                          }
                        }
                      },
                      "properties": {
                        "instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "Zar Equity #3"
                          }
                        },
                        "instrument/default/ClientInternal": {
                          "key": "Instrument/default/ClientInternal",
                          "value": {
                            "labelValue": "SAMPLE06"
                          }
                        }
                      },
                      "groupId": "Grp13"
                    },
                    {
                      "portfolioId": {
                        "scope": "Example",
                        "code": "Portfolio"
                      },
                      "holdingType": "P",
                      "instrumentScope": "default",
                      "instrumentUid": "LUID_X8R9444V",
                      "subHoldingKeys": {
                        "transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "Algo1"
                          }
                        }
                      },
                      "currency": "USD",
                      "start": {
                        "holdingCurrency": {
                          "total": 20652,
                          "currency": "USD",
                          "components": {
                            "cost": 20000,
                            "marketGain": 652
                          }
                        },
                        "portfolioCurrency": {
                          "total": 14662.92,
                          "currency": "GBP",
                          "components": {
                            "cost": 14000,
                            "marketGain": 462.92,
                            "currencyGain": 200
                          }
                        }
                      },
                      "gains": {
                        "holdingCurrency": {
                          "total": -16652,
                          "currency": "USD",
                          "components": {
                            "deltaMarketGain": -16652
                          }
                        },
                        "portfolioCurrency": {
                          "total": -11782.92,
                          "currency": "GBP",
                          "components": {
                            "deltaMarketGain": -11982.92,
                            "deltaCurrencyGain": 200
                          }
                        }
                      },
                      "end": {
                        "holdingCurrency": {
                          "total": 4000,
                          "currency": "USD",
                          "components": {
                            "cost": 20000,
                            "marketGain": -16000
                          }
                        },
                        "portfolioCurrency": {
                          "total": 2880,
                          "currency": "GBP",
                          "components": {
                            "cost": 14000,
                            "marketGain": -11520,
                            "currencyGain": 400
                          }
                        }
                      },
                      "properties": {
                        "instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "Usd Equity #1"
                          }
                        },
                        "instrument/default/ClientInternal": {
                          "key": "Instrument/default/ClientInternal",
                          "value": {
                            "labelValue": "SAMPLE08"
                          }
                        }
                      },
                      "groupId": "Grp14"
                    }
                  ],
                  "links": []
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VersionedResourceListOfA2BDataRecord"
                },
                "example": {
                  "version": {
                    "effectiveFrom": "2020-10-31T00:00:00.0000000+00:00",
                    "asAtDate": "2021-10-31T00:00:00.0000000+00:00"
                  },
                  "values": [
                    {
                      "portfolioId": {
                        "scope": "Example",
                        "code": "Portfolio"
                      },
                      "holdingType": "B",
                      "instrumentScope": "default",
                      "instrumentUid": "CCY_EUR",
                      "subHoldingKeys": {
                        "transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "CASH"
                          }
                        }
                      },
                      "currency": "EUR",
                      "start": {
                        "holdingCurrency": {
                          "total": 20000,
                          "currency": "EUR",
                          "components": {
                            "cost": 20000
                          }
                        },
                        "portfolioCurrency": {
                          "total": 17400,
                          "currency": "GBP",
                          "components": {
                            "cost": 16720,
                            "currencyGain": 680
                          }
                        }
                      },
                      "flows": {
                        "holdingCurrency": {
                          "total": -10415,
                          "currency": "EUR",
                          "components": {
                            "in": 192548,
                            "out": -202963
                          }
                        },
                        "portfolioCurrency": {
                          "total": -9424.94,
                          "currency": "GBP",
                          "components": {
                            "in": 163473.25,
                            "out": -172898.19
                          }
                        }
                      },
                      "gains": {
                        "portfolioCurrency": {
                          "total": -19.51,
                          "currency": "GBP",
                          "components": {
                            "realCurrencyGain": 830.88,
                            "deltaCurrencyGain": -850.39
                          }
                        }
                      },
                      "end": {
                        "holdingCurrency": {
                          "total": 9585,
                          "currency": "EUR",
                          "components": {
                            "cost": 9585
                          }
                        },
                        "portfolioCurrency": {
                          "total": 7955.55,
                          "currency": "GBP",
                          "components": {
                            "cost": 8125.94,
                            "currencyGain": -170.39
                          }
                        }
                      },
                      "properties": {
                        "instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "EURO"
                          }
                        },
                        "instrument/default/Currency": {
                          "key": "Instrument/default/Currency",
                          "value": {
                            "labelValue": "EUR"
                          }
                        }
                      },
                      "groupId": "Grp1"
                    },
                    {
                      "portfolioId": {
                        "scope": "Example",
                        "code": "Portfolio"
                      },
                      "holdingType": "B",
                      "instrumentScope": "default",
                      "instrumentUid": "CCY_GBP",
                      "subHoldingKeys": {
                        "transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "CASH"
                          }
                        }
                      },
                      "currency": "GBP",
                      "start": {
                        "holdingCurrency": {
                          "total": 50000,
                          "currency": "GBP",
                          "components": {
                            "cost": 50000
                          }
                        },
                        "portfolioCurrency": {
                          "total": 50000,
                          "currency": "GBP",
                          "components": {
                            "cost": 50000
                          }
                        }
                      },
                      "end": {
                        "holdingCurrency": {
                          "total": 50000,
                          "currency": "GBP",
                          "components": {
                            "cost": 50000
                          }
                        },
                        "portfolioCurrency": {
                          "total": 50000,
                          "currency": "GBP",
                          "components": {
                            "cost": 50000
                          }
                        }
                      },
                      "properties": {
                        "instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "BRITISH POUND STERLING"
                          }
                        },
                        "instrument/default/Currency": {
                          "key": "Instrument/default/Currency",
                          "value": {
                            "labelValue": "GBP"
                          }
                        }
                      },
                      "groupId": "Grp2"
                    },
                    {
                      "portfolioId": {
                        "scope": "Example",
                        "code": "Portfolio"
                      },
                      "holdingType": "B",
                      "instrumentScope": "default",
                      "instrumentUid": "CCY_USD",
                      "subHoldingKeys": {
                        "transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "CASH"
                          }
                        }
                      },
                      "currency": "USD",
                      "flows": {
                        "holdingCurrency": {
                          "total": 3525865,
                          "currency": "USD",
                          "components": {
                            "in": 3525865
                          }
                        },
                        "portfolioCurrency": {
                          "total": 2525548.82,
                          "currency": "GBP",
                          "components": {
                            "in": 2525548.82
                          }
                        }
                      },
                      "gains": {
                        "portfolioCurrency": {
                          "total": 13073.98,
                          "currency": "GBP",
                          "components": {
                            "deltaCurrencyGain": 13073.98
                          }
                        }
                      },
                      "end": {
                        "holdingCurrency": {
                          "total": 3525865,
                          "currency": "USD",
                          "components": {
                            "cost": 3525865
                          }
                        },
                        "portfolioCurrency": {
                          "total": 2538622.8,
                          "currency": "GBP",
                          "components": {
                            "cost": 2525548.82,
                            "currencyGain": 13073.98
                          }
                        }
                      },
                      "properties": {
                        "instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "UNITED STATES DOLLAR"
                          }
                        },
                        "instrument/default/Currency": {
                          "key": "Instrument/default/Currency",
                          "value": {
                            "labelValue": "USD"
                          }
                        }
                      },
                      "groupId": "Grp3"
                    },
                    {
                      "portfolioId": {
                        "scope": "Example",
                        "code": "Portfolio"
                      },
                      "holdingType": "B",
                      "instrumentScope": "default",
                      "instrumentUid": "CCY_ZAR",
                      "subHoldingKeys": {
                        "transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "CASH"
                          }
                        }
                      },
                      "currency": "ZAR",
                      "flows": {
                        "holdingCurrency": {
                          "total": 454975.26,
                          "currency": "ZAR",
                          "components": {
                            "out": -1271770.65,
                            "in": 1726745.91
                          }
                        },
                        "portfolioCurrency": {
                          "total": 24155.02,
                          "currency": "GBP",
                          "components": {
                            "out": -66256.57,
                            "in": 90411.59
                          }
                        }
                      },
                      "gains": {
                        "portfolioCurrency": {
                          "total": -951.28,
                          "currency": "GBP",
                          "components": {
                            "realCurrencyGain": -132.33,
                            "deltaCurrencyGain": -818.95
                          }
                        }
                      },
                      "end": {
                        "holdingCurrency": {
                          "total": 454975.26,
                          "currency": "ZAR",
                          "components": {
                            "cost": 454975.26
                          }
                        },
                        "portfolioCurrency": {
                          "total": 23203.74,
                          "currency": "GBP",
                          "components": {
                            "cost": 24022.69,
                            "currencyGain": -818.95
                          }
                        }
                      },
                      "properties": {
                        "instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "SOUTH AFRICAN RAND"
                          }
                        },
                        "instrument/default/Currency": {
                          "key": "Instrument/default/Currency",
                          "value": {
                            "labelValue": "ZAR"
                          }
                        }
                      },
                      "groupId": "Grp4"
                    },
                    {
                      "portfolioId": {
                        "scope": "Example",
                        "code": "Portfolio"
                      },
                      "holdingType": "P",
                      "instrumentScope": "default",
                      "instrumentUid": "LUID_DF10C5QL",
                      "subHoldingKeys": {
                        "transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "Algo1"
                          }
                        }
                      },
                      "currency": "EUR",
                      "start": {
                        "holdingCurrency": {
                          "total": -142482.23,
                          "currency": "EUR",
                          "components": {
                            "cost": -133842.94,
                            "marketGain": -8639.29
                          }
                        },
                        "portfolioCurrency": {
                          "total": -123959.54,
                          "currency": "GBP",
                          "components": {
                            "cost": -111625.01,
                            "marketGain": -7516.18,
                            "currencyGain": -4818.35
                          }
                        }
                      },
                      "flows": {
                        "holdingCurrency": {
                          "total": 41349.22,
                          "currency": "EUR",
                          "components": {
                            "in": 41349.22
                          }
                        },
                        "portfolioCurrency": {
                          "total": 35436.28,
                          "currency": "GBP",
                          "components": {
                            "in": 35436.28
                          }
                        }
                      },
                      "gains": {
                        "holdingCurrency": {
                          "total": -12655.79,
                          "currency": "EUR",
                          "components": {
                            "realMarketGain": -4846.6,
                            "carry": 144.22,
                            "deltaMarketGain": -7953.41
                          }
                        },
                        "portfolioCurrency": {
                          "total": -5917.55,
                          "currency": "GBP",
                          "components": {
                            "realMarketGain": -4153.54,
                            "realCurrencyGain": -839.56,
                            "carry": 123.6,
                            "deltaMarketGain": -6255.76,
                            "deltaCurrencyGain": 5207.71
                          }
                        }
                      },
                      "carry": {
                        "holdingCurrency": {
                          "total": -144.22,
                          "currency": "EUR",
                          "components": {
                            "coverWithCommission": -144.22
                          }
                        },
                        "portfolioCurrency": {
                          "total": -123.6,
                          "currency": "GBP",
                          "components": {
                            "coverWithCommission": -123.6
                          }
                        }
                      },
                      "end": {
                        "holdingCurrency": {
                          "total": -113933.02,
                          "currency": "EUR",
                          "components": {
                            "cost": -97340.32,
                            "marketGain": -16592.7
                          }
                        },
                        "portfolioCurrency": {
                          "total": -94564.41,
                          "currency": "GBP",
                          "components": {
                            "cost": -81181.83,
                            "marketGain": -13771.94,
                            "currencyGain": 389.36
                          }
                        }
                      },
                      "properties": {
                        "instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "Eur CFD #3"
                          }
                        },
                        "instrument/default/ClientInternal": {
                          "key": "Instrument/default/ClientInternal",
                          "value": {
                            "labelValue": "SAMPLE03"
                          }
                        }
                      },
                      "groupId": "Grp5"
                    },
                    {
                      "portfolioId": {
                        "scope": "Example",
                        "code": "Portfolio"
                      },
                      "holdingType": "P",
                      "instrumentScope": "default",
                      "instrumentUid": "LUID_DHBQ1SFH",
                      "subHoldingKeys": {
                        "transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "Algo1"
                          }
                        }
                      },
                      "currency": "ZAR",
                      "start": {
                        "holdingCurrency": {
                          "total": 10748488,
                          "currency": "ZAR",
                          "components": {
                            "cost": 10748488
                          }
                        },
                        "portfolioCurrency": {
                          "total": 569669.86,
                          "currency": "GBP",
                          "components": {
                            "cost": 505178.94,
                            "currencyGain": 64490.92
                          }
                        }
                      },
                      "flows": {
                        "holdingCurrency": {
                          "total": 1271770.65,
                          "currency": "ZAR",
                          "components": {
                            "in": 1271770.65
                          }
                        },
                        "portfolioCurrency": {
                          "total": 66256.57,
                          "currency": "GBP",
                          "components": {
                            "in": 66256.57
                          }
                        }
                      },
                      "gains": {
                        "holdingCurrency": {
                          "total": 774645.35,
                          "currency": "ZAR",
                          "components": {
                            "deltaMarketGain": 774645.35
                          }
                        },
                        "portfolioCurrency": {
                          "total": 16613.67,
                          "currency": "GBP",
                          "components": {
                            "deltaMarketGain": 39506.91,
                            "deltaCurrencyGain": -22893.24
                          }
                        }
                      },
                      "end": {
                        "holdingCurrency": {
                          "total": 12794904,
                          "currency": "ZAR",
                          "components": {
                            "cost": 12020258.65,
                            "marketGain": 774645.35
                          }
                        },
                        "portfolioCurrency": {
                          "total": 652540.1,
                          "currency": "GBP",
                          "components": {
                            "cost": 571435.51,
                            "marketGain": 39506.91,
                            "currencyGain": 41597.68
                          }
                        }
                      },
                      "properties": {
                        "instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "Zar Equity #2"
                          }
                        },
                        "instrument/default/ClientInternal": {
                          "key": "Instrument/default/ClientInternal",
                          "value": {
                            "labelValue": "SAMPLE05"
                          }
                        }
                      },
                      "groupId": "Grp6"
                    },
                    {
                      "portfolioId": {
                        "scope": "Example",
                        "code": "Portfolio"
                      },
                      "holdingType": "P",
                      "instrumentScope": "default",
                      "instrumentUid": "LUID_GMJL7YDH",
                      "subHoldingKeys": {
                        "transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "Algo1"
                          }
                        }
                      },
                      "currency": "EUR",
                      "start": {
                        "holdingCurrency": {
                          "total": -282505.92,
                          "currency": "EUR",
                          "components": {
                            "cost": -331495.14,
                            "marketGain": 48989.22
                          }
                        },
                        "portfolioCurrency": {
                          "total": -245780.15,
                          "currency": "GBP",
                          "components": {
                            "cost": -276798.44,
                            "marketGain": 42620.62,
                            "currencyGain": -11602.33
                          }
                        }
                      },
                      "flows": {
                        "holdingCurrency": {
                          "total": 116514.38,
                          "currency": "EUR",
                          "components": {
                            "in": 116514.38
                          }
                        },
                        "portfolioCurrency": {
                          "total": 99037.22,
                          "currency": "GBP",
                          "components": {
                            "in": 99037.22
                          }
                        }
                      },
                      "gains": {
                        "holdingCurrency": {
                          "total": -70290.08,
                          "currency": "EUR",
                          "components": {
                            "realMarketGain": -6016,
                            "carry": 406.38,
                            "deltaMarketGain": -64680.46
                          }
                        },
                        "portfolioCurrency": {
                          "total": -49362.69,
                          "currency": "GBP",
                          "components": {
                            "realMarketGain": -5113.59,
                            "realCurrencyGain": -1657.48,
                            "carry": 345.42,
                            "deltaMarketGain": -55644.35,
                            "deltaCurrencyGain": 12707.31
                          }
                        }
                      },
                      "carry": {
                        "holdingCurrency": {
                          "total": -406.38,
                          "currency": "EUR",
                          "components": {
                            "coverWithCommission": -406.38
                          }
                        },
                        "portfolioCurrency": {
                          "total": -345.42,
                          "currency": "GBP",
                          "components": {
                            "coverWithCommission": -345.42
                          }
                        }
                      },
                      "end": {
                        "holdingCurrency": {
                          "total": -236688,
                          "currency": "EUR",
                          "components": {
                            "cost": -220996.76,
                            "marketGain": -15691.24
                          }
                        },
                        "portfolioCurrency": {
                          "total": -196451.04,
                          "currency": "GBP",
                          "components": {
                            "cost": -184532.29,
                            "marketGain": -13023.73,
                            "currencyGain": 1104.98
                          }
                        }
                      },
                      "properties": {
                        "instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "Eur CFD #1"
                          }
                        },
                        "instrument/default/ClientInternal": {
                          "key": "Instrument/default/ClientInternal",
                          "value": {
                            "labelValue": "SAMPLE01"
                          }
                        }
                      },
                      "groupId": "Grp7"
                    },
                    {
                      "portfolioId": {
                        "scope": "Example",
                        "code": "Portfolio"
                      },
                      "holdingType": "P",
                      "instrumentScope": "default",
                      "instrumentUid": "LUID_HPHFXRXM",
                      "subHoldingKeys": {
                        "transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "Algo1"
                          }
                        }
                      },
                      "currency": "USD",
                      "start": {
                        "holdingCurrency": {
                          "total": 4696,
                          "currency": "USD",
                          "components": {
                            "cost": 4800,
                            "marketGain": -104
                          }
                        },
                        "portfolioCurrency": {
                          "total": 3334.16,
                          "currency": "GBP",
                          "components": {
                            "cost": 3470.4,
                            "marketGain": -73.84,
                            "currencyGain": -62.4
                          }
                        }
                      },
                      "flows": {
                        "holdingCurrency": {
                          "total": -25,
                          "currency": "USD",
                          "components": {
                            "out": -25
                          }
                        },
                        "portfolioCurrency": {
                          "total": -17.82,
                          "currency": "GBP",
                          "components": {
                            "out": -17.82
                          }
                        }
                      },
                      "gains": {
                        "holdingCurrency": {
                          "total": -21,
                          "currency": "USD",
                          "components": {
                            "deltaMarketGain": -21
                          }
                        },
                        "portfolioCurrency": {
                          "total": 31.84,
                          "currency": "GBP",
                          "components": {
                            "deltaMarketGain": -16.16,
                            "deltaCurrencyGain": 48
                          }
                        }
                      },
                      "carry": {
                        "holdingCurrency": {
                          "total": 25,
                          "currency": "USD",
                          "components": {
                            "dividend": 25
                          }
                        },
                        "portfolioCurrency": {
                          "total": 17.82,
                          "currency": "GBP",
                          "components": {
                            "dividend": 17.82
                          }
                        }
                      },
                      "end": {
                        "holdingCurrency": {
                          "total": 4675,
                          "currency": "USD",
                          "components": {
                            "cost": 4800,
                            "marketGain": -125
                          }
                        },
                        "portfolioCurrency": {
                          "total": 3366,
                          "currency": "GBP",
                          "components": {
                            "cost": 3470.4,
                            "marketGain": -90,
                            "currencyGain": -14.4
                          }
                        }
                      },
                      "properties": {
                        "instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "Usd Equity #2"
                          }
                        },
                        "instrument/default/ClientInternal": {
                          "key": "Instrument/default/ClientInternal",
                          "value": {
                            "labelValue": "SAMPLE10"
                          }
                        }
                      },
                      "groupId": "Grp8"
                    },
                    {
                      "portfolioId": {
                        "scope": "Example",
                        "code": "Portfolio"
                      },
                      "holdingType": "P",
                      "instrumentScope": "default",
                      "instrumentUid": "LUID_LD560F1M",
                      "subHoldingKeys": {
                        "transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "Algo1"
                          }
                        }
                      },
                      "currency": "EUR",
                      "start": {
                        "holdingCurrency": {
                          "total": 171560,
                          "currency": "EUR",
                          "components": {
                            "cost": 163259.7,
                            "marketGain": 8300.3
                          }
                        },
                        "portfolioCurrency": {
                          "total": 149257.2,
                          "currency": "GBP",
                          "components": {
                            "cost": 136321.85,
                            "marketGain": 7221.26,
                            "currencyGain": 5714.09
                          }
                        }
                      },
                      "flows": {
                        "holdingCurrency": {
                          "total": -192548,
                          "currency": "EUR",
                          "components": {
                            "out": -192548
                          }
                        },
                        "portfolioCurrency": {
                          "total": -163473.25,
                          "currency": "GBP",
                          "components": {
                            "out": -163473.25
                          }
                        }
                      },
                      "gains": {
                        "holdingCurrency": {
                          "total": 20988,
                          "currency": "EUR",
                          "components": {
                            "realMarketGain": 29288.3,
                            "deltaMarketGain": -8300.3
                          }
                        },
                        "portfolioCurrency": {
                          "total": 14216.05,
                          "currency": "GBP",
                          "components": {
                            "realMarketGain": 24865.76,
                            "realCurrencyGain": 2285.64,
                            "deltaMarketGain": -7221.26,
                            "deltaCurrencyGain": -5714.09
                          }
                        }
                      },
                      "properties": {
                        "instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "Eur Equity"
                          }
                        },
                        "instrument/default/ClientInternal": {
                          "key": "Instrument/default/ClientInternal",
                          "value": {
                            "labelValue": "SAMPLE09"
                          }
                        }
                      },
                      "groupId": "Grp9"
                    },
                    {
                      "portfolioId": {
                        "scope": "Example",
                        "code": "Portfolio"
                      },
                      "holdingType": "P",
                      "instrumentScope": "default",
                      "instrumentUid": "LUID_QH2V2O68",
                      "subHoldingKeys": {
                        "transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "Algo1"
                          }
                        }
                      },
                      "currency": "ZAR",
                      "start": {
                        "holdingCurrency": {
                          "total": 3940650,
                          "currency": "ZAR",
                          "components": {
                            "cost": 4480295.86,
                            "marketGain": -539645.86
                          }
                        },
                        "portfolioCurrency": {
                          "total": 208854.45,
                          "currency": "GBP",
                          "components": {
                            "cost": 215054.2,
                            "marketGain": -28601.23,
                            "currencyGain": 22401.48
                          }
                        }
                      },
                      "flows": {
                        "holdingCurrency": {
                          "total": -950751.25,
                          "currency": "ZAR",
                          "components": {
                            "out": -950751.25
                          }
                        },
                        "portfolioCurrency": {
                          "total": -49439.07,
                          "currency": "GBP",
                          "components": {
                            "out": -49439.07
                          }
                        }
                      },
                      "gains": {
                        "holdingCurrency": {
                          "total": 258101.25,
                          "currency": "ZAR",
                          "components": {
                            "realMarketGain": -115985.86,
                            "deltaMarketGain": 374087.11
                          }
                        },
                        "portfolioCurrency": {
                          "total": 6232.62,
                          "currency": "GBP",
                          "components": {
                            "realMarketGain": -6031.26,
                            "realCurrencyGain": 4266.95,
                            "deltaMarketGain": 20157.73,
                            "deltaCurrencyGain": -12160.8
                          }
                        }
                      },
                      "end": {
                        "holdingCurrency": {
                          "total": 3248000,
                          "currency": "ZAR",
                          "components": {
                            "cost": 3413558.75,
                            "marketGain": -165558.75
                          }
                        },
                        "portfolioCurrency": {
                          "total": 165648,
                          "currency": "GBP",
                          "components": {
                            "cost": 163850.82,
                            "marketGain": -8443.5,
                            "currencyGain": 10240.68
                          }
                        }
                      },
                      "properties": {
                        "instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "Zar Equity #1"
                          }
                        },
                        "instrument/default/ClientInternal": {
                          "key": "Instrument/default/ClientInternal",
                          "value": {
                            "labelValue": "SAMPLE04"
                          }
                        }
                      },
                      "groupId": "Grp10"
                    },
                    {
                      "portfolioId": {
                        "scope": "Example",
                        "code": "Portfolio"
                      },
                      "holdingType": "P",
                      "instrumentScope": "default",
                      "instrumentUid": "LUID_QTKKFOKC",
                      "subHoldingKeys": {
                        "transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "Algo1"
                          }
                        }
                      },
                      "currency": "EUR",
                      "start": {
                        "holdingCurrency": {
                          "total": -238437.31,
                          "currency": "EUR",
                          "components": {
                            "cost": -234688.46,
                            "marketGain": -3748.85
                          }
                        },
                        "portfolioCurrency": {
                          "total": -207440.46,
                          "currency": "GBP",
                          "components": {
                            "cost": -195495.49,
                            "marketGain": -3261.5,
                            "currencyGain": -8683.47
                          }
                        }
                      },
                      "flows": {
                        "holdingCurrency": {
                          "total": 45099.4,
                          "currency": "EUR",
                          "components": {
                            "in": 45099.4
                          }
                        },
                        "portfolioCurrency": {
                          "total": 38424.69,
                          "currency": "GBP",
                          "components": {
                            "in": 38424.69
                          }
                        }
                      },
                      "gains": {
                        "holdingCurrency": {
                          "total": -66223.84,
                          "currency": "EUR",
                          "components": {
                            "realMarketGain": -10145.8,
                            "carry": 157.3,
                            "deltaMarketGain": -56235.34
                          }
                        },
                        "portfolioCurrency": {
                          "total": -46417.02,
                          "currency": "GBP",
                          "components": {
                            "realMarketGain": -8644.22,
                            "realCurrencyGain": -664.12,
                            "carry": 134.02,
                            "deltaMarketGain": -46525.38,
                            "deltaCurrencyGain": 9282.68
                          }
                        }
                      },
                      "carry": {
                        "holdingCurrency": {
                          "total": -157.3,
                          "currency": "EUR",
                          "components": {
                            "coverWithCommission": -157.3
                          }
                        },
                        "portfolioCurrency": {
                          "total": -134.02,
                          "currency": "GBP",
                          "components": {
                            "coverWithCommission": -134.02
                          }
                        }
                      },
                      "end": {
                        "holdingCurrency": {
                          "total": -259719.05,
                          "currency": "EUR",
                          "components": {
                            "cost": -199734.86,
                            "marketGain": -59984.19
                          }
                        },
                        "portfolioCurrency": {
                          "total": -215566.81,
                          "currency": "GBP",
                          "components": {
                            "cost": -166379.14,
                            "marketGain": -49786.88,
                            "currencyGain": 599.21
                          }
                        }
                      },
                      "properties": {
                        "instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "Eur CFD #2"
                          }
                        },
                        "instrument/default/ClientInternal": {
                          "key": "Instrument/default/ClientInternal",
                          "value": {
                            "labelValue": "SAMPLE02"
                          }
                        }
                      },
                      "groupId": "Grp11"
                    },
                    {
                      "portfolioId": {
                        "scope": "Example",
                        "code": "Portfolio"
                      },
                      "holdingType": "P",
                      "instrumentScope": "default",
                      "instrumentUid": "LUID_T6YOHML7",
                      "subHoldingKeys": {
                        "transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "Algo1"
                          }
                        }
                      },
                      "currency": "USD",
                      "start": {
                        "holdingCurrency": {
                          "total": 3313875,
                          "currency": "USD",
                          "components": {
                            "cost": 3509200,
                            "marketGain": -195325
                          }
                        },
                        "portfolioCurrency": {
                          "total": 2352851.25,
                          "currency": "GBP",
                          "components": {
                            "cost": 2485778.5,
                            "marketGain": -138680.75,
                            "currencyGain": 5753.5
                          }
                        }
                      },
                      "flows": {
                        "holdingCurrency": {
                          "total": -3525840,
                          "currency": "USD",
                          "components": {
                            "out": -3525840
                          }
                        },
                        "portfolioCurrency": {
                          "total": -2525531,
                          "currency": "GBP",
                          "components": {
                            "out": -2525531
                          }
                        }
                      },
                      "gains": {
                        "holdingCurrency": {
                          "total": 211965,
                          "currency": "USD",
                          "components": {
                            "realMarketGain": 16640,
                            "deltaMarketGain": 195325
                          }
                        },
                        "portfolioCurrency": {
                          "total": 172679.75,
                          "currency": "GBP",
                          "components": {
                            "realMarketGain": 11825,
                            "realCurrencyGain": 27927.5,
                            "deltaMarketGain": 138680.75,
                            "deltaCurrencyGain": -5753.5
                          }
                        }
                      },
                      "properties": {
                        "instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "Usd CFD #1"
                          }
                        },
                        "instrument/default/ClientInternal": {
                          "key": "Instrument/default/ClientInternal",
                          "value": {
                            "labelValue": "SAMPLE07"
                          }
                        }
                      },
                      "groupId": "Grp12"
                    },
                    {
                      "portfolioId": {
                        "scope": "Example",
                        "code": "Portfolio"
                      },
                      "holdingType": "P",
                      "instrumentScope": "default",
                      "instrumentUid": "LUID_VYWV6V8Y",
                      "subHoldingKeys": {
                        "transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "Algo1"
                          }
                        }
                      },
                      "currency": "ZAR",
                      "start": {
                        "holdingCurrency": {
                          "total": 9783000,
                          "currency": "ZAR",
                          "components": {
                            "cost": 10824063.04,
                            "marketGain": -1041063.04
                          }
                        },
                        "portfolioCurrency": {
                          "total": 518499,
                          "currency": "GBP",
                          "components": {
                            "cost": 530379.09,
                            "marketGain": -55176.34,
                            "currencyGain": 43296.25
                          }
                        }
                      },
                      "flows": {
                        "holdingCurrency": {
                          "total": -775994.66,
                          "currency": "ZAR",
                          "components": {
                            "out": -775994.66
                          }
                        },
                        "portfolioCurrency": {
                          "total": -40972.52,
                          "currency": "GBP",
                          "components": {
                            "out": -40972.52
                          }
                        }
                      },
                      "gains": {
                        "holdingCurrency": {
                          "total": 952994.66,
                          "currency": "ZAR",
                          "components": {
                            "realMarketGain": -65876.91,
                            "deltaMarketGain": 1018871.57
                          }
                        },
                        "portfolioCurrency": {
                          "total": 30433.52,
                          "currency": "GBP",
                          "components": {
                            "realMarketGain": -3478.3,
                            "realCurrencyGain": 3199.11,
                            "deltaMarketGain": 54044.58,
                            "deltaCurrencyGain": -23331.87
                          }
                        }
                      },
                      "end": {
                        "holdingCurrency": {
                          "total": 9960000,
                          "currency": "ZAR",
                          "components": {
                            "cost": 9982191.47,
                            "marketGain": -22191.47
                          }
                        },
                        "portfolioCurrency": {
                          "total": 507960,
                          "currency": "GBP",
                          "components": {
                            "cost": 489127.38,
                            "marketGain": -1131.76,
                            "currencyGain": 19964.38
                          }
                        }
                      },
                      "properties": {
                        "instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "Zar Equity #3"
                          }
                        },
                        "instrument/default/ClientInternal": {
                          "key": "Instrument/default/ClientInternal",
                          "value": {
                            "labelValue": "SAMPLE06"
                          }
                        }
                      },
                      "groupId": "Grp13"
                    },
                    {
                      "portfolioId": {
                        "scope": "Example",
                        "code": "Portfolio"
                      },
                      "holdingType": "P",
                      "instrumentScope": "default",
                      "instrumentUid": "LUID_X8R9444V",
                      "subHoldingKeys": {
                        "transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "Algo1"
                          }
                        }
                      },
                      "currency": "USD",
                      "start": {
                        "holdingCurrency": {
                          "total": 20652,
                          "currency": "USD",
                          "components": {
                            "cost": 20000,
                            "marketGain": 652
                          }
                        },
                        "portfolioCurrency": {
                          "total": 14662.92,
                          "currency": "GBP",
                          "components": {
                            "cost": 14000,
                            "marketGain": 462.92,
                            "currencyGain": 200
                          }
                        }
                      },
                      "gains": {
                        "holdingCurrency": {
                          "total": -16652,
                          "currency": "USD",
                          "components": {
                            "deltaMarketGain": -16652
                          }
                        },
                        "portfolioCurrency": {
                          "total": -11782.92,
                          "currency": "GBP",
                          "components": {
                            "deltaMarketGain": -11982.92,
                            "deltaCurrencyGain": 200
                          }
                        }
                      },
                      "end": {
                        "holdingCurrency": {
                          "total": 4000,
                          "currency": "USD",
                          "components": {
                            "cost": 20000,
                            "marketGain": -16000
                          }
                        },
                        "portfolioCurrency": {
                          "total": 2880,
                          "currency": "GBP",
                          "components": {
                            "cost": 14000,
                            "marketGain": -11520,
                            "currencyGain": 400
                          }
                        }
                      },
                      "properties": {
                        "instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "Usd Equity #1"
                          }
                        },
                        "instrument/default/ClientInternal": {
                          "key": "Instrument/default/ClientInternal",
                          "value": {
                            "labelValue": "SAMPLE08"
                          }
                        }
                      },
                      "groupId": "Grp14"
                    }
                  ],
                  "links": []
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/VersionedResourceListOfA2BDataRecord"
                },
                "example": {
                  "version": {
                    "effectiveFrom": "2020-10-31T00:00:00.0000000+00:00",
                    "asAtDate": "2021-10-31T00:00:00.0000000+00:00"
                  },
                  "values": [
                    {
                      "portfolioId": {
                        "scope": "Example",
                        "code": "Portfolio"
                      },
                      "holdingType": "B",
                      "instrumentScope": "default",
                      "instrumentUid": "CCY_EUR",
                      "subHoldingKeys": {
                        "transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "CASH"
                          }
                        }
                      },
                      "currency": "EUR",
                      "start": {
                        "holdingCurrency": {
                          "total": 20000,
                          "currency": "EUR",
                          "components": {
                            "cost": 20000
                          }
                        },
                        "portfolioCurrency": {
                          "total": 17400,
                          "currency": "GBP",
                          "components": {
                            "cost": 16720,
                            "currencyGain": 680
                          }
                        }
                      },
                      "flows": {
                        "holdingCurrency": {
                          "total": -10415,
                          "currency": "EUR",
                          "components": {
                            "in": 192548,
                            "out": -202963
                          }
                        },
                        "portfolioCurrency": {
                          "total": -9424.94,
                          "currency": "GBP",
                          "components": {
                            "in": 163473.25,
                            "out": -172898.19
                          }
                        }
                      },
                      "gains": {
                        "portfolioCurrency": {
                          "total": -19.51,
                          "currency": "GBP",
                          "components": {
                            "realCurrencyGain": 830.88,
                            "deltaCurrencyGain": -850.39
                          }
                        }
                      },
                      "end": {
                        "holdingCurrency": {
                          "total": 9585,
                          "currency": "EUR",
                          "components": {
                            "cost": 9585
                          }
                        },
                        "portfolioCurrency": {
                          "total": 7955.55,
                          "currency": "GBP",
                          "components": {
                            "cost": 8125.94,
                            "currencyGain": -170.39
                          }
                        }
                      },
                      "properties": {
                        "instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "EURO"
                          }
                        },
                        "instrument/default/Currency": {
                          "key": "Instrument/default/Currency",
                          "value": {
                            "labelValue": "EUR"
                          }
                        }
                      },
                      "groupId": "Grp1"
                    },
                    {
                      "portfolioId": {
                        "scope": "Example",
                        "code": "Portfolio"
                      },
                      "holdingType": "B",
                      "instrumentScope": "default",
                      "instrumentUid": "CCY_GBP",
                      "subHoldingKeys": {
                        "transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "CASH"
                          }
                        }
                      },
                      "currency": "GBP",
                      "start": {
                        "holdingCurrency": {
                          "total": 50000,
                          "currency": "GBP",
                          "components": {
                            "cost": 50000
                          }
                        },
                        "portfolioCurrency": {
                          "total": 50000,
                          "currency": "GBP",
                          "components": {
                            "cost": 50000
                          }
                        }
                      },
                      "end": {
                        "holdingCurrency": {
                          "total": 50000,
                          "currency": "GBP",
                          "components": {
                            "cost": 50000
                          }
                        },
                        "portfolioCurrency": {
                          "total": 50000,
                          "currency": "GBP",
                          "components": {
                            "cost": 50000
                          }
                        }
                      },
                      "properties": {
                        "instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "BRITISH POUND STERLING"
                          }
                        },
                        "instrument/default/Currency": {
                          "key": "Instrument/default/Currency",
                          "value": {
                            "labelValue": "GBP"
                          }
                        }
                      },
                      "groupId": "Grp2"
                    },
                    {
                      "portfolioId": {
                        "scope": "Example",
                        "code": "Portfolio"
                      },
                      "holdingType": "B",
                      "instrumentScope": "default",
                      "instrumentUid": "CCY_USD",
                      "subHoldingKeys": {
                        "transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "CASH"
                          }
                        }
                      },
                      "currency": "USD",
                      "flows": {
                        "holdingCurrency": {
                          "total": 3525865,
                          "currency": "USD",
                          "components": {
                            "in": 3525865
                          }
                        },
                        "portfolioCurrency": {
                          "total": 2525548.82,
                          "currency": "GBP",
                          "components": {
                            "in": 2525548.82
                          }
                        }
                      },
                      "gains": {
                        "portfolioCurrency": {
                          "total": 13073.98,
                          "currency": "GBP",
                          "components": {
                            "deltaCurrencyGain": 13073.98
                          }
                        }
                      },
                      "end": {
                        "holdingCurrency": {
                          "total": 3525865,
                          "currency": "USD",
                          "components": {
                            "cost": 3525865
                          }
                        },
                        "portfolioCurrency": {
                          "total": 2538622.8,
                          "currency": "GBP",
                          "components": {
                            "cost": 2525548.82,
                            "currencyGain": 13073.98
                          }
                        }
                      },
                      "properties": {
                        "instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "UNITED STATES DOLLAR"
                          }
                        },
                        "instrument/default/Currency": {
                          "key": "Instrument/default/Currency",
                          "value": {
                            "labelValue": "USD"
                          }
                        }
                      },
                      "groupId": "Grp3"
                    },
                    {
                      "portfolioId": {
                        "scope": "Example",
                        "code": "Portfolio"
                      },
                      "holdingType": "B",
                      "instrumentScope": "default",
                      "instrumentUid": "CCY_ZAR",
                      "subHoldingKeys": {
                        "transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "CASH"
                          }
                        }
                      },
                      "currency": "ZAR",
                      "flows": {
                        "holdingCurrency": {
                          "total": 454975.26,
                          "currency": "ZAR",
                          "components": {
                            "out": -1271770.65,
                            "in": 1726745.91
                          }
                        },
                        "portfolioCurrency": {
                          "total": 24155.02,
                          "currency": "GBP",
                          "components": {
                            "out": -66256.57,
                            "in": 90411.59
                          }
                        }
                      },
                      "gains": {
                        "portfolioCurrency": {
                          "total": -951.28,
                          "currency": "GBP",
                          "components": {
                            "realCurrencyGain": -132.33,
                            "deltaCurrencyGain": -818.95
                          }
                        }
                      },
                      "end": {
                        "holdingCurrency": {
                          "total": 454975.26,
                          "currency": "ZAR",
                          "components": {
                            "cost": 454975.26
                          }
                        },
                        "portfolioCurrency": {
                          "total": 23203.74,
                          "currency": "GBP",
                          "components": {
                            "cost": 24022.69,
                            "currencyGain": -818.95
                          }
                        }
                      },
                      "properties": {
                        "instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "SOUTH AFRICAN RAND"
                          }
                        },
                        "instrument/default/Currency": {
                          "key": "Instrument/default/Currency",
                          "value": {
                            "labelValue": "ZAR"
                          }
                        }
                      },
                      "groupId": "Grp4"
                    },
                    {
                      "portfolioId": {
                        "scope": "Example",
                        "code": "Portfolio"
                      },
                      "holdingType": "P",
                      "instrumentScope": "default",
                      "instrumentUid": "LUID_DF10C5QL",
                      "subHoldingKeys": {
                        "transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "Algo1"
                          }
                        }
                      },
                      "currency": "EUR",
                      "start": {
                        "holdingCurrency": {
                          "total": -142482.23,
                          "currency": "EUR",
                          "components": {
                            "cost": -133842.94,
                            "marketGain": -8639.29
                          }
                        },
                        "portfolioCurrency": {
                          "total": -123959.54,
                          "currency": "GBP",
                          "components": {
                            "cost": -111625.01,
                            "marketGain": -7516.18,
                            "currencyGain": -4818.35
                          }
                        }
                      },
                      "flows": {
                        "holdingCurrency": {
                          "total": 41349.22,
                          "currency": "EUR",
                          "components": {
                            "in": 41349.22
                          }
                        },
                        "portfolioCurrency": {
                          "total": 35436.28,
                          "currency": "GBP",
                          "components": {
                            "in": 35436.28
                          }
                        }
                      },
                      "gains": {
                        "holdingCurrency": {
                          "total": -12655.79,
                          "currency": "EUR",
                          "components": {
                            "realMarketGain": -4846.6,
                            "carry": 144.22,
                            "deltaMarketGain": -7953.41
                          }
                        },
                        "portfolioCurrency": {
                          "total": -5917.55,
                          "currency": "GBP",
                          "components": {
                            "realMarketGain": -4153.54,
                            "realCurrencyGain": -839.56,
                            "carry": 123.6,
                            "deltaMarketGain": -6255.76,
                            "deltaCurrencyGain": 5207.71
                          }
                        }
                      },
                      "carry": {
                        "holdingCurrency": {
                          "total": -144.22,
                          "currency": "EUR",
                          "components": {
                            "coverWithCommission": -144.22
                          }
                        },
                        "portfolioCurrency": {
                          "total": -123.6,
                          "currency": "GBP",
                          "components": {
                            "coverWithCommission": -123.6
                          }
                        }
                      },
                      "end": {
                        "holdingCurrency": {
                          "total": -113933.02,
                          "currency": "EUR",
                          "components": {
                            "cost": -97340.32,
                            "marketGain": -16592.7
                          }
                        },
                        "portfolioCurrency": {
                          "total": -94564.41,
                          "currency": "GBP",
                          "components": {
                            "cost": -81181.83,
                            "marketGain": -13771.94,
                            "currencyGain": 389.36
                          }
                        }
                      },
                      "properties": {
                        "instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "Eur CFD #3"
                          }
                        },
                        "instrument/default/ClientInternal": {
                          "key": "Instrument/default/ClientInternal",
                          "value": {
                            "labelValue": "SAMPLE03"
                          }
                        }
                      },
                      "groupId": "Grp5"
                    },
                    {
                      "portfolioId": {
                        "scope": "Example",
                        "code": "Portfolio"
                      },
                      "holdingType": "P",
                      "instrumentScope": "default",
                      "instrumentUid": "LUID_DHBQ1SFH",
                      "subHoldingKeys": {
                        "transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "Algo1"
                          }
                        }
                      },
                      "currency": "ZAR",
                      "start": {
                        "holdingCurrency": {
                          "total": 10748488,
                          "currency": "ZAR",
                          "components": {
                            "cost": 10748488
                          }
                        },
                        "portfolioCurrency": {
                          "total": 569669.86,
                          "currency": "GBP",
                          "components": {
                            "cost": 505178.94,
                            "currencyGain": 64490.92
                          }
                        }
                      },
                      "flows": {
                        "holdingCurrency": {
                          "total": 1271770.65,
                          "currency": "ZAR",
                          "components": {
                            "in": 1271770.65
                          }
                        },
                        "portfolioCurrency": {
                          "total": 66256.57,
                          "currency": "GBP",
                          "components": {
                            "in": 66256.57
                          }
                        }
                      },
                      "gains": {
                        "holdingCurrency": {
                          "total": 774645.35,
                          "currency": "ZAR",
                          "components": {
                            "deltaMarketGain": 774645.35
                          }
                        },
                        "portfolioCurrency": {
                          "total": 16613.67,
                          "currency": "GBP",
                          "components": {
                            "deltaMarketGain": 39506.91,
                            "deltaCurrencyGain": -22893.24
                          }
                        }
                      },
                      "end": {
                        "holdingCurrency": {
                          "total": 12794904,
                          "currency": "ZAR",
                          "components": {
                            "cost": 12020258.65,
                            "marketGain": 774645.35
                          }
                        },
                        "portfolioCurrency": {
                          "total": 652540.1,
                          "currency": "GBP",
                          "components": {
                            "cost": 571435.51,
                            "marketGain": 39506.91,
                            "currencyGain": 41597.68
                          }
                        }
                      },
                      "properties": {
                        "instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "Zar Equity #2"
                          }
                        },
                        "instrument/default/ClientInternal": {
                          "key": "Instrument/default/ClientInternal",
                          "value": {
                            "labelValue": "SAMPLE05"
                          }
                        }
                      },
                      "groupId": "Grp6"
                    },
                    {
                      "portfolioId": {
                        "scope": "Example",
                        "code": "Portfolio"
                      },
                      "holdingType": "P",
                      "instrumentScope": "default",
                      "instrumentUid": "LUID_GMJL7YDH",
                      "subHoldingKeys": {
                        "transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "Algo1"
                          }
                        }
                      },
                      "currency": "EUR",
                      "start": {
                        "holdingCurrency": {
                          "total": -282505.92,
                          "currency": "EUR",
                          "components": {
                            "cost": -331495.14,
                            "marketGain": 48989.22
                          }
                        },
                        "portfolioCurrency": {
                          "total": -245780.15,
                          "currency": "GBP",
                          "components": {
                            "cost": -276798.44,
                            "marketGain": 42620.62,
                            "currencyGain": -11602.33
                          }
                        }
                      },
                      "flows": {
                        "holdingCurrency": {
                          "total": 116514.38,
                          "currency": "EUR",
                          "components": {
                            "in": 116514.38
                          }
                        },
                        "portfolioCurrency": {
                          "total": 99037.22,
                          "currency": "GBP",
                          "components": {
                            "in": 99037.22
                          }
                        }
                      },
                      "gains": {
                        "holdingCurrency": {
                          "total": -70290.08,
                          "currency": "EUR",
                          "components": {
                            "realMarketGain": -6016,
                            "carry": 406.38,
                            "deltaMarketGain": -64680.46
                          }
                        },
                        "portfolioCurrency": {
                          "total": -49362.69,
                          "currency": "GBP",
                          "components": {
                            "realMarketGain": -5113.59,
                            "realCurrencyGain": -1657.48,
                            "carry": 345.42,
                            "deltaMarketGain": -55644.35,
                            "deltaCurrencyGain": 12707.31
                          }
                        }
                      },
                      "carry": {
                        "holdingCurrency": {
                          "total": -406.38,
                          "currency": "EUR",
                          "components": {
                            "coverWithCommission": -406.38
                          }
                        },
                        "portfolioCurrency": {
                          "total": -345.42,
                          "currency": "GBP",
                          "components": {
                            "coverWithCommission": -345.42
                          }
                        }
                      },
                      "end": {
                        "holdingCurrency": {
                          "total": -236688,
                          "currency": "EUR",
                          "components": {
                            "cost": -220996.76,
                            "marketGain": -15691.24
                          }
                        },
                        "portfolioCurrency": {
                          "total": -196451.04,
                          "currency": "GBP",
                          "components": {
                            "cost": -184532.29,
                            "marketGain": -13023.73,
                            "currencyGain": 1104.98
                          }
                        }
                      },
                      "properties": {
                        "instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "Eur CFD #1"
                          }
                        },
                        "instrument/default/ClientInternal": {
                          "key": "Instrument/default/ClientInternal",
                          "value": {
                            "labelValue": "SAMPLE01"
                          }
                        }
                      },
                      "groupId": "Grp7"
                    },
                    {
                      "portfolioId": {
                        "scope": "Example",
                        "code": "Portfolio"
                      },
                      "holdingType": "P",
                      "instrumentScope": "default",
                      "instrumentUid": "LUID_HPHFXRXM",
                      "subHoldingKeys": {
                        "transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "Algo1"
                          }
                        }
                      },
                      "currency": "USD",
                      "start": {
                        "holdingCurrency": {
                          "total": 4696,
                          "currency": "USD",
                          "components": {
                            "cost": 4800,
                            "marketGain": -104
                          }
                        },
                        "portfolioCurrency": {
                          "total": 3334.16,
                          "currency": "GBP",
                          "components": {
                            "cost": 3470.4,
                            "marketGain": -73.84,
                            "currencyGain": -62.4
                          }
                        }
                      },
                      "flows": {
                        "holdingCurrency": {
                          "total": -25,
                          "currency": "USD",
                          "components": {
                            "out": -25
                          }
                        },
                        "portfolioCurrency": {
                          "total": -17.82,
                          "currency": "GBP",
                          "components": {
                            "out": -17.82
                          }
                        }
                      },
                      "gains": {
                        "holdingCurrency": {
                          "total": -21,
                          "currency": "USD",
                          "components": {
                            "deltaMarketGain": -21
                          }
                        },
                        "portfolioCurrency": {
                          "total": 31.84,
                          "currency": "GBP",
                          "components": {
                            "deltaMarketGain": -16.16,
                            "deltaCurrencyGain": 48
                          }
                        }
                      },
                      "carry": {
                        "holdingCurrency": {
                          "total": 25,
                          "currency": "USD",
                          "components": {
                            "dividend": 25
                          }
                        },
                        "portfolioCurrency": {
                          "total": 17.82,
                          "currency": "GBP",
                          "components": {
                            "dividend": 17.82
                          }
                        }
                      },
                      "end": {
                        "holdingCurrency": {
                          "total": 4675,
                          "currency": "USD",
                          "components": {
                            "cost": 4800,
                            "marketGain": -125
                          }
                        },
                        "portfolioCurrency": {
                          "total": 3366,
                          "currency": "GBP",
                          "components": {
                            "cost": 3470.4,
                            "marketGain": -90,
                            "currencyGain": -14.4
                          }
                        }
                      },
                      "properties": {
                        "instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "Usd Equity #2"
                          }
                        },
                        "instrument/default/ClientInternal": {
                          "key": "Instrument/default/ClientInternal",
                          "value": {
                            "labelValue": "SAMPLE10"
                          }
                        }
                      },
                      "groupId": "Grp8"
                    },
                    {
                      "portfolioId": {
                        "scope": "Example",
                        "code": "Portfolio"
                      },
                      "holdingType": "P",
                      "instrumentScope": "default",
                      "instrumentUid": "LUID_LD560F1M",
                      "subHoldingKeys": {
                        "transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "Algo1"
                          }
                        }
                      },
                      "currency": "EUR",
                      "start": {
                        "holdingCurrency": {
                          "total": 171560,
                          "currency": "EUR",
                          "components": {
                            "cost": 163259.7,
                            "marketGain": 8300.3
                          }
                        },
                        "portfolioCurrency": {
                          "total": 149257.2,
                          "currency": "GBP",
                          "components": {
                            "cost": 136321.85,
                            "marketGain": 7221.26,
                            "currencyGain": 5714.09
                          }
                        }
                      },
                      "flows": {
                        "holdingCurrency": {
                          "total": -192548,
                          "currency": "EUR",
                          "components": {
                            "out": -192548
                          }
                        },
                        "portfolioCurrency": {
                          "total": -163473.25,
                          "currency": "GBP",
                          "components": {
                            "out": -163473.25
                          }
                        }
                      },
                      "gains": {
                        "holdingCurrency": {
                          "total": 20988,
                          "currency": "EUR",
                          "components": {
                            "realMarketGain": 29288.3,
                            "deltaMarketGain": -8300.3
                          }
                        },
                        "portfolioCurrency": {
                          "total": 14216.05,
                          "currency": "GBP",
                          "components": {
                            "realMarketGain": 24865.76,
                            "realCurrencyGain": 2285.64,
                            "deltaMarketGain": -7221.26,
                            "deltaCurrencyGain": -5714.09
                          }
                        }
                      },
                      "properties": {
                        "instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "Eur Equity"
                          }
                        },
                        "instrument/default/ClientInternal": {
                          "key": "Instrument/default/ClientInternal",
                          "value": {
                            "labelValue": "SAMPLE09"
                          }
                        }
                      },
                      "groupId": "Grp9"
                    },
                    {
                      "portfolioId": {
                        "scope": "Example",
                        "code": "Portfolio"
                      },
                      "holdingType": "P",
                      "instrumentScope": "default",
                      "instrumentUid": "LUID_QH2V2O68",
                      "subHoldingKeys": {
                        "transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "Algo1"
                          }
                        }
                      },
                      "currency": "ZAR",
                      "start": {
                        "holdingCurrency": {
                          "total": 3940650,
                          "currency": "ZAR",
                          "components": {
                            "cost": 4480295.86,
                            "marketGain": -539645.86
                          }
                        },
                        "portfolioCurrency": {
                          "total": 208854.45,
                          "currency": "GBP",
                          "components": {
                            "cost": 215054.2,
                            "marketGain": -28601.23,
                            "currencyGain": 22401.48
                          }
                        }
                      },
                      "flows": {
                        "holdingCurrency": {
                          "total": -950751.25,
                          "currency": "ZAR",
                          "components": {
                            "out": -950751.25
                          }
                        },
                        "portfolioCurrency": {
                          "total": -49439.07,
                          "currency": "GBP",
                          "components": {
                            "out": -49439.07
                          }
                        }
                      },
                      "gains": {
                        "holdingCurrency": {
                          "total": 258101.25,
                          "currency": "ZAR",
                          "components": {
                            "realMarketGain": -115985.86,
                            "deltaMarketGain": 374087.11
                          }
                        },
                        "portfolioCurrency": {
                          "total": 6232.62,
                          "currency": "GBP",
                          "components": {
                            "realMarketGain": -6031.26,
                            "realCurrencyGain": 4266.95,
                            "deltaMarketGain": 20157.73,
                            "deltaCurrencyGain": -12160.8
                          }
                        }
                      },
                      "end": {
                        "holdingCurrency": {
                          "total": 3248000,
                          "currency": "ZAR",
                          "components": {
                            "cost": 3413558.75,
                            "marketGain": -165558.75
                          }
                        },
                        "portfolioCurrency": {
                          "total": 165648,
                          "currency": "GBP",
                          "components": {
                            "cost": 163850.82,
                            "marketGain": -8443.5,
                            "currencyGain": 10240.68
                          }
                        }
                      },
                      "properties": {
                        "instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "Zar Equity #1"
                          }
                        },
                        "instrument/default/ClientInternal": {
                          "key": "Instrument/default/ClientInternal",
                          "value": {
                            "labelValue": "SAMPLE04"
                          }
                        }
                      },
                      "groupId": "Grp10"
                    },
                    {
                      "portfolioId": {
                        "scope": "Example",
                        "code": "Portfolio"
                      },
                      "holdingType": "P",
                      "instrumentScope": "default",
                      "instrumentUid": "LUID_QTKKFOKC",
                      "subHoldingKeys": {
                        "transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "Algo1"
                          }
                        }
                      },
                      "currency": "EUR",
                      "start": {
                        "holdingCurrency": {
                          "total": -238437.31,
                          "currency": "EUR",
                          "components": {
                            "cost": -234688.46,
                            "marketGain": -3748.85
                          }
                        },
                        "portfolioCurrency": {
                          "total": -207440.46,
                          "currency": "GBP",
                          "components": {
                            "cost": -195495.49,
                            "marketGain": -3261.5,
                            "currencyGain": -8683.47
                          }
                        }
                      },
                      "flows": {
                        "holdingCurrency": {
                          "total": 45099.4,
                          "currency": "EUR",
                          "components": {
                            "in": 45099.4
                          }
                        },
                        "portfolioCurrency": {
                          "total": 38424.69,
                          "currency": "GBP",
                          "components": {
                            "in": 38424.69
                          }
                        }
                      },
                      "gains": {
                        "holdingCurrency": {
                          "total": -66223.84,
                          "currency": "EUR",
                          "components": {
                            "realMarketGain": -10145.8,
                            "carry": 157.3,
                            "deltaMarketGain": -56235.34
                          }
                        },
                        "portfolioCurrency": {
                          "total": -46417.02,
                          "currency": "GBP",
                          "components": {
                            "realMarketGain": -8644.22,
                            "realCurrencyGain": -664.12,
                            "carry": 134.02,
                            "deltaMarketGain": -46525.38,
                            "deltaCurrencyGain": 9282.68
                          }
                        }
                      },
                      "carry": {
                        "holdingCurrency": {
                          "total": -157.3,
                          "currency": "EUR",
                          "components": {
                            "coverWithCommission": -157.3
                          }
                        },
                        "portfolioCurrency": {
                          "total": -134.02,
                          "currency": "GBP",
                          "components": {
                            "coverWithCommission": -134.02
                          }
                        }
                      },
                      "end": {
                        "holdingCurrency": {
                          "total": -259719.05,
                          "currency": "EUR",
                          "components": {
                            "cost": -199734.86,
                            "marketGain": -59984.19
                          }
                        },
                        "portfolioCurrency": {
                          "total": -215566.81,
                          "currency": "GBP",
                          "components": {
                            "cost": -166379.14,
                            "marketGain": -49786.88,
                            "currencyGain": 599.21
                          }
                        }
                      },
                      "properties": {
                        "instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "Eur CFD #2"
                          }
                        },
                        "instrument/default/ClientInternal": {
                          "key": "Instrument/default/ClientInternal",
                          "value": {
                            "labelValue": "SAMPLE02"
                          }
                        }
                      },
                      "groupId": "Grp11"
                    },
                    {
                      "portfolioId": {
                        "scope": "Example",
                        "code": "Portfolio"
                      },
                      "holdingType": "P",
                      "instrumentScope": "default",
                      "instrumentUid": "LUID_T6YOHML7",
                      "subHoldingKeys": {
                        "transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "Algo1"
                          }
                        }
                      },
                      "currency": "USD",
                      "start": {
                        "holdingCurrency": {
                          "total": 3313875,
                          "currency": "USD",
                          "components": {
                            "cost": 3509200,
                            "marketGain": -195325
                          }
                        },
                        "portfolioCurrency": {
                          "total": 2352851.25,
                          "currency": "GBP",
                          "components": {
                            "cost": 2485778.5,
                            "marketGain": -138680.75,
                            "currencyGain": 5753.5
                          }
                        }
                      },
                      "flows": {
                        "holdingCurrency": {
                          "total": -3525840,
                          "currency": "USD",
                          "components": {
                            "out": -3525840
                          }
                        },
                        "portfolioCurrency": {
                          "total": -2525531,
                          "currency": "GBP",
                          "components": {
                            "out": -2525531
                          }
                        }
                      },
                      "gains": {
                        "holdingCurrency": {
                          "total": 211965,
                          "currency": "USD",
                          "components": {
                            "realMarketGain": 16640,
                            "deltaMarketGain": 195325
                          }
                        },
                        "portfolioCurrency": {
                          "total": 172679.75,
                          "currency": "GBP",
                          "components": {
                            "realMarketGain": 11825,
                            "realCurrencyGain": 27927.5,
                            "deltaMarketGain": 138680.75,
                            "deltaCurrencyGain": -5753.5
                          }
                        }
                      },
                      "properties": {
                        "instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "Usd CFD #1"
                          }
                        },
                        "instrument/default/ClientInternal": {
                          "key": "Instrument/default/ClientInternal",
                          "value": {
                            "labelValue": "SAMPLE07"
                          }
                        }
                      },
                      "groupId": "Grp12"
                    },
                    {
                      "portfolioId": {
                        "scope": "Example",
                        "code": "Portfolio"
                      },
                      "holdingType": "P",
                      "instrumentScope": "default",
                      "instrumentUid": "LUID_VYWV6V8Y",
                      "subHoldingKeys": {
                        "transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "Algo1"
                          }
                        }
                      },
                      "currency": "ZAR",
                      "start": {
                        "holdingCurrency": {
                          "total": 9783000,
                          "currency": "ZAR",
                          "components": {
                            "cost": 10824063.04,
                            "marketGain": -1041063.04
                          }
                        },
                        "portfolioCurrency": {
                          "total": 518499,
                          "currency": "GBP",
                          "components": {
                            "cost": 530379.09,
                            "marketGain": -55176.34,
                            "currencyGain": 43296.25
                          }
                        }
                      },
                      "flows": {
                        "holdingCurrency": {
                          "total": -775994.66,
                          "currency": "ZAR",
                          "components": {
                            "out": -775994.66
                          }
                        },
                        "portfolioCurrency": {
                          "total": -40972.52,
                          "currency": "GBP",
                          "components": {
                            "out": -40972.52
                          }
                        }
                      },
                      "gains": {
                        "holdingCurrency": {
                          "total": 952994.66,
                          "currency": "ZAR",
                          "components": {
                            "realMarketGain": -65876.91,
                            "deltaMarketGain": 1018871.57
                          }
                        },
                        "portfolioCurrency": {
                          "total": 30433.52,
                          "currency": "GBP",
                          "components": {
                            "realMarketGain": -3478.3,
                            "realCurrencyGain": 3199.11,
                            "deltaMarketGain": 54044.58,
                            "deltaCurrencyGain": -23331.87
                          }
                        }
                      },
                      "end": {
                        "holdingCurrency": {
                          "total": 9960000,
                          "currency": "ZAR",
                          "components": {
                            "cost": 9982191.47,
                            "marketGain": -22191.47
                          }
                        },
                        "portfolioCurrency": {
                          "total": 507960,
                          "currency": "GBP",
                          "components": {
                            "cost": 489127.38,
                            "marketGain": -1131.76,
                            "currencyGain": 19964.38
                          }
                        }
                      },
                      "properties": {
                        "instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "Zar Equity #3"
                          }
                        },
                        "instrument/default/ClientInternal": {
                          "key": "Instrument/default/ClientInternal",
                          "value": {
                            "labelValue": "SAMPLE06"
                          }
                        }
                      },
                      "groupId": "Grp13"
                    },
                    {
                      "portfolioId": {
                        "scope": "Example",
                        "code": "Portfolio"
                      },
                      "holdingType": "P",
                      "instrumentScope": "default",
                      "instrumentUid": "LUID_X8R9444V",
                      "subHoldingKeys": {
                        "transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "Algo1"
                          }
                        }
                      },
                      "currency": "USD",
                      "start": {
                        "holdingCurrency": {
                          "total": 20652,
                          "currency": "USD",
                          "components": {
                            "cost": 20000,
                            "marketGain": 652
                          }
                        },
                        "portfolioCurrency": {
                          "total": 14662.92,
                          "currency": "GBP",
                          "components": {
                            "cost": 14000,
                            "marketGain": 462.92,
                            "currencyGain": 200
                          }
                        }
                      },
                      "gains": {
                        "holdingCurrency": {
                          "total": -16652,
                          "currency": "USD",
                          "components": {
                            "deltaMarketGain": -16652
                          }
                        },
                        "portfolioCurrency": {
                          "total": -11782.92,
                          "currency": "GBP",
                          "components": {
                            "deltaMarketGain": -11982.92,
                            "deltaCurrencyGain": 200
                          }
                        }
                      },
                      "end": {
                        "holdingCurrency": {
                          "total": 4000,
                          "currency": "USD",
                          "components": {
                            "cost": 20000,
                            "marketGain": -16000
                          }
                        },
                        "portfolioCurrency": {
                          "total": 2880,
                          "currency": "GBP",
                          "components": {
                            "cost": 14000,
                            "marketGain": -11520,
                            "currencyGain": 400
                          }
                        }
                      },
                      "properties": {
                        "instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "Usd Equity #1"
                          }
                        },
                        "instrument/default/ClientInternal": {
                          "key": "Instrument/default/ClientInternal",
                          "value": {
                            "labelValue": "SAMPLE08"
                          }
                        }
                      },
                      "groupId": "Grp14"
                    }
                  ],
                  "links": []
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      }
    },
    "/api/transactionportfolios/{scope}/{code}/a2bmovements": {
      "get": {
        "tags": [
          "Transaction Portfolios"
        ],
        "summary": "GetA2BMovements: Get an A2B report at the movement level for the given portfolio.",
        "description": "Get an A2B report at the movement level for the given portfolio.",
        "operationId": "GetA2BMovements",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the portfolio to retrieve the A2B movement report for.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the portfolio to retrieve the A2B movement report for.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the portfolio to retrieve the A2B movement report for. Together with the scope this\r\n            uniquely identifies the portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the portfolio to retrieve the A2B movement report for. Together with the scope this\r\n            uniquely identifies the portfolio.",
              "nullable": true
            }
          },
          {
            "name": "fromEffectiveAt",
            "in": "query",
            "description": "The lower bound effective datetime or cut label (inclusive) from which to retrieve the data.\r\n            There is no lower bound if this is not specified.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The lower bound effective datetime or cut label (inclusive) from which to retrieve the data.\r\n            There is no lower bound if this is not specified.",
              "format": "dateorcutlabel"
            }
          },
          {
            "name": "toEffectiveAt",
            "in": "query",
            "description": "The upper bound effective datetime or cut label (inclusive) from which to retrieve the data.\r\n            There is no upper bound if this is not specified.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The upper bound effective datetime or cut label (inclusive) from which to retrieve the data.\r\n            There is no upper bound if this is not specified.",
              "format": "dateorcutlabel"
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the portfolio. Defaults to return the latest version\r\n            of each transaction if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to retrieve the portfolio. Defaults to return the latest version\r\n            of each transaction if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "recipeIdScope",
            "in": "query",
            "description": "The scope of the given recipeId",
            "schema": {
              "type": "string",
              "description": "The scope of the given recipeId",
              "nullable": true
            }
          },
          {
            "name": "recipeIdCode",
            "in": "query",
            "description": "The code of the given recipeId",
            "schema": {
              "type": "string",
              "description": "The code of the given recipeId",
              "nullable": true
            }
          },
          {
            "name": "propertyKeys",
            "in": "query",
            "description": "A list of property keys from the \"Instrument\" domain to decorate onto\r\n            the results. These take the format {domain}/{scope}/{code} e.g. \"Instrument/system/Name\".",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
              },
              "description": "A list of property keys from the \"Instrument\" domain to decorate onto\r\n            the results. These take the format {domain}/{scope}/{code} e.g. \"Instrument/system/Name\".",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the result set.\r\n            Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
            "schema": {
              "maxLength": 16384,
              "minLength": 0,
              "pattern": "^[\\s\\S]*$",
              "type": "string",
              "description": "Expression to filter the result set.\r\n            Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid.",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested portfolio A2B movement data",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/VersionedResourceListOfA2BMovementRecord"
                },
                "example": {
                  "version": {
                    "effectiveFrom": "2020-10-31T00:00:00.0000000+00:00",
                    "asAtDate": "2021-10-31T00:00:00.0000000+00:00"
                  },
                  "values": [
                    {
                      "portfolioId": {
                        "scope": "Example",
                        "code": "Portfolio"
                      },
                      "holdingType": "P",
                      "instrumentScope": "default",
                      "instrumentUid": "LUID_1ACMRHTC",
                      "subHoldingKeys": {
                        "transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "Algo1"
                          }
                        }
                      },
                      "currency": "USD",
                      "effectiveDate": "2020-10-31T00:00:00.0000000+00:00",
                      "units": 100,
                      "start": {
                        "holdingCurrency": {
                          "total": 4696,
                          "currency": "USD",
                          "components": {
                            "cost": 4800,
                            "marketGain": -104
                          }
                        },
                        "portfolioCurrency": {
                          "total": 3334.16,
                          "currency": "GBP",
                          "components": {
                            "cost": 3470.4,
                            "marketGain": -73.84,
                            "currencyGain": -62.4
                          }
                        }
                      },
                      "properties": {
                        "instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "Usd Equity #2"
                          }
                        },
                        "instrument/default/ClientInternal": {
                          "key": "Instrument/default/ClientInternal",
                          "value": {
                            "labelValue": "SAMPLE10"
                          }
                        }
                      },
                      "groupId": "g1"
                    },
                    {
                      "portfolioId": {
                        "scope": "Example",
                        "code": "Portfolio"
                      },
                      "holdingType": "P",
                      "instrumentScope": "default",
                      "instrumentUid": "LUID_1ACMRHTC",
                      "subHoldingKeys": {
                        "transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "Algo1"
                          }
                        }
                      },
                      "currency": "USD",
                      "transactionId": "T24",
                      "movementName": "Side1",
                      "effectiveDate": "2020-11-16T00:00:00.0000000+00:00",
                      "units": 100,
                      "flows": {
                        "holdingCurrency": {
                          "total": -25,
                          "currency": "USD",
                          "components": {
                            "out": -25
                          }
                        },
                        "portfolioCurrency": {
                          "total": -17.82,
                          "currency": "GBP",
                          "components": {
                            "out": -17.82
                          }
                        }
                      },
                      "carry": {
                        "holdingCurrency": {
                          "total": 25,
                          "currency": "USD",
                          "components": {
                            "dividend": 25
                          }
                        },
                        "portfolioCurrency": {
                          "total": 17.82,
                          "currency": "GBP",
                          "components": {
                            "dividend": 17.82
                          }
                        }
                      },
                      "properties": {
                        "instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "Usd Equity #2"
                          }
                        },
                        "instrument/default/ClientInternal": {
                          "key": "Instrument/default/ClientInternal",
                          "value": {
                            "labelValue": "SAMPLE10"
                          }
                        }
                      },
                      "groupId": "g1"
                    },
                    {
                      "portfolioId": {
                        "scope": "Example",
                        "code": "Portfolio"
                      },
                      "holdingType": "P",
                      "instrumentScope": "default",
                      "instrumentUid": "LUID_1ACMRHTC",
                      "subHoldingKeys": {
                        "transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "Algo1"
                          }
                        }
                      },
                      "currency": "USD",
                      "effectiveDate": "2020-11-30T00:00:00.0000000+00:00",
                      "units": 100,
                      "gains": {
                        "holdingCurrency": {
                          "total": -21,
                          "currency": "USD",
                          "components": {
                            "deltaMarketGain": -21
                          }
                        },
                        "portfolioCurrency": {
                          "total": 31.84,
                          "currency": "GBP",
                          "components": {
                            "deltaMarketGain": -16.16,
                            "deltaCurrencyGain": 48
                          }
                        }
                      },
                      "end": {
                        "holdingCurrency": {
                          "total": 4675,
                          "currency": "USD",
                          "components": {
                            "cost": 4800,
                            "marketGain": -125
                          }
                        },
                        "portfolioCurrency": {
                          "total": 3366,
                          "currency": "GBP",
                          "components": {
                            "cost": 3470.4,
                            "marketGain": -90,
                            "currencyGain": -14.4
                          }
                        }
                      },
                      "properties": {
                        "instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "Usd Equity #2"
                          }
                        },
                        "instrument/default/ClientInternal": {
                          "key": "Instrument/default/ClientInternal",
                          "value": {
                            "labelValue": "SAMPLE10"
                          }
                        }
                      },
                      "groupId": "g1"
                    }
                  ],
                  "links": []
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VersionedResourceListOfA2BMovementRecord"
                },
                "example": {
                  "version": {
                    "effectiveFrom": "2020-10-31T00:00:00.0000000+00:00",
                    "asAtDate": "2021-10-31T00:00:00.0000000+00:00"
                  },
                  "values": [
                    {
                      "portfolioId": {
                        "scope": "Example",
                        "code": "Portfolio"
                      },
                      "holdingType": "P",
                      "instrumentScope": "default",
                      "instrumentUid": "LUID_1ACMRHTC",
                      "subHoldingKeys": {
                        "transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "Algo1"
                          }
                        }
                      },
                      "currency": "USD",
                      "effectiveDate": "2020-10-31T00:00:00.0000000+00:00",
                      "units": 100,
                      "start": {
                        "holdingCurrency": {
                          "total": 4696,
                          "currency": "USD",
                          "components": {
                            "cost": 4800,
                            "marketGain": -104
                          }
                        },
                        "portfolioCurrency": {
                          "total": 3334.16,
                          "currency": "GBP",
                          "components": {
                            "cost": 3470.4,
                            "marketGain": -73.84,
                            "currencyGain": -62.4
                          }
                        }
                      },
                      "properties": {
                        "instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "Usd Equity #2"
                          }
                        },
                        "instrument/default/ClientInternal": {
                          "key": "Instrument/default/ClientInternal",
                          "value": {
                            "labelValue": "SAMPLE10"
                          }
                        }
                      },
                      "groupId": "g1"
                    },
                    {
                      "portfolioId": {
                        "scope": "Example",
                        "code": "Portfolio"
                      },
                      "holdingType": "P",
                      "instrumentScope": "default",
                      "instrumentUid": "LUID_1ACMRHTC",
                      "subHoldingKeys": {
                        "transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "Algo1"
                          }
                        }
                      },
                      "currency": "USD",
                      "transactionId": "T24",
                      "movementName": "Side1",
                      "effectiveDate": "2020-11-16T00:00:00.0000000+00:00",
                      "units": 100,
                      "flows": {
                        "holdingCurrency": {
                          "total": -25,
                          "currency": "USD",
                          "components": {
                            "out": -25
                          }
                        },
                        "portfolioCurrency": {
                          "total": -17.82,
                          "currency": "GBP",
                          "components": {
                            "out": -17.82
                          }
                        }
                      },
                      "carry": {
                        "holdingCurrency": {
                          "total": 25,
                          "currency": "USD",
                          "components": {
                            "dividend": 25
                          }
                        },
                        "portfolioCurrency": {
                          "total": 17.82,
                          "currency": "GBP",
                          "components": {
                            "dividend": 17.82
                          }
                        }
                      },
                      "properties": {
                        "instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "Usd Equity #2"
                          }
                        },
                        "instrument/default/ClientInternal": {
                          "key": "Instrument/default/ClientInternal",
                          "value": {
                            "labelValue": "SAMPLE10"
                          }
                        }
                      },
                      "groupId": "g1"
                    },
                    {
                      "portfolioId": {
                        "scope": "Example",
                        "code": "Portfolio"
                      },
                      "holdingType": "P",
                      "instrumentScope": "default",
                      "instrumentUid": "LUID_1ACMRHTC",
                      "subHoldingKeys": {
                        "transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "Algo1"
                          }
                        }
                      },
                      "currency": "USD",
                      "effectiveDate": "2020-11-30T00:00:00.0000000+00:00",
                      "units": 100,
                      "gains": {
                        "holdingCurrency": {
                          "total": -21,
                          "currency": "USD",
                          "components": {
                            "deltaMarketGain": -21
                          }
                        },
                        "portfolioCurrency": {
                          "total": 31.84,
                          "currency": "GBP",
                          "components": {
                            "deltaMarketGain": -16.16,
                            "deltaCurrencyGain": 48
                          }
                        }
                      },
                      "end": {
                        "holdingCurrency": {
                          "total": 4675,
                          "currency": "USD",
                          "components": {
                            "cost": 4800,
                            "marketGain": -125
                          }
                        },
                        "portfolioCurrency": {
                          "total": 3366,
                          "currency": "GBP",
                          "components": {
                            "cost": 3470.4,
                            "marketGain": -90,
                            "currencyGain": -14.4
                          }
                        }
                      },
                      "properties": {
                        "instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "Usd Equity #2"
                          }
                        },
                        "instrument/default/ClientInternal": {
                          "key": "Instrument/default/ClientInternal",
                          "value": {
                            "labelValue": "SAMPLE10"
                          }
                        }
                      },
                      "groupId": "g1"
                    }
                  ],
                  "links": []
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/VersionedResourceListOfA2BMovementRecord"
                },
                "example": {
                  "version": {
                    "effectiveFrom": "2020-10-31T00:00:00.0000000+00:00",
                    "asAtDate": "2021-10-31T00:00:00.0000000+00:00"
                  },
                  "values": [
                    {
                      "portfolioId": {
                        "scope": "Example",
                        "code": "Portfolio"
                      },
                      "holdingType": "P",
                      "instrumentScope": "default",
                      "instrumentUid": "LUID_1ACMRHTC",
                      "subHoldingKeys": {
                        "transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "Algo1"
                          }
                        }
                      },
                      "currency": "USD",
                      "effectiveDate": "2020-10-31T00:00:00.0000000+00:00",
                      "units": 100,
                      "start": {
                        "holdingCurrency": {
                          "total": 4696,
                          "currency": "USD",
                          "components": {
                            "cost": 4800,
                            "marketGain": -104
                          }
                        },
                        "portfolioCurrency": {
                          "total": 3334.16,
                          "currency": "GBP",
                          "components": {
                            "cost": 3470.4,
                            "marketGain": -73.84,
                            "currencyGain": -62.4
                          }
                        }
                      },
                      "properties": {
                        "instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "Usd Equity #2"
                          }
                        },
                        "instrument/default/ClientInternal": {
                          "key": "Instrument/default/ClientInternal",
                          "value": {
                            "labelValue": "SAMPLE10"
                          }
                        }
                      },
                      "groupId": "g1"
                    },
                    {
                      "portfolioId": {
                        "scope": "Example",
                        "code": "Portfolio"
                      },
                      "holdingType": "P",
                      "instrumentScope": "default",
                      "instrumentUid": "LUID_1ACMRHTC",
                      "subHoldingKeys": {
                        "transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "Algo1"
                          }
                        }
                      },
                      "currency": "USD",
                      "transactionId": "T24",
                      "movementName": "Side1",
                      "effectiveDate": "2020-11-16T00:00:00.0000000+00:00",
                      "units": 100,
                      "flows": {
                        "holdingCurrency": {
                          "total": -25,
                          "currency": "USD",
                          "components": {
                            "out": -25
                          }
                        },
                        "portfolioCurrency": {
                          "total": -17.82,
                          "currency": "GBP",
                          "components": {
                            "out": -17.82
                          }
                        }
                      },
                      "carry": {
                        "holdingCurrency": {
                          "total": 25,
                          "currency": "USD",
                          "components": {
                            "dividend": 25
                          }
                        },
                        "portfolioCurrency": {
                          "total": 17.82,
                          "currency": "GBP",
                          "components": {
                            "dividend": 17.82
                          }
                        }
                      },
                      "properties": {
                        "instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "Usd Equity #2"
                          }
                        },
                        "instrument/default/ClientInternal": {
                          "key": "Instrument/default/ClientInternal",
                          "value": {
                            "labelValue": "SAMPLE10"
                          }
                        }
                      },
                      "groupId": "g1"
                    },
                    {
                      "portfolioId": {
                        "scope": "Example",
                        "code": "Portfolio"
                      },
                      "holdingType": "P",
                      "instrumentScope": "default",
                      "instrumentUid": "LUID_1ACMRHTC",
                      "subHoldingKeys": {
                        "transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "Algo1"
                          }
                        }
                      },
                      "currency": "USD",
                      "effectiveDate": "2020-11-30T00:00:00.0000000+00:00",
                      "units": 100,
                      "gains": {
                        "holdingCurrency": {
                          "total": -21,
                          "currency": "USD",
                          "components": {
                            "deltaMarketGain": -21
                          }
                        },
                        "portfolioCurrency": {
                          "total": 31.84,
                          "currency": "GBP",
                          "components": {
                            "deltaMarketGain": -16.16,
                            "deltaCurrencyGain": 48
                          }
                        }
                      },
                      "end": {
                        "holdingCurrency": {
                          "total": 4675,
                          "currency": "USD",
                          "components": {
                            "cost": 4800,
                            "marketGain": -125
                          }
                        },
                        "portfolioCurrency": {
                          "total": 3366,
                          "currency": "GBP",
                          "components": {
                            "cost": 3470.4,
                            "marketGain": -90,
                            "currencyGain": -14.4
                          }
                        }
                      },
                      "properties": {
                        "instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "Usd Equity #2"
                          }
                        },
                        "instrument/default/ClientInternal": {
                          "key": "Instrument/default/ClientInternal",
                          "value": {
                            "labelValue": "SAMPLE10"
                          }
                        }
                      },
                      "groupId": "g1"
                    }
                  ],
                  "links": []
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      }
    },
    "/api/transactionportfolios/{scope}/{code}/cashladder": {
      "get": {
        "tags": [
          "Transaction Portfolios"
        ],
        "summary": "GetPortfolioCashLadder: Get portfolio cash ladder",
        "description": "Get a cash ladder for a transaction portfolio.",
        "operationId": "GetPortfolioCashLadder",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the transaction portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the transaction portfolio.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the transaction portfolio. Together with the scope this\r\n            uniquely identifies the portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the transaction portfolio. Together with the scope this\r\n            uniquely identifies the portfolio.",
              "nullable": true
            }
          },
          {
            "name": "fromEffectiveAt",
            "in": "query",
            "description": "The lower bound effective datetime or cut label (inclusive) from which to retrieve the data.\r\n            There is no lower bound if this is not specified.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The lower bound effective datetime or cut label (inclusive) from which to retrieve the data.\r\n            There is no lower bound if this is not specified.",
              "format": "dateorcutlabel"
            }
          },
          {
            "name": "toEffectiveAt",
            "in": "query",
            "description": "The upper bound effective datetime or cut label (inclusive) from which to retrieve the data.\r\n            There is no upper bound if this is not specified.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The upper bound effective datetime or cut label (inclusive) from which to retrieve the data.\r\n            There is no upper bound if this is not specified.",
              "format": "dateorcutlabel"
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The valuation (pricing) effective datetime or cut label (inclusive) at which to evaluate the cashflows.\r\nThis determines whether cashflows are evaluated in a historic or forward looking context and will, for certain models, affect where data is looked up.\r\nFor example, on a swap if the effectiveAt is in the middle of the window, cashflows before it will be historic and resets assumed to exist where if the effectiveAt\r\nis before the start of the range they are forward looking and will be expectations assuming the model supports that.\r\nThere is evidently a presumption here about availability of data and that the effectiveAt is realistically on or before the real-world today.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The valuation (pricing) effective datetime or cut label (inclusive) at which to evaluate the cashflows.\r\nThis determines whether cashflows are evaluated in a historic or forward looking context and will, for certain models, affect where data is looked up.\r\nFor example, on a swap if the effectiveAt is in the middle of the window, cashflows before it will be historic and resets assumed to exist where if the effectiveAt\r\nis before the start of the range they are forward looking and will be expectations assuming the model supports that.\r\nThere is evidently a presumption here about availability of data and that the effectiveAt is realistically on or before the real-world today.",
              "format": "dateorcutlabel"
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the portfolio. Defaults to returning the latest version\r\n            of each transaction if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to retrieve the portfolio. Defaults to returning the latest version\r\n            of each transaction if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the result set.\r\n            For example, to return only transactions with a transaction type of 'Buy', specify \"type eq 'Buy'\".\r\n            For more information about filtering LUSID results, see https://support.lusid.com/knowledgebase/article/KA-01914.",
            "schema": {
              "maxLength": 16384,
              "minLength": 0,
              "pattern": "^[\\s\\S]*$",
              "type": "string",
              "description": "Expression to filter the result set.\r\n            For example, to return only transactions with a transaction type of 'Buy', specify \"type eq 'Buy'\".\r\n            For more information about filtering LUSID results, see https://support.lusid.com/knowledgebase/article/KA-01914.",
              "nullable": true
            }
          },
          {
            "name": "recipeIdScope",
            "in": "query",
            "description": "The scope of the given recipeId",
            "schema": {
              "type": "string",
              "description": "The scope of the given recipeId",
              "nullable": true
            }
          },
          {
            "name": "recipeIdCode",
            "in": "query",
            "description": "The code of the given recipeID",
            "schema": {
              "type": "string",
              "description": "The code of the given recipeID",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested portfolio cash-ladder",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfPortfolioCashLadder"
                },
                "example": {
                  "values": [
                    {
                      "currency": "USD",
                      "subHoldingKeys": {
                        "instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "ABC"
                          }
                        }
                      },
                      "records": [
                        {
                          "effectiveDate": "2021-02-13T01:02:03.0040000+00:00",
                          "open": 25000,
                          "activities": {
                            "trades to settle": -8200,
                            "dividend": 0,
                            "estimated funding": 1500
                          },
                          "close": 18300
                        },
                        {
                          "effectiveDate": "2021-02-14T01:02:03.0040000+00:00",
                          "open": 18300,
                          "activities": {
                            "trades to settle": -19850,
                            "dividend": 0,
                            "estimated funding": -500
                          },
                          "close": -2050
                        },
                        {
                          "effectiveDate": "2021-02-15T01:02:03.0040000+00:00",
                          "open": -2050,
                          "activities": {
                            "trades to settle": -5000,
                            "dividend": 560,
                            "estimated funding": 5000
                          },
                          "close": 8510
                        },
                        {
                          "effectiveDate": "2021-02-16T01:02:03.0040000+00:00",
                          "open": 8510,
                          "activities": {
                            "trades to settle": -2000,
                            "dividend": 0,
                            "estimated funding": 1500
                          },
                          "close": 5010
                        },
                        {
                          "effectiveDate": "2021-02-17T01:02:03.0040000+00:00",
                          "open": 8510,
                          "activities": {
                            "trades to settle": -1200,
                            "dividend": 0,
                            "estimated funding": 6700
                          },
                          "close": 10510
                        }
                      ],
                      "failed": {}
                    },
                    {
                      "currency": "EUR",
                      "subHoldingKeys": {
                        "instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "CBA"
                          }
                        }
                      },
                      "records": [
                        {
                          "effectiveDate": "2021-02-13T01:02:03.0040000+00:00",
                          "open": -150000,
                          "activities": {
                            "trades to settle": -15000,
                            "dividend": 0,
                            "estimated funding": 0
                          },
                          "close": 135000
                        },
                        {
                          "effectiveDate": "2021-02-15T01:02:03.0040000+00:00",
                          "open": 135000,
                          "activities": {
                            "trades to settle": 25500,
                            "dividend": 0,
                            "estimated funding": 0
                          },
                          "close": 160500
                        },
                        {
                          "effectiveDate": "2021-02-17T01:02:03.0040000+00:00",
                          "open": 160500,
                          "activities": {
                            "trades to settle": 0,
                            "dividend": 5400,
                            "estimated funding": 0
                          },
                          "close": 165900
                        }
                      ],
                      "failed": {}
                    }
                  ],
                  "links": []
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfPortfolioCashLadder"
                },
                "example": {
                  "values": [
                    {
                      "currency": "USD",
                      "subHoldingKeys": {
                        "instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "ABC"
                          }
                        }
                      },
                      "records": [
                        {
                          "effectiveDate": "2021-02-13T01:02:03.0040000+00:00",
                          "open": 25000,
                          "activities": {
                            "trades to settle": -8200,
                            "dividend": 0,
                            "estimated funding": 1500
                          },
                          "close": 18300
                        },
                        {
                          "effectiveDate": "2021-02-14T01:02:03.0040000+00:00",
                          "open": 18300,
                          "activities": {
                            "trades to settle": -19850,
                            "dividend": 0,
                            "estimated funding": -500
                          },
                          "close": -2050
                        },
                        {
                          "effectiveDate": "2021-02-15T01:02:03.0040000+00:00",
                          "open": -2050,
                          "activities": {
                            "trades to settle": -5000,
                            "dividend": 560,
                            "estimated funding": 5000
                          },
                          "close": 8510
                        },
                        {
                          "effectiveDate": "2021-02-16T01:02:03.0040000+00:00",
                          "open": 8510,
                          "activities": {
                            "trades to settle": -2000,
                            "dividend": 0,
                            "estimated funding": 1500
                          },
                          "close": 5010
                        },
                        {
                          "effectiveDate": "2021-02-17T01:02:03.0040000+00:00",
                          "open": 8510,
                          "activities": {
                            "trades to settle": -1200,
                            "dividend": 0,
                            "estimated funding": 6700
                          },
                          "close": 10510
                        }
                      ],
                      "failed": {}
                    },
                    {
                      "currency": "EUR",
                      "subHoldingKeys": {
                        "instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "CBA"
                          }
                        }
                      },
                      "records": [
                        {
                          "effectiveDate": "2021-02-13T01:02:03.0040000+00:00",
                          "open": -150000,
                          "activities": {
                            "trades to settle": -15000,
                            "dividend": 0,
                            "estimated funding": 0
                          },
                          "close": 135000
                        },
                        {
                          "effectiveDate": "2021-02-15T01:02:03.0040000+00:00",
                          "open": 135000,
                          "activities": {
                            "trades to settle": 25500,
                            "dividend": 0,
                            "estimated funding": 0
                          },
                          "close": 160500
                        },
                        {
                          "effectiveDate": "2021-02-17T01:02:03.0040000+00:00",
                          "open": 160500,
                          "activities": {
                            "trades to settle": 0,
                            "dividend": 5400,
                            "estimated funding": 0
                          },
                          "close": 165900
                        }
                      ],
                      "failed": {}
                    }
                  ],
                  "links": []
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfPortfolioCashLadder"
                },
                "example": {
                  "values": [
                    {
                      "currency": "USD",
                      "subHoldingKeys": {
                        "instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "ABC"
                          }
                        }
                      },
                      "records": [
                        {
                          "effectiveDate": "2021-02-13T01:02:03.0040000+00:00",
                          "open": 25000,
                          "activities": {
                            "trades to settle": -8200,
                            "dividend": 0,
                            "estimated funding": 1500
                          },
                          "close": 18300
                        },
                        {
                          "effectiveDate": "2021-02-14T01:02:03.0040000+00:00",
                          "open": 18300,
                          "activities": {
                            "trades to settle": -19850,
                            "dividend": 0,
                            "estimated funding": -500
                          },
                          "close": -2050
                        },
                        {
                          "effectiveDate": "2021-02-15T01:02:03.0040000+00:00",
                          "open": -2050,
                          "activities": {
                            "trades to settle": -5000,
                            "dividend": 560,
                            "estimated funding": 5000
                          },
                          "close": 8510
                        },
                        {
                          "effectiveDate": "2021-02-16T01:02:03.0040000+00:00",
                          "open": 8510,
                          "activities": {
                            "trades to settle": -2000,
                            "dividend": 0,
                            "estimated funding": 1500
                          },
                          "close": 5010
                        },
                        {
                          "effectiveDate": "2021-02-17T01:02:03.0040000+00:00",
                          "open": 8510,
                          "activities": {
                            "trades to settle": -1200,
                            "dividend": 0,
                            "estimated funding": 6700
                          },
                          "close": 10510
                        }
                      ],
                      "failed": {}
                    },
                    {
                      "currency": "EUR",
                      "subHoldingKeys": {
                        "instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "CBA"
                          }
                        }
                      },
                      "records": [
                        {
                          "effectiveDate": "2021-02-13T01:02:03.0040000+00:00",
                          "open": -150000,
                          "activities": {
                            "trades to settle": -15000,
                            "dividend": 0,
                            "estimated funding": 0
                          },
                          "close": 135000
                        },
                        {
                          "effectiveDate": "2021-02-15T01:02:03.0040000+00:00",
                          "open": 135000,
                          "activities": {
                            "trades to settle": 25500,
                            "dividend": 0,
                            "estimated funding": 0
                          },
                          "close": 160500
                        },
                        {
                          "effectiveDate": "2021-02-17T01:02:03.0040000+00:00",
                          "open": 160500,
                          "activities": {
                            "trades to settle": 0,
                            "dividend": 5400,
                            "estimated funding": 0
                          },
                          "close": 165900
                        }
                      ],
                      "failed": {}
                    }
                  ],
                  "links": []
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      }
    },
    "/api/transactionportfolios/{scope}/{code}/cashstatement": {
      "get": {
        "tags": [
          "Transaction Portfolios"
        ],
        "summary": "GetPortfolioCashStatement: Get portfolio cash statement",
        "description": "Get a cash statement for a transaction portfolio.",
        "operationId": "GetPortfolioCashStatement",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the transaction portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the transaction portfolio.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the transaction portfolio. Together with the scope this\r\n            uniquely identifies the portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the transaction portfolio. Together with the scope this\r\n            uniquely identifies the portfolio.",
              "nullable": true
            }
          },
          {
            "name": "fromEffectiveAt",
            "in": "query",
            "description": "The lower bound effective datetime or cut label (inclusive) from which to retrieve the data.\r\n            There is no lower bound if this is not specified.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The lower bound effective datetime or cut label (inclusive) from which to retrieve the data.\r\n            There is no lower bound if this is not specified.",
              "format": "dateorcutlabel"
            }
          },
          {
            "name": "toEffectiveAt",
            "in": "query",
            "description": "The upper bound effective datetime or cut label (inclusive) from which to retrieve the data.\r\n            There is no upper bound if this is not specified.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The upper bound effective datetime or cut label (inclusive) from which to retrieve the data.\r\n            There is no upper bound if this is not specified.",
              "format": "dateorcutlabel"
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the portfolio. Defaults to returning the latest version\r\n            of each transaction if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to retrieve the portfolio. Defaults to returning the latest version\r\n            of each transaction if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the result set.\r\n            For example, to return only transactions with a transaction type of 'Buy', specify \"type eq 'Buy'\".\r\n            For more information about filtering LUSID results, see https://support.lusid.com/knowledgebase/article/KA-01914.",
            "schema": {
              "maxLength": 16384,
              "minLength": 0,
              "pattern": "^[\\s\\S]*$",
              "type": "string",
              "description": "Expression to filter the result set.\r\n            For example, to return only transactions with a transaction type of 'Buy', specify \"type eq 'Buy'\".\r\n            For more information about filtering LUSID results, see https://support.lusid.com/knowledgebase/article/KA-01914.",
              "nullable": true
            }
          },
          {
            "name": "recipeIdScope",
            "in": "query",
            "description": "The scope of the given recipeId",
            "schema": {
              "type": "string",
              "description": "The scope of the given recipeId",
              "nullable": true
            }
          },
          {
            "name": "recipeIdCode",
            "in": "query",
            "description": "The code of the given recipeID",
            "schema": {
              "type": "string",
              "description": "The code of the given recipeID",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested portfolio cash flow data",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfPortfolioCashFlow"
                },
                "example": {
                  "values": [
                    {
                      "groupById": 1,
                      "sequenceNumber": 0,
                      "effectiveDate": "2020-06-01T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "ABC"
                          }
                        }
                      },
                      "type": "Open",
                      "movementName": "",
                      "cashflow": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "balance": {
                        "amount": 128347,
                        "currency": "USD"
                      },
                      "fxRate": 1,
                      "cashflowReportingCurrency": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 128347,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 128347,
                        "currency": "USD"
                      },
                      "unrealisedGainLossReportingCurrency": {
                        "amount": 0,
                        "currency": "USD"
                      }
                    },
                    {
                      "groupById": 1,
                      "sequenceNumber": 1,
                      "effectiveDate": "2020-06-13T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "ABC"
                          }
                        }
                      },
                      "type": "Activity",
                      "movementName": "principal",
                      "cashflow": {
                        "amount": 73494,
                        "currency": "USD"
                      },
                      "balance": {
                        "amount": 54853,
                        "currency": "USD"
                      },
                      "fxRate": 1,
                      "cashflowReportingCurrency": {
                        "amount": 73494,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 54853,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 54853,
                        "currency": "USD"
                      },
                      "transaction": {
                        "transactionId": "tid_234942982496001",
                        "type": "Buy",
                        "instrumentIdentifiers": {},
                        "instrumentScope": "default",
                        "instrumentUid": "LUID_1C7YTL5M",
                        "transactionDate": "2020-06-10T00:00:00.0000000+00:00",
                        "settlementDate": "2020-06-13T00:00:00.0000000+00:00",
                        "units": 1517.8,
                        "transactionPrice": {
                          "price": 48.4213,
                          "type": "Price"
                        },
                        "totalConsideration": {
                          "amount": 48.4213,
                          "currency": "USD"
                        },
                        "properties": {},
                        "source": "",
                        "entryDateTime": "0001-01-01T00:00:00.0000000+00:00",
                        "transactionStatus": "Active"
                      },
                      "unrealisedGainLossReportingCurrency": {
                        "amount": 0,
                        "currency": "USD"
                      }
                    },
                    {
                      "groupById": 1,
                      "sequenceNumber": 2,
                      "effectiveDate": "2020-06-14T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "ABC"
                          }
                        }
                      },
                      "type": "Activity",
                      "movementName": "principal",
                      "cashflow": {
                        "amount": 33731.44,
                        "currency": "USD"
                      },
                      "balance": {
                        "amount": 21121.56,
                        "currency": "USD"
                      },
                      "fxRate": 1,
                      "cashflowReportingCurrency": {
                        "amount": 33731.44,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 21121.56,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 21121.56,
                        "currency": "USD"
                      },
                      "transaction": {
                        "transactionId": "tid_234295929052090",
                        "type": "Buy",
                        "instrumentIdentifiers": {},
                        "instrumentScope": "default",
                        "instrumentUid": "LUID_1C7YTL5M",
                        "transactionDate": "2020-06-11T00:00:00.0000000+00:00",
                        "settlementDate": "2020-06-14T00:00:00.0000000+00:00",
                        "units": 696.97,
                        "transactionPrice": {
                          "price": 48.3974,
                          "type": "Price"
                        },
                        "totalConsideration": {
                          "amount": 48.3974,
                          "currency": "USD"
                        },
                        "properties": {},
                        "source": "",
                        "entryDateTime": "0001-01-01T00:00:00.0000000+00:00",
                        "transactionStatus": "Active"
                      },
                      "unrealisedGainLossReportingCurrency": {
                        "amount": 0,
                        "currency": "USD"
                      }
                    },
                    {
                      "groupById": 1,
                      "sequenceNumber": 3,
                      "effectiveDate": "2020-06-15T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "ABC"
                          }
                        }
                      },
                      "type": "Activity",
                      "movementName": "payment",
                      "cashflow": {
                        "amount": 20.68,
                        "currency": "USD"
                      },
                      "balance": {
                        "amount": 21142.24,
                        "currency": "USD"
                      },
                      "fxRate": 1,
                      "cashflowReportingCurrency": {
                        "amount": 20.68,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 21142.24,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 21142.24,
                        "currency": "USD"
                      },
                      "transaction": {
                        "transactionId": "tid_325452342424500",
                        "type": "Dividend",
                        "instrumentIdentifiers": {},
                        "instrumentScope": "default",
                        "instrumentUid": "LUID_1C7YTL5M",
                        "transactionDate": "2020-06-15T00:00:00.0000000+00:00",
                        "settlementDate": "2020-06-15T00:00:00.0000000+00:00",
                        "units": 0,
                        "transactionPrice": {
                          "price": 0,
                          "type": "Price"
                        },
                        "totalConsideration": {
                          "amount": 0,
                          "currency": "USD"
                        },
                        "properties": {},
                        "source": "",
                        "entryDateTime": "0001-01-01T00:00:00.0000000+00:00",
                        "transactionStatus": "Active"
                      },
                      "unrealisedGainLossReportingCurrency": {
                        "amount": 0,
                        "currency": "USD"
                      }
                    },
                    {
                      "groupById": 1,
                      "sequenceNumber": 4,
                      "effectiveDate": "2020-06-20T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "ABC"
                          }
                        }
                      },
                      "type": "Activity",
                      "movementName": "principal",
                      "cashflow": {
                        "amount": 10374,
                        "currency": "USD"
                      },
                      "balance": {
                        "amount": 31516.24,
                        "currency": "USD"
                      },
                      "fxRate": 1,
                      "cashflowReportingCurrency": {
                        "amount": 10374,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 31516.24,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 31516.24,
                        "currency": "USD"
                      },
                      "transaction": {
                        "transactionId": "tid_329432525234324",
                        "type": "Sell",
                        "instrumentIdentifiers": {},
                        "instrumentScope": "default",
                        "instrumentUid": "LUID_1C7YTL5M",
                        "transactionDate": "2020-06-17T00:00:00.0000000+00:00",
                        "settlementDate": "2020-06-20T00:00:00.0000000+00:00",
                        "units": 211.63,
                        "transactionPrice": {
                          "price": 49.0192,
                          "type": "Price"
                        },
                        "totalConsideration": {
                          "amount": 49.0192,
                          "currency": "USD"
                        },
                        "properties": {},
                        "source": "",
                        "entryDateTime": "0001-01-01T00:00:00.0000000+00:00",
                        "transactionStatus": "Active"
                      },
                      "unrealisedGainLossReportingCurrency": {
                        "amount": 0,
                        "currency": "USD"
                      }
                    },
                    {
                      "groupById": 1,
                      "sequenceNumber": 5,
                      "effectiveDate": "2020-06-20T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "ABC"
                          }
                        }
                      },
                      "type": "Activity",
                      "movementName": "bond accrual",
                      "cashflow": {
                        "amount": 10373,
                        "currency": "USD"
                      },
                      "balance": {
                        "amount": 41889.24,
                        "currency": "USD"
                      },
                      "fxRate": 0,
                      "cashflowReportingCurrency": {
                        "amount": 10373,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 41889.24,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": -1,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 41889.24,
                        "currency": "USD"
                      },
                      "transaction": {
                        "transactionId": "tid_329432525234323",
                        "type": "Sell",
                        "instrumentIdentifiers": {},
                        "instrumentScope": "default",
                        "instrumentUid": "LUID_1C7YTL5M",
                        "transactionDate": "2019-06-17T00:00:00.0000000+00:00",
                        "settlementDate": "2019-06-20T00:00:00.0000000+00:00",
                        "units": 210.63,
                        "transactionPrice": {
                          "price": 48.0192,
                          "type": "Price"
                        },
                        "totalConsideration": {
                          "amount": 48.0192,
                          "currency": "USD"
                        },
                        "properties": {},
                        "source": "",
                        "entryDateTime": "0001-01-01T00:00:00.0000000+00:00",
                        "transactionStatus": "Active"
                      },
                      "unrealisedGainLossReportingCurrency": {
                        "amount": 0,
                        "currency": "USD"
                      }
                    },
                    {
                      "groupById": 1,
                      "sequenceNumber": 6,
                      "effectiveDate": "2020-06-21T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "ABC"
                          }
                        }
                      },
                      "type": "Activity",
                      "movementName": "principal",
                      "cashflow": {
                        "amount": 8775,
                        "currency": "USD"
                      },
                      "balance": {
                        "amount": 50665.24,
                        "currency": "USD"
                      },
                      "fxRate": 1,
                      "cashflowReportingCurrency": {
                        "amount": 8775,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 50665.24,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 50665.24,
                        "currency": "USD"
                      },
                      "transaction": {
                        "transactionId": "tid_124319009950924",
                        "type": "Sell",
                        "instrumentIdentifiers": {},
                        "instrumentScope": "default",
                        "instrumentUid": "LUID_1C7YTL5M",
                        "transactionDate": "2020-06-18T00:00:00.0000000+00:00",
                        "settlementDate": "2020-06-21T00:00:00.0000000+00:00",
                        "units": 179.01,
                        "transactionPrice": {
                          "price": 49.0184,
                          "type": "Price"
                        },
                        "totalConsideration": {
                          "amount": 49.0184,
                          "currency": "USD"
                        },
                        "properties": {},
                        "source": "",
                        "entryDateTime": "0001-01-01T00:00:00.0000000+00:00",
                        "transactionStatus": "Active"
                      },
                      "unrealisedGainLossReportingCurrency": {
                        "amount": 0,
                        "currency": "USD"
                      }
                    },
                    {
                      "groupById": 1,
                      "sequenceNumber": 7,
                      "effectiveDate": "2020-06-21T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "ABC"
                          }
                        }
                      },
                      "type": "Activity",
                      "movementName": "principal",
                      "cashflow": {
                        "amount": 13225.1,
                        "currency": "USD"
                      },
                      "balance": {
                        "amount": 63890.34,
                        "currency": "USD"
                      },
                      "fxRate": 1,
                      "cashflowReportingCurrency": {
                        "amount": 13225.1,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 63890.34,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 63890.34,
                        "currency": "USD"
                      },
                      "transaction": {
                        "transactionId": "tid_121309590059995",
                        "type": "Sell",
                        "instrumentIdentifiers": {},
                        "instrumentScope": "default",
                        "instrumentUid": "LUID_1C7YTL5M",
                        "transactionDate": "2020-06-18T00:00:00.0000000+00:00",
                        "settlementDate": "2020-06-21T00:00:00.0000000+00:00",
                        "units": 269.99,
                        "transactionPrice": {
                          "price": 48.9843,
                          "type": "Price"
                        },
                        "totalConsideration": {
                          "amount": 48.9843,
                          "currency": "USD"
                        },
                        "properties": {},
                        "source": "",
                        "entryDateTime": "0001-01-01T00:00:00.0000000+00:00",
                        "transactionStatus": "Active"
                      },
                      "unrealisedGainLossReportingCurrency": {
                        "amount": 0,
                        "currency": "USD"
                      }
                    },
                    {
                      "groupById": 1,
                      "sequenceNumber": 8,
                      "effectiveDate": "2020-06-30T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "ABC"
                          }
                        }
                      },
                      "type": "Closed",
                      "movementName": "",
                      "cashflow": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "balance": {
                        "amount": 63890.34,
                        "currency": "USD"
                      },
                      "fxRate": 1,
                      "cashflowReportingCurrency": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 63890.34,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 63890.34,
                        "currency": "USD"
                      },
                      "unrealisedGainLossReportingCurrency": {
                        "amount": 0,
                        "currency": "USD"
                      }
                    },
                    {
                      "groupById": 2,
                      "sequenceNumber": 0,
                      "effectiveDate": "2020-06-01T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "ABC"
                          }
                        }
                      },
                      "type": "Open",
                      "movementName": "",
                      "cashflow": {
                        "amount": 0,
                        "currency": "GBP"
                      },
                      "balance": {
                        "amount": 12738.22,
                        "currency": "GBP"
                      },
                      "fxRate": 1.3145,
                      "cashflowReportingCurrency": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 16744.39,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 16744.39,
                        "currency": "USD"
                      },
                      "unrealisedGainLossReportingCurrency": {
                        "amount": 0,
                        "currency": "USD"
                      }
                    },
                    {
                      "groupById": 2,
                      "sequenceNumber": 1,
                      "effectiveDate": "2020-06-13T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "ABC"
                          }
                        }
                      },
                      "type": "Activity",
                      "movementName": "principal",
                      "cashflow": {
                        "amount": 43000,
                        "currency": "GBP"
                      },
                      "balance": {
                        "amount": 30261.78,
                        "currency": "GBP"
                      },
                      "fxRate": 1.2,
                      "cashflowReportingCurrency": {
                        "amount": 51600,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 36314.14,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": -1458.52619,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": -36314.14,
                        "currency": "USD"
                      },
                      "transaction": {
                        "transactionId": "tid_124319009950924",
                        "type": "Buy",
                        "instrumentIdentifiers": {},
                        "instrumentScope": "default",
                        "instrumentUid": "LUID_1C7YTL5M",
                        "transactionDate": "2020-06-10T00:00:00.0000000+00:00",
                        "settlementDate": "2020-06-13T00:00:00.0000000+00:00",
                        "units": 1829.79,
                        "transactionPrice": {
                          "price": 23.5,
                          "type": "Price"
                        },
                        "totalConsideration": {
                          "amount": 23.5,
                          "currency": "USD"
                        },
                        "properties": {},
                        "source": "",
                        "entryDateTime": "0001-01-01T00:00:00.0000000+00:00",
                        "transactionStatus": "Active"
                      },
                      "unrealisedGainLossReportingCurrency": {
                        "amount": 0,
                        "currency": "USD"
                      }
                    },
                    {
                      "groupById": 2,
                      "sequenceNumber": 2,
                      "effectiveDate": "2020-06-18T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "ABC"
                          }
                        }
                      },
                      "type": "Activity",
                      "movementName": "principal",
                      "cashflow": {
                        "amount": 89994.71,
                        "currency": "GBP"
                      },
                      "balance": {
                        "amount": 59732.93,
                        "currency": "GBP"
                      },
                      "fxRate": 1.3,
                      "cashflowReportingCurrency": {
                        "amount": 116993.12,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 77652.81,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": -3026.178,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 77652.81,
                        "currency": "USD"
                      },
                      "transaction": {
                        "transactionId": "tid_121309590059995",
                        "type": "Sell",
                        "instrumentIdentifiers": {},
                        "instrumentScope": "default",
                        "instrumentUid": "LUID_1C7YTL5M",
                        "transactionDate": "2020-06-15T00:00:00.0000000+00:00",
                        "settlementDate": "2020-06-18T00:00:00.0000000+00:00",
                        "units": 3333.14,
                        "transactionPrice": {
                          "price": 27,
                          "type": "Price"
                        },
                        "totalConsideration": {
                          "amount": 27,
                          "currency": "USD"
                        },
                        "properties": {},
                        "source": "",
                        "entryDateTime": "0001-01-01T00:00:00.0000000+00:00",
                        "transactionStatus": "Active"
                      },
                      "unrealisedGainLossReportingCurrency": {
                        "amount": 0,
                        "currency": "USD"
                      }
                    },
                    {
                      "groupById": 2,
                      "sequenceNumber": 3,
                      "effectiveDate": "2020-06-30T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "ABC"
                          }
                        }
                      },
                      "type": "Closed",
                      "movementName": "",
                      "cashflow": {
                        "amount": 0,
                        "currency": "GBP"
                      },
                      "balance": {
                        "amount": 59732.93,
                        "currency": "GBP"
                      },
                      "fxRate": 1.3244,
                      "cashflowReportingCurrency": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 79110.29,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 77652.81,
                        "currency": "USD"
                      },
                      "unrealisedGainLossReportingCurrency": {
                        "amount": 0,
                        "currency": "USD"
                      }
                    },
                    {
                      "groupById": 3,
                      "sequenceNumber": 0,
                      "effectiveDate": "2020-06-01T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "XYZ"
                          }
                        }
                      },
                      "type": "Open",
                      "movementName": "",
                      "cashflow": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "balance": {
                        "amount": 10000,
                        "currency": "USD"
                      },
                      "fxRate": 1,
                      "cashflowReportingCurrency": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 10000,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 10000,
                        "currency": "USD"
                      },
                      "unrealisedGainLossReportingCurrency": {
                        "amount": 0,
                        "currency": "USD"
                      }
                    },
                    {
                      "groupById": 3,
                      "sequenceNumber": 1,
                      "effectiveDate": "2020-06-30T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "XYZ"
                          }
                        }
                      },
                      "type": "Closed",
                      "movementName": "",
                      "cashflow": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "balance": {
                        "amount": 10000,
                        "currency": "USD"
                      },
                      "fxRate": 1,
                      "cashflowReportingCurrency": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 10000,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 10000,
                        "currency": "USD"
                      },
                      "unrealisedGainLossReportingCurrency": {
                        "amount": 10000,
                        "currency": "USD"
                      }
                    }
                  ],
                  "links": []
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfPortfolioCashFlow"
                },
                "example": {
                  "values": [
                    {
                      "groupById": 1,
                      "sequenceNumber": 0,
                      "effectiveDate": "2020-06-01T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "ABC"
                          }
                        }
                      },
                      "type": "Open",
                      "movementName": "",
                      "cashflow": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "balance": {
                        "amount": 128347,
                        "currency": "USD"
                      },
                      "fxRate": 1,
                      "cashflowReportingCurrency": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 128347,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 128347,
                        "currency": "USD"
                      },
                      "unrealisedGainLossReportingCurrency": {
                        "amount": 0,
                        "currency": "USD"
                      }
                    },
                    {
                      "groupById": 1,
                      "sequenceNumber": 1,
                      "effectiveDate": "2020-06-13T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "ABC"
                          }
                        }
                      },
                      "type": "Activity",
                      "movementName": "principal",
                      "cashflow": {
                        "amount": 73494,
                        "currency": "USD"
                      },
                      "balance": {
                        "amount": 54853,
                        "currency": "USD"
                      },
                      "fxRate": 1,
                      "cashflowReportingCurrency": {
                        "amount": 73494,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 54853,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 54853,
                        "currency": "USD"
                      },
                      "transaction": {
                        "transactionId": "tid_234942982496001",
                        "type": "Buy",
                        "instrumentIdentifiers": {},
                        "instrumentScope": "default",
                        "instrumentUid": "LUID_1C7YTL5M",
                        "transactionDate": "2020-06-10T00:00:00.0000000+00:00",
                        "settlementDate": "2020-06-13T00:00:00.0000000+00:00",
                        "units": 1517.8,
                        "transactionPrice": {
                          "price": 48.4213,
                          "type": "Price"
                        },
                        "totalConsideration": {
                          "amount": 48.4213,
                          "currency": "USD"
                        },
                        "properties": {},
                        "source": "",
                        "entryDateTime": "0001-01-01T00:00:00.0000000+00:00",
                        "transactionStatus": "Active"
                      },
                      "unrealisedGainLossReportingCurrency": {
                        "amount": 0,
                        "currency": "USD"
                      }
                    },
                    {
                      "groupById": 1,
                      "sequenceNumber": 2,
                      "effectiveDate": "2020-06-14T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "ABC"
                          }
                        }
                      },
                      "type": "Activity",
                      "movementName": "principal",
                      "cashflow": {
                        "amount": 33731.44,
                        "currency": "USD"
                      },
                      "balance": {
                        "amount": 21121.56,
                        "currency": "USD"
                      },
                      "fxRate": 1,
                      "cashflowReportingCurrency": {
                        "amount": 33731.44,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 21121.56,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 21121.56,
                        "currency": "USD"
                      },
                      "transaction": {
                        "transactionId": "tid_234295929052090",
                        "type": "Buy",
                        "instrumentIdentifiers": {},
                        "instrumentScope": "default",
                        "instrumentUid": "LUID_1C7YTL5M",
                        "transactionDate": "2020-06-11T00:00:00.0000000+00:00",
                        "settlementDate": "2020-06-14T00:00:00.0000000+00:00",
                        "units": 696.97,
                        "transactionPrice": {
                          "price": 48.3974,
                          "type": "Price"
                        },
                        "totalConsideration": {
                          "amount": 48.3974,
                          "currency": "USD"
                        },
                        "properties": {},
                        "source": "",
                        "entryDateTime": "0001-01-01T00:00:00.0000000+00:00",
                        "transactionStatus": "Active"
                      },
                      "unrealisedGainLossReportingCurrency": {
                        "amount": 0,
                        "currency": "USD"
                      }
                    },
                    {
                      "groupById": 1,
                      "sequenceNumber": 3,
                      "effectiveDate": "2020-06-15T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "ABC"
                          }
                        }
                      },
                      "type": "Activity",
                      "movementName": "payment",
                      "cashflow": {
                        "amount": 20.68,
                        "currency": "USD"
                      },
                      "balance": {
                        "amount": 21142.24,
                        "currency": "USD"
                      },
                      "fxRate": 1,
                      "cashflowReportingCurrency": {
                        "amount": 20.68,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 21142.24,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 21142.24,
                        "currency": "USD"
                      },
                      "transaction": {
                        "transactionId": "tid_325452342424500",
                        "type": "Dividend",
                        "instrumentIdentifiers": {},
                        "instrumentScope": "default",
                        "instrumentUid": "LUID_1C7YTL5M",
                        "transactionDate": "2020-06-15T00:00:00.0000000+00:00",
                        "settlementDate": "2020-06-15T00:00:00.0000000+00:00",
                        "units": 0,
                        "transactionPrice": {
                          "price": 0,
                          "type": "Price"
                        },
                        "totalConsideration": {
                          "amount": 0,
                          "currency": "USD"
                        },
                        "properties": {},
                        "source": "",
                        "entryDateTime": "0001-01-01T00:00:00.0000000+00:00",
                        "transactionStatus": "Active"
                      },
                      "unrealisedGainLossReportingCurrency": {
                        "amount": 0,
                        "currency": "USD"
                      }
                    },
                    {
                      "groupById": 1,
                      "sequenceNumber": 4,
                      "effectiveDate": "2020-06-20T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "ABC"
                          }
                        }
                      },
                      "type": "Activity",
                      "movementName": "principal",
                      "cashflow": {
                        "amount": 10374,
                        "currency": "USD"
                      },
                      "balance": {
                        "amount": 31516.24,
                        "currency": "USD"
                      },
                      "fxRate": 1,
                      "cashflowReportingCurrency": {
                        "amount": 10374,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 31516.24,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 31516.24,
                        "currency": "USD"
                      },
                      "transaction": {
                        "transactionId": "tid_329432525234324",
                        "type": "Sell",
                        "instrumentIdentifiers": {},
                        "instrumentScope": "default",
                        "instrumentUid": "LUID_1C7YTL5M",
                        "transactionDate": "2020-06-17T00:00:00.0000000+00:00",
                        "settlementDate": "2020-06-20T00:00:00.0000000+00:00",
                        "units": 211.63,
                        "transactionPrice": {
                          "price": 49.0192,
                          "type": "Price"
                        },
                        "totalConsideration": {
                          "amount": 49.0192,
                          "currency": "USD"
                        },
                        "properties": {},
                        "source": "",
                        "entryDateTime": "0001-01-01T00:00:00.0000000+00:00",
                        "transactionStatus": "Active"
                      },
                      "unrealisedGainLossReportingCurrency": {
                        "amount": 0,
                        "currency": "USD"
                      }
                    },
                    {
                      "groupById": 1,
                      "sequenceNumber": 5,
                      "effectiveDate": "2020-06-20T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "ABC"
                          }
                        }
                      },
                      "type": "Activity",
                      "movementName": "bond accrual",
                      "cashflow": {
                        "amount": 10373,
                        "currency": "USD"
                      },
                      "balance": {
                        "amount": 41889.24,
                        "currency": "USD"
                      },
                      "fxRate": 0,
                      "cashflowReportingCurrency": {
                        "amount": 10373,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 41889.24,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": -1,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 41889.24,
                        "currency": "USD"
                      },
                      "transaction": {
                        "transactionId": "tid_329432525234323",
                        "type": "Sell",
                        "instrumentIdentifiers": {},
                        "instrumentScope": "default",
                        "instrumentUid": "LUID_1C7YTL5M",
                        "transactionDate": "2019-06-17T00:00:00.0000000+00:00",
                        "settlementDate": "2019-06-20T00:00:00.0000000+00:00",
                        "units": 210.63,
                        "transactionPrice": {
                          "price": 48.0192,
                          "type": "Price"
                        },
                        "totalConsideration": {
                          "amount": 48.0192,
                          "currency": "USD"
                        },
                        "properties": {},
                        "source": "",
                        "entryDateTime": "0001-01-01T00:00:00.0000000+00:00",
                        "transactionStatus": "Active"
                      },
                      "unrealisedGainLossReportingCurrency": {
                        "amount": 0,
                        "currency": "USD"
                      }
                    },
                    {
                      "groupById": 1,
                      "sequenceNumber": 6,
                      "effectiveDate": "2020-06-21T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "ABC"
                          }
                        }
                      },
                      "type": "Activity",
                      "movementName": "principal",
                      "cashflow": {
                        "amount": 8775,
                        "currency": "USD"
                      },
                      "balance": {
                        "amount": 50665.24,
                        "currency": "USD"
                      },
                      "fxRate": 1,
                      "cashflowReportingCurrency": {
                        "amount": 8775,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 50665.24,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 50665.24,
                        "currency": "USD"
                      },
                      "transaction": {
                        "transactionId": "tid_124319009950924",
                        "type": "Sell",
                        "instrumentIdentifiers": {},
                        "instrumentScope": "default",
                        "instrumentUid": "LUID_1C7YTL5M",
                        "transactionDate": "2020-06-18T00:00:00.0000000+00:00",
                        "settlementDate": "2020-06-21T00:00:00.0000000+00:00",
                        "units": 179.01,
                        "transactionPrice": {
                          "price": 49.0184,
                          "type": "Price"
                        },
                        "totalConsideration": {
                          "amount": 49.0184,
                          "currency": "USD"
                        },
                        "properties": {},
                        "source": "",
                        "entryDateTime": "0001-01-01T00:00:00.0000000+00:00",
                        "transactionStatus": "Active"
                      },
                      "unrealisedGainLossReportingCurrency": {
                        "amount": 0,
                        "currency": "USD"
                      }
                    },
                    {
                      "groupById": 1,
                      "sequenceNumber": 7,
                      "effectiveDate": "2020-06-21T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "ABC"
                          }
                        }
                      },
                      "type": "Activity",
                      "movementName": "principal",
                      "cashflow": {
                        "amount": 13225.1,
                        "currency": "USD"
                      },
                      "balance": {
                        "amount": 63890.34,
                        "currency": "USD"
                      },
                      "fxRate": 1,
                      "cashflowReportingCurrency": {
                        "amount": 13225.1,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 63890.34,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 63890.34,
                        "currency": "USD"
                      },
                      "transaction": {
                        "transactionId": "tid_121309590059995",
                        "type": "Sell",
                        "instrumentIdentifiers": {},
                        "instrumentScope": "default",
                        "instrumentUid": "LUID_1C7YTL5M",
                        "transactionDate": "2020-06-18T00:00:00.0000000+00:00",
                        "settlementDate": "2020-06-21T00:00:00.0000000+00:00",
                        "units": 269.99,
                        "transactionPrice": {
                          "price": 48.9843,
                          "type": "Price"
                        },
                        "totalConsideration": {
                          "amount": 48.9843,
                          "currency": "USD"
                        },
                        "properties": {},
                        "source": "",
                        "entryDateTime": "0001-01-01T00:00:00.0000000+00:00",
                        "transactionStatus": "Active"
                      },
                      "unrealisedGainLossReportingCurrency": {
                        "amount": 0,
                        "currency": "USD"
                      }
                    },
                    {
                      "groupById": 1,
                      "sequenceNumber": 8,
                      "effectiveDate": "2020-06-30T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "ABC"
                          }
                        }
                      },
                      "type": "Closed",
                      "movementName": "",
                      "cashflow": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "balance": {
                        "amount": 63890.34,
                        "currency": "USD"
                      },
                      "fxRate": 1,
                      "cashflowReportingCurrency": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 63890.34,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 63890.34,
                        "currency": "USD"
                      },
                      "unrealisedGainLossReportingCurrency": {
                        "amount": 0,
                        "currency": "USD"
                      }
                    },
                    {
                      "groupById": 2,
                      "sequenceNumber": 0,
                      "effectiveDate": "2020-06-01T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "ABC"
                          }
                        }
                      },
                      "type": "Open",
                      "movementName": "",
                      "cashflow": {
                        "amount": 0,
                        "currency": "GBP"
                      },
                      "balance": {
                        "amount": 12738.22,
                        "currency": "GBP"
                      },
                      "fxRate": 1.3145,
                      "cashflowReportingCurrency": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 16744.39,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 16744.39,
                        "currency": "USD"
                      },
                      "unrealisedGainLossReportingCurrency": {
                        "amount": 0,
                        "currency": "USD"
                      }
                    },
                    {
                      "groupById": 2,
                      "sequenceNumber": 1,
                      "effectiveDate": "2020-06-13T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "ABC"
                          }
                        }
                      },
                      "type": "Activity",
                      "movementName": "principal",
                      "cashflow": {
                        "amount": 43000,
                        "currency": "GBP"
                      },
                      "balance": {
                        "amount": 30261.78,
                        "currency": "GBP"
                      },
                      "fxRate": 1.2,
                      "cashflowReportingCurrency": {
                        "amount": 51600,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 36314.14,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": -1458.52619,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": -36314.14,
                        "currency": "USD"
                      },
                      "transaction": {
                        "transactionId": "tid_124319009950924",
                        "type": "Buy",
                        "instrumentIdentifiers": {},
                        "instrumentScope": "default",
                        "instrumentUid": "LUID_1C7YTL5M",
                        "transactionDate": "2020-06-10T00:00:00.0000000+00:00",
                        "settlementDate": "2020-06-13T00:00:00.0000000+00:00",
                        "units": 1829.79,
                        "transactionPrice": {
                          "price": 23.5,
                          "type": "Price"
                        },
                        "totalConsideration": {
                          "amount": 23.5,
                          "currency": "USD"
                        },
                        "properties": {},
                        "source": "",
                        "entryDateTime": "0001-01-01T00:00:00.0000000+00:00",
                        "transactionStatus": "Active"
                      },
                      "unrealisedGainLossReportingCurrency": {
                        "amount": 0,
                        "currency": "USD"
                      }
                    },
                    {
                      "groupById": 2,
                      "sequenceNumber": 2,
                      "effectiveDate": "2020-06-18T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "ABC"
                          }
                        }
                      },
                      "type": "Activity",
                      "movementName": "principal",
                      "cashflow": {
                        "amount": 89994.71,
                        "currency": "GBP"
                      },
                      "balance": {
                        "amount": 59732.93,
                        "currency": "GBP"
                      },
                      "fxRate": 1.3,
                      "cashflowReportingCurrency": {
                        "amount": 116993.12,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 77652.81,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": -3026.178,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 77652.81,
                        "currency": "USD"
                      },
                      "transaction": {
                        "transactionId": "tid_121309590059995",
                        "type": "Sell",
                        "instrumentIdentifiers": {},
                        "instrumentScope": "default",
                        "instrumentUid": "LUID_1C7YTL5M",
                        "transactionDate": "2020-06-15T00:00:00.0000000+00:00",
                        "settlementDate": "2020-06-18T00:00:00.0000000+00:00",
                        "units": 3333.14,
                        "transactionPrice": {
                          "price": 27,
                          "type": "Price"
                        },
                        "totalConsideration": {
                          "amount": 27,
                          "currency": "USD"
                        },
                        "properties": {},
                        "source": "",
                        "entryDateTime": "0001-01-01T00:00:00.0000000+00:00",
                        "transactionStatus": "Active"
                      },
                      "unrealisedGainLossReportingCurrency": {
                        "amount": 0,
                        "currency": "USD"
                      }
                    },
                    {
                      "groupById": 2,
                      "sequenceNumber": 3,
                      "effectiveDate": "2020-06-30T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "ABC"
                          }
                        }
                      },
                      "type": "Closed",
                      "movementName": "",
                      "cashflow": {
                        "amount": 0,
                        "currency": "GBP"
                      },
                      "balance": {
                        "amount": 59732.93,
                        "currency": "GBP"
                      },
                      "fxRate": 1.3244,
                      "cashflowReportingCurrency": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 79110.29,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 77652.81,
                        "currency": "USD"
                      },
                      "unrealisedGainLossReportingCurrency": {
                        "amount": 0,
                        "currency": "USD"
                      }
                    },
                    {
                      "groupById": 3,
                      "sequenceNumber": 0,
                      "effectiveDate": "2020-06-01T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "XYZ"
                          }
                        }
                      },
                      "type": "Open",
                      "movementName": "",
                      "cashflow": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "balance": {
                        "amount": 10000,
                        "currency": "USD"
                      },
                      "fxRate": 1,
                      "cashflowReportingCurrency": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 10000,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 10000,
                        "currency": "USD"
                      },
                      "unrealisedGainLossReportingCurrency": {
                        "amount": 0,
                        "currency": "USD"
                      }
                    },
                    {
                      "groupById": 3,
                      "sequenceNumber": 1,
                      "effectiveDate": "2020-06-30T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "XYZ"
                          }
                        }
                      },
                      "type": "Closed",
                      "movementName": "",
                      "cashflow": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "balance": {
                        "amount": 10000,
                        "currency": "USD"
                      },
                      "fxRate": 1,
                      "cashflowReportingCurrency": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 10000,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 10000,
                        "currency": "USD"
                      },
                      "unrealisedGainLossReportingCurrency": {
                        "amount": 10000,
                        "currency": "USD"
                      }
                    }
                  ],
                  "links": []
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfPortfolioCashFlow"
                },
                "example": {
                  "values": [
                    {
                      "groupById": 1,
                      "sequenceNumber": 0,
                      "effectiveDate": "2020-06-01T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "ABC"
                          }
                        }
                      },
                      "type": "Open",
                      "movementName": "",
                      "cashflow": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "balance": {
                        "amount": 128347,
                        "currency": "USD"
                      },
                      "fxRate": 1,
                      "cashflowReportingCurrency": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 128347,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 128347,
                        "currency": "USD"
                      },
                      "unrealisedGainLossReportingCurrency": {
                        "amount": 0,
                        "currency": "USD"
                      }
                    },
                    {
                      "groupById": 1,
                      "sequenceNumber": 1,
                      "effectiveDate": "2020-06-13T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "ABC"
                          }
                        }
                      },
                      "type": "Activity",
                      "movementName": "principal",
                      "cashflow": {
                        "amount": 73494,
                        "currency": "USD"
                      },
                      "balance": {
                        "amount": 54853,
                        "currency": "USD"
                      },
                      "fxRate": 1,
                      "cashflowReportingCurrency": {
                        "amount": 73494,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 54853,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 54853,
                        "currency": "USD"
                      },
                      "transaction": {
                        "transactionId": "tid_234942982496001",
                        "type": "Buy",
                        "instrumentIdentifiers": {},
                        "instrumentScope": "default",
                        "instrumentUid": "LUID_1C7YTL5M",
                        "transactionDate": "2020-06-10T00:00:00.0000000+00:00",
                        "settlementDate": "2020-06-13T00:00:00.0000000+00:00",
                        "units": 1517.8,
                        "transactionPrice": {
                          "price": 48.4213,
                          "type": "Price"
                        },
                        "totalConsideration": {
                          "amount": 48.4213,
                          "currency": "USD"
                        },
                        "properties": {},
                        "source": "",
                        "entryDateTime": "0001-01-01T00:00:00.0000000+00:00",
                        "transactionStatus": "Active"
                      },
                      "unrealisedGainLossReportingCurrency": {
                        "amount": 0,
                        "currency": "USD"
                      }
                    },
                    {
                      "groupById": 1,
                      "sequenceNumber": 2,
                      "effectiveDate": "2020-06-14T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "ABC"
                          }
                        }
                      },
                      "type": "Activity",
                      "movementName": "principal",
                      "cashflow": {
                        "amount": 33731.44,
                        "currency": "USD"
                      },
                      "balance": {
                        "amount": 21121.56,
                        "currency": "USD"
                      },
                      "fxRate": 1,
                      "cashflowReportingCurrency": {
                        "amount": 33731.44,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 21121.56,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 21121.56,
                        "currency": "USD"
                      },
                      "transaction": {
                        "transactionId": "tid_234295929052090",
                        "type": "Buy",
                        "instrumentIdentifiers": {},
                        "instrumentScope": "default",
                        "instrumentUid": "LUID_1C7YTL5M",
                        "transactionDate": "2020-06-11T00:00:00.0000000+00:00",
                        "settlementDate": "2020-06-14T00:00:00.0000000+00:00",
                        "units": 696.97,
                        "transactionPrice": {
                          "price": 48.3974,
                          "type": "Price"
                        },
                        "totalConsideration": {
                          "amount": 48.3974,
                          "currency": "USD"
                        },
                        "properties": {},
                        "source": "",
                        "entryDateTime": "0001-01-01T00:00:00.0000000+00:00",
                        "transactionStatus": "Active"
                      },
                      "unrealisedGainLossReportingCurrency": {
                        "amount": 0,
                        "currency": "USD"
                      }
                    },
                    {
                      "groupById": 1,
                      "sequenceNumber": 3,
                      "effectiveDate": "2020-06-15T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "ABC"
                          }
                        }
                      },
                      "type": "Activity",
                      "movementName": "payment",
                      "cashflow": {
                        "amount": 20.68,
                        "currency": "USD"
                      },
                      "balance": {
                        "amount": 21142.24,
                        "currency": "USD"
                      },
                      "fxRate": 1,
                      "cashflowReportingCurrency": {
                        "amount": 20.68,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 21142.24,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 21142.24,
                        "currency": "USD"
                      },
                      "transaction": {
                        "transactionId": "tid_325452342424500",
                        "type": "Dividend",
                        "instrumentIdentifiers": {},
                        "instrumentScope": "default",
                        "instrumentUid": "LUID_1C7YTL5M",
                        "transactionDate": "2020-06-15T00:00:00.0000000+00:00",
                        "settlementDate": "2020-06-15T00:00:00.0000000+00:00",
                        "units": 0,
                        "transactionPrice": {
                          "price": 0,
                          "type": "Price"
                        },
                        "totalConsideration": {
                          "amount": 0,
                          "currency": "USD"
                        },
                        "properties": {},
                        "source": "",
                        "entryDateTime": "0001-01-01T00:00:00.0000000+00:00",
                        "transactionStatus": "Active"
                      },
                      "unrealisedGainLossReportingCurrency": {
                        "amount": 0,
                        "currency": "USD"
                      }
                    },
                    {
                      "groupById": 1,
                      "sequenceNumber": 4,
                      "effectiveDate": "2020-06-20T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "ABC"
                          }
                        }
                      },
                      "type": "Activity",
                      "movementName": "principal",
                      "cashflow": {
                        "amount": 10374,
                        "currency": "USD"
                      },
                      "balance": {
                        "amount": 31516.24,
                        "currency": "USD"
                      },
                      "fxRate": 1,
                      "cashflowReportingCurrency": {
                        "amount": 10374,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 31516.24,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 31516.24,
                        "currency": "USD"
                      },
                      "transaction": {
                        "transactionId": "tid_329432525234324",
                        "type": "Sell",
                        "instrumentIdentifiers": {},
                        "instrumentScope": "default",
                        "instrumentUid": "LUID_1C7YTL5M",
                        "transactionDate": "2020-06-17T00:00:00.0000000+00:00",
                        "settlementDate": "2020-06-20T00:00:00.0000000+00:00",
                        "units": 211.63,
                        "transactionPrice": {
                          "price": 49.0192,
                          "type": "Price"
                        },
                        "totalConsideration": {
                          "amount": 49.0192,
                          "currency": "USD"
                        },
                        "properties": {},
                        "source": "",
                        "entryDateTime": "0001-01-01T00:00:00.0000000+00:00",
                        "transactionStatus": "Active"
                      },
                      "unrealisedGainLossReportingCurrency": {
                        "amount": 0,
                        "currency": "USD"
                      }
                    },
                    {
                      "groupById": 1,
                      "sequenceNumber": 5,
                      "effectiveDate": "2020-06-20T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "ABC"
                          }
                        }
                      },
                      "type": "Activity",
                      "movementName": "bond accrual",
                      "cashflow": {
                        "amount": 10373,
                        "currency": "USD"
                      },
                      "balance": {
                        "amount": 41889.24,
                        "currency": "USD"
                      },
                      "fxRate": 0,
                      "cashflowReportingCurrency": {
                        "amount": 10373,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 41889.24,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": -1,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 41889.24,
                        "currency": "USD"
                      },
                      "transaction": {
                        "transactionId": "tid_329432525234323",
                        "type": "Sell",
                        "instrumentIdentifiers": {},
                        "instrumentScope": "default",
                        "instrumentUid": "LUID_1C7YTL5M",
                        "transactionDate": "2019-06-17T00:00:00.0000000+00:00",
                        "settlementDate": "2019-06-20T00:00:00.0000000+00:00",
                        "units": 210.63,
                        "transactionPrice": {
                          "price": 48.0192,
                          "type": "Price"
                        },
                        "totalConsideration": {
                          "amount": 48.0192,
                          "currency": "USD"
                        },
                        "properties": {},
                        "source": "",
                        "entryDateTime": "0001-01-01T00:00:00.0000000+00:00",
                        "transactionStatus": "Active"
                      },
                      "unrealisedGainLossReportingCurrency": {
                        "amount": 0,
                        "currency": "USD"
                      }
                    },
                    {
                      "groupById": 1,
                      "sequenceNumber": 6,
                      "effectiveDate": "2020-06-21T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "ABC"
                          }
                        }
                      },
                      "type": "Activity",
                      "movementName": "principal",
                      "cashflow": {
                        "amount": 8775,
                        "currency": "USD"
                      },
                      "balance": {
                        "amount": 50665.24,
                        "currency": "USD"
                      },
                      "fxRate": 1,
                      "cashflowReportingCurrency": {
                        "amount": 8775,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 50665.24,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 50665.24,
                        "currency": "USD"
                      },
                      "transaction": {
                        "transactionId": "tid_124319009950924",
                        "type": "Sell",
                        "instrumentIdentifiers": {},
                        "instrumentScope": "default",
                        "instrumentUid": "LUID_1C7YTL5M",
                        "transactionDate": "2020-06-18T00:00:00.0000000+00:00",
                        "settlementDate": "2020-06-21T00:00:00.0000000+00:00",
                        "units": 179.01,
                        "transactionPrice": {
                          "price": 49.0184,
                          "type": "Price"
                        },
                        "totalConsideration": {
                          "amount": 49.0184,
                          "currency": "USD"
                        },
                        "properties": {},
                        "source": "",
                        "entryDateTime": "0001-01-01T00:00:00.0000000+00:00",
                        "transactionStatus": "Active"
                      },
                      "unrealisedGainLossReportingCurrency": {
                        "amount": 0,
                        "currency": "USD"
                      }
                    },
                    {
                      "groupById": 1,
                      "sequenceNumber": 7,
                      "effectiveDate": "2020-06-21T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "ABC"
                          }
                        }
                      },
                      "type": "Activity",
                      "movementName": "principal",
                      "cashflow": {
                        "amount": 13225.1,
                        "currency": "USD"
                      },
                      "balance": {
                        "amount": 63890.34,
                        "currency": "USD"
                      },
                      "fxRate": 1,
                      "cashflowReportingCurrency": {
                        "amount": 13225.1,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 63890.34,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 63890.34,
                        "currency": "USD"
                      },
                      "transaction": {
                        "transactionId": "tid_121309590059995",
                        "type": "Sell",
                        "instrumentIdentifiers": {},
                        "instrumentScope": "default",
                        "instrumentUid": "LUID_1C7YTL5M",
                        "transactionDate": "2020-06-18T00:00:00.0000000+00:00",
                        "settlementDate": "2020-06-21T00:00:00.0000000+00:00",
                        "units": 269.99,
                        "transactionPrice": {
                          "price": 48.9843,
                          "type": "Price"
                        },
                        "totalConsideration": {
                          "amount": 48.9843,
                          "currency": "USD"
                        },
                        "properties": {},
                        "source": "",
                        "entryDateTime": "0001-01-01T00:00:00.0000000+00:00",
                        "transactionStatus": "Active"
                      },
                      "unrealisedGainLossReportingCurrency": {
                        "amount": 0,
                        "currency": "USD"
                      }
                    },
                    {
                      "groupById": 1,
                      "sequenceNumber": 8,
                      "effectiveDate": "2020-06-30T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "ABC"
                          }
                        }
                      },
                      "type": "Closed",
                      "movementName": "",
                      "cashflow": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "balance": {
                        "amount": 63890.34,
                        "currency": "USD"
                      },
                      "fxRate": 1,
                      "cashflowReportingCurrency": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 63890.34,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 63890.34,
                        "currency": "USD"
                      },
                      "unrealisedGainLossReportingCurrency": {
                        "amount": 0,
                        "currency": "USD"
                      }
                    },
                    {
                      "groupById": 2,
                      "sequenceNumber": 0,
                      "effectiveDate": "2020-06-01T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "ABC"
                          }
                        }
                      },
                      "type": "Open",
                      "movementName": "",
                      "cashflow": {
                        "amount": 0,
                        "currency": "GBP"
                      },
                      "balance": {
                        "amount": 12738.22,
                        "currency": "GBP"
                      },
                      "fxRate": 1.3145,
                      "cashflowReportingCurrency": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 16744.39,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 16744.39,
                        "currency": "USD"
                      },
                      "unrealisedGainLossReportingCurrency": {
                        "amount": 0,
                        "currency": "USD"
                      }
                    },
                    {
                      "groupById": 2,
                      "sequenceNumber": 1,
                      "effectiveDate": "2020-06-13T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "ABC"
                          }
                        }
                      },
                      "type": "Activity",
                      "movementName": "principal",
                      "cashflow": {
                        "amount": 43000,
                        "currency": "GBP"
                      },
                      "balance": {
                        "amount": 30261.78,
                        "currency": "GBP"
                      },
                      "fxRate": 1.2,
                      "cashflowReportingCurrency": {
                        "amount": 51600,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 36314.14,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": -1458.52619,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": -36314.14,
                        "currency": "USD"
                      },
                      "transaction": {
                        "transactionId": "tid_124319009950924",
                        "type": "Buy",
                        "instrumentIdentifiers": {},
                        "instrumentScope": "default",
                        "instrumentUid": "LUID_1C7YTL5M",
                        "transactionDate": "2020-06-10T00:00:00.0000000+00:00",
                        "settlementDate": "2020-06-13T00:00:00.0000000+00:00",
                        "units": 1829.79,
                        "transactionPrice": {
                          "price": 23.5,
                          "type": "Price"
                        },
                        "totalConsideration": {
                          "amount": 23.5,
                          "currency": "USD"
                        },
                        "properties": {},
                        "source": "",
                        "entryDateTime": "0001-01-01T00:00:00.0000000+00:00",
                        "transactionStatus": "Active"
                      },
                      "unrealisedGainLossReportingCurrency": {
                        "amount": 0,
                        "currency": "USD"
                      }
                    },
                    {
                      "groupById": 2,
                      "sequenceNumber": 2,
                      "effectiveDate": "2020-06-18T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "ABC"
                          }
                        }
                      },
                      "type": "Activity",
                      "movementName": "principal",
                      "cashflow": {
                        "amount": 89994.71,
                        "currency": "GBP"
                      },
                      "balance": {
                        "amount": 59732.93,
                        "currency": "GBP"
                      },
                      "fxRate": 1.3,
                      "cashflowReportingCurrency": {
                        "amount": 116993.12,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 77652.81,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": -3026.178,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 77652.81,
                        "currency": "USD"
                      },
                      "transaction": {
                        "transactionId": "tid_121309590059995",
                        "type": "Sell",
                        "instrumentIdentifiers": {},
                        "instrumentScope": "default",
                        "instrumentUid": "LUID_1C7YTL5M",
                        "transactionDate": "2020-06-15T00:00:00.0000000+00:00",
                        "settlementDate": "2020-06-18T00:00:00.0000000+00:00",
                        "units": 3333.14,
                        "transactionPrice": {
                          "price": 27,
                          "type": "Price"
                        },
                        "totalConsideration": {
                          "amount": 27,
                          "currency": "USD"
                        },
                        "properties": {},
                        "source": "",
                        "entryDateTime": "0001-01-01T00:00:00.0000000+00:00",
                        "transactionStatus": "Active"
                      },
                      "unrealisedGainLossReportingCurrency": {
                        "amount": 0,
                        "currency": "USD"
                      }
                    },
                    {
                      "groupById": 2,
                      "sequenceNumber": 3,
                      "effectiveDate": "2020-06-30T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "ABC"
                          }
                        }
                      },
                      "type": "Closed",
                      "movementName": "",
                      "cashflow": {
                        "amount": 0,
                        "currency": "GBP"
                      },
                      "balance": {
                        "amount": 59732.93,
                        "currency": "GBP"
                      },
                      "fxRate": 1.3244,
                      "cashflowReportingCurrency": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 79110.29,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 77652.81,
                        "currency": "USD"
                      },
                      "unrealisedGainLossReportingCurrency": {
                        "amount": 0,
                        "currency": "USD"
                      }
                    },
                    {
                      "groupById": 3,
                      "sequenceNumber": 0,
                      "effectiveDate": "2020-06-01T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "XYZ"
                          }
                        }
                      },
                      "type": "Open",
                      "movementName": "",
                      "cashflow": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "balance": {
                        "amount": 10000,
                        "currency": "USD"
                      },
                      "fxRate": 1,
                      "cashflowReportingCurrency": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 10000,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 10000,
                        "currency": "USD"
                      },
                      "unrealisedGainLossReportingCurrency": {
                        "amount": 0,
                        "currency": "USD"
                      }
                    },
                    {
                      "groupById": 3,
                      "sequenceNumber": 1,
                      "effectiveDate": "2020-06-30T00:00:00.0000000+00:00",
                      "subHoldingKeys": {
                        "instrument/default/Strategy": {
                          "key": "Instrument/default/Strategy",
                          "value": {
                            "labelValue": "XYZ"
                          }
                        }
                      },
                      "type": "Closed",
                      "movementName": "",
                      "cashflow": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "balance": {
                        "amount": 10000,
                        "currency": "USD"
                      },
                      "fxRate": 1,
                      "cashflowReportingCurrency": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "balanceReportingCurrency": {
                        "amount": 10000,
                        "currency": "USD"
                      },
                      "translationGainLoss": {
                        "amount": 0,
                        "currency": "USD"
                      },
                      "costBasisReportingCurrency": {
                        "amount": 10000,
                        "currency": "USD"
                      },
                      "unrealisedGainLossReportingCurrency": {
                        "amount": 10000,
                        "currency": "USD"
                      }
                    }
                  ],
                  "links": []
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      }
    },
    "/api/transactionportfolios/{scope}/{code}/details": {
      "get": {
        "tags": [
          "Transaction Portfolios"
        ],
        "summary": "GetDetails: Get details",
        "description": "Get certain details associated with a transaction portfolio.",
        "operationId": "GetDetails",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the transaction portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the transaction portfolio.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the transaction portfolio. Together with the\r\n            scope this uniquely identifies the transaction portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the transaction portfolio. Together with the\r\n            scope this uniquely identifies the transaction portfolio.",
              "nullable": true
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime or cut label at which to retrieve the details of the transaction\r\n            portfolio. Defaults to the current LUSID system datetime if not specified.",
            "schema": {
              "type": "string",
              "description": "The effective datetime or cut label at which to retrieve the details of the transaction\r\n            portfolio. Defaults to the current LUSID system datetime if not specified.",
              "format": "dateorcutlabel",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the details of the transaction portfolio. Defaults\r\n            to returning the latest version of the details if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to retrieve the details of the transaction portfolio. Defaults\r\n            to returning the latest version of the details if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The details of the specified transaction portfolio",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioDetails"
                },
                "example": {
                  "originPortfolioId": {
                    "scope": "Region",
                    "code": "UK"
                  },
                  "baseCurrency": "GBP",
                  "corporateActionSourceId": {
                    "scope": "Sources",
                    "code": "Vendor1"
                  },
                  "subHoldingKeys": [
                    "Portfolio/Client/AccountType"
                  ],
                  "accountingMethod": "Default"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioDetails"
                },
                "example": {
                  "originPortfolioId": {
                    "scope": "Region",
                    "code": "UK"
                  },
                  "baseCurrency": "GBP",
                  "corporateActionSourceId": {
                    "scope": "Sources",
                    "code": "Vendor1"
                  },
                  "subHoldingKeys": [
                    "Portfolio/Client/AccountType"
                  ],
                  "accountingMethod": "Default"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioDetails"
                },
                "example": {
                  "originPortfolioId": {
                    "scope": "Region",
                    "code": "UK"
                  },
                  "baseCurrency": "GBP",
                  "corporateActionSourceId": {
                    "scope": "Sources",
                    "code": "Vendor1"
                  },
                  "subHoldingKeys": [
                    "Portfolio/Client/AccountType"
                  ],
                  "accountingMethod": "Default"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      },
      "post": {
        "tags": [
          "Transaction Portfolios"
        ],
        "summary": "UpsertPortfolioDetails: Upsert portfolio details",
        "description": "Create or update certain details for a particular transaction portfolio. The details are updated if they already exist, and inserted if they do not.\r\n            \r\nNote that not all elements of a transaction portfolio definition are\r\nmodifiable once it has been created due to the potential implications for data already stored.",
        "operationId": "UpsertPortfolioDetails",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the transaction portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the transaction portfolio.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the transaction portfolio. Together with the\r\n             scope this uniquely identifies the transaction portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the transaction portfolio. Together with the\r\n             scope this uniquely identifies the transaction portfolio.",
              "nullable": true
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime or cut label at which the updated or inserted details should become valid.\r\n             Defaults to the current LUSID system datetime if not specified.",
            "schema": {
              "type": "string",
              "description": "The effective datetime or cut label at which the updated or inserted details should become valid.\r\n             Defaults to the current LUSID system datetime if not specified.",
              "format": "dateorcutlabel",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "The details to create or update for the specified transaction portfolio.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePortfolioDetails"
              },
              "example": {
                "corporateActionSourceId": {
                  "scope": "Sources",
                  "code": "Vendor1"
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePortfolioDetails"
              },
              "example": {
                "corporateActionSourceId": {
                  "scope": "Sources",
                  "code": "Vendor1"
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePortfolioDetails"
              },
              "example": {
                "corporateActionSourceId": {
                  "scope": "Sources",
                  "code": "Vendor1"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePortfolioDetails"
              },
              "example": {
                "corporateActionSourceId": {
                  "scope": "Sources",
                  "code": "Vendor1"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The newly updated or inserted details",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioDetails"
                },
                "example": {
                  "originPortfolioId": {
                    "scope": "Region",
                    "code": "UK"
                  },
                  "baseCurrency": "GBP",
                  "corporateActionSourceId": {
                    "scope": "Sources",
                    "code": "Vendor1"
                  },
                  "subHoldingKeys": [
                    "Portfolio/Client/AccountType"
                  ],
                  "accountingMethod": "Default"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioDetails"
                },
                "example": {
                  "originPortfolioId": {
                    "scope": "Region",
                    "code": "UK"
                  },
                  "baseCurrency": "GBP",
                  "corporateActionSourceId": {
                    "scope": "Sources",
                    "code": "Vendor1"
                  },
                  "subHoldingKeys": [
                    "Portfolio/Client/AccountType"
                  ],
                  "accountingMethod": "Default"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioDetails"
                },
                "example": {
                  "originPortfolioId": {
                    "scope": "Region",
                    "code": "UK"
                  },
                  "baseCurrency": "GBP",
                  "corporateActionSourceId": {
                    "scope": "Sources",
                    "code": "Vendor1"
                  },
                  "subHoldingKeys": [
                    "Portfolio/Client/AccountType"
                  ],
                  "accountingMethod": "Default"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      }
    },
    "/api/transactionportfolios/{scope}/{code}/holdings": {
      "put": {
        "tags": [
          "Transaction Portfolios"
        ],
        "summary": "SetHoldings: Set holdings",
        "description": "Set the holdings of the specified transaction portfolio to the provided targets. LUSID will automatically\r\nconstruct adjustment transactions to ensure that the entire set of holdings for the transaction portfolio\r\nare always set to the provided targets for the specified effective datetime. Read more about the difference between\r\nadjusting and setting holdings here https://support.lusid.com/how-do-i-adjust-my-holdings.",
        "operationId": "SetHoldings",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the transaction portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the transaction portfolio.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the transaction portfolio. Together with the scope this uniquely identifies\r\n            the transaction portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the transaction portfolio. Together with the scope this uniquely identifies\r\n            the transaction portfolio.",
              "nullable": true
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime or cut label at which the holdings should be set to the provided targets.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The effective datetime or cut label at which the holdings should be set to the provided targets.",
              "format": "dateorcutlabel"
            }
          },
          {
            "name": "reconciliationMethods",
            "in": "query",
            "description": "Optional parameter for specifying a reconciliation method: e.g. FxForward.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Optional parameter for specifying a reconciliation method: e.g. FxForward.",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "requestBody": {
          "description": "The complete set of target holdings for the transaction portfolio.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AdjustHoldingRequest"
                },
                "description": "The complete set of target holdings for the transaction portfolio."
              },
              "example": [
                {
                  "instrumentIdentifiers": {
                    "instrument/default/Figi": "BBG000C6K6G9",
                    "instrument/default/Isin": "GB00BH4HKS39"
                  },
                  "subHoldingKeys": {
                    "transaction/Algo/Name": {
                      "key": "Transaction/Algo/Name",
                      "value": {
                        "labelValue": "Algo1"
                      }
                    }
                  },
                  "properties": {
                    "holding/Entity/Name": {
                      "key": "Holding/Entity/Name",
                      "value": {
                        "labelValue": "Financial Entity"
                      }
                    }
                  },
                  "taxLots": [
                    {
                      "units": 100,
                      "cost": {
                        "amount": 10000,
                        "currency": "GBP"
                      },
                      "portfolioCost": 10000,
                      "price": 100,
                      "purchaseDate": "2018-03-05T00:00:00.0000000+00:00",
                      "settlementDate": "2018-03-08T00:00:00.0000000+00:00"
                    }
                  ],
                  "currency": "GBP"
                }
              ]
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AdjustHoldingRequest"
                },
                "description": "The complete set of target holdings for the transaction portfolio."
              },
              "example": [
                {
                  "instrumentIdentifiers": {
                    "instrument/default/Figi": "BBG000C6K6G9",
                    "instrument/default/Isin": "GB00BH4HKS39"
                  },
                  "subHoldingKeys": {
                    "transaction/Algo/Name": {
                      "key": "Transaction/Algo/Name",
                      "value": {
                        "labelValue": "Algo1"
                      }
                    }
                  },
                  "properties": {
                    "holding/Entity/Name": {
                      "key": "Holding/Entity/Name",
                      "value": {
                        "labelValue": "Financial Entity"
                      }
                    }
                  },
                  "taxLots": [
                    {
                      "units": 100,
                      "cost": {
                        "amount": 10000,
                        "currency": "GBP"
                      },
                      "portfolioCost": 10000,
                      "price": 100,
                      "purchaseDate": "2018-03-05T00:00:00.0000000+00:00",
                      "settlementDate": "2018-03-08T00:00:00.0000000+00:00"
                    }
                  ],
                  "currency": "GBP"
                }
              ]
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AdjustHoldingRequest"
                },
                "description": "The complete set of target holdings for the transaction portfolio."
              },
              "example": [
                {
                  "instrumentIdentifiers": {
                    "instrument/default/Figi": "BBG000C6K6G9",
                    "instrument/default/Isin": "GB00BH4HKS39"
                  },
                  "subHoldingKeys": {
                    "transaction/Algo/Name": {
                      "key": "Transaction/Algo/Name",
                      "value": {
                        "labelValue": "Algo1"
                      }
                    }
                  },
                  "properties": {
                    "holding/Entity/Name": {
                      "key": "Holding/Entity/Name",
                      "value": {
                        "labelValue": "Financial Entity"
                      }
                    }
                  },
                  "taxLots": [
                    {
                      "units": 100,
                      "cost": {
                        "amount": 10000,
                        "currency": "GBP"
                      },
                      "portfolioCost": 10000,
                      "price": 100,
                      "purchaseDate": "2018-03-05T00:00:00.0000000+00:00",
                      "settlementDate": "2018-03-08T00:00:00.0000000+00:00"
                    }
                  ],
                  "currency": "GBP"
                }
              ]
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AdjustHoldingRequest"
                },
                "description": "The complete set of target holdings for the transaction portfolio."
              },
              "example": [
                {
                  "instrumentIdentifiers": {
                    "instrument/default/Figi": "BBG000C6K6G9",
                    "instrument/default/Isin": "GB00BH4HKS39"
                  },
                  "subHoldingKeys": {
                    "transaction/Algo/Name": {
                      "key": "Transaction/Algo/Name",
                      "value": {
                        "labelValue": "Algo1"
                      }
                    }
                  },
                  "properties": {
                    "holding/Entity/Name": {
                      "key": "Holding/Entity/Name",
                      "value": {
                        "labelValue": "Financial Entity"
                      }
                    }
                  },
                  "taxLots": [
                    {
                      "units": 100,
                      "cost": {
                        "amount": 10000,
                        "currency": "GBP"
                      },
                      "portfolioCost": 10000,
                      "price": 100,
                      "purchaseDate": "2018-03-05T00:00:00.0000000+00:00",
                      "settlementDate": "2018-03-08T00:00:00.0000000+00:00"
                    }
                  ],
                  "currency": "GBP"
                }
              ]
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The version of the transaction portfolio that contains the newly set holdings",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AdjustHolding"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdjustHolding"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdjustHolding"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      },
      "post": {
        "tags": [
          "Transaction Portfolios"
        ],
        "summary": "AdjustHoldings: Adjust holdings",
        "description": "Adjust one or more holdings of the specified transaction portfolio to the provided targets. LUSID will\r\nautomatically construct adjustment transactions to ensure that the holdings which have been adjusted are\r\nalways set to the provided targets for the specified effective datetime. Read more about the difference between\r\nadjusting and setting holdings here https://support.lusid.com/how-do-i-adjust-my-holdings.",
        "operationId": "AdjustHoldings",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the transaction portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the transaction portfolio.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the transaction portfolio. Together with the scope this uniquely identifies\r\n            the transaction portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the transaction portfolio. Together with the scope this uniquely identifies\r\n            the transaction portfolio.",
              "nullable": true
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime or cut label at which the holdings should be set to the provided targets.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The effective datetime or cut label at which the holdings should be set to the provided targets.",
              "format": "dateorcutlabel"
            }
          },
          {
            "name": "reconciliationMethods",
            "in": "query",
            "description": "Optional parameter for specifying a reconciliation method: e.g. FxForward.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Optional parameter for specifying a reconciliation method: e.g. FxForward.",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "requestBody": {
          "description": "The selected set of holdings to adjust to the provided targets for the\r\n            transaction portfolio.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AdjustHoldingRequest"
                },
                "description": "The selected set of holdings to adjust to the provided targets for the\r\n            transaction portfolio."
              },
              "example": [
                {
                  "instrumentIdentifiers": {
                    "instrument/default/Figi": "BBG000C6K6G9",
                    "instrument/default/Isin": "GB00BH4HKS39"
                  },
                  "subHoldingKeys": {
                    "transaction/Algo/Name": {
                      "key": "Transaction/Algo/Name",
                      "value": {
                        "labelValue": "Algo1"
                      }
                    }
                  },
                  "properties": {
                    "holding/Entity/Name": {
                      "key": "Holding/Entity/Name",
                      "value": {
                        "labelValue": "Financial Entity"
                      }
                    }
                  },
                  "taxLots": [
                    {
                      "units": 100,
                      "cost": {
                        "amount": 10000,
                        "currency": "GBP"
                      },
                      "portfolioCost": 10000,
                      "price": 100,
                      "purchaseDate": "2018-03-05T00:00:00.0000000+00:00",
                      "settlementDate": "2018-03-08T00:00:00.0000000+00:00"
                    }
                  ],
                  "currency": "GBP"
                }
              ]
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AdjustHoldingRequest"
                },
                "description": "The selected set of holdings to adjust to the provided targets for the\r\n            transaction portfolio."
              },
              "example": [
                {
                  "instrumentIdentifiers": {
                    "instrument/default/Figi": "BBG000C6K6G9",
                    "instrument/default/Isin": "GB00BH4HKS39"
                  },
                  "subHoldingKeys": {
                    "transaction/Algo/Name": {
                      "key": "Transaction/Algo/Name",
                      "value": {
                        "labelValue": "Algo1"
                      }
                    }
                  },
                  "properties": {
                    "holding/Entity/Name": {
                      "key": "Holding/Entity/Name",
                      "value": {
                        "labelValue": "Financial Entity"
                      }
                    }
                  },
                  "taxLots": [
                    {
                      "units": 100,
                      "cost": {
                        "amount": 10000,
                        "currency": "GBP"
                      },
                      "portfolioCost": 10000,
                      "price": 100,
                      "purchaseDate": "2018-03-05T00:00:00.0000000+00:00",
                      "settlementDate": "2018-03-08T00:00:00.0000000+00:00"
                    }
                  ],
                  "currency": "GBP"
                }
              ]
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AdjustHoldingRequest"
                },
                "description": "The selected set of holdings to adjust to the provided targets for the\r\n            transaction portfolio."
              },
              "example": [
                {
                  "instrumentIdentifiers": {
                    "instrument/default/Figi": "BBG000C6K6G9",
                    "instrument/default/Isin": "GB00BH4HKS39"
                  },
                  "subHoldingKeys": {
                    "transaction/Algo/Name": {
                      "key": "Transaction/Algo/Name",
                      "value": {
                        "labelValue": "Algo1"
                      }
                    }
                  },
                  "properties": {
                    "holding/Entity/Name": {
                      "key": "Holding/Entity/Name",
                      "value": {
                        "labelValue": "Financial Entity"
                      }
                    }
                  },
                  "taxLots": [
                    {
                      "units": 100,
                      "cost": {
                        "amount": 10000,
                        "currency": "GBP"
                      },
                      "portfolioCost": 10000,
                      "price": 100,
                      "purchaseDate": "2018-03-05T00:00:00.0000000+00:00",
                      "settlementDate": "2018-03-08T00:00:00.0000000+00:00"
                    }
                  ],
                  "currency": "GBP"
                }
              ]
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AdjustHoldingRequest"
                },
                "description": "The selected set of holdings to adjust to the provided targets for the\r\n            transaction portfolio."
              },
              "example": [
                {
                  "instrumentIdentifiers": {
                    "instrument/default/Figi": "BBG000C6K6G9",
                    "instrument/default/Isin": "GB00BH4HKS39"
                  },
                  "subHoldingKeys": {
                    "transaction/Algo/Name": {
                      "key": "Transaction/Algo/Name",
                      "value": {
                        "labelValue": "Algo1"
                      }
                    }
                  },
                  "properties": {
                    "holding/Entity/Name": {
                      "key": "Holding/Entity/Name",
                      "value": {
                        "labelValue": "Financial Entity"
                      }
                    }
                  },
                  "taxLots": [
                    {
                      "units": 100,
                      "cost": {
                        "amount": 10000,
                        "currency": "GBP"
                      },
                      "portfolioCost": 10000,
                      "price": 100,
                      "purchaseDate": "2018-03-05T00:00:00.0000000+00:00",
                      "settlementDate": "2018-03-08T00:00:00.0000000+00:00"
                    }
                  ],
                  "currency": "GBP"
                }
              ]
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The version of the transaction portfolio that contains the newly adjusted holdings",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AdjustHolding"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdjustHolding"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdjustHolding"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      },
      "delete": {
        "tags": [
          "Transaction Portfolios"
        ],
        "summary": "CancelAdjustHoldings: Cancel adjust holdings",
        "description": "Cancel all previous holding adjustments made on the specified transaction portfolio for a specified effective\r\ndatetime. This should be used to undo holding adjustments made via set holdings or adjust holdings.",
        "operationId": "CancelAdjustHoldings",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the transaction portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the transaction portfolio.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the transaction portfolio. Together with the scope this uniquely identifies\r\n            the transaction portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the transaction portfolio. Together with the scope this uniquely identifies\r\n            the transaction portfolio.",
              "nullable": true
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime or cut label at which the holding adjustments should be undone.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The effective datetime or cut label at which the holding adjustments should be undone.",
              "format": "dateorcutlabel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The datetime that the holding adjustments were cancelled",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      },
      "get": {
        "tags": [
          "Transaction Portfolios"
        ],
        "summary": "GetHoldings: Get holdings",
        "description": "Calculate holdings for a transaction portfolio.",
        "operationId": "GetHoldings",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the transaction portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the transaction portfolio.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the transaction portfolio. Together with the scope this uniquely identifies\r\n            the transaction portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the transaction portfolio. Together with the scope this uniquely identifies\r\n            the transaction portfolio.",
              "nullable": true
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective datetime or cut label at which to retrieve the holdings of the transaction\r\n            portfolio. Defaults to the current LUSID system datetime if not specified.",
            "schema": {
              "type": "string",
              "description": "The effective datetime or cut label at which to retrieve the holdings of the transaction\r\n            portfolio. Defaults to the current LUSID system datetime if not specified.",
              "format": "dateorcutlabel",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the holdings of the transaction portfolio. Defaults\r\n            to return the latest version if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to retrieve the holdings of the transaction portfolio. Defaults\r\n            to return the latest version if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the result set.\r\n            For example, to filter on the Holding Type, use \"holdingType eq 'p'\".\r\n            For more information about filtering LUSID results, see https://support.lusid.com/knowledgebase/article/KA-01914.",
            "schema": {
              "maxLength": 16384,
              "minLength": 0,
              "pattern": "^[\\s\\S]*$",
              "type": "string",
              "description": "Expression to filter the result set.\r\n            For example, to filter on the Holding Type, use \"holdingType eq 'p'\".\r\n            For more information about filtering LUSID results, see https://support.lusid.com/knowledgebase/article/KA-01914.",
              "nullable": true
            }
          },
          {
            "name": "propertyKeys",
            "in": "query",
            "description": "A list of property keys from the \"Instrument\" or \"Holding\" domain to decorate onto\r\n            holdings. These must have the format {domain}/{scope}/{code}, for example \"Instrument/system/Name\" or \"Holding/system/Cost\".",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
              },
              "description": "A list of property keys from the \"Instrument\" or \"Holding\" domain to decorate onto\r\n            holdings. These must have the format {domain}/{scope}/{code}, for example \"Instrument/system/Name\" or \"Holding/system/Cost\".",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "byTaxlots",
            "in": "query",
            "description": "Whether or not to expand the holdings to return the underlying tax-lots. Defaults to\r\n            False.",
            "schema": {
              "type": "boolean",
              "description": "Whether or not to expand the holdings to return the underlying tax-lots. Defaults to\r\n            False.",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The holdings and version of the specified transaction portfolio",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/VersionedResourceListOfPortfolioHolding"
                },
                "example": {
                  "version": {
                    "effectiveFrom": "2019-03-05T12:00:00.0000000+00:00",
                    "asAtDate": "2019-03-05T12:00:00.0000000+00:00"
                  },
                  "values": [
                    {
                      "instrumentScope": "default",
                      "instrumentUid": "LUID_XH4GNUEX",
                      "subHoldingKeys": {
                        "transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "Algo1"
                          }
                        }
                      },
                      "properties": {
                        "instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "Example Instrument 1"
                          },
                          "effectiveFrom": "2010-01-01T00:00:00.0000000+00:00"
                        }
                      },
                      "holdingType": "P",
                      "units": 10,
                      "settledUnits": 10,
                      "cost": {
                        "amount": 2.5,
                        "currency": "GBP"
                      },
                      "costPortfolioCcy": {
                        "amount": 2.5,
                        "currency": "GBP"
                      },
                      "currency": "ZZZ",
                      "holdingTypeName": "Position"
                    }
                  ],
                  "links": []
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VersionedResourceListOfPortfolioHolding"
                },
                "example": {
                  "version": {
                    "effectiveFrom": "2019-03-05T12:00:00.0000000+00:00",
                    "asAtDate": "2019-03-05T12:00:00.0000000+00:00"
                  },
                  "values": [
                    {
                      "instrumentScope": "default",
                      "instrumentUid": "LUID_XH4GNUEX",
                      "subHoldingKeys": {
                        "transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "Algo1"
                          }
                        }
                      },
                      "properties": {
                        "instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "Example Instrument 1"
                          },
                          "effectiveFrom": "2010-01-01T00:00:00.0000000+00:00"
                        }
                      },
                      "holdingType": "P",
                      "units": 10,
                      "settledUnits": 10,
                      "cost": {
                        "amount": 2.5,
                        "currency": "GBP"
                      },
                      "costPortfolioCcy": {
                        "amount": 2.5,
                        "currency": "GBP"
                      },
                      "currency": "ZZZ",
                      "holdingTypeName": "Position"
                    }
                  ],
                  "links": []
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/VersionedResourceListOfPortfolioHolding"
                },
                "example": {
                  "version": {
                    "effectiveFrom": "2019-03-05T12:00:00.0000000+00:00",
                    "asAtDate": "2019-03-05T12:00:00.0000000+00:00"
                  },
                  "values": [
                    {
                      "instrumentScope": "default",
                      "instrumentUid": "LUID_XH4GNUEX",
                      "subHoldingKeys": {
                        "transaction/Algo/Name": {
                          "key": "Transaction/Algo/Name",
                          "value": {
                            "labelValue": "Algo1"
                          }
                        }
                      },
                      "properties": {
                        "instrument/default/Name": {
                          "key": "Instrument/default/Name",
                          "value": {
                            "labelValue": "Example Instrument 1"
                          },
                          "effectiveFrom": "2010-01-01T00:00:00.0000000+00:00"
                        }
                      },
                      "holdingType": "P",
                      "units": 10,
                      "settledUnits": 10,
                      "cost": {
                        "amount": 2.5,
                        "currency": "GBP"
                      },
                      "costPortfolioCcy": {
                        "amount": 2.5,
                        "currency": "GBP"
                      },
                      "currency": "ZZZ",
                      "holdingTypeName": "Position"
                    }
                  ],
                  "links": []
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      }
    },
    "/api/transactionportfolios/{scope}/{code}/holdingsadjustments": {
      "get": {
        "tags": [
          "Transaction Portfolios"
        ],
        "summary": "ListHoldingsAdjustments: List holdings adjustments",
        "description": "List the holdings adjustments made to the specified transaction portfolio over a specified interval of effective time.",
        "operationId": "ListHoldingsAdjustments",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the transaction portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the transaction portfolio.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the transaction portfolio. Together with the scope this uniquely identifies\r\n            the transaction portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the transaction portfolio. Together with the scope this uniquely identifies\r\n            the transaction portfolio.",
              "nullable": true
            }
          },
          {
            "name": "fromEffectiveAt",
            "in": "query",
            "description": "The lower bound effective datetime or cut label (inclusive) from which to retrieve the holdings\r\n            adjustments. There is no lower bound if this is not specified.",
            "schema": {
              "type": "string",
              "description": "The lower bound effective datetime or cut label (inclusive) from which to retrieve the holdings\r\n            adjustments. There is no lower bound if this is not specified.",
              "format": "dateorcutlabel",
              "nullable": true
            }
          },
          {
            "name": "toEffectiveAt",
            "in": "query",
            "description": "The upper bound effective datetime or cut label (inclusive) from which to retrieve the holdings\r\n            adjustments. There is no upper bound if this is not specified.",
            "schema": {
              "type": "string",
              "description": "The upper bound effective datetime or cut label (inclusive) from which to retrieve the holdings\r\n            adjustments. There is no upper bound if this is not specified.",
              "format": "dateorcutlabel",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the holdings adjustments. Defaults to return the\r\n            latest version of each holding adjustment if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to retrieve the holdings adjustments. Defaults to return the\r\n            latest version of each holding adjustment if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The record of holdings adjustments made to the specified transaction portfolio",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfHoldingsAdjustmentHeader"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfHoldingsAdjustmentHeader"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceListOfHoldingsAdjustmentHeader"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      }
    },
    "/api/transactionportfolios/{scope}/{code}/holdingsadjustments/{effectiveAt}": {
      "get": {
        "tags": [
          "Transaction Portfolios"
        ],
        "summary": "GetHoldingsAdjustment: Get holdings adjustment",
        "description": "Get a holdings adjustment made to a transaction portfolio at a specific effective datetime. Note that a\r\nholdings adjustment will only be returned if one exists for the specified effective datetime.",
        "operationId": "GetHoldingsAdjustment",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the transaction portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the transaction portfolio.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the transaction portfolio. Together with the scope this uniquely identifies\r\n            the transaction portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the transaction portfolio. Together with the scope this uniquely identifies\r\n            the transaction portfolio.",
              "nullable": true
            }
          },
          {
            "name": "effectiveAt",
            "in": "path",
            "description": "The effective datetime or cut label of the holdings adjustment.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The effective datetime or cut label of the holdings adjustment.",
              "format": "dateorcutlabel",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve the holdings adjustment. Defaults to the return the latest\r\n            version of the holdings adjustment if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to retrieve the holdings adjustment. Defaults to the return the latest\r\n            version of the holdings adjustment if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "propertyKeys",
            "in": "query",
            "description": "A list of property keys from the ‘Instrument' domain to decorate onto holdings adjustments.\r\n            These must have the format {domain}/{scope}/{code}, for example 'Instrument/system/Name'.\r\n            Note that properties from the 'Holding’ domain are automatically returned.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
              },
              "description": "A list of property keys from the ‘Instrument' domain to decorate onto holdings adjustments.\r\n            These must have the format {domain}/{scope}/{code}, for example 'Instrument/system/Name'.\r\n            Note that properties from the 'Holding’ domain are automatically returned.",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The details of the requested holdings adjustment",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/HoldingsAdjustment"
                },
                "example": {
                  "value": {
                    "effectiveAt": "0001-01-01T00:00:00.0000000+00:00",
                    "version": {
                      "effectiveFrom": "2019-03-05T00:00:00.0000000+00:00",
                      "asAtDate": "2019-03-08T00:00:00.0000000+00:00"
                    },
                    "unmatchedHoldingMethod": "KeepTheSame",
                    "adjustments": [
                      {
                        "instrumentIdentifiers": {
                          "instrument/default/ClientInternal": "CLI-192836"
                        },
                        "instrumentScope": "default",
                        "instrumentUid": "LUID_GNMKYXXK",
                        "subHoldingKeys": {},
                        "properties": {},
                        "taxLots": [
                          {
                            "units": 10,
                            "cost": {
                              "amount": 120,
                              "currency": "GBP"
                            }
                          }
                        ],
                        "currency": "ZZZ"
                      },
                      {
                        "instrumentIdentifiers": {
                          "instrument/default/ClientInternal": "CLI-462810"
                        },
                        "instrumentScope": "default",
                        "instrumentUid": "LUID_LE9E5SJE",
                        "subHoldingKeys": {},
                        "properties": {},
                        "taxLots": [
                          {
                            "units": 10,
                            "cost": {
                              "amount": 120,
                              "currency": "GBP"
                            }
                          }
                        ],
                        "currency": "ZZZ"
                      }
                    ]
                  }
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HoldingsAdjustment"
                },
                "example": {
                  "value": {
                    "effectiveAt": "0001-01-01T00:00:00.0000000+00:00",
                    "version": {
                      "effectiveFrom": "2019-03-05T00:00:00.0000000+00:00",
                      "asAtDate": "2019-03-08T00:00:00.0000000+00:00"
                    },
                    "unmatchedHoldingMethod": "KeepTheSame",
                    "adjustments": [
                      {
                        "instrumentIdentifiers": {
                          "instrument/default/ClientInternal": "CLI-192836"
                        },
                        "instrumentScope": "default",
                        "instrumentUid": "LUID_GNMKYXXK",
                        "subHoldingKeys": {},
                        "properties": {},
                        "taxLots": [
                          {
                            "units": 10,
                            "cost": {
                              "amount": 120,
                              "currency": "GBP"
                            }
                          }
                        ],
                        "currency": "ZZZ"
                      },
                      {
                        "instrumentIdentifiers": {
                          "instrument/default/ClientInternal": "CLI-462810"
                        },
                        "instrumentScope": "default",
                        "instrumentUid": "LUID_LE9E5SJE",
                        "subHoldingKeys": {},
                        "properties": {},
                        "taxLots": [
                          {
                            "units": 10,
                            "cost": {
                              "amount": 120,
                              "currency": "GBP"
                            }
                          }
                        ],
                        "currency": "ZZZ"
                      }
                    ]
                  }
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/HoldingsAdjustment"
                },
                "example": {
                  "value": {
                    "effectiveAt": "0001-01-01T00:00:00.0000000+00:00",
                    "version": {
                      "effectiveFrom": "2019-03-05T00:00:00.0000000+00:00",
                      "asAtDate": "2019-03-08T00:00:00.0000000+00:00"
                    },
                    "unmatchedHoldingMethod": "KeepTheSame",
                    "adjustments": [
                      {
                        "instrumentIdentifiers": {
                          "instrument/default/ClientInternal": "CLI-192836"
                        },
                        "instrumentScope": "default",
                        "instrumentUid": "LUID_GNMKYXXK",
                        "subHoldingKeys": {},
                        "properties": {},
                        "taxLots": [
                          {
                            "units": 10,
                            "cost": {
                              "amount": 120,
                              "currency": "GBP"
                            }
                          }
                        ],
                        "currency": "ZZZ"
                      },
                      {
                        "instrumentIdentifiers": {
                          "instrument/default/ClientInternal": "CLI-462810"
                        },
                        "instrumentScope": "default",
                        "instrumentUid": "LUID_LE9E5SJE",
                        "subHoldingKeys": {},
                        "properties": {},
                        "taxLots": [
                          {
                            "units": 10,
                            "cost": {
                              "amount": 120,
                              "currency": "GBP"
                            }
                          }
                        ],
                        "currency": "ZZZ"
                      }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      }
    },
    "/api/transactionportfolios/{scope}/{code}/transactions": {
      "get": {
        "tags": [
          "Transaction Portfolios"
        ],
        "summary": "GetTransactions: Get transactions",
        "description": "Retrieve all the transactions that occurred during a particular time interval.\r\n            \r\nIf the portfolio is a derived transaction portfolio, the transactions returned are the\r\nunion set of all transactions of the parent (and any grandparents, etc.) as well as\r\nthose of the derived transaction portfolio itself.",
        "operationId": "GetTransactions",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the transaction portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the transaction portfolio.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the transaction portfolio. Together with the scope this uniquely identifies\r\n             the transaction portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the transaction portfolio. Together with the scope this uniquely identifies\r\n             the transaction portfolio.",
              "nullable": true
            }
          },
          {
            "name": "fromTransactionDate",
            "in": "query",
            "description": "The lower bound effective datetime or cut label (inclusive) from which to retrieve transactions.\r\n             There is no lower bound if this is not specified.",
            "schema": {
              "type": "string",
              "description": "The lower bound effective datetime or cut label (inclusive) from which to retrieve transactions.\r\n             There is no lower bound if this is not specified.",
              "format": "dateorcutlabel",
              "nullable": true
            }
          },
          {
            "name": "toTransactionDate",
            "in": "query",
            "description": "The upper bound effective datetime or cut label (inclusive) from which to retrieve transactions.\r\n             There is no upper bound if this is not specified.",
            "schema": {
              "type": "string",
              "description": "The upper bound effective datetime or cut label (inclusive) from which to retrieve transactions.\r\n             There is no upper bound if this is not specified.",
              "format": "dateorcutlabel",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to retrieve transactions. Defaults to returning the latest version\r\n             of each transaction if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to retrieve transactions. Defaults to returning the latest version\r\n             of each transaction if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression with which to filter the result set.\r\n             For example, to return only transactions with a transaction type of 'Buy', specify \"type eq 'Buy'\"\r\n             For more information about filtering LUSID results, see https://support.lusid.com/knowledgebase/article/KA-01914.",
            "schema": {
              "maxLength": 16384,
              "minLength": 0,
              "pattern": "^[\\s\\S]*$",
              "type": "string",
              "description": "Expression with which to filter the result set.\r\n             For example, to return only transactions with a transaction type of 'Buy', specify \"type eq 'Buy'\"\r\n             For more information about filtering LUSID results, see https://support.lusid.com/knowledgebase/article/KA-01914.",
              "nullable": true
            }
          },
          {
            "name": "propertyKeys",
            "in": "query",
            "description": "A list of property keys from the 'Instrument' or 'Transaction' domain to decorate onto\r\n             transactions. These must have the format {domain}/{scope}/{code}, for example 'Instrument/system/Name' or\r\n             'Transaction/strategy/quantsignal'.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
              },
              "description": "A list of property keys from the 'Instrument' or 'Transaction' domain to decorate onto\r\n             transactions. These must have the format {domain}/{scope}/{code}, for example 'Instrument/system/Name' or\r\n             'Transaction/strategy/quantsignal'.",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "page",
            "in": "query",
            "description": "The pagination token to use to continue listing transactions from a previous call to GetTransactions.",
            "schema": {
              "maxLength": 500,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\+/]*={0,3}$",
              "type": "string",
              "description": "The pagination token to use to continue listing transactions from a previous call to GetTransactions.",
              "nullable": true
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "When paginating, limit the number of returned results to this many. The current behaviour is\r\n             to return all transactions if possible, but this will change to defaulting to 1000 if not specified in the future. It is recommended\r\n             to populate this field to enable pagination.",
            "schema": {
              "type": "integer",
              "description": "When paginating, limit the number of returned results to this many. The current behaviour is\r\n             to return all transactions if possible, but this will change to defaulting to 1000 if not specified in the future. It is recommended\r\n             to populate this field to enable pagination.",
              "format": "int32",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "showCancelledTransactions",
            "in": "query",
            "description": "Option to specify whether or not to include cancelled transactions,\r\n             including previous versions of transactions which have since been amended.\r\n             Defaults to False if not specified.",
            "schema": {
              "type": "boolean",
              "description": "Option to specify whether or not to include cancelled transactions,\r\n             including previous versions of transactions which have since been amended.\r\n             Defaults to False if not specified.",
              "nullable": true
            },
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "The requested transactions from the specified transaction portfolio",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/VersionedResourceListOfTransaction"
                },
                "example": {
                  "version": {
                    "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00",
                    "asAtDate": "2018-03-04T23:50:00.0000000+00:00"
                  },
                  "values": [
                    {
                      "transactionId": "TXN-00001",
                      "type": "Buy",
                      "instrumentIdentifiers": {
                        "instrument/default/RIC": "RIC.L"
                      },
                      "instrumentScope": "default",
                      "instrumentUid": "LUID_1C7YTL5M",
                      "transactionDate": "2018-08-04T00:00:00.0000000+00:00",
                      "settlementDate": "2018-08-06T00:00:00.0000000+00:00",
                      "units": 1000,
                      "transactionPrice": {
                        "price": 88.8,
                        "type": "Price"
                      },
                      "totalConsideration": {
                        "amount": 88800,
                        "currency": "USD"
                      },
                      "properties": {
                        "transaction/default/TradeToPortfolioRate": {
                          "key": "Transaction/default/TradeToPortfolioRate",
                          "value": {
                            "metricValue": {
                              "value": 0.765
                            }
                          }
                        },
                        "transaction/default/SourcePortfolioId": {
                          "key": "Transaction/default/SourcePortfolioId",
                          "value": {
                            "labelValue": "DEMO-PORTFOLIO-ID"
                          }
                        },
                        "transaction/default/SourcePortfolioScope": {
                          "key": "Transaction/default/SourcePortfolioScope",
                          "value": {
                            "labelValue": "DEMO-SCOPE"
                          }
                        }
                      },
                      "source": "",
                      "entryDateTime": "2018-03-04T23:50:00.0000000+00:00",
                      "transactionStatus": "Active"
                    }
                  ],
                  "href": "http://example.com",
                  "links": []
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VersionedResourceListOfTransaction"
                },
                "example": {
                  "version": {
                    "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00",
                    "asAtDate": "2018-03-04T23:50:00.0000000+00:00"
                  },
                  "values": [
                    {
                      "transactionId": "TXN-00001",
                      "type": "Buy",
                      "instrumentIdentifiers": {
                        "instrument/default/RIC": "RIC.L"
                      },
                      "instrumentScope": "default",
                      "instrumentUid": "LUID_1C7YTL5M",
                      "transactionDate": "2018-08-04T00:00:00.0000000+00:00",
                      "settlementDate": "2018-08-06T00:00:00.0000000+00:00",
                      "units": 1000,
                      "transactionPrice": {
                        "price": 88.8,
                        "type": "Price"
                      },
                      "totalConsideration": {
                        "amount": 88800,
                        "currency": "USD"
                      },
                      "properties": {
                        "transaction/default/TradeToPortfolioRate": {
                          "key": "Transaction/default/TradeToPortfolioRate",
                          "value": {
                            "metricValue": {
                              "value": 0.765
                            }
                          }
                        },
                        "transaction/default/SourcePortfolioId": {
                          "key": "Transaction/default/SourcePortfolioId",
                          "value": {
                            "labelValue": "DEMO-PORTFOLIO-ID"
                          }
                        },
                        "transaction/default/SourcePortfolioScope": {
                          "key": "Transaction/default/SourcePortfolioScope",
                          "value": {
                            "labelValue": "DEMO-SCOPE"
                          }
                        }
                      },
                      "source": "",
                      "entryDateTime": "2018-03-04T23:50:00.0000000+00:00",
                      "transactionStatus": "Active"
                    }
                  ],
                  "href": "http://example.com",
                  "links": []
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/VersionedResourceListOfTransaction"
                },
                "example": {
                  "version": {
                    "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00",
                    "asAtDate": "2018-03-04T23:50:00.0000000+00:00"
                  },
                  "values": [
                    {
                      "transactionId": "TXN-00001",
                      "type": "Buy",
                      "instrumentIdentifiers": {
                        "instrument/default/RIC": "RIC.L"
                      },
                      "instrumentScope": "default",
                      "instrumentUid": "LUID_1C7YTL5M",
                      "transactionDate": "2018-08-04T00:00:00.0000000+00:00",
                      "settlementDate": "2018-08-06T00:00:00.0000000+00:00",
                      "units": 1000,
                      "transactionPrice": {
                        "price": 88.8,
                        "type": "Price"
                      },
                      "totalConsideration": {
                        "amount": 88800,
                        "currency": "USD"
                      },
                      "properties": {
                        "transaction/default/TradeToPortfolioRate": {
                          "key": "Transaction/default/TradeToPortfolioRate",
                          "value": {
                            "metricValue": {
                              "value": 0.765
                            }
                          }
                        },
                        "transaction/default/SourcePortfolioId": {
                          "key": "Transaction/default/SourcePortfolioId",
                          "value": {
                            "labelValue": "DEMO-PORTFOLIO-ID"
                          }
                        },
                        "transaction/default/SourcePortfolioScope": {
                          "key": "Transaction/default/SourcePortfolioScope",
                          "value": {
                            "labelValue": "DEMO-SCOPE"
                          }
                        }
                      },
                      "source": "",
                      "entryDateTime": "2018-03-04T23:50:00.0000000+00:00",
                      "transactionStatus": "Active"
                    }
                  ],
                  "href": "http://example.com",
                  "links": []
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      },
      "post": {
        "tags": [
          "Transaction Portfolios"
        ],
        "summary": "UpsertTransactions: Upsert transactions",
        "description": "Create or update transactions in the transaction portfolio. A transaction will be updated\r\nif it already exists and created if it does not.\n\nThe maximum number of transactions that this method can upsert per request is 10,000.",
        "operationId": "UpsertTransactions",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the transaction portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the transaction portfolio.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the transaction portfolio. Together with the scope this uniquely identifies\r\n            the transaction portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the transaction portfolio. Together with the scope this uniquely identifies\r\n            the transaction portfolio.",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "A list of transactions to be created or updated.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/TransactionRequest"
                },
                "description": "A list of transactions to be created or updated."
              },
              "example": [
                {
                  "transactionId": "TransactionId-111111",
                  "type": "StockIn",
                  "instrumentIdentifiers": {
                    "instrument/default/Figi": "BBG000C6K6G9",
                    "instrument/default/Isin": "GB00BH4HKS39"
                  },
                  "transactionDate": "2018-03-05T00:00:00.0000000+00:00",
                  "settlementDate": "2018-03-08T00:00:00.0000000+00:00",
                  "units": 1000,
                  "transactionPrice": {
                    "price": 123,
                    "type": "Price"
                  },
                  "totalConsideration": {
                    "amount": 123000,
                    "currency": "GBP"
                  },
                  "transactionCurrency": "GBP",
                  "properties": {
                    "transaction/Algo/Name": {
                      "key": "Transaction/Algo/Name",
                      "value": {
                        "labelValue": "Algo1"
                      }
                    }
                  },
                  "counterpartyId": "CounterpartyId-118263",
                  "source": "",
                  "otcConfirmation": {
                    "counterpartyAgreementId": {
                      "scope": "someScope",
                      "code": "someCode"
                    }
                  }
                }
              ]
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/TransactionRequest"
                },
                "description": "A list of transactions to be created or updated."
              },
              "example": [
                {
                  "transactionId": "TransactionId-111111",
                  "type": "StockIn",
                  "instrumentIdentifiers": {
                    "instrument/default/Figi": "BBG000C6K6G9",
                    "instrument/default/Isin": "GB00BH4HKS39"
                  },
                  "transactionDate": "2018-03-05T00:00:00.0000000+00:00",
                  "settlementDate": "2018-03-08T00:00:00.0000000+00:00",
                  "units": 1000,
                  "transactionPrice": {
                    "price": 123,
                    "type": "Price"
                  },
                  "totalConsideration": {
                    "amount": 123000,
                    "currency": "GBP"
                  },
                  "transactionCurrency": "GBP",
                  "properties": {
                    "transaction/Algo/Name": {
                      "key": "Transaction/Algo/Name",
                      "value": {
                        "labelValue": "Algo1"
                      }
                    }
                  },
                  "counterpartyId": "CounterpartyId-118263",
                  "source": "",
                  "otcConfirmation": {
                    "counterpartyAgreementId": {
                      "scope": "someScope",
                      "code": "someCode"
                    }
                  }
                }
              ]
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/TransactionRequest"
                },
                "description": "A list of transactions to be created or updated."
              },
              "example": [
                {
                  "transactionId": "TransactionId-111111",
                  "type": "StockIn",
                  "instrumentIdentifiers": {
                    "instrument/default/Figi": "BBG000C6K6G9",
                    "instrument/default/Isin": "GB00BH4HKS39"
                  },
                  "transactionDate": "2018-03-05T00:00:00.0000000+00:00",
                  "settlementDate": "2018-03-08T00:00:00.0000000+00:00",
                  "units": 1000,
                  "transactionPrice": {
                    "price": 123,
                    "type": "Price"
                  },
                  "totalConsideration": {
                    "amount": 123000,
                    "currency": "GBP"
                  },
                  "transactionCurrency": "GBP",
                  "properties": {
                    "transaction/Algo/Name": {
                      "key": "Transaction/Algo/Name",
                      "value": {
                        "labelValue": "Algo1"
                      }
                    }
                  },
                  "counterpartyId": "CounterpartyId-118263",
                  "source": "",
                  "otcConfirmation": {
                    "counterpartyAgreementId": {
                      "scope": "someScope",
                      "code": "someCode"
                    }
                  }
                }
              ]
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/TransactionRequest"
                },
                "description": "A list of transactions to be created or updated."
              },
              "example": [
                {
                  "transactionId": "TransactionId-111111",
                  "type": "StockIn",
                  "instrumentIdentifiers": {
                    "instrument/default/Figi": "BBG000C6K6G9",
                    "instrument/default/Isin": "GB00BH4HKS39"
                  },
                  "transactionDate": "2018-03-05T00:00:00.0000000+00:00",
                  "settlementDate": "2018-03-08T00:00:00.0000000+00:00",
                  "units": 1000,
                  "transactionPrice": {
                    "price": 123,
                    "type": "Price"
                  },
                  "totalConsideration": {
                    "amount": 123000,
                    "currency": "GBP"
                  },
                  "transactionCurrency": "GBP",
                  "properties": {
                    "transaction/Algo/Name": {
                      "key": "Transaction/Algo/Name",
                      "value": {
                        "labelValue": "Algo1"
                      }
                    }
                  },
                  "counterpartyId": "CounterpartyId-118263",
                  "source": "",
                  "otcConfirmation": {
                    "counterpartyAgreementId": {
                      "scope": "someScope",
                      "code": "someCode"
                    }
                  }
                }
              ]
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The version of the transaction portfolio that contains the newly updated or inserted transactions",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertPortfolioTransactionsResponse"
                },
                "example": {
                  "version": {
                    "effectiveFrom": "2018-03-05T11:32:15.0000000+00:00",
                    "asAtDate": "2022-03-05T10:09:01.0000000+00:00"
                  },
                  "metadata": {
                    "warnings": [
                      {
                        "type": "TransactionTypesNotFound",
                        "description": "No transaction types could be found for the listed transactions",
                        "identifierType": "TransactionId",
                        "identifiers": [
                          "Transaction-001",
                          "Transaction-123"
                        ]
                      }
                    ]
                  }
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertPortfolioTransactionsResponse"
                },
                "example": {
                  "version": {
                    "effectiveFrom": "2018-03-05T11:32:15.0000000+00:00",
                    "asAtDate": "2022-03-05T10:09:01.0000000+00:00"
                  },
                  "metadata": {
                    "warnings": [
                      {
                        "type": "TransactionTypesNotFound",
                        "description": "No transaction types could be found for the listed transactions",
                        "identifierType": "TransactionId",
                        "identifiers": [
                          "Transaction-001",
                          "Transaction-123"
                        ]
                      }
                    ]
                  }
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertPortfolioTransactionsResponse"
                },
                "example": {
                  "version": {
                    "effectiveFrom": "2018-03-05T11:32:15.0000000+00:00",
                    "asAtDate": "2022-03-05T10:09:01.0000000+00:00"
                  },
                  "metadata": {
                    "warnings": [
                      {
                        "type": "TransactionTypesNotFound",
                        "description": "No transaction types could be found for the listed transactions",
                        "identifierType": "TransactionId",
                        "identifiers": [
                          "Transaction-001",
                          "Transaction-123"
                        ]
                      }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      },
      "delete": {
        "tags": [
          "Transaction Portfolios"
        ],
        "summary": "CancelTransactions: Cancel transactions",
        "description": "Cancel one or more transactions from the transaction portfolio.",
        "operationId": "CancelTransactions",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the transaction portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the transaction portfolio.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the transaction portfolio. Together with the scope this uniquely identifies\r\n            the transaction portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the transaction portfolio. Together with the scope this uniquely identifies\r\n            the transaction portfolio.",
              "nullable": true
            }
          },
          {
            "name": "transactionIds",
            "in": "query",
            "description": "The IDs of the transactions to cancel.",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "The IDs of the transactions to cancel."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The datetime that the transactions were cancelled",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      }
    },
    "/api/transactionportfolios/{scope}/{code}/transactions/$build": {
      "post": {
        "tags": [
          "Transaction Portfolios"
        ],
        "summary": "BuildTransactions: Build transactions",
        "description": "Builds and returns all transactions that affect the holdings of a portfolio over a given interval of\r\neffective time into a set of output transactions. This includes transactions automatically generated by\r\nLUSID such as holding adjustments.",
        "operationId": "BuildTransactions",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the transaction portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the transaction portfolio.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the transaction portfolio. Together with the scope this uniquely identifies\r\n            the transaction portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the transaction portfolio. Together with the scope this uniquely identifies\r\n            the transaction portfolio.",
              "nullable": true
            }
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The asAt datetime at which to build the transactions. Defaults to return the latest\r\n            version of each transaction if not specified.",
            "schema": {
              "type": "string",
              "description": "The asAt datetime at which to build the transactions. Defaults to return the latest\r\n            version of each transaction if not specified.",
              "format": "date-time",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Expression to filter the result set.\r\n            For example, to return only transactions with a transaction type of 'Buy', specify \"type eq 'Buy'\".\r\n            For more information about filtering LUSID results, see https://support.lusid.com/knowledgebase/article/KA-01914.",
            "schema": {
              "maxLength": 16384,
              "minLength": 0,
              "pattern": "^[\\s\\S]*$",
              "type": "string",
              "description": "Expression to filter the result set.\r\n            For example, to return only transactions with a transaction type of 'Buy', specify \"type eq 'Buy'\".\r\n            For more information about filtering LUSID results, see https://support.lusid.com/knowledgebase/article/KA-01914.",
              "nullable": true
            }
          },
          {
            "name": "propertyKeys",
            "in": "query",
            "description": "A list of property keys from the \"Instrument\" or \"Transaction\" domain to decorate onto\r\n            the transactions. These take the format {domain}/{scope}/{code} e.g. \"Instrument/system/Name\" or\r\n            \"Transaction/strategy/quantsignal\".",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
              },
              "description": "A list of property keys from the \"Instrument\" or \"Transaction\" domain to decorate onto\r\n            the transactions. These take the format {domain}/{scope}/{code} e.g. \"Instrument/system/Name\" or\r\n            \"Transaction/strategy/quantsignal\".",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "limit",
            "in": "query",
            "description": "When paginating, limit the number of returned results to this many. Defaults to 100 if not specified.",
            "schema": {
              "type": "integer",
              "description": "When paginating, limit the number of returned results to this many. Defaults to 100 if not specified.",
              "format": "int32",
              "nullable": true
            },
            "x-nullable": true
          },
          {
            "name": "page",
            "in": "query",
            "description": "The pagination token to use to continue listing transactions from a previous call to BuildTransactions.",
            "schema": {
              "maxLength": 500,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\+/]*={0,3}$",
              "type": "string",
              "description": "The pagination token to use to continue listing transactions from a previous call to BuildTransactions.",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "The query queryParameters which control how the output transactions are built.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/TransactionQueryParameters"
              },
              "example": {
                "startDate": "2018-03-05T00:00:00.0000000+00:00",
                "endDate": "2018-03-19T00:00:00.0000000+00:00",
                "queryMode": "TradeDate",
                "showCancelledTransactions": false
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TransactionQueryParameters"
              },
              "example": {
                "startDate": "2018-03-05T00:00:00.0000000+00:00",
                "endDate": "2018-03-19T00:00:00.0000000+00:00",
                "queryMode": "TradeDate",
                "showCancelledTransactions": false
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/TransactionQueryParameters"
              },
              "example": {
                "startDate": "2018-03-05T00:00:00.0000000+00:00",
                "endDate": "2018-03-19T00:00:00.0000000+00:00",
                "queryMode": "TradeDate",
                "showCancelledTransactions": false
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/TransactionQueryParameters"
              },
              "example": {
                "startDate": "2018-03-05T00:00:00.0000000+00:00",
                "endDate": "2018-03-19T00:00:00.0000000+00:00",
                "queryMode": "TradeDate",
                "showCancelledTransactions": false
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The requested transactions from the specified transaction portfolio",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/VersionedResourceListOfOutputTransaction"
                },
                "example": {
                  "version": {
                    "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00",
                    "asAtDate": "2018-03-04T23:50:00.0000000+00:00"
                  },
                  "values": [
                    {
                      "transactionId": "TXN-00001",
                      "type": "Buy",
                      "description": "Purchase",
                      "instrumentIdentifiers": {
                        "instrument/default/RIC": "RIC.L"
                      },
                      "instrumentScope": "default",
                      "instrumentUid": "LUID_JLH24106",
                      "transactionDate": "2018-08-04T00:00:00.0000000+00:00",
                      "settlementDate": "2018-08-06T00:00:00.0000000+00:00",
                      "units": 1000,
                      "transactionAmount": 88800,
                      "transactionPrice": {
                        "price": 88.8,
                        "type": "Price"
                      },
                      "totalConsideration": {
                        "amount": 88800,
                        "currency": "USD"
                      },
                      "exchangeRate": 1,
                      "transactionToPortfolioRate": 0.7648,
                      "transactionCurrency": "USD",
                      "properties": {
                        "transaction/default/TradeToPortfolioRate": {
                          "key": "Transaction/default/TradeToPortfolioRate",
                          "value": {
                            "metricValue": {
                              "value": 0.765
                            }
                          }
                        },
                        "transaction/default/SourcePortfolioId": {
                          "key": "Transaction/default/SourcePortfolioId",
                          "value": {
                            "labelValue": "DEMO-PORTFOLIO-ID"
                          }
                        },
                        "transaction/default/SourcePortfolioScope": {
                          "key": "Transaction/default/SourcePortfolioScope",
                          "value": {
                            "labelValue": "DEMO-SCOPE"
                          }
                        }
                      },
                      "source": "",
                      "transactionStatus": "Cancelled",
                      "entryDateTime": "2018-08-04T12:22:06.0000000+00:00",
                      "cancelDateTime": "2018-08-04T12:25:14.0000000+00:00"
                    },
                    {
                      "transactionId": "TXN-00002",
                      "type": "Sell",
                      "description": "Sale",
                      "instrumentIdentifiers": {
                        "instrument/default/ClientInternal": "INT:00024106"
                      },
                      "instrumentScope": "default",
                      "instrumentUid": "LUID_OI5JX1V7",
                      "transactionDate": "2018-08-07T00:00:00.0000000+00:00",
                      "settlementDate": "2018-08-10T00:00:00.0000000+00:00",
                      "units": 10000,
                      "transactionAmount": 1470100,
                      "transactionPrice": {
                        "price": 147.01,
                        "type": "Price"
                      },
                      "totalConsideration": {
                        "amount": 1470100,
                        "currency": "USD"
                      },
                      "exchangeRate": 1,
                      "transactionToPortfolioRate": 0.772,
                      "transactionCurrency": "USD",
                      "properties": {
                        "transaction/default/TradeToPortfolioRate": {
                          "key": "Transaction/default/TradeToPortfolioRate",
                          "value": {
                            "metricValue": {
                              "value": 0.772
                            }
                          }
                        },
                        "transaction/default/SourcePortfolioId": {
                          "key": "Transaction/default/SourcePortfolioId",
                          "value": {
                            "labelValue": "DEMO-PORTFOLIO-ID"
                          }
                        },
                        "transaction/default/SourcePortfolioScope": {
                          "key": "Transaction/default/SourcePortfolioScope",
                          "value": {
                            "labelValue": "DEMO-SCOPE"
                          }
                        },
                        "transaction/default/ResultantHolding": {
                          "key": "Transaction/default/ResultantHolding",
                          "value": {
                            "metricValue": {
                              "value": 3500
                            }
                          }
                        }
                      },
                      "source": "",
                      "transactionStatus": "Active",
                      "entryDateTime": "2018-08-07T10:30:12.0000000+00:00",
                      "realisedGainLoss": [
                        {
                          "instrumentScope": "default",
                          "instrumentUid": "LUID_OI5JX1V7",
                          "units": 4500,
                          "purchaseTradeDate": "2018-08-02T00:00:00.0000000+00:00",
                          "purchaseSettlementDate": "2018-08-05T00:00:00.0000000+00:00",
                          "purchasePrice": 142.96,
                          "costTradeCcy": {
                            "amount": 643320,
                            "currency": "USD"
                          },
                          "costPortfolioCcy": {
                            "amount": 493619.44,
                            "currency": "GBP"
                          },
                          "realisedTradeCcy": {
                            "amount": 18225,
                            "currency": "USD"
                          },
                          "realisedTotal": {
                            "amount": 17093.3,
                            "currency": "GBP"
                          },
                          "realisedMarket": {
                            "amount": 14069.7,
                            "currency": "GBP"
                          },
                          "realisedCurrency": {
                            "amount": 3023.6,
                            "currency": "GBP"
                          }
                        },
                        {
                          "instrumentScope": "default",
                          "instrumentUid": "LUID_OI5JX1V7",
                          "units": 4500,
                          "purchaseTradeDate": "2018-08-03T00:00:00.0000000+00:00",
                          "purchaseSettlementDate": "2018-08-06T00:00:00.0000000+00:00",
                          "purchasePrice": 147.7,
                          "costTradeCcy": {
                            "amount": 664650,
                            "currency": "USD"
                          },
                          "costPortfolioCcy": {
                            "amount": 510517.67,
                            "currency": "GBP"
                          },
                          "realisedTradeCcy": {
                            "amount": -3105,
                            "currency": "USD"
                          },
                          "realisedTotal": {
                            "amount": 195.07,
                            "currency": "GBP"
                          },
                          "realisedMarket": {
                            "amount": -2397.06,
                            "currency": "GBP"
                          },
                          "realisedCurrency": {
                            "amount": 2592.13,
                            "currency": "GBP"
                          }
                        },
                        {
                          "instrumentScope": "default",
                          "instrumentUid": "LUID_OI5JX1V7",
                          "units": 1000,
                          "purchaseTradeDate": "2018-08-06T00:00:00.0000000+00:00",
                          "purchaseSettlementDate": "2018-08-08T00:00:00.0000000+00:00",
                          "purchasePrice": 146.03,
                          "costTradeCcy": {
                            "amount": 146030,
                            "currency": "USD"
                          },
                          "costPortfolioCcy": {
                            "amount": 112851.98,
                            "currency": "GBP"
                          },
                          "realisedTradeCcy": {
                            "amount": 980,
                            "currency": "USD"
                          },
                          "realisedTotal": {
                            "amount": 639.74,
                            "currency": "GBP"
                          },
                          "realisedMarket": {
                            "amount": 756.56,
                            "currency": "GBP"
                          },
                          "realisedCurrency": {
                            "amount": -116.82,
                            "currency": "GBP"
                          }
                        }
                      ]
                    }
                  ],
                  "href": "http://example.com",
                  "links": []
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VersionedResourceListOfOutputTransaction"
                },
                "example": {
                  "version": {
                    "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00",
                    "asAtDate": "2018-03-04T23:50:00.0000000+00:00"
                  },
                  "values": [
                    {
                      "transactionId": "TXN-00001",
                      "type": "Buy",
                      "description": "Purchase",
                      "instrumentIdentifiers": {
                        "instrument/default/RIC": "RIC.L"
                      },
                      "instrumentScope": "default",
                      "instrumentUid": "LUID_JLH24106",
                      "transactionDate": "2018-08-04T00:00:00.0000000+00:00",
                      "settlementDate": "2018-08-06T00:00:00.0000000+00:00",
                      "units": 1000,
                      "transactionAmount": 88800,
                      "transactionPrice": {
                        "price": 88.8,
                        "type": "Price"
                      },
                      "totalConsideration": {
                        "amount": 88800,
                        "currency": "USD"
                      },
                      "exchangeRate": 1,
                      "transactionToPortfolioRate": 0.7648,
                      "transactionCurrency": "USD",
                      "properties": {
                        "transaction/default/TradeToPortfolioRate": {
                          "key": "Transaction/default/TradeToPortfolioRate",
                          "value": {
                            "metricValue": {
                              "value": 0.765
                            }
                          }
                        },
                        "transaction/default/SourcePortfolioId": {
                          "key": "Transaction/default/SourcePortfolioId",
                          "value": {
                            "labelValue": "DEMO-PORTFOLIO-ID"
                          }
                        },
                        "transaction/default/SourcePortfolioScope": {
                          "key": "Transaction/default/SourcePortfolioScope",
                          "value": {
                            "labelValue": "DEMO-SCOPE"
                          }
                        }
                      },
                      "source": "",
                      "transactionStatus": "Cancelled",
                      "entryDateTime": "2018-08-04T12:22:06.0000000+00:00",
                      "cancelDateTime": "2018-08-04T12:25:14.0000000+00:00"
                    },
                    {
                      "transactionId": "TXN-00002",
                      "type": "Sell",
                      "description": "Sale",
                      "instrumentIdentifiers": {
                        "instrument/default/ClientInternal": "INT:00024106"
                      },
                      "instrumentScope": "default",
                      "instrumentUid": "LUID_OI5JX1V7",
                      "transactionDate": "2018-08-07T00:00:00.0000000+00:00",
                      "settlementDate": "2018-08-10T00:00:00.0000000+00:00",
                      "units": 10000,
                      "transactionAmount": 1470100,
                      "transactionPrice": {
                        "price": 147.01,
                        "type": "Price"
                      },
                      "totalConsideration": {
                        "amount": 1470100,
                        "currency": "USD"
                      },
                      "exchangeRate": 1,
                      "transactionToPortfolioRate": 0.772,
                      "transactionCurrency": "USD",
                      "properties": {
                        "transaction/default/TradeToPortfolioRate": {
                          "key": "Transaction/default/TradeToPortfolioRate",
                          "value": {
                            "metricValue": {
                              "value": 0.772
                            }
                          }
                        },
                        "transaction/default/SourcePortfolioId": {
                          "key": "Transaction/default/SourcePortfolioId",
                          "value": {
                            "labelValue": "DEMO-PORTFOLIO-ID"
                          }
                        },
                        "transaction/default/SourcePortfolioScope": {
                          "key": "Transaction/default/SourcePortfolioScope",
                          "value": {
                            "labelValue": "DEMO-SCOPE"
                          }
                        },
                        "transaction/default/ResultantHolding": {
                          "key": "Transaction/default/ResultantHolding",
                          "value": {
                            "metricValue": {
                              "value": 3500
                            }
                          }
                        }
                      },
                      "source": "",
                      "transactionStatus": "Active",
                      "entryDateTime": "2018-08-07T10:30:12.0000000+00:00",
                      "realisedGainLoss": [
                        {
                          "instrumentScope": "default",
                          "instrumentUid": "LUID_OI5JX1V7",
                          "units": 4500,
                          "purchaseTradeDate": "2018-08-02T00:00:00.0000000+00:00",
                          "purchaseSettlementDate": "2018-08-05T00:00:00.0000000+00:00",
                          "purchasePrice": 142.96,
                          "costTradeCcy": {
                            "amount": 643320,
                            "currency": "USD"
                          },
                          "costPortfolioCcy": {
                            "amount": 493619.44,
                            "currency": "GBP"
                          },
                          "realisedTradeCcy": {
                            "amount": 18225,
                            "currency": "USD"
                          },
                          "realisedTotal": {
                            "amount": 17093.3,
                            "currency": "GBP"
                          },
                          "realisedMarket": {
                            "amount": 14069.7,
                            "currency": "GBP"
                          },
                          "realisedCurrency": {
                            "amount": 3023.6,
                            "currency": "GBP"
                          }
                        },
                        {
                          "instrumentScope": "default",
                          "instrumentUid": "LUID_OI5JX1V7",
                          "units": 4500,
                          "purchaseTradeDate": "2018-08-03T00:00:00.0000000+00:00",
                          "purchaseSettlementDate": "2018-08-06T00:00:00.0000000+00:00",
                          "purchasePrice": 147.7,
                          "costTradeCcy": {
                            "amount": 664650,
                            "currency": "USD"
                          },
                          "costPortfolioCcy": {
                            "amount": 510517.67,
                            "currency": "GBP"
                          },
                          "realisedTradeCcy": {
                            "amount": -3105,
                            "currency": "USD"
                          },
                          "realisedTotal": {
                            "amount": 195.07,
                            "currency": "GBP"
                          },
                          "realisedMarket": {
                            "amount": -2397.06,
                            "currency": "GBP"
                          },
                          "realisedCurrency": {
                            "amount": 2592.13,
                            "currency": "GBP"
                          }
                        },
                        {
                          "instrumentScope": "default",
                          "instrumentUid": "LUID_OI5JX1V7",
                          "units": 1000,
                          "purchaseTradeDate": "2018-08-06T00:00:00.0000000+00:00",
                          "purchaseSettlementDate": "2018-08-08T00:00:00.0000000+00:00",
                          "purchasePrice": 146.03,
                          "costTradeCcy": {
                            "amount": 146030,
                            "currency": "USD"
                          },
                          "costPortfolioCcy": {
                            "amount": 112851.98,
                            "currency": "GBP"
                          },
                          "realisedTradeCcy": {
                            "amount": 980,
                            "currency": "USD"
                          },
                          "realisedTotal": {
                            "amount": 639.74,
                            "currency": "GBP"
                          },
                          "realisedMarket": {
                            "amount": 756.56,
                            "currency": "GBP"
                          },
                          "realisedCurrency": {
                            "amount": -116.82,
                            "currency": "GBP"
                          }
                        }
                      ]
                    }
                  ],
                  "href": "http://example.com",
                  "links": []
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/VersionedResourceListOfOutputTransaction"
                },
                "example": {
                  "version": {
                    "effectiveFrom": "2018-03-05T00:00:00.0000000+00:00",
                    "asAtDate": "2018-03-04T23:50:00.0000000+00:00"
                  },
                  "values": [
                    {
                      "transactionId": "TXN-00001",
                      "type": "Buy",
                      "description": "Purchase",
                      "instrumentIdentifiers": {
                        "instrument/default/RIC": "RIC.L"
                      },
                      "instrumentScope": "default",
                      "instrumentUid": "LUID_JLH24106",
                      "transactionDate": "2018-08-04T00:00:00.0000000+00:00",
                      "settlementDate": "2018-08-06T00:00:00.0000000+00:00",
                      "units": 1000,
                      "transactionAmount": 88800,
                      "transactionPrice": {
                        "price": 88.8,
                        "type": "Price"
                      },
                      "totalConsideration": {
                        "amount": 88800,
                        "currency": "USD"
                      },
                      "exchangeRate": 1,
                      "transactionToPortfolioRate": 0.7648,
                      "transactionCurrency": "USD",
                      "properties": {
                        "transaction/default/TradeToPortfolioRate": {
                          "key": "Transaction/default/TradeToPortfolioRate",
                          "value": {
                            "metricValue": {
                              "value": 0.765
                            }
                          }
                        },
                        "transaction/default/SourcePortfolioId": {
                          "key": "Transaction/default/SourcePortfolioId",
                          "value": {
                            "labelValue": "DEMO-PORTFOLIO-ID"
                          }
                        },
                        "transaction/default/SourcePortfolioScope": {
                          "key": "Transaction/default/SourcePortfolioScope",
                          "value": {
                            "labelValue": "DEMO-SCOPE"
                          }
                        }
                      },
                      "source": "",
                      "transactionStatus": "Cancelled",
                      "entryDateTime": "2018-08-04T12:22:06.0000000+00:00",
                      "cancelDateTime": "2018-08-04T12:25:14.0000000+00:00"
                    },
                    {
                      "transactionId": "TXN-00002",
                      "type": "Sell",
                      "description": "Sale",
                      "instrumentIdentifiers": {
                        "instrument/default/ClientInternal": "INT:00024106"
                      },
                      "instrumentScope": "default",
                      "instrumentUid": "LUID_OI5JX1V7",
                      "transactionDate": "2018-08-07T00:00:00.0000000+00:00",
                      "settlementDate": "2018-08-10T00:00:00.0000000+00:00",
                      "units": 10000,
                      "transactionAmount": 1470100,
                      "transactionPrice": {
                        "price": 147.01,
                        "type": "Price"
                      },
                      "totalConsideration": {
                        "amount": 1470100,
                        "currency": "USD"
                      },
                      "exchangeRate": 1,
                      "transactionToPortfolioRate": 0.772,
                      "transactionCurrency": "USD",
                      "properties": {
                        "transaction/default/TradeToPortfolioRate": {
                          "key": "Transaction/default/TradeToPortfolioRate",
                          "value": {
                            "metricValue": {
                              "value": 0.772
                            }
                          }
                        },
                        "transaction/default/SourcePortfolioId": {
                          "key": "Transaction/default/SourcePortfolioId",
                          "value": {
                            "labelValue": "DEMO-PORTFOLIO-ID"
                          }
                        },
                        "transaction/default/SourcePortfolioScope": {
                          "key": "Transaction/default/SourcePortfolioScope",
                          "value": {
                            "labelValue": "DEMO-SCOPE"
                          }
                        },
                        "transaction/default/ResultantHolding": {
                          "key": "Transaction/default/ResultantHolding",
                          "value": {
                            "metricValue": {
                              "value": 3500
                            }
                          }
                        }
                      },
                      "source": "",
                      "transactionStatus": "Active",
                      "entryDateTime": "2018-08-07T10:30:12.0000000+00:00",
                      "realisedGainLoss": [
                        {
                          "instrumentScope": "default",
                          "instrumentUid": "LUID_OI5JX1V7",
                          "units": 4500,
                          "purchaseTradeDate": "2018-08-02T00:00:00.0000000+00:00",
                          "purchaseSettlementDate": "2018-08-05T00:00:00.0000000+00:00",
                          "purchasePrice": 142.96,
                          "costTradeCcy": {
                            "amount": 643320,
                            "currency": "USD"
                          },
                          "costPortfolioCcy": {
                            "amount": 493619.44,
                            "currency": "GBP"
                          },
                          "realisedTradeCcy": {
                            "amount": 18225,
                            "currency": "USD"
                          },
                          "realisedTotal": {
                            "amount": 17093.3,
                            "currency": "GBP"
                          },
                          "realisedMarket": {
                            "amount": 14069.7,
                            "currency": "GBP"
                          },
                          "realisedCurrency": {
                            "amount": 3023.6,
                            "currency": "GBP"
                          }
                        },
                        {
                          "instrumentScope": "default",
                          "instrumentUid": "LUID_OI5JX1V7",
                          "units": 4500,
                          "purchaseTradeDate": "2018-08-03T00:00:00.0000000+00:00",
                          "purchaseSettlementDate": "2018-08-06T00:00:00.0000000+00:00",
                          "purchasePrice": 147.7,
                          "costTradeCcy": {
                            "amount": 664650,
                            "currency": "USD"
                          },
                          "costPortfolioCcy": {
                            "amount": 510517.67,
                            "currency": "GBP"
                          },
                          "realisedTradeCcy": {
                            "amount": -3105,
                            "currency": "USD"
                          },
                          "realisedTotal": {
                            "amount": 195.07,
                            "currency": "GBP"
                          },
                          "realisedMarket": {
                            "amount": -2397.06,
                            "currency": "GBP"
                          },
                          "realisedCurrency": {
                            "amount": 2592.13,
                            "currency": "GBP"
                          }
                        },
                        {
                          "instrumentScope": "default",
                          "instrumentUid": "LUID_OI5JX1V7",
                          "units": 1000,
                          "purchaseTradeDate": "2018-08-06T00:00:00.0000000+00:00",
                          "purchaseSettlementDate": "2018-08-08T00:00:00.0000000+00:00",
                          "purchasePrice": 146.03,
                          "costTradeCcy": {
                            "amount": 146030,
                            "currency": "USD"
                          },
                          "costPortfolioCcy": {
                            "amount": 112851.98,
                            "currency": "GBP"
                          },
                          "realisedTradeCcy": {
                            "amount": 980,
                            "currency": "USD"
                          },
                          "realisedTotal": {
                            "amount": 639.74,
                            "currency": "GBP"
                          },
                          "realisedMarket": {
                            "amount": 756.56,
                            "currency": "GBP"
                          },
                          "realisedCurrency": {
                            "amount": -116.82,
                            "currency": "GBP"
                          }
                        }
                      ]
                    }
                  ],
                  "href": "http://example.com",
                  "links": []
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      }
    },
    "/api/transactionportfolios/{scope}/{code}/transactions/{transactionId}/properties": {
      "post": {
        "tags": [
          "Transaction Portfolios"
        ],
        "summary": "UpsertTransactionProperties: Upsert transaction properties",
        "description": "Create or update one or more transaction properties for a single transaction in the transaction portfolio.\r\nEach property will be updated if it already exists and created if it does not.\r\nBoth transaction and portfolio must exist at the time when properties are created or updated.",
        "operationId": "UpsertTransactionProperties",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the transaction portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the transaction portfolio.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the transaction portfolio. Together with the scope this uniquely identifies\r\n            the transaction portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the transaction portfolio. Together with the scope this uniquely identifies\r\n            the transaction portfolio.",
              "nullable": true
            }
          },
          {
            "name": "transactionId",
            "in": "path",
            "description": "The unique ID of the transaction to create or update properties for.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The unique ID of the transaction to create or update properties for.",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "The properties and their associated values to create or update.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/PerpetualProperty"
                },
                "description": "The properties and their associated values to create or update."
              },
              "example": {
                "transaction/MyScope/MyPropertyName": {
                  "key": "Transaction/MyScope/MyPropertyName",
                  "value": {
                    "metricValue": {
                      "value": 12345.5672,
                      "unit": "Unit"
                    }
                  }
                },
                "transaction/MyScope/MyPropertyName2": {
                  "key": "Transaction/MyScope/MyPropertyName2",
                  "value": {
                    "metricValue": {
                      "value": 925.3,
                      "unit": "Unit"
                    }
                  }
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/PerpetualProperty"
                },
                "description": "The properties and their associated values to create or update."
              },
              "example": {
                "transaction/MyScope/MyPropertyName": {
                  "key": "Transaction/MyScope/MyPropertyName",
                  "value": {
                    "metricValue": {
                      "value": 12345.5672,
                      "unit": "Unit"
                    }
                  }
                },
                "transaction/MyScope/MyPropertyName2": {
                  "key": "Transaction/MyScope/MyPropertyName2",
                  "value": {
                    "metricValue": {
                      "value": 925.3,
                      "unit": "Unit"
                    }
                  }
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/PerpetualProperty"
                },
                "description": "The properties and their associated values to create or update."
              },
              "example": {
                "transaction/MyScope/MyPropertyName": {
                  "key": "Transaction/MyScope/MyPropertyName",
                  "value": {
                    "metricValue": {
                      "value": 12345.5672,
                      "unit": "Unit"
                    }
                  }
                },
                "transaction/MyScope/MyPropertyName2": {
                  "key": "Transaction/MyScope/MyPropertyName2",
                  "value": {
                    "metricValue": {
                      "value": 925.3,
                      "unit": "Unit"
                    }
                  }
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/PerpetualProperty"
                },
                "description": "The properties and their associated values to create or update."
              },
              "example": {
                "transaction/MyScope/MyPropertyName": {
                  "key": "Transaction/MyScope/MyPropertyName",
                  "value": {
                    "metricValue": {
                      "value": 12345.5672,
                      "unit": "Unit"
                    }
                  }
                },
                "transaction/MyScope/MyPropertyName2": {
                  "key": "Transaction/MyScope/MyPropertyName2",
                  "value": {
                    "metricValue": {
                      "value": 925.3,
                      "unit": "Unit"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The version of the transaction portfolio that contains the newly updated or inserted transaction property",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertTransactionPropertiesResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertTransactionPropertiesResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertTransactionPropertiesResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      },
      "delete": {
        "tags": [
          "Transaction Portfolios"
        ],
        "summary": "DeletePropertiesFromTransaction: Delete properties from transaction",
        "description": "Delete one or more properties from a single transaction in a transaction portfolio.",
        "operationId": "DeletePropertiesFromTransaction",
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the transaction portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The scope of the transaction portfolio.",
              "nullable": true
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the transaction portfolio. Together with the scope this uniquely identifies\r\n            the transaction portfolio.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "type": "string",
              "description": "The code of the transaction portfolio. Together with the scope this uniquely identifies\r\n            the transaction portfolio.",
              "nullable": true
            }
          },
          {
            "name": "transactionId",
            "in": "path",
            "description": "The unique ID of the transaction from which to delete properties.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The unique ID of the transaction from which to delete properties.",
              "nullable": true
            }
          },
          {
            "name": "propertyKeys",
            "in": "query",
            "description": "The property keys of the properties to delete.\r\n            These must be from the \"Transaction\" domain and have the format {domain}/{scope}/{code}, for example\r\n            \"Transaction/strategy/quantsignal\".",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
              },
              "description": "The property keys of the properties to delete.\r\n            These must be from the \"Transaction\" domain and have the format {domain}/{scope}/{code}, for example\r\n            \"Transaction/strategy/quantsignal\"."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The datetime that the property was deleted",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedEntityResponse"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LusidProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ],
        "x-fbn-apistatus": "Stable"
      }
    }
  },
  "components": {
    "schemas": {
      "A2BBreakdown": {
        "type": "object",
        "properties": {
          "total": {
            "type": "number",
            "description": "The total value of all the components within this category.",
            "format": "double"
          },
          "currency": {
            "type": "string",
            "description": "The currency. Applies to the Total, as well as all the componenents.",
            "nullable": true
          },
          "components": {
            "type": "object",
            "additionalProperties": {
              "type": "number",
              "format": "double"
            },
            "description": "The individual components that make up the category. For example, the Start category may have Cost, Unrealised gains and accrued interest components.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A2B Breakdown - Shows the total, and each sub-element within an A2B Category"
      },
      "A2BCategory": {
        "type": "object",
        "properties": {
          "holdingCurrency": {
            "$ref": "#/components/schemas/A2BBreakdown"
          },
          "portfolioCurrency": {
            "$ref": "#/components/schemas/A2BBreakdown"
          }
        },
        "additionalProperties": false,
        "description": "A2B Category - one of the five major categories in the A2BDataRecord"
      },
      "A2BDataRecord": {
        "type": "object",
        "properties": {
          "portfolioId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "holdingType": {
            "type": "string",
            "description": "The code for the type of the holding e.g. P, B, C, R, F etc.",
            "nullable": true
          },
          "instrumentScope": {
            "type": "string",
            "description": "The unique Lusid Instrument Id (LUID) of the instrument that the holding is in.",
            "nullable": true
          },
          "instrumentUid": {
            "type": "string",
            "description": "The unique Lusid Instrument Id (LUID) of the instrument that the holding is in.",
            "nullable": true
          },
          "subHoldingKeys": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/PerpetualProperty"
            },
            "description": "The sub-holding properties which identify the holding. Each property will be from the 'Transaction' domain. These are configured on a transaction portfolio.",
            "nullable": true
          },
          "currency": {
            "type": "string",
            "description": "The holding currency.",
            "nullable": true
          },
          "transactionId": {
            "type": "string",
            "description": "The unique identifier for the transaction.",
            "nullable": true
          },
          "start": {
            "$ref": "#/components/schemas/A2BCategory"
          },
          "flows": {
            "$ref": "#/components/schemas/A2BCategory"
          },
          "gains": {
            "$ref": "#/components/schemas/A2BCategory"
          },
          "carry": {
            "$ref": "#/components/schemas/A2BCategory"
          },
          "end": {
            "$ref": "#/components/schemas/A2BCategory"
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Property"
            },
            "description": "The properties which have been requested to be decorated onto the holding. These will be from the 'Instrument' domain.",
            "nullable": true
          },
          "groupId": {
            "type": "string",
            "description": "Arbitrary string that can be used to cross reference an entry in the A2B report with activity in the A2B-Movements. This should be used purely as a token. The content should not be relied upon.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A2B Record - shows values on, and changes between two dates: A and B"
      },
      "A2BMovementRecord": {
        "type": "object",
        "properties": {
          "portfolioId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "holdingType": {
            "type": "string",
            "description": "The code for the type of the holding e.g. P, B, C, R, F etc.",
            "nullable": true
          },
          "instrumentScope": {
            "type": "string",
            "description": "The unique Lusid Instrument Id (LUID) of the instrument that the holding is in.",
            "nullable": true
          },
          "instrumentUid": {
            "type": "string",
            "description": "The unique Lusid Instrument Id (LUID) of the instrument that the holding is in.",
            "nullable": true
          },
          "subHoldingKeys": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/PerpetualProperty"
            },
            "description": "The sub-holding properties which identify the holding. Each property will be from the 'Transaction' domain. These are configured on a transaction portfolio.",
            "nullable": true
          },
          "currency": {
            "type": "string",
            "description": "The holding currency.",
            "nullable": true
          },
          "transactionId": {
            "type": "string",
            "description": "The unique identifier for the transaction.",
            "nullable": true
          },
          "movementName": {
            "type": "string",
            "description": "The name of the movement.",
            "nullable": true
          },
          "effectiveDate": {
            "type": "string",
            "description": "The date of the movement.",
            "format": "date-time"
          },
          "units": {
            "type": "number",
            "description": "The number of units of the instrument that are affected by the movement.",
            "format": "double"
          },
          "start": {
            "$ref": "#/components/schemas/A2BCategory"
          },
          "flows": {
            "$ref": "#/components/schemas/A2BCategory"
          },
          "gains": {
            "$ref": "#/components/schemas/A2BCategory"
          },
          "carry": {
            "$ref": "#/components/schemas/A2BCategory"
          },
          "end": {
            "$ref": "#/components/schemas/A2BCategory"
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Property"
            },
            "description": "The properties which have been requested to be decorated onto the holding. These will be from the 'Instrument' domain.",
            "nullable": true
          },
          "groupId": {
            "type": "string",
            "description": "Arbitrary string that can be used to cross reference an entry in the A2B report with activity in the A2B-Movements. This should be used purely as a token. The content should not be relied upon.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A2B Movement Record - shows A2B category based changes relating to a specific movement"
      },
      "AccessControlledAction": {
        "required": [
          "action",
          "description"
        ],
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "The description of the action"
          },
          "action": {
            "$ref": "#/components/schemas/ActionId"
          },
          "limitedSet": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IdSelectorDefinition"
            },
            "description": "When populated, the provided values are the limited set of resources that are allowed to be specified for\r\naccess control for this action",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "An action that can be access controlled"
      },
      "AccessControlledResource": {
        "required": [
          "actions",
          "description"
        ],
        "type": "object",
        "properties": {
          "application": {
            "type": "string",
            "description": "The application to which this resource belongs",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "The display name of the resource",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "The description of the resource"
          },
          "actions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccessControlledAction"
            },
            "description": "The actions acceptable for this type of resource"
          },
          "identifierParts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IdentifierPartSchema"
            },
            "description": "The constituent parts of a valid identifier for this resource",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A resource to which access can be controlled"
      },
      "AccessMetadataValue": {
        "required": [
          "value"
        ],
        "type": "object",
        "properties": {
          "value": {
            "maxLength": 2048,
            "minLength": 0,
            "type": "string"
          },
          "provider": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "An access control value. Provider should only be used if you are a service provide licensing data. In that case\r\nthe provider value must match your domain."
      },
      "ActionId": {
        "required": [
          "activity",
          "entity",
          "scope"
        ],
        "type": "object",
        "properties": {
          "scope": {
            "maxLength": 100,
            "minLength": 3,
            "type": "string"
          },
          "activity": {
            "maxLength": 25,
            "minLength": 3,
            "type": "string"
          },
          "entity": {
            "maxLength": 25,
            "minLength": 3,
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "AdjustHolding": {
        "required": [
          "version"
        ],
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "description": "The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.",
            "format": "uri",
            "nullable": true
          },
          "version": {
            "$ref": "#/components/schemas/Version"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AdjustHoldingRequest": {
        "required": [
          "instrumentIdentifiers",
          "taxLots"
        ],
        "type": "object",
        "properties": {
          "instrumentIdentifiers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "A set of instrument identifiers that can resolve the holding adjustment to a unique instrument."
          },
          "subHoldingKeys": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/PerpetualProperty"
            },
            "description": "Set of unique transaction properties and associated values to store with the holding adjustment transaction automatically created by LUSID. Each property must be from the 'Transaction' domain.",
            "nullable": true
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/PerpetualProperty"
            },
            "description": "Set of unique holding properties and associated values to store with the target holding. Each property must be from the 'Holding' domain.",
            "nullable": true
          },
          "taxLots": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TargetTaxLotRequest"
            },
            "description": "The tax-lots that together make up the target holding."
          },
          "currency": {
            "type": "string",
            "description": "The Holding currency. This needs to be equal with the one on the TaxLot -> cost if one is specified",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "This request specifies target holdings. i.e. holding data that the\r\nsystem should match. When processed by the movement\r\nengine, it will create 'true-up' adjustments on the fly."
      },
      "AggregatedReturn": {
        "required": [
          "effectiveAt",
          "metricsValue"
        ],
        "type": "object",
        "properties": {
          "effectiveAt": {
            "type": "string",
            "description": "The effectiveAt for the return.",
            "format": "date-time"
          },
          "openingMarketValue": {
            "type": "number",
            "description": "The opening market value.",
            "format": "double",
            "nullable": true
          },
          "closingMarketValue": {
            "type": "number",
            "description": "The closing market value.",
            "format": "double",
            "nullable": true
          },
          "metricsValue": {
            "type": "object",
            "additionalProperties": {
              "type": "number",
              "format": "double"
            },
            "description": "The value for the specified metric."
          },
          "frequency": {
            "type": "string",
            "description": "Show the aggregated output returns on a Daily or Monthly period.",
            "nullable": true
          },
          "compositeMembers": {
            "type": "integer",
            "description": "The number of members in the Composite on the given day.",
            "format": "int32",
            "nullable": true
          },
          "compositeMembersWithoutReturn": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResourceId"
            },
            "description": "List containing Composite members which post no return on the given day.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A list of Aggregated Returns."
      },
      "AggregatedReturnsRequest": {
        "required": [
          "metrics"
        ],
        "type": "object",
        "properties": {
          "metrics": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PerformanceReturnsMetric"
            },
            "description": "A list of metrics to calculate in the AggregatedReturns."
          },
          "returnIds": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResourceId"
            },
            "description": "The Scope and code of the returns.",
            "nullable": true
          },
          "recipeId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "compositeMethod": {
            "type": "string",
            "description": "The method used to calculate the Portfolio performance: Equal/Asset.",
            "nullable": true
          },
          "period": {
            "type": "string",
            "description": "The type of the returns used to calculate the aggregation result: Daily/Monthly.",
            "nullable": true
          },
          "outputFrequency": {
            "type": "string",
            "description": "The type of calculated output: Daily/Weekly/Monthly/Quarterly/Half-Yearly/Yearly.",
            "nullable": true
          },
          "alternativeInceptionDate": {
            "type": "string",
            "description": "Optional - either a date, or the key for a portfolio property containing a date. If provided, the given date will override the inception date for this request.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The request used in the AggregatedReturns."
      },
      "AggregatedReturnsResponse": {
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "description": "The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.",
            "format": "uri",
            "nullable": true
          },
          "results": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/AggregatedReturn"
              }
            },
            "description": "Aggregated returns grouped by ReturnId",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AggregateSpec": {
        "required": [
          "key",
          "op"
        ],
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "description": "The key that uniquely identifies a queryable address in Lusid."
          },
          "op": {
            "enum": [
              "Sum",
              "Proportion",
              "Average",
              "Count",
              "Min",
              "Max",
              "Value",
              "SumOfPositiveValues",
              "SumOfNegativeValues",
              "SumOfAbsoluteValues",
              "ProportionOfAbsoluteValues"
            ],
            "type": "string",
            "description": "The available values are: Sum, Proportion, Average, Count, Min, Max, Value, SumOfPositiveValues, SumOfNegativeValues, SumOfAbsoluteValues, ProportionOfAbsoluteValues"
          }
        },
        "additionalProperties": false
      },
      "AggregationContext": {
        "type": "object",
        "properties": {
          "options": {
            "$ref": "#/components/schemas/AggregationOptions"
          }
        },
        "additionalProperties": false,
        "description": "Aggregation context node. Whilst the market and pricing nodes concern themselves with which models are used and where the market data comes from, the aggregation\r\ncontext determines how data is aggregated together. This controls the behaviour of the grouping and sql-like engine at the back of the valuation. For instance,\r\nit controls conversion of currencies and whether the sql-like engine behaves more like ANSI or MySql SQL."
      },
      "AggregationMeasureFailureDetail": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "effectiveAt": {
            "type": "string",
            "format": "date-time"
          },
          "measure": {
            "type": "string",
            "nullable": true
          },
          "reason": {
            "type": "string",
            "nullable": true
          },
          "detail": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AggregationOptions": {
        "type": "object",
        "properties": {
          "useAnsiLikeSyntax": {
            "type": "boolean",
            "description": "Should the aggregation behave like ANSI Sql or MySql with respect to a conceptual request which is equivalent to \"select a,sum(a) from results\";\r\nANSI Sql would report an error if a was not unique where MySql would simply view a,suma(a) as equivalent to firstof(a),sum(a)."
          },
          "allowPartialEntitlementSuccess": {
            "type": "boolean",
            "description": "In the case of valuing a portfolio group where some, but not all entitlements fail, should the aggregation return the valuations\r\napplied only to those portfolios where entitlements checks succeeded."
          },
          "applyIso4217Rounding": {
            "type": "boolean",
            "description": "Various results that are units of currency might need to be rounded.\r\nThis will round according to the ISO4217 standard number of decimal places for a currency."
          }
        },
        "additionalProperties": false,
        "description": "Options for controlling the default aspects and behaviour of the aggregation."
      },
      "Allocation": {
        "required": [
          "allocatedOrderId",
          "id",
          "instrumentIdentifiers",
          "lusidInstrumentId",
          "portfolioId",
          "quantity"
        ],
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "allocatedOrderId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "portfolioId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "quantity": {
            "type": "number",
            "description": "The quantity of given instrument allocated.",
            "format": "double"
          },
          "instrumentIdentifiers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "The instrument allocated."
          },
          "version": {
            "$ref": "#/components/schemas/Version"
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/PerpetualProperty"
            },
            "description": "Client-defined properties associated with this allocation.",
            "nullable": true
          },
          "instrumentScope": {
            "type": "string",
            "description": "The scope in which the instrument lies",
            "nullable": true
          },
          "lusidInstrumentId": {
            "type": "string",
            "description": "The LUSID instrument id for the instrument allocated."
          },
          "placementIds": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResourceId"
            },
            "description": "A placement - also known as an order placed in the market - associated with this allocation.",
            "nullable": true
          },
          "state": {
            "type": "string",
            "description": "The state of this allocation.",
            "nullable": true
          },
          "side": {
            "type": "string",
            "description": "The side of this allocation (examples: Buy, Sell, ...).",
            "nullable": true
          },
          "type": {
            "type": "string",
            "description": "The type of order associated with this allocation (examples: Limit, Market, ...).",
            "nullable": true
          },
          "settlementDate": {
            "type": "string",
            "description": "The settlement date for this allocation.",
            "format": "date-time",
            "nullable": true
          },
          "date": {
            "type": "string",
            "description": "The date of this allocation.",
            "format": "date-time"
          },
          "price": {
            "$ref": "#/components/schemas/CurrencyAndAmount"
          },
          "settlementCurrency": {
            "type": "string",
            "description": "The settlement currency of this allocation.",
            "nullable": true
          },
          "settlementCurrencyFxRate": {
            "type": "number",
            "description": "The settlement currency to allocation currency FX rate.",
            "format": "double",
            "nullable": true
          },
          "counterparty": {
            "type": "string",
            "description": "The counterparty for this allocation.",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "An Allocation of a certain quantity of a specific instrument against an originating\r\nOrder."
      },
      "AllocationRequest": {
        "required": [
          "allocatedOrderId",
          "id",
          "instrumentIdentifiers",
          "portfolioId",
          "quantity"
        ],
        "type": "object",
        "properties": {
          "properties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/PerpetualProperty"
            },
            "description": "Client-defined properties associated with this allocation.",
            "nullable": true
          },
          "instrumentIdentifiers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "The instrument allocated."
          },
          "quantity": {
            "type": "number",
            "description": "The quantity of given instrument allocated.",
            "format": "double"
          },
          "portfolioId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "allocatedOrderId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "id": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "placementIds": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResourceId"
            },
            "description": "A placement - also known as an order placed in the market - associated with this allocation.",
            "nullable": true
          },
          "state": {
            "type": "string",
            "description": "The state of this allocation.",
            "nullable": true
          },
          "side": {
            "type": "string",
            "description": "The side of this allocation (examples: Buy, Sell, ...).",
            "nullable": true
          },
          "type": {
            "type": "string",
            "description": "The type of order associated with this allocation (examples: Limit, Market, ...).",
            "nullable": true
          },
          "settlementDate": {
            "type": "string",
            "description": "The settlement date for this allocation.",
            "format": "date-time",
            "nullable": true
          },
          "date": {
            "type": "string",
            "description": "The date of this allocation.",
            "format": "date-time"
          },
          "price": {
            "$ref": "#/components/schemas/CurrencyAndAmount"
          },
          "settlementCurrency": {
            "type": "string",
            "description": "The settlement currency of this allocation.",
            "nullable": true
          },
          "settlementCurrencyFxRate": {
            "type": "number",
            "description": "The settlement currency to allocation currency FX rate.",
            "format": "double",
            "nullable": true
          },
          "counterparty": {
            "type": "string",
            "description": "The counterparty for this allocation.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A request to create or update an Allocation."
      },
      "AllocationSetRequest": {
        "type": "object",
        "properties": {
          "allocationRequests": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AllocationRequest"
            },
            "description": "A collection of AllocationRequests.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A request to create or update multiple Allocations."
      },
      "AnnulQuotesResponse": {
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "description": "The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.",
            "format": "uri",
            "nullable": true
          },
          "values": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "format": "date-time"
            },
            "description": "The quotes which have been successfully deleted along with the asAt datetime at which the deletion was committed to LUSID.",
            "nullable": true
          },
          "failed": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ErrorDetail"
            },
            "description": "The quotes that could not be deleted along with a reason for their failure.",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AnnulSingleStructuredDataResponse": {
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "description": "The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.",
            "format": "uri",
            "nullable": true
          },
          "value": {
            "type": "string",
            "description": "The time at which the identifier was annulled",
            "format": "date-time"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The response to a request to annul (delete) a set of structured data from Lusid. This might have been for market data or some other structured entity."
      },
      "AnnulStructuredDataResponse": {
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "description": "The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.",
            "format": "uri",
            "nullable": true
          },
          "values": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "format": "date-time"
            },
            "description": "The set of values that were removed.",
            "nullable": true
          },
          "failed": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ErrorDetail"
            },
            "description": "The set of values where removal failed, with a description as to why that is the case, e.g. badly formed request",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The response to a request to annul (delete) a set of structured data from Lusid. This might have been for market data or some other structured entity."
      },
      "CashLadderRecord": {
        "required": [
          "activities",
          "close",
          "open"
        ],
        "type": "object",
        "properties": {
          "effectiveDate": {
            "type": "string",
            "format": "date-time"
          },
          "open": {
            "type": "number",
            "format": "double"
          },
          "activities": {
            "type": "object",
            "additionalProperties": {
              "type": "number",
              "format": "double"
            }
          },
          "close": {
            "type": "number",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "Change": {
        "required": [
          "amended",
          "corrected",
          "entityId"
        ],
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "entityId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "corrected": {
            "type": "boolean",
            "description": ""
          },
          "correctionEffectiveAt": {
            "type": "string",
            "description": "",
            "format": "date-time",
            "nullable": true
          },
          "correctionAsAt": {
            "type": "string",
            "description": "",
            "format": "date-time",
            "nullable": true
          },
          "amended": {
            "type": "boolean",
            "description": ""
          },
          "amendmentEffectiveAt": {
            "type": "string",
            "description": "",
            "format": "date-time",
            "nullable": true
          },
          "amendmentAsAt": {
            "type": "string",
            "description": "",
            "format": "date-time",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The time an entity was modified (amendment and/or historical correction)."
      },
      "CompletePortfolio": {
        "required": [
          "id",
          "version"
        ],
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "href": {
            "type": "string",
            "description": "The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.",
            "format": "uri",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "The long form description of the portfolio.",
            "nullable": true
          },
          "displayName": {
            "type": "string",
            "description": "The name of the portfolio.",
            "nullable": true
          },
          "created": {
            "type": "string",
            "description": "The effective datetime at which the portfolio was created. No transactions or constituents can be added to the portfolio before this date.",
            "format": "date-time"
          },
          "parentPortfolioId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "isDerived": {
            "type": "boolean",
            "description": "Whether or not this is a derived portfolio.",
            "readOnly": true
          },
          "type": {
            "enum": [
              "Transaction",
              "Reference",
              "DerivedTransaction"
            ],
            "type": "string",
            "description": "The type of the portfolio. The available values are: Transaction, Reference, DerivedTransaction"
          },
          "version": {
            "$ref": "#/components/schemas/Version"
          },
          "properties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Property"
            },
            "description": "The requested portfolio properties. These will be from the 'Portfolio' domain.",
            "nullable": true
          },
          "baseCurrency": {
            "type": "string",
            "description": "If the portfolio is a transaction portfolio or derived transaction portfolio, this is the base currency of the portfolio.",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CompleteRelationship": {
        "required": [
          "inwardDescription",
          "outwardDescription",
          "relationshipDefinitionId",
          "sourceEntity",
          "targetEntity"
        ],
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "description": "The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.",
            "format": "uri",
            "nullable": true
          },
          "version": {
            "$ref": "#/components/schemas/Version"
          },
          "relationshipDefinitionId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "sourceEntity": {
            "$ref": "#/components/schemas/RelatedEntity"
          },
          "targetEntity": {
            "$ref": "#/components/schemas/RelatedEntity"
          },
          "outwardDescription": {
            "type": "string",
            "description": "Description of the relationship based on relationship definition's outward description."
          },
          "inwardDescription": {
            "type": "string",
            "description": "Description of the relationship based on relationship definition's inward description."
          },
          "effectiveFrom": {
            "type": "string",
            "description": "The effective datetime from which the relationship is valid.",
            "format": "date-time"
          },
          "effectiveUntil": {
            "type": "string",
            "description": "The effective datetime to which the relationship is valid until.",
            "format": "date-time"
          }
        },
        "additionalProperties": false,
        "description": "Representation of a relationship containing details of source and target entities, and both outward and inward descriptions."
      },
      "ComplexMarketData": {
        "required": [
          "marketDataType"
        ],
        "type": "object",
        "properties": {
          "marketDataType": {
            "enum": [
              "DiscountFactorCurveData",
              "EquityVolSurfaceData",
              "FxVolSurfaceData",
              "IrVolCubeData",
              "OpaqueMarketData",
              "YieldCurveData",
              "FxForwardCurveData",
              "FxForwardPipsCurveData",
              "FxForwardTenorCurveData",
              "FxForwardTenorPipsCurveData",
              "FxForwardCurveByQuoteReference",
              "CreditSpreadCurveData"
            ],
            "type": "string",
            "description": "The available values are: DiscountFactorCurveData, EquityVolSurfaceData, FxVolSurfaceData, IrVolCubeData, OpaqueMarketData, YieldCurveData, FxForwardCurveData, FxForwardPipsCurveData, FxForwardTenorCurveData, FxForwardTenorPipsCurveData, FxForwardCurveByQuoteReference, CreditSpreadCurveData"
          }
        },
        "additionalProperties": false,
        "description": "A base class for any form of market data with structure",
        "discriminator": {
          "propertyName": "marketDataType"
        }
      },
      "ComplexMarketDataId": {
        "required": [
          "provider"
        ],
        "type": "object",
        "properties": {
          "provider": {
            "maxLength": 32,
            "minLength": 0,
            "type": "string",
            "description": "The platform or vendor that provided the complex market data, e.g. 'DataScope', 'LUSID', 'ISDA' etc."
          },
          "priceSource": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "description": "The source or originator of the complex market data, e.g. a bank or financial institution.",
            "nullable": true
          },
          "lineage": {
            "maxLength": 1024,
            "minLength": 0,
            "type": "string",
            "description": "This is obsolete. It is not used, it will not be stored, and has no effects.\r\nIf you wish to attach a Lineage to your ComplexMarketData,\r\nyou should provide it in the optional Lineage field in the ComplexMarketData class.",
            "nullable": true
          },
          "effectiveAt": {
            "type": "string",
            "description": "The effectiveAt or cut label that this item of complex market data is/was updated/inserted with.",
            "format": "dateorcutlabel",
            "nullable": true
          },
          "marketAsset": {
            "maxLength": 32,
            "minLength": 0,
            "type": "string",
            "description": "The name of the market entity that the document represents",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "An identifier that uniquely describes an item of complex market data such as an interest rate curve or volatility surface."
      },
      "ConfigurationRecipe": {
        "required": [
          "code",
          "scope"
        ],
        "type": "object",
        "properties": {
          "scope": {
            "maxLength": 64,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9\\-_]+$",
            "type": "string",
            "description": "The scope used when updating or inserting the Configuration Recipe."
          },
          "code": {
            "maxLength": 64,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9\\-_]+$",
            "type": "string",
            "description": "User given string name (code) to identify the recipe."
          },
          "market": {
            "$ref": "#/components/schemas/MarketContext"
          },
          "pricing": {
            "$ref": "#/components/schemas/PricingContext"
          },
          "aggregation": {
            "$ref": "#/components/schemas/AggregationContext"
          },
          "inheritedRecipes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResourceId"
            },
            "description": "A list of parent recipes (scope,code) that can be used to share functionality between recipes. For instance one might use common recipes to set up\r\npricing for individual asset classes, e.g. rates or credit, and then combine them into a single recipe to be used by an exotics desk in conjunction with\r\nsome overrides that it requires for models or other pricing options.",
            "nullable": true
          },
          "description": {
            "maxLength": 1024,
            "minLength": 0,
            "pattern": "^[\\s\\S]*$",
            "type": "string",
            "description": "User can assign a description to understand more humanly the recipe.",
            "nullable": true
          },
          "holding": {
            "$ref": "#/components/schemas/HoldingContext"
          }
        },
        "additionalProperties": false,
        "description": "The Configuration or Calculation Recipe controls how LUSID processes a given request.\r\nThis can be used to change where market data used in pricing is loaded from and in what order, or which model is used to\r\nprice a given instrument as well as how aggregation will process the produced results."
      },
      "ConfigurationRecipeSnippet": {
        "required": [
          "code",
          "scope"
        ],
        "type": "object",
        "properties": {
          "scope": {
            "maxLength": 64,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9\\-_]+$",
            "type": "string",
            "description": "The scope used when updating or inserting the Configuration Recipe snippet"
          },
          "code": {
            "maxLength": 64,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9\\-_]+$",
            "type": "string",
            "description": "User given string name (code) to identify the recipe."
          },
          "aggregationOptions": {
            "$ref": "#/components/schemas/AggregationOptions"
          },
          "modelRules": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VendorModelRule"
            },
            "description": "The set of model rules that are available. There may be multiple rules for Vendors, but only one per model-instrument pair.\r\nWhich of these preference sets is used depends upon the model choice selection if specified, or failing that the global default model specification\r\nin the options.",
            "nullable": true
          },
          "pricingOptions": {
            "$ref": "#/components/schemas/PricingOptions"
          },
          "marketRules": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MarketDataKeyRule"
            },
            "description": "The set of rules that define how to resolve particular use cases. These can be relatively general or specific in nature.\r\nNominally any number are possible and will be processed in order where applicable. However, there is evidently a potential\r\nfor increased computational cost where many rules must be applied to resolve data. Ensuring that portfolios are structured in\r\nsuch a way as to reduce the number of rules required is therefore sensible.",
            "nullable": true
          },
          "marketOptions": {
            "$ref": "#/components/schemas/MarketOptions"
          },
          "recipe": {
            "$ref": "#/components/schemas/ConfigurationRecipe"
          }
        },
        "additionalProperties": false,
        "description": "If it is desired to have multiple recipes, there is a strong likelihood that they will share various components.\r\nA configuration recipe snippet allows a user to define a set of rules that can then be included into a parent recipe.\r\nThis allows sharing of common blocks of the recipe.\r\n            \r\nFor example, a user might define a set of rules for resolving Fx and then include them into every recipe used firm-wide, thereby\r\nenforcing consistency. As the rules can be permissioned differently using Shrine, it is possible to enable users to \r\nread but not alter such a rule set.\r\n            \r\nThe same applies to a set of pricing rules.\r\n            \r\nA configuration snippet must only contain one entry from the available set. \r\n            \r\nRecipes are compiled from the set of snippets through a model that is analogous to inheritance.\r\nA recipe can have a set of 'parent' recipes from which it inherits. These are specified in the inheritance section of a recipe.\r\nUpon loading, the recipe will fall back on these recipe components for any options or rules that are not explicitly specified in the\r\nnamed recipe for the request.\r\n            \r\nThis allows control of pricing to be harmonised across a set of desks within an institution. Suppose that, e.g.\r\nthere are four desks looking after products under the areas of Fx, Rates, Credit and Exotics.\r\nThe model and market data for pricing given asset types would potentially be controlled by the appropriate desk; e.g. rules for Fx market data resolution being\r\ncontrolled by the Fx desk. The exotics desk would likely depend upon rules for all the other asset classes as well as, say, correlation rules of its own.\r\nIt could inherit the market data and model rules from the other desks for finding the appropriate institution-standard data and then overlay that with the correlation rules.\r\n            \r\nNote that permissioning of the store means that one could decide that only a particular desk or control function could update certain rules. That would assist the abilitiy\r\nto ensure that pricing is performed consistently and provide an audit of changes made to it along with restricting changes to appropriate authorised functions."
      },
      "ConstituentsAdjustmentHeader": {
        "type": "object",
        "properties": {
          "effectiveAt": {
            "type": "string",
            "description": "There can be at most one holdings adjustment for a portfolio at a\r\nspecific effective time so this uniquely identifies the adjustment.",
            "format": "date-time"
          },
          "version": {
            "$ref": "#/components/schemas/Version"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CorporateAction": {
        "required": [
          "corporateActionCode"
        ],
        "type": "object",
        "properties": {
          "corporateActionCode": {
            "type": "string",
            "description": "The unique identifier of this corporate action"
          },
          "description": {
            "type": "string",
            "description": "The description of the corporate action.",
            "nullable": true
          },
          "announcementDate": {
            "type": "string",
            "description": "The announcement date of the corporate action",
            "format": "date-time"
          },
          "exDate": {
            "type": "string",
            "description": "The ex date of the corporate action",
            "format": "date-time"
          },
          "recordDate": {
            "type": "string",
            "description": "The record date of the corporate action",
            "format": "date-time"
          },
          "paymentDate": {
            "type": "string",
            "description": "The payment date of the corporate action",
            "format": "date-time"
          },
          "transitions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CorporateActionTransition"
            },
            "description": "The transitions that result from this corporate action",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A corporate action"
      },
      "CorporateActionSource": {
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "description": "The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.",
            "format": "uri",
            "nullable": true
          },
          "id": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "version": {
            "$ref": "#/components/schemas/Version"
          },
          "displayName": {
            "type": "string",
            "description": "The name of the corporate action source",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "The description of the corporate action source",
            "nullable": true
          },
          "instrumentScopes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The list of instrument scopes used as the scope resolution strategy when resolving instruments of upserted corporate actions.",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A corporate action source"
      },
      "CorporateActionTransition": {
        "type": "object",
        "properties": {
          "inputTransition": {
            "$ref": "#/components/schemas/CorporateActionTransitionComponent"
          },
          "outputTransitions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CorporateActionTransitionComponent"
            },
            "description": "What will be generated relative to the input transition",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A 'transition' within a corporate action, representing a set of output movements paired to a single input position"
      },
      "CorporateActionTransitionComponent": {
        "required": [
          "costFactor",
          "instrumentIdentifiers",
          "instrumentScope",
          "instrumentUid",
          "unitsFactor"
        ],
        "type": "object",
        "properties": {
          "instrumentScope": {
            "type": "string",
            "description": "The scope in which the instrument lies."
          },
          "instrumentIdentifiers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Unique instrument identifiers"
          },
          "instrumentUid": {
            "type": "string",
            "description": "LUSID's internal unique instrument identifier, resolved from the instrument identifiers"
          },
          "unitsFactor": {
            "type": "number",
            "description": "The factor to scale units by",
            "format": "double"
          },
          "costFactor": {
            "type": "number",
            "description": "The factor to scale cost by",
            "format": "double"
          }
        },
        "additionalProperties": false,
        "description": "A single transition component, when grouped with other components a corporate action transition is formed."
      },
      "CorporateActionTransitionComponentRequest": {
        "required": [
          "costFactor",
          "instrumentIdentifiers",
          "unitsFactor"
        ],
        "type": "object",
        "properties": {
          "instrumentIdentifiers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Unique instrument identifiers"
          },
          "unitsFactor": {
            "type": "number",
            "description": "The factor to scale units by",
            "format": "double"
          },
          "costFactor": {
            "type": "number",
            "description": "The factor to scale cost by",
            "format": "double"
          }
        },
        "additionalProperties": false,
        "description": "A single transition component request, when grouped with other transition component requests a corporate action\r\ntransition request is formed."
      },
      "CorporateActionTransitionRequest": {
        "type": "object",
        "properties": {
          "inputTransition": {
            "$ref": "#/components/schemas/CorporateActionTransitionComponentRequest"
          },
          "outputTransitions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CorporateActionTransitionComponentRequest"
            },
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A 'transition' within a corporate action, representing a set of output movements paired to a single input position"
      },
      "CounterpartyRiskInformation": {
        "required": [
          "countryOfRisk",
          "creditRatings",
          "industryClassifiers"
        ],
        "type": "object",
        "properties": {
          "countryOfRisk": {
            "maxLength": 64,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9\\-_]+$",
            "type": "string",
            "description": "The country to which one would naturally ascribe risk, typically the legal entity's country of registration. This can be used to infer funding currency and related market data in the absence of a specific preference."
          },
          "creditRatings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreditRating"
            },
            "description": ""
          },
          "industryClassifiers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IndustryClassifier"
            },
            "description": ""
          }
        },
        "additionalProperties": false,
        "description": "In the event that the legal entity is a counterparty to an OTC transaction\r\n(as signatory to a counterparty agreement such as an ISDA 2002 Master Agreement),\r\nthis information would be needed for calculations\r\nsuch as Credit-Valuation-Adjustments and Debit-Valuation-Adjustments (CVA, DVA, XVA etc)."
      },
      "CreateCorporateActionSourceRequest": {
        "required": [
          "code",
          "displayName",
          "scope"
        ],
        "type": "object",
        "properties": {
          "scope": {
            "maxLength": 64,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9\\-_]+$",
            "type": "string",
            "description": "The scope of the corporate action source"
          },
          "code": {
            "maxLength": 64,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9\\-_]+$",
            "type": "string",
            "description": "The code of the corporate action source"
          },
          "displayName": {
            "maxLength": 512,
            "minLength": 1,
            "pattern": "^[\\s\\S]*$",
            "type": "string",
            "description": "The name of the corporate action source"
          },
          "description": {
            "maxLength": 1024,
            "minLength": 0,
            "pattern": "^[\\s\\S]*$",
            "type": "string",
            "description": "The description of the corporate action source",
            "nullable": true
          },
          "instrumentScopes": {
            "maxLength": 1,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The list of instrument scopes used as the scope resolution strategy when resolving instruments of upserted corporate actions.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CreateCutLabelDefinitionRequest": {
        "required": [
          "code",
          "cutLocalTime",
          "displayName",
          "timeZone"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "displayName": {
            "pattern": "^[\\s\\S]*$",
            "type": "string"
          },
          "description": {
            "pattern": "^[\\s\\S]*$",
            "type": "string",
            "nullable": true
          },
          "cutLocalTime": {
            "$ref": "#/components/schemas/CutLocalTime"
          },
          "timeZone": {
            "type": "string"
          }
        },
        "additionalProperties": false,
        "description": "This request specifies a new Cut Label Definition"
      },
      "CreateDerivedPropertyDefinitionRequest": {
        "required": [
          "code",
          "dataTypeId",
          "derivationFormula",
          "displayName",
          "domain",
          "scope"
        ],
        "type": "object",
        "properties": {
          "domain": {
            "enum": [
              "NotDefined",
              "Transaction",
              "Portfolio",
              "Holding",
              "ReferenceHolding",
              "TransactionConfiguration",
              "Instrument",
              "CutLabelDefinition",
              "Analytic",
              "PortfolioGroup",
              "Person",
              "AccessMetadata",
              "Order",
              "UnitResult",
              "MarketData",
              "ConfigurationRecipe",
              "Allocation",
              "Calendar",
              "LegalEntity",
              "Placement",
              "Execution",
              "Block",
              "Participation",
              "Package",
              "OrderInstruction",
              "NextBestAction",
              "CustomEntity",
              "InstrumentEvent"
            ],
            "type": "string",
            "description": "The domain that the property exists in. Not all available values are currently supported, please check the documentation: https://support.lusid.com/knowledgebase/article/KA-01719/. The available values are: NotDefined, Transaction, Portfolio, Holding, ReferenceHolding, TransactionConfiguration, Instrument, CutLabelDefinition, Analytic, PortfolioGroup, Person, AccessMetadata, Order, UnitResult, MarketData, ConfigurationRecipe, Allocation, Calendar, LegalEntity, Placement, Execution, Block, Participation, Package, OrderInstruction, NextBestAction, CustomEntity, InstrumentEvent"
          },
          "scope": {
            "type": "string",
            "description": "The scope that the property exists in."
          },
          "code": {
            "type": "string",
            "description": "The code of the property. Together with the domain and scope this uniquely identifies the property."
          },
          "displayName": {
            "type": "string",
            "description": "The display name of the property."
          },
          "dataTypeId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "propertyDescription": {
            "maxLength": 512,
            "type": "string",
            "description": "Describes the property",
            "nullable": true
          },
          "derivationFormula": {
            "type": "string",
            "description": "The rule that defines how data is composed for a derived property."
          }
        },
        "additionalProperties": false
      },
      "CreateDerivedTransactionPortfolioRequest": {
        "required": [
          "code",
          "displayName",
          "parentPortfolioId"
        ],
        "type": "object",
        "properties": {
          "displayName": {
            "maxLength": 512,
            "minLength": 1,
            "pattern": "^[\\s\\S]*$",
            "type": "string",
            "description": "The name of the derived transaction portfolio."
          },
          "description": {
            "maxLength": 1024,
            "minLength": 0,
            "pattern": "^[\\s\\S]*$",
            "type": "string",
            "description": "A description for the derived transaction portfolio.",
            "nullable": true
          },
          "code": {
            "maxLength": 64,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9\\-_]+$",
            "type": "string",
            "description": "The code of the derived transaction portfolio. Together with the scope this uniquely identifies the derived transaction portfolio."
          },
          "parentPortfolioId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "created": {
            "type": "string",
            "description": "This will be auto-populated to be the parent portfolio creation date.",
            "format": "date-time",
            "nullable": true
          },
          "corporateActionSourceId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "accountingMethod": {
            "enum": [
              "Default",
              "AverageCost",
              "FirstInFirstOut",
              "LastInFirstOut",
              "HighestCostFirst",
              "LowestCostFirst"
            ],
            "type": "string",
            "description": "Determines the accounting treatment given to the transaction portfolio's tax lots. The available values are: Default, AverageCost, FirstInFirstOut, LastInFirstOut, HighestCostFirst, LowestCostFirst"
          },
          "subHoldingKeys": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
            },
            "description": "A set of unique transaction properties to group the derived transaction portfolio's holdings by, perhaps for strategy tagging. Each property must be from the 'Transaction' domain and identified by a key in the format {domain}/{scope}/{code}, for example 'Transaction/strategies/quantsignal'. See https://support.lusid.com/knowledgebase/article/KA-01879/en-us for more information.",
            "nullable": true
          },
          "instrumentScopes": {
            "maxLength": 1,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The resolution strategy used to resolve instruments of transactions/holdings upserted to this derived portfolio.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CreatePortfolioDetails": {
        "type": "object",
        "properties": {
          "corporateActionSourceId": {
            "$ref": "#/components/schemas/ResourceId"
          }
        },
        "additionalProperties": false
      },
      "CreatePortfolioGroupRequest": {
        "required": [
          "code",
          "displayName"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "The code that the portfolio group will be created with. Together with the scope this uniquely identifies the portfolio group."
          },
          "created": {
            "type": "string",
            "description": "The effective datetime at which the portfolio group was created. Defaults to the current LUSID system datetime if not specified.",
            "format": "date-time",
            "nullable": true
          },
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResourceId"
            },
            "description": "The resource identifiers of the portfolios to be contained within the portfolio group.",
            "nullable": true
          },
          "subGroups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResourceId"
            },
            "description": "The resource identifiers of the portfolio groups to be contained within the portfolio group as sub groups.",
            "nullable": true
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Property"
            },
            "description": "A set of unique group properties to add to the portfolio group. Each property must be from the 'PortfolioGroup' domain and should be identified by its key which has the format {domain}/{scope}/{code}, e.g. 'PortfolioGroup/Manager/Id'. These properties must be pre-defined.",
            "nullable": true
          },
          "displayName": {
            "type": "string",
            "description": "The name of the portfolio group."
          },
          "description": {
            "type": "string",
            "description": "A long form description of the portfolio group.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CreatePropertyDefinitionRequest": {
        "required": [
          "code",
          "dataTypeId",
          "displayName",
          "domain",
          "scope"
        ],
        "type": "object",
        "properties": {
          "domain": {
            "enum": [
              "NotDefined",
              "Transaction",
              "Portfolio",
              "Holding",
              "ReferenceHolding",
              "TransactionConfiguration",
              "Instrument",
              "CutLabelDefinition",
              "Analytic",
              "PortfolioGroup",
              "Person",
              "AccessMetadata",
              "Order",
              "UnitResult",
              "MarketData",
              "ConfigurationRecipe",
              "Allocation",
              "Calendar",
              "LegalEntity",
              "Placement",
              "Execution",
              "Block",
              "Participation",
              "Package",
              "OrderInstruction",
              "NextBestAction",
              "CustomEntity",
              "InstrumentEvent"
            ],
            "type": "string",
            "description": "The domain that the property exists in. The available values are: NotDefined, Transaction, Portfolio, Holding, ReferenceHolding, TransactionConfiguration, Instrument, CutLabelDefinition, Analytic, PortfolioGroup, Person, AccessMetadata, Order, UnitResult, MarketData, ConfigurationRecipe, Allocation, Calendar, LegalEntity, Placement, Execution, Block, Participation, Package, OrderInstruction, NextBestAction, CustomEntity, InstrumentEvent"
          },
          "scope": {
            "type": "string",
            "description": "The scope that the property exists in."
          },
          "code": {
            "type": "string",
            "description": "The code of the property. Together with the domain and scope this uniquely identifies the property."
          },
          "valueRequired": {
            "type": "boolean",
            "description": "This field is not implemented and should be disregarded."
          },
          "displayName": {
            "type": "string",
            "description": "The display name of the property."
          },
          "dataTypeId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "lifeTime": {
            "enum": [
              "Perpetual",
              "TimeVariant"
            ],
            "type": "string",
            "description": "Describes how the property's values can change over time. The available values are: Perpetual, TimeVariant"
          },
          "constraintStyle": {
            "type": "string",
            "description": "Describes the uniqueness and cardinality of the property for entity objects under the property domain specified in Key. Defaults to \"Property\" if not specified. Valid values for this field are: Property, Collection or Identifier.",
            "nullable": true
          },
          "propertyDescription": {
            "maxLength": 512,
            "type": "string",
            "description": "Describes the property",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CreateReferencePortfolioRequest": {
        "required": [
          "code",
          "displayName"
        ],
        "type": "object",
        "properties": {
          "displayName": {
            "type": "string",
            "description": "The name of the reference portfolio."
          },
          "description": {
            "type": "string",
            "description": "A long form text description of the portfolio.",
            "nullable": true
          },
          "code": {
            "type": "string",
            "description": "Unique identifier for the portfolio."
          },
          "created": {
            "type": "string",
            "description": "The original creation date, defaults to today if not specified when creating a portfolio.",
            "format": "date-time",
            "nullable": true
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Property"
            },
            "description": "Portfolio properties to add to the portfolio.",
            "nullable": true
          },
          "instrumentScopes": {
            "maxLength": 1,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Instrument Scopes.",
            "nullable": true
          },
          "baseCurrency": {
            "type": "string",
            "description": "The base currency of the transaction portfolio in ISO 4217 currency code format.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CreateRelationshipDefinitionRequest": {
        "required": [
          "code",
          "displayName",
          "inwardDescription",
          "outwardDescription",
          "scope",
          "sourceEntityType",
          "targetEntityType"
        ],
        "type": "object",
        "properties": {
          "scope": {
            "maxLength": 64,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9\\-_]+$",
            "type": "string",
            "description": "The scope that the relationship definition exists in."
          },
          "code": {
            "maxLength": 64,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9\\-_]+$",
            "type": "string",
            "description": "The code of the relationship definition. Together with the scope this uniquely defines the relationship definition."
          },
          "sourceEntityType": {
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "description": "The entity type of the source entity object. Allowed values are 'Portfolio', 'PortfolioGroup', 'Person', 'LegalEntity' or a custom entity type prefixed with '~'."
          },
          "targetEntityType": {
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "description": "The entity type of the target entity object. Allowed values are 'Portfolio', 'PortfolioGroup', 'Person', 'LegalEntity' or a custom entity type prefixed with '~'."
          },
          "displayName": {
            "maxLength": 512,
            "minLength": 1,
            "pattern": "^[\\s\\S]*$",
            "type": "string",
            "description": "The display name of the relationship definition."
          },
          "outwardDescription": {
            "maxLength": 512,
            "minLength": 1,
            "pattern": "^[\\s\\S]*$",
            "type": "string",
            "description": "The description to relate source entity object and target entity object."
          },
          "inwardDescription": {
            "maxLength": 512,
            "minLength": 1,
            "pattern": "^[\\s\\S]*$",
            "type": "string",
            "description": "The description to relate target entity object and source entity object."
          },
          "lifeTime": {
            "type": "string",
            "description": "Describes how the relationships can change over time. Allowed values are 'Perpetual' and 'TimeVariant', defaults to 'Perpetual' if not specified.",
            "nullable": true
          },
          "relationshipCardinality": {
            "type": "string",
            "description": "Describes the cardinality of the relationship with a specific source entity object and relationships under this definition. Allowed values are 'ManyToMany' and 'ManyToOne', defaults to 'ManyToMany' if not specified.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CreateRelationshipRequest": {
        "required": [
          "sourceEntityId",
          "targetEntityId"
        ],
        "type": "object",
        "properties": {
          "sourceEntityId": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "The identifier of the source entity."
          },
          "targetEntityId": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "The identifier of the target entity."
          },
          "effectiveFrom": {
            "maxLength": 256,
            "minLength": 0,
            "pattern": "^[a-zA-Z0-9\\-_\\+:\\.]+$",
            "type": "string",
            "description": "The effective date of the relationship to be created",
            "format": "dateorcutlabel",
            "nullable": true
          },
          "effectiveUntil": {
            "maxLength": 256,
            "minLength": 0,
            "pattern": "^[a-zA-Z0-9\\-_\\+:\\.]+$",
            "type": "string",
            "description": "The effective datetime until which the relationship is valid. If not supplied this will be valid indefinitely.",
            "format": "dateorcutlabel",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CreateSequenceRequest": {
        "required": [
          "code"
        ],
        "type": "object",
        "properties": {
          "code": {
            "maxLength": 64,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9\\-_]+$",
            "type": "string",
            "description": "The code of the sequence definition to create"
          },
          "increment": {
            "type": "integer",
            "description": "The value to increment between each value in the sequence",
            "format": "int64",
            "nullable": true
          },
          "minValue": {
            "type": "integer",
            "description": "The minimum value of the sequence",
            "format": "int64",
            "nullable": true
          },
          "maxValue": {
            "type": "integer",
            "description": "The maximum value of the sequence",
            "format": "int64",
            "nullable": true
          },
          "start": {
            "type": "integer",
            "description": "The start value of the sequence",
            "format": "int64",
            "nullable": true
          },
          "cycle": {
            "type": "boolean",
            "description": "Set to true to start the sequence over again when it reaches the end. Defaults to false if not provided."
          },
          "pattern": {
            "maxLength": 44,
            "minLength": 1,
            "pattern": "^[A-Za-z0-9_-]*\\{\\{seqValue\\}\\}[A-Za-z0-9_-]*$",
            "type": "string",
            "description": "The pattern to be used to generate next values in the sequence. Defaults to null if not provided.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CreateTransactionPortfolioRequest": {
        "required": [
          "baseCurrency",
          "code",
          "displayName"
        ],
        "type": "object",
        "properties": {
          "displayName": {
            "type": "string",
            "description": "The name of the transaction portfolio."
          },
          "description": {
            "type": "string",
            "description": "A description for the transaction portfolio.",
            "nullable": true
          },
          "code": {
            "type": "string",
            "description": "The code of the transaction portfolio. Together with the scope this uniquely identifies the transaction portfolio."
          },
          "created": {
            "type": "string",
            "description": "The effective datetime at which to create the transaction portfolio. No transactions can be added to the transaction portfolio before this date. Defaults to the current LUSID system datetime if not specified.",
            "format": "date-time",
            "nullable": true
          },
          "baseCurrency": {
            "type": "string",
            "description": "The base currency of the transaction portfolio in ISO 4217 currency code format."
          },
          "corporateActionSourceId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "accountingMethod": {
            "enum": [
              "Default",
              "AverageCost",
              "FirstInFirstOut",
              "LastInFirstOut",
              "HighestCostFirst",
              "LowestCostFirst"
            ],
            "type": "string",
            "description": "Determines the accounting treatment given to the transaction portfolio's tax lots. The available values are: Default, AverageCost, FirstInFirstOut, LastInFirstOut, HighestCostFirst, LowestCostFirst"
          },
          "subHoldingKeys": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
            },
            "description": "A set of unique transaction properties to group the transaction portfolio's holdings by, perhaps for strategy tagging. Each property must be from the 'Transaction' domain and identified by a key in the format {domain}/{scope}/{code}, for example 'Transaction/strategies/quantsignal'. See https://support.lusid.com/knowledgebase/article/KA-01879/en-us for more information.",
            "nullable": true
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Property"
            },
            "description": "A set of unique portfolio properties to add custom data to the transaction portfolio. Each property must be from the 'Portfolio' domain and identified by a key in the format {domain}/{scope}/{code}, for example 'Portfolio/Manager/Id'. Note these properties must be pre-defined.",
            "nullable": true
          },
          "instrumentScopes": {
            "maxLength": 1,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The resolution strategy used to resolve instruments of transactions/holdings upserted to this portfolio.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CreditRating": {
        "required": [
          "rating",
          "ratingSource"
        ],
        "type": "object",
        "properties": {
          "ratingSource": {
            "maxLength": 64,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9\\-_]+$",
            "type": "string",
            "description": "The provider of the credit rating, which will typically be an agency such as Moody's or Standard and Poor."
          },
          "rating": {
            "maxLength": 64,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9\\-+\\/]+$",
            "type": "string",
            "description": "The credit rating provided by the rating source. This would expected to be consistent with the rating scheme of that agency/source."
          }
        },
        "additionalProperties": false,
        "description": "Object describing a credit rating,\r\nwhich assesses the stability and credit worthiness of a legal entity\r\nand hence its likelihood of defaulting on its outstanding obligations (typically debt)."
      },
      "CurrencyAndAmount": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "number",
            "format": "double"
          },
          "currency": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "An amount of a specific currency, specifying a value and an associated unit"
      },
      "CutLabelDefinition": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "",
            "nullable": true
          },
          "displayName": {
            "type": "string",
            "description": "",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "",
            "nullable": true
          },
          "cutLocalTime": {
            "$ref": "#/components/schemas/CutLocalTime"
          },
          "timeZone": {
            "type": "string",
            "description": "",
            "nullable": true
          },
          "href": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CutLocalTime": {
        "type": "object",
        "properties": {
          "hours": {
            "type": "integer",
            "format": "int32"
          },
          "minutes": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "DataType": {
        "required": [
          "description",
          "displayName",
          "id",
          "typeValueRange",
          "valueType"
        ],
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "typeValueRange": {
            "enum": [
              "Open",
              "Closed"
            ],
            "type": "string",
            "description": "The available values are: Open, Closed"
          },
          "id": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "displayName": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "valueType": {
            "enum": [
              "String",
              "Int",
              "Decimal",
              "DateTime",
              "Boolean",
              "Map",
              "List",
              "PropertyArray",
              "Percentage",
              "Code",
              "Id",
              "Uri",
              "CurrencyAndAmount",
              "TradePrice",
              "Currency",
              "MetricValue",
              "ResourceId",
              "ResultValue",
              "CutLocalTime",
              "DateOrCutLabel"
            ],
            "type": "string",
            "description": "The available values are: String, Int, Decimal, DateTime, Boolean, Map, List, PropertyArray, Percentage, Code, Id, Uri, CurrencyAndAmount, TradePrice, Currency, MetricValue, ResourceId, ResultValue, CutLocalTime, DateOrCutLabel"
          },
          "acceptableValues": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "unitSchema": {
            "enum": [
              "NoUnits",
              "Basic",
              "Iso4217Currency"
            ],
            "type": "string",
            "description": "The available values are: NoUnits, Basic, Iso4217Currency"
          },
          "acceptableUnits": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IUnitDefinitionDto"
            },
            "nullable": true
          },
          "referenceData": {
            "$ref": "#/components/schemas/ReferenceData"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DateRange": {
        "required": [
          "fromDate"
        ],
        "type": "object",
        "properties": {
          "fromDate": {
            "type": "string",
            "format": "date-time"
          },
          "untilDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DeletedEntityResponse": {
        "required": [
          "asAt"
        ],
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "description": "The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.",
            "format": "uri",
            "nullable": true
          },
          "effectiveFrom": {
            "type": "string",
            "description": "The effective datetime at which the deletion became valid. May be null in the case where multiple date times are applicable.",
            "format": "date-time",
            "nullable": true
          },
          "asAt": {
            "type": "string",
            "description": "The asAt datetime at which the deletion was committed to LUSID.",
            "format": "date-time"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DeleteInstrumentResponse": {
        "required": [
          "asAt"
        ],
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "description": "The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.",
            "format": "uri",
            "nullable": true
          },
          "asAt": {
            "type": "string",
            "description": "The as-at datetime at which the instrument was deleted.",
            "format": "date-time"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DeleteRelationshipRequest": {
        "required": [
          "sourceEntityId",
          "targetEntityId"
        ],
        "type": "object",
        "properties": {
          "sourceEntityId": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "The identifier of the source entity of the relationship to be deleted."
          },
          "targetEntityId": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "The identifier of the target entity of the relationship to be deleted."
          },
          "effectiveFrom": {
            "maxLength": 256,
            "minLength": 0,
            "pattern": "^[a-zA-Z0-9\\-_\\+:\\.]+$",
            "type": "string",
            "description": "The effective date of the relationship to be deleted",
            "format": "dateorcutlabel",
            "nullable": true
          },
          "effectiveUntil": {
            "maxLength": 256,
            "minLength": 0,
            "pattern": "^[a-zA-Z0-9\\-_\\+:\\.]+$",
            "type": "string",
            "description": "The effective datetime until which the relationship will be deleted. If not supplied the deletion will be permanent.",
            "format": "dateorcutlabel",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DependencySourceFilter": {
        "type": "object",
        "properties": {
          "instrumentType": {
            "maxLength": 32,
            "minLength": 0,
            "type": "string",
            "description": "Specify that a rule should only apply if the market data is requested by an instrument of a given instrument type.\r\nIf null, then no filtering on instrument type is applied.",
            "nullable": true
          },
          "assetClass": {
            "maxLength": 32,
            "minLength": 0,
            "type": "string",
            "description": "Specify that a rule should only apply if the market data is requested by an instrument of a given asset class.\r\nIf null, then no filtering on asset class is applied.",
            "nullable": true
          },
          "domCcy": {
            "type": "string",
            "description": "Specify that a rule should only apply if the market data is requested by an instrument with a given domestic currency.\r\nIf null, then no filtering on currency is applied.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Encapsulates parts of a market data rule relating not to the nature of the market data requested, but rather the nature of the thing (instrument/model) that is requesting it.\r\nIn the first instance, this includes the instrument type, asset class, and the currency of the underlying instrument.\r\nThis can be used to differentiate requests for market data according to the source of the request. See MarketDataSpecificRule."
      },
      "EntityIdentifier": {
        "required": [
          "identifierType",
          "identifierValue"
        ],
        "type": "object",
        "properties": {
          "identifierScope": {
            "type": "string",
            "description": "The scope of the identifier",
            "nullable": true
          },
          "identifierType": {
            "type": "string",
            "description": "The type of the identifier"
          },
          "identifierValue": {
            "type": "string",
            "description": "The value of the identifier"
          }
        },
        "additionalProperties": false,
        "description": "Dto to expose mapped keys to new standardised format"
      },
      "ErrorDetail": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the failed item that this error relates to.",
            "nullable": true
          },
          "type": {
            "type": "string",
            "description": "The type of failure that occurred.",
            "nullable": true
          },
          "detail": {
            "type": "string",
            "description": "Description of the failure that occurred.",
            "nullable": true
          },
          "errorDetails": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "description": "Information about the particular instance of the failure (supplied information depends on the type of failure).",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ExpandedGroup": {
        "required": [
          "displayName",
          "id"
        ],
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "description": "The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.",
            "format": "uri",
            "nullable": true
          },
          "id": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "displayName": {
            "type": "string",
            "description": "The name of the portfolio group."
          },
          "description": {
            "type": "string",
            "description": "The long form description of the portfolio group.",
            "nullable": true
          },
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CompletePortfolio"
            },
            "description": "The collection of resource identifiers for the portfolios contained in the portfolio group.",
            "nullable": true
          },
          "subGroups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExpandedGroup"
            },
            "description": "The collection of resource identifiers for the portfolio groups contained in the portfolio group as sub groups.",
            "nullable": true
          },
          "version": {
            "$ref": "#/components/schemas/Version"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "FieldDefinition": {
        "required": [
          "isRequired",
          "isUnique",
          "key"
        ],
        "type": "object",
        "properties": {
          "key": {
            "maxLength": 512,
            "minLength": 1,
            "pattern": "^[\\s\\S]*$",
            "type": "string"
          },
          "isRequired": {
            "type": "boolean"
          },
          "isUnique": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "FieldSchema": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "displayName": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "type": {
            "enum": [
              "String",
              "Int",
              "Decimal",
              "DateTime",
              "Boolean",
              "Map",
              "List",
              "PropertyArray",
              "Percentage",
              "Code",
              "Id",
              "Uri",
              "CurrencyAndAmount",
              "TradePrice",
              "Currency",
              "MetricValue",
              "ResourceId",
              "ResultValue",
              "CutLocalTime",
              "DateOrCutLabel"
            ],
            "type": "string",
            "description": "The available values are: String, Int, Decimal, DateTime, Boolean, Map, List, PropertyArray, Percentage, Code, Id, Uri, CurrencyAndAmount, TradePrice, Currency, MetricValue, ResourceId, ResultValue, CutLocalTime, DateOrCutLabel"
          },
          "displayOrder": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "FieldValue": {
        "required": [
          "fields",
          "value"
        ],
        "type": "object",
        "properties": {
          "value": {
            "maxLength": 512,
            "minLength": 1,
            "pattern": "^[\\s\\S]*$",
            "type": "string"
          },
          "fields": {
            "maxLength": 10,
            "minLength": 1,
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        },
        "additionalProperties": false
      },
      "FileResponse": {
        "type": "object",
        "properties": {
          "fileStream": {
            "$ref": "#/components/schemas/Stream"
          },
          "contentType": {
            "type": "string",
            "nullable": true
          },
          "downloadedFilename": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Allows a file (represented as a stream) to be returned from an Api call"
      },
      "GetComplexMarketDataResponse": {
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "description": "The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.",
            "format": "uri",
            "nullable": true
          },
          "values": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ComplexMarketData"
            },
            "description": "The set of values that were successfully retrieved.",
            "nullable": true
          },
          "failed": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ErrorDetail"
            },
            "description": "The set of values that could not be retrieved due along with a reason for this, e.g badly formed request.",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GetInstrumentsResponse": {
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "description": "The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.",
            "format": "uri",
            "nullable": true
          },
          "values": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Instrument"
            },
            "description": "The instrument definitions, keyed by the identifier used to retrieve them. Only instruments that were found will be contained in this collection.",
            "nullable": true
          },
          "failed": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ErrorDetail"
            },
            "description": "The identifiers that did not resolve to an instrument along with the nature of the failure.",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GetQuotesResponse": {
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "description": "The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.",
            "format": "uri",
            "nullable": true
          },
          "values": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Quote"
            },
            "description": "The quotes which have been successfully retrieved.",
            "nullable": true
          },
          "notFound": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ErrorDetail"
            },
            "description": "The quotes that could not be found along with a reason why.",
            "nullable": true
          },
          "failed": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ErrorDetail"
            },
            "description": "The quotes that could not be retrieved due to an error along with a reason for their failure.",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GetRecipeResponse": {
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "description": "The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.",
            "format": "uri",
            "nullable": true
          },
          "value": {
            "$ref": "#/components/schemas/ConfigurationRecipe"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GetReferencePortfolioConstituentsResponse": {
        "required": [
          "constituents",
          "effectiveFrom",
          "weightType"
        ],
        "type": "object",
        "properties": {
          "effectiveFrom": {
            "type": "string",
            "description": "",
            "format": "date-time"
          },
          "weightType": {
            "enum": [
              "Static",
              "Floating",
              "Periodical"
            ],
            "type": "string",
            "description": "The available values are: Static, Floating, Periodical"
          },
          "periodType": {
            "enum": [
              "Daily",
              "Weekly",
              "Monthly",
              "Quarterly",
              "Annually"
            ],
            "type": "string",
            "description": "The available values are: Daily, Weekly, Monthly, Quarterly, Annually",
            "nullable": true
          },
          "periodCount": {
            "type": "integer",
            "description": "",
            "format": "int32",
            "nullable": true
          },
          "constituents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReferencePortfolioConstituent"
            },
            "description": "Set of constituents (instrument/weight pairings)"
          },
          "href": {
            "type": "string",
            "description": "The Uri that returns the same result as the original request,\r\nbut may include resolved as at time(s).",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "HoldingAdjustment": {
        "required": [
          "instrumentUid",
          "taxLots"
        ],
        "type": "object",
        "properties": {
          "instrumentIdentifiers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "A set of instrument identifiers that can resolve the holding adjustment to a unique instrument.",
            "nullable": true
          },
          "instrumentScope": {
            "type": "string",
            "description": "The scope of the instrument that the holding adjustment is in.",
            "nullable": true
          },
          "instrumentUid": {
            "type": "string",
            "description": "The unqiue Lusid Instrument Id (LUID) of the instrument that the holding adjustment is in."
          },
          "subHoldingKeys": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/PerpetualProperty"
            },
            "description": "The set of unique transaction properties and associated values stored with the holding adjustment transactions automatically created by LUSID. Each property will be from the 'Transaction' domain.",
            "nullable": true
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/PerpetualProperty"
            },
            "description": "The set of unique holding properties and associated values stored with the target holding. Each property will be from the 'Holding' domain.",
            "nullable": true
          },
          "taxLots": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TargetTaxLot"
            },
            "description": "The tax-lots that together make up the target holding."
          },
          "currency": {
            "type": "string",
            "description": "The Holding currency.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The target holdings."
      },
      "HoldingContext": {
        "type": "object",
        "properties": {
          "taxLotLevelHoldings": {
            "type": "boolean",
            "description": "Whether or not to expand the holdings to return the underlying tax-lots. Defaults to True."
          }
        },
        "additionalProperties": false,
        "description": "Holding context node.\r\nContains settings that control how LUSID handles holdings within portfolios."
      },
      "HoldingsAdjustment": {
        "required": [
          "adjustments",
          "effectiveAt",
          "unmatchedHoldingMethod",
          "version"
        ],
        "type": "object",
        "properties": {
          "effectiveAt": {
            "type": "string",
            "description": "The effective datetime from which the adjustment is valid. There can only be one holdings adjustment for a transaction portfolio at a specific effective datetime, so this uniquely identifies the adjustment.",
            "format": "date-time"
          },
          "version": {
            "$ref": "#/components/schemas/Version"
          },
          "unmatchedHoldingMethod": {
            "enum": [
              "PositionToZero",
              "KeepTheSame"
            ],
            "type": "string",
            "description": "Describes how the holdings were adjusted. If 'PositionToZero' the entire transaction portfolio's holdings were set via a call to 'Set holdings'. If 'KeepTheSame' only the specified holdings were adjusted via a call to 'Adjust holdings'. The available values are: PositionToZero, KeepTheSame"
          },
          "adjustments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/HoldingAdjustment"
            },
            "description": "The holding adjustments."
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Full content of a holdings adjustment for a single portfolio and effective date."
      },
      "HoldingsAdjustmentHeader": {
        "required": [
          "effectiveAt",
          "unmatchedHoldingMethod",
          "version"
        ],
        "type": "object",
        "properties": {
          "effectiveAt": {
            "type": "string",
            "description": "The effective datetime from which the adjustment is valid. There can only be one holdings adjustment for a transaction portfolio at a specific effective datetime, so this uniquely identifies the adjustment.",
            "format": "date-time"
          },
          "version": {
            "$ref": "#/components/schemas/Version"
          },
          "unmatchedHoldingMethod": {
            "enum": [
              "PositionToZero",
              "KeepTheSame"
            ],
            "type": "string",
            "description": "Describes how the holdings were adjusted. If 'PositionToZero' the entire transaction portfolio's holdings were set via a call to 'Set holdings'. If 'KeepTheSame' only the specified holdings were adjusted via a call to 'Adjust holdings'. The available values are: PositionToZero, KeepTheSame"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A record of holdings adjustments made on the transaction portfolio."
      },
      "IdentifierPartSchema": {
        "required": [
          "description",
          "displayName",
          "index",
          "name",
          "required"
        ],
        "type": "object",
        "properties": {
          "index": {
            "type": "integer",
            "description": "The typical index in the identifier in which this part appears",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "description": "The name of the identifier part that can/should be provided for this resource type"
          },
          "displayName": {
            "type": "string",
            "description": "The display name of the identifier part"
          },
          "description": {
            "type": "string",
            "description": "A brief description of the point of this identifier part"
          },
          "required": {
            "type": "boolean",
            "description": "Whether a value is required to be provided"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The schema of an contributing part of a valid LUSID resource identifier"
      },
      "IdSelectorDefinition": {
        "required": [
          "actions",
          "identifier"
        ],
        "type": "object",
        "properties": {
          "identifier": {
            "minLength": 1,
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "actions": {
            "minLength": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ActionId"
            }
          },
          "name": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "description": {
            "maxLength": 1024,
            "minLength": 0,
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "IndustryClassifier": {
        "required": [
          "classificationCode",
          "classificationSystemName"
        ],
        "type": "object",
        "properties": {
          "classificationSystemName": {
            "type": "string",
            "description": "The name of the classification system to which the classification code belongs (e.g. GICS)."
          },
          "classificationCode": {
            "maxLength": 64,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9\\-_]+$",
            "type": "string",
            "description": "The specific industry classification code assigned to the legal entity."
          }
        },
        "additionalProperties": false,
        "description": "Object describing a particular industry classifier,\r\nwhich comprises a classification code and the name of the classification system to which the code belongs."
      },
      "InlineValuationRequest": {
        "required": [
          "instruments",
          "metrics"
        ],
        "type": "object",
        "properties": {
          "recipeId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "asAt": {
            "type": "string",
            "description": "The asAt date to use",
            "format": "date-time",
            "nullable": true
          },
          "metrics": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AggregateSpec"
            },
            "description": "The set of specifications to calculate or retrieve during the valuation and present in the results. For example:\r\nAggregateSpec('Holding/default/PV','Sum') for returning the PV (present value) of holdings\r\nAggregateSpec('Holding/default/Units','Sum') for returning the units of holidays\r\nAggregateSpec('Instrument/default/LusidInstrumentId','Value') for returning the Lusid Instrument identifier"
          },
          "groupBy": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "The key that uniquely identifies a queryable address in Lusid."
            },
            "description": "The set of items by which to perform grouping. This primarily matters when one or more of the metric operators is a mapping\r\nthat reduces set size, e.g. sum or proportion. The group-by statement determines the set of keys by which to break the results out.",
            "nullable": true
          },
          "filters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PropertyFilter"
            },
            "description": "A set of filters to use to reduce the data found in a request. Equivalent to the 'where ...' part of a Sql select statement.\r\nFor example, filter a set of values within a given range or matching a particular value.",
            "nullable": true
          },
          "sort": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderBySpec"
            },
            "description": "A (possibly empty/null) set of specifications for how to order the results.",
            "nullable": true
          },
          "reportCurrency": {
            "maxLength": 3,
            "minLength": 0,
            "type": "string",
            "description": "Three letter ISO currency string indicating what currency to report in for ReportCurrency denominated queries.\r\nIf not present, then the currency of the relevant portfolio will be used in its place.",
            "nullable": true
          },
          "equipWithSubtotals": {
            "type": "boolean",
            "description": "Flag directing the Valuation call to populate the results with subtotals of aggregates."
          },
          "valuationSchedule": {
            "$ref": "#/components/schemas/ValuationSchedule"
          },
          "instruments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WeightedInstrument"
            },
            "description": "The set of instruments, weighted by the quantities held that are required.\r\nIt is identified by an identifier tag that can be used to identify it externally.\r\nFor a single, unique trade or transaction this can be thought of as equivalent to the transaction identifier, or\r\na composite of the sub-holding keys for a regular sub-holding. When there are multiple transactions sharing the same underlying instrument\r\nsuch as purchase of shares on multiple dates where tax implications are different this would not be the case."
          }
        },
        "additionalProperties": false,
        "description": "Specification object for the parameters of an inline valuation"
      },
      "Instrument": {
        "required": [
          "identifiers",
          "lusidInstrumentId",
          "name",
          "state",
          "version"
        ],
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "description": "The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.",
            "format": "uri",
            "nullable": true
          },
          "scope": {
            "type": "string",
            "description": "The scope in which the instrument lies.",
            "nullable": true
          },
          "lusidInstrumentId": {
            "type": "string",
            "description": "The unique LUSID Instrument Identifier (LUID) of the instrument."
          },
          "version": {
            "$ref": "#/components/schemas/Version"
          },
          "name": {
            "type": "string",
            "description": "The name of the instrument."
          },
          "identifiers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "The set of identifiers that can be used to identify the instrument."
          },
          "properties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Property"
            },
            "description": "The requested instrument properties. These will be from the 'Instrument' domain.",
            "nullable": true
          },
          "lookthroughPortfolio": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "instrumentDefinition": {
            "$ref": "#/components/schemas/LusidInstrument"
          },
          "state": {
            "enum": [
              "Active",
              "Inactive",
              "Deleted"
            ],
            "type": "string",
            "description": "The state of of the instrument at the asAt datetime of this version of the instrument definition. The available values are: Active, Inactive, Deleted"
          },
          "assetClass": {
            "enum": [
              "InterestRates",
              "FX",
              "Inflation",
              "Equities",
              "Credit",
              "Commodities",
              "Money",
              "Unknown"
            ],
            "type": "string",
            "description": "The nominal asset class of the instrument, e.g. InterestRates, FX, Inflation, Equities, Credit, Commodities, etc. The available values are: InterestRates, FX, Inflation, Equities, Credit, Commodities, Money, Unknown"
          },
          "domCcy": {
            "type": "string",
            "description": "The domestic currency, meaning the currency in which the instrument would typically be expected to pay cashflows, e.g. a share in AAPL being USD.",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A list of instruments."
      },
      "InstrumentDefinition": {
        "required": [
          "identifiers",
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the instrument."
          },
          "identifiers": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/InstrumentIdValue"
            },
            "description": "A set of identifiers that can be used to identify the instrument. At least one of these must be configured to be a unique identifier."
          },
          "properties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Property"
            },
            "description": "Set of unique instrument properties and associated values to store with the instrument. Each property must be from the 'Instrument' domain.",
            "nullable": true
          },
          "lookThroughPortfolioId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "definition": {
            "$ref": "#/components/schemas/LusidInstrument"
          }
        },
        "additionalProperties": false
      },
      "InstrumentIdTypeDescriptor": {
        "required": [
          "identifierType",
          "isUniqueIdentifierType",
          "propertyKey"
        ],
        "type": "object",
        "properties": {
          "identifierType": {
            "type": "string",
            "description": "The name of the identifier type."
          },
          "propertyKey": {
            "type": "string",
            "description": "The property key that corresponds to the identifier type."
          },
          "isUniqueIdentifierType": {
            "type": "boolean",
            "description": "Whether or not the identifier type is enforced to be unique."
          }
        },
        "additionalProperties": false,
        "description": "The description of an allowable instrument identifier."
      },
      "InstrumentIdValue": {
        "required": [
          "value"
        ],
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "The value of the identifier."
          },
          "effectiveAt": {
            "type": "string",
            "description": "The effective datetime from which the identifier will be valid. If left unspecified the default value is the beginning of time.",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "IUnitDefinitionDto": {
        "type": "object",
        "properties": {
          "schema": {
            "enum": [
              "NoUnits",
              "Basic",
              "Iso4217Currency"
            ],
            "type": "string",
            "description": "The available values are: NoUnits, Basic, Iso4217Currency"
          },
          "code": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "displayName": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "description": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "LabelValueSet": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "values": {
            "minLength": 1,
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "additionalProperties": false,
        "description": "The set of string labels in a multi-value property."
      },
      "LegalEntity": {
        "type": "object",
        "properties": {
          "displayName": {
            "type": "string",
            "description": "The display name of the Legal Entity",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "The description of the Legal Entity",
            "nullable": true
          },
          "href": {
            "type": "string",
            "description": "The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.",
            "format": "uri",
            "nullable": true
          },
          "lusidLegalEntityId": {
            "type": "string",
            "description": "The unique LUSID Legal Entity Identifier of the Legal Entity.",
            "nullable": true
          },
          "identifiers": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Property"
            },
            "description": "Unique client-defined identifiers of the Legal Entity.",
            "nullable": true
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Property"
            },
            "description": "A set of properties associated to the Legal Entity.",
            "nullable": true
          },
          "counterpartyRiskInformation": {
            "$ref": "#/components/schemas/CounterpartyRiskInformation"
          },
          "version": {
            "$ref": "#/components/schemas/Version"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Representation of Legal Entity on LUSID API"
      },
      "Link": {
        "required": [
          "href",
          "method",
          "relation"
        ],
        "type": "object",
        "properties": {
          "relation": {
            "type": "string",
            "description": "Relation of link."
          },
          "href": {
            "type": "string",
            "description": "Href of link.",
            "format": "uri"
          },
          "description": {
            "type": "string",
            "description": "Description of link.",
            "nullable": true
          },
          "method": {
            "type": "string",
            "description": "Http method of link."
          }
        },
        "additionalProperties": false,
        "description": "Link class."
      },
      "ListAggregationResponse": {
        "type": "object",
        "properties": {
          "aggregationEffectiveAt": {
            "type": "string",
            "format": "date-time"
          },
          "aggregationAsAt": {
            "type": "string",
            "format": "date-time"
          },
          "href": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": {
                "type": "object",
                "additionalProperties": false
              }
            },
            "nullable": true
          },
          "aggregationCurrency": {
            "type": "string",
            "nullable": true
          },
          "dataSchema": {
            "$ref": "#/components/schemas/ResultDataSchema"
          },
          "aggregationFailures": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AggregationMeasureFailureDetail"
            },
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "LusidInstrument": {
        "required": [
          "instrumentType"
        ],
        "type": "object",
        "properties": {
          "instrumentType": {
            "enum": [
              "QuotedSecurity",
              "InterestRateSwap",
              "FxForward",
              "Future",
              "ExoticInstrument",
              "FxOption",
              "CreditDefaultSwap",
              "InterestRateSwaption",
              "Bond",
              "EquityOption",
              "FixedLeg",
              "FloatingLeg",
              "BespokeCashFlowsLeg",
              "Unknown",
              "TermDeposit",
              "ContractForDifference",
              "EquitySwap",
              "CashPerpetual",
              "CapFloor",
              "CashSettled",
              "CdsIndex",
              "Basket",
              "FundingLeg",
              "FxSwap",
              "ForwardRateAgreement",
              "SimpleInstrument",
              "Repo",
              "Equity",
              "ExchangeTradedOption",
              "ReferenceInstrument",
              "ComplexBond",
              "InflationLinkedBond"
            ],
            "type": "string",
            "description": "The available values are: QuotedSecurity, InterestRateSwap, FxForward, Future, ExoticInstrument, FxOption, CreditDefaultSwap, InterestRateSwaption, Bond, EquityOption, FixedLeg, FloatingLeg, BespokeCashFlowsLeg, Unknown, TermDeposit, ContractForDifference, EquitySwap, CashPerpetual, CapFloor, CashSettled, CdsIndex, Basket, FundingLeg, FxSwap, ForwardRateAgreement, SimpleInstrument, Repo, Equity, ExchangeTradedOption, ReferenceInstrument, ComplexBond, InflationLinkedBond"
          }
        },
        "additionalProperties": false,
        "description": "Base class in hierarchy for LUSID Instruments. Valuation would normally be performed through passing LUSID a Code for a portfolio to be valued.\r\nIn that case the set of instruments have already been uploaded. Equally, one might wish to pass in a set of instruments directly and have LUSID\r\nvalue the inlined set. This the base instrument for this case.",
        "discriminator": {
          "propertyName": "instrumentType"
        }
      },
      "LusidProblemDetails": {
        "required": [
          "code",
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the error"
          },
          "errorDetails": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "description": "Any additional informational information available about the nature and detail of the problem",
            "nullable": true
          },
          "code": {
            "type": "integer",
            "description": "Get the error code of the response",
            "format": "int32"
          },
          "type": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "detail": {
            "type": "string",
            "nullable": true
          },
          "instance": {
            "type": "string",
            "nullable": true
          },
          "extensions": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "additionalProperties": false
            },
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false,
        "description": "A description of a problem that has arisen during the processing of a request."
      },
      "LusidUniqueId": {
        "required": [
          "type",
          "value"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "The type for the LUSID unique id, this will depend on the type of entity found, for instance 'Instrument' would have a value of 'LusidInstrumentId'"
          },
          "value": {
            "type": "string",
            "description": "The value for the LUSID unique id"
          }
        },
        "additionalProperties": false
      },
      "LusidValidationProblemDetails": {
        "required": [
          "code",
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the error"
          },
          "errorDetails": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "description": "Any additional informational information available about the nature and detail of the problem",
            "nullable": true
          },
          "code": {
            "type": "integer",
            "description": "Get the error code of the response",
            "format": "int32"
          },
          "errors": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "nullable": true
          },
          "type": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "detail": {
            "type": "string",
            "nullable": true
          },
          "instance": {
            "type": "string",
            "nullable": true
          },
          "extensions": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "additionalProperties": false
            },
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false,
        "description": "A description of a problem that has arisen whilst validating a request"
      },
      "MarketContext": {
        "type": "object",
        "properties": {
          "marketRules": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MarketDataKeyRule"
            },
            "description": "The set of rules that define how to resolve particular use cases. These can be relatively general or specific in nature.\r\nNominally any number are possible and will be processed in order where applicable. However, there is evidently a potential\r\nfor increased computational cost where many rules must be applied to resolve data. Ensuring that portfolios are structured in\r\nsuch a way as to reduce the number of rules required is therefore sensible.",
            "nullable": true
          },
          "suppliers": {
            "type": "object",
            "properties": {
              "Commodity": {
                "type": "string"
              },
              "Credit": {
                "type": "string"
              },
              "Equity": {
                "type": "string"
              },
              "Fx": {
                "type": "string"
              },
              "Rates": {
                "type": "string"
              }
            },
            "additionalProperties": false,
            "description": "It is possible to control which supplier is used for a given asset class.\r\nThis field is deprecated in favour of market data rules, which subsumes its functionality.",
            "nullable": true
          },
          "options": {
            "$ref": "#/components/schemas/MarketOptions"
          },
          "specificRules": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MarketDataSpecificRule"
            },
            "description": "Extends market data key rules to be able to catch dependencies depending on where the dependency comes from, as opposed to what the dependency is asking for.\r\nUsing two specific rules, one could instruct rates curves requested by bonds to be retrieved from a different scope than rates curves requested by swaps.\r\nWARNING: The use of specific rules impacts performance. Where possible, one should use MarketDataKeyRules only.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Market context node. This defines how LUSID processes parts of a request that require resolution of market data such as instrument prices or\r\nFx rates. It controls where the data is loaded from and which sources take precedence."
      },
      "MarketDataKeyRule": {
        "required": [
          "dataScope",
          "field",
          "key",
          "quoteType",
          "supplier"
        ],
        "type": "object",
        "properties": {
          "key": {
            "maxLength": 128,
            "minLength": 0,
            "type": "string",
            "description": "A dot-separated string that defines a pattern for matching market data dependencies.\r\nThe form of the string depends on the type of the dependency; see below for basic types and the Knowledge Base for further info.\r\nQuote lookup: \"Quote.{CodeType}.*\" e.g. \"Quote.RIC.*\" refers to 'any RIC quote'\r\nFx rates: \"Fx.CurrencyPair.*\", which refers to 'any FX rate'\r\nDiscounting curves: \"Rates.{Currency}.{Currency}OIS e.g. \"Rates.USD.USDOIS\" refers to the OIS USD discounting curve\r\n            \r\nFor non-fx and non-quote rules, trailing parameters can be replaced by the wildcard character '*'.\r\ne.g. \"Rates.*.*\" matches any dependency on a discounting curve."
          },
          "supplier": {
            "maxLength": 32,
            "minLength": 0,
            "type": "string",
            "description": "The market data supplier (where the data comes from)"
          },
          "dataScope": {
            "maxLength": 256,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9\\-_]+$",
            "type": "string",
            "description": "The scope in which the data should be found when using this rule."
          },
          "quoteType": {
            "enum": [
              "Price",
              "Spread",
              "Rate",
              "LogNormalVol",
              "NormalVol",
              "ParSpread",
              "IsdaSpread",
              "Upfront",
              "Index",
              "Ratio",
              "Delta"
            ],
            "type": "string",
            "description": "The available values are: Price, Spread, Rate, LogNormalVol, NormalVol, ParSpread, IsdaSpread, Upfront, Index, Ratio, Delta"
          },
          "field": {
            "maxLength": 32,
            "minLength": 0,
            "type": "string",
            "description": "The conceptual qualification for the field, such as bid, mid, or ask.\r\nThe field must be one of a defined set for the given supplier, in the same way as it\r\nis for the Finbourne.WebApi.Interface.Dto.Quotes.QuoteSeriesId"
          },
          "quoteInterval": {
            "maxLength": 16,
            "minLength": 0,
            "type": "string",
            "description": "Shorthand for the time interval used to select market data. This must be a dot-separated string\r\n            nominating a start and end date, for example '5D.0D' to look back 5 days from today (0 days ago). The syntax\r\n            is <i>int</i><i>char</i>.<i>int</i><i>char</i>, where <i>char</i> is one of D(ay), W(eek), M(onth) or Y(ear).",
            "nullable": true
          },
          "asAt": {
            "type": "string",
            "description": "The AsAt predicate specification.",
            "format": "date-time",
            "nullable": true
          },
          "priceSource": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "description": "The source of the quote. For a given provider/supplier of market data there may be an additional qualifier, e.g. the exchange or bank that provided the quote",
            "nullable": true
          },
          "mask": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "description": "Allows for partial or complete override of the market asset resolved for a dependency\r\nEither a named override or a dot separated string (A.B.C.D.*).\r\ne.g. for Rates curve 'EUR.*' will replace the resolve MarketAsset 'GBP/12M', 'GBP/3M' with the EUR equivalent, if there\r\nare no wildcards in the mask, the mask is taken as the MarketAsset for any dependency matching the rule.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "When performing analytics, instruments and models have dependencies on market data.\r\nA market data key rule essentially tells lusid to \"resolve dependencies matching the pattern 'X' using data of the form 'Y'\".\r\nThe parameter 'X' is defined by the key of the key rule, and might specify \"all USD rates curves\" or \"all RIC-based prices\".\r\nThe parameter 'Y' is defined by the remaining fields of the key rule, and allows the user to configure things such as\r\nwhere to look for data, what sort of data should be looked for (e.g. bid/mid/ask), and how old the data is allowed to be."
      },
      "MarketDataSpecificRule": {
        "required": [
          "dataScope",
          "dependencySourceFilter",
          "field",
          "key",
          "quoteType",
          "supplier"
        ],
        "type": "object",
        "properties": {
          "key": {
            "maxLength": 128,
            "minLength": 0,
            "type": "string",
            "description": "The market data key pattern which this is a rule for. A dot separated string (A.B.C.D.*)"
          },
          "supplier": {
            "maxLength": 32,
            "minLength": 0,
            "type": "string",
            "description": "The market data supplier (where the data comes from)"
          },
          "dataScope": {
            "maxLength": 256,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9\\-_]+$",
            "type": "string",
            "description": "The scope in which the data should be found when using this rule."
          },
          "quoteType": {
            "enum": [
              "Price",
              "Spread",
              "Rate",
              "LogNormalVol",
              "NormalVol",
              "ParSpread",
              "IsdaSpread",
              "Upfront",
              "Index",
              "Ratio",
              "Delta"
            ],
            "type": "string",
            "description": "The available values are: Price, Spread, Rate, LogNormalVol, NormalVol, ParSpread, IsdaSpread, Upfront, Index, Ratio, Delta"
          },
          "field": {
            "maxLength": 32,
            "minLength": 0,
            "type": "string",
            "description": "The conceptual qualification for the field, such as bid, mid, or ask.\r\nThe field must be one of a defined set for the given supplier, in the same way as it\r\nis for the Finbourne.WebApi.Interface.Dto.Quotes.QuoteSeriesId"
          },
          "quoteInterval": {
            "maxLength": 16,
            "minLength": 0,
            "type": "string",
            "description": "Shorthand for the time interval used to select market data. This must be a dot-separated string\r\n            nominating a start and end date, for example '5D.0D' to look back 5 days from today (0 days ago). The syntax\r\n            is <i>int</i><i>char</i>.<i>int</i><i>char</i>, where <i>char</i> is one of D(ay), W(eek), M(onth) or Y(ear).",
            "nullable": true
          },
          "asAt": {
            "type": "string",
            "description": "The AsAt predicate specification.",
            "format": "date-time",
            "nullable": true
          },
          "priceSource": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "description": "The source of the quote. For a given provider/supplier of market data there may be an additional qualifier, e.g. the exchange or bank that provided the quote",
            "nullable": true
          },
          "mask": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "description": "Allows for partial or complete override of the market asset resolved for a dependency\r\nEither a named override or a dot separated string (A.B.C.D.*).\r\ne.g. for Rates curve 'EUR.*' will replace the resolve MarketAsset 'GBP/12M', 'GBP/3M' with the EUR equivalent, if there\r\nare no wildcards in the mask, the mask is taken as the MarketAsset for any dependency matching the rule.",
            "nullable": true
          },
          "dependencySourceFilter": {
            "$ref": "#/components/schemas/DependencySourceFilter"
          }
        },
        "additionalProperties": false,
        "description": "Extends market data key rules to be able to catch dependencies depending on where the dependency comes from, as opposed to what the dependency is asking for.\r\nFor example, a market data rule might instruct all rates curves to be retrieved from a particular scope.\r\nThis class gives the ability to set different behaviour depending on what is requesting the rates curve.\r\nUsing two specific rules, one could instruct rates curves requested by bonds to be retrieved from a different scope than rates curves requested by swaps."
      },
      "MarketOptions": {
        "required": [
          "defaultScope"
        ],
        "type": "object",
        "properties": {
          "defaultSupplier": {
            "maxLength": 32,
            "minLength": 0,
            "type": "string",
            "description": "The default supplier of data. This controls which 'dialect' is used to find particular market data. e.g. one supplier might address data by RIC, another by PermId",
            "nullable": true
          },
          "defaultInstrumentCodeType": {
            "maxLength": 32,
            "minLength": 0,
            "type": "string",
            "description": "When instrument quotes are searched for, what identifier should be used by default",
            "nullable": true
          },
          "defaultScope": {
            "maxLength": 256,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9\\-_]+$",
            "type": "string",
            "description": "For default rules, which scope should data be searched for in"
          },
          "attemptToInferMissingFx": {
            "type": "boolean",
            "description": "if true will calculate a missing Fx pair (e.g. THBJPY) from the inverse JPYTHB or from standardised pairs against USD, e.g. THBUSD and JPYUSD"
          },
          "calendarScope": {
            "maxLength": 256,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9\\-_]+$",
            "type": "string",
            "description": "The scope in which holiday calendars stored",
            "nullable": true
          },
          "conventionScope": {
            "maxLength": 256,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9\\-_]+$",
            "type": "string",
            "description": "The scope in which holiday calendars stored",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The set of options that control miscellaneous and default market resolution behaviour.\r\nThese are aimed at a 'crude' level of control for those who do not wish to fine tune the way that data is resolved.\r\nFor clients who wish to simply match instruments to prices this is quite possibly sufficient. For those wishing to control market data sources\r\naccording to requirements based on accuracy or timeliness it is not. In more advanced cases the options should largely be ignored and rules specified\r\nper source. Be aware that where no specified rule matches the final fallback is on to the logic implied here."
      },
      "MetricValue": {
        "type": "object",
        "properties": {
          "value": {
            "type": "number",
            "description": "The numerical value of the property.",
            "format": "double"
          },
          "unit": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ModelOptions": {
        "required": [
          "modelOptionsType"
        ],
        "type": "object",
        "properties": {
          "modelOptionsType": {
            "enum": [
              "Invalid",
              "OpaqueModelOptions",
              "EmptyModelOptions",
              "IndexModelOptions",
              "FxForwardModelOptions",
              "FundingLegModelOptions"
            ],
            "type": "string",
            "description": "The available values are: Invalid, OpaqueModelOptions, EmptyModelOptions, IndexModelOptions, FxForwardModelOptions, FundingLegModelOptions"
          }
        },
        "additionalProperties": false,
        "discriminator": {
          "propertyName": "modelOptionsType"
        }
      },
      "ModelSelection": {
        "required": [
          "library",
          "model"
        ],
        "type": "object",
        "properties": {
          "library": {
            "enum": [
              "Lusid",
              "RefinitivQps",
              "RefinitivTracsWeb",
              "VolMaster",
              "IsdaCds",
              "YieldBook"
            ],
            "type": "string",
            "description": "The available values are: Lusid, RefinitivQps, RefinitivTracsWeb, VolMaster, IsdaCds, YieldBook"
          },
          "model": {
            "enum": [
              "SimpleStatic",
              "Discounting",
              "VendorDefault",
              "BlackScholes",
              "ConstantTimeValueOfMoney",
              "Bachelier",
              "ForwardWithPoints",
              "ForwardWithPointsUndiscounted",
              "ForwardSpecifiedRate",
              "ForwardSpecifiedRateUndiscounted",
              "IndexNav",
              "IndexPrice",
              "InlinedIndex",
              "ForwardFromCurve",
              "ForwardFromCurveUndiscounted",
              "BlackScholesDigital",
              "BjerksundStensland1993"
            ],
            "type": "string",
            "description": "The available values are: SimpleStatic, Discounting, VendorDefault, BlackScholes, ConstantTimeValueOfMoney, Bachelier, ForwardWithPoints, ForwardWithPointsUndiscounted, ForwardSpecifiedRate, ForwardSpecifiedRateUndiscounted, IndexNav, IndexPrice, InlinedIndex, ForwardFromCurve, ForwardFromCurveUndiscounted, BlackScholesDigital, BjerksundStensland1993"
          }
        },
        "additionalProperties": false,
        "description": "The combination of a library to use and a model in that library that defines which pricing code will evaluate instruments\r\nhaving a particular type/class. This allows us to control the model type and library for a given instrument."
      },
      "NextValueInSequenceResponse": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The next set of values for the specified Sequence."
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Order": {
        "required": [
          "id",
          "instrumentIdentifiers",
          "lusidInstrumentId",
          "portfolioId",
          "quantity",
          "side"
        ],
        "type": "object",
        "properties": {
          "properties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/PerpetualProperty"
            },
            "description": "Client-defined properties associated with this order.",
            "nullable": true
          },
          "version": {
            "$ref": "#/components/schemas/Version"
          },
          "instrumentIdentifiers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "The instrument ordered."
          },
          "quantity": {
            "type": "number",
            "description": "The quantity of given instrument ordered.",
            "format": "double"
          },
          "side": {
            "type": "string",
            "description": "The client's representation of the order's side (buy, sell, short, etc)"
          },
          "orderBookId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "portfolioId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "id": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "instrumentScope": {
            "type": "string",
            "description": "The scope in which the instrument lies",
            "nullable": true
          },
          "lusidInstrumentId": {
            "type": "string",
            "description": "The LUSID instrument id for the instrument ordered."
          },
          "state": {
            "type": "string",
            "description": "The order's state (examples: New, PartiallyFilled, ...)",
            "nullable": true
          },
          "type": {
            "type": "string",
            "description": "The order's type (examples: Limit, Market, ...)",
            "nullable": true
          },
          "timeInForce": {
            "type": "string",
            "description": "The order's time in force (examples: Day, GoodTilCancel, ...)",
            "nullable": true
          },
          "date": {
            "type": "string",
            "description": "The date on which the order was made",
            "format": "date-time"
          },
          "price": {
            "$ref": "#/components/schemas/CurrencyAndAmount"
          },
          "limitPrice": {
            "$ref": "#/components/schemas/CurrencyAndAmount"
          },
          "stopPrice": {
            "$ref": "#/components/schemas/CurrencyAndAmount"
          },
          "orderInstructionId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "packageId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "An Order for a certain quantity of a specific instrument"
      },
      "OrderBySpec": {
        "required": [
          "key",
          "sortOrder"
        ],
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "description": "The key that uniquely identifies a queryable address in Lusid."
          },
          "sortOrder": {
            "enum": [
              "Ascending",
              "Descending"
            ],
            "type": "string",
            "description": "The available values are: Ascending, Descending"
          }
        },
        "additionalProperties": false
      },
      "OrderRequest": {
        "required": [
          "id",
          "instrumentIdentifiers",
          "portfolioId",
          "quantity",
          "side"
        ],
        "type": "object",
        "properties": {
          "properties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/PerpetualProperty"
            },
            "description": "Client-defined properties associated with this order.",
            "nullable": true
          },
          "instrumentIdentifiers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "The instrument ordered."
          },
          "quantity": {
            "type": "number",
            "description": "The quantity of given instrument ordered.",
            "format": "double"
          },
          "side": {
            "type": "string",
            "description": "The client's representation of the order's side (buy, sell, short, etc)"
          },
          "orderBookId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "portfolioId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "id": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "state": {
            "type": "string",
            "description": "The order's state (examples: New, PartiallyFilled, ...)",
            "nullable": true
          },
          "type": {
            "type": "string",
            "description": "The order's type (examples: Limit, Market, ...)",
            "nullable": true
          },
          "timeInForce": {
            "type": "string",
            "description": "The order's time in force (examples: Day, GoodTilCancel, ...)",
            "nullable": true
          },
          "date": {
            "type": "string",
            "description": "The date on which the order was made",
            "format": "date-time"
          },
          "price": {
            "$ref": "#/components/schemas/CurrencyAndAmount"
          },
          "limitPrice": {
            "$ref": "#/components/schemas/CurrencyAndAmount"
          },
          "stopPrice": {
            "$ref": "#/components/schemas/CurrencyAndAmount"
          },
          "orderInstruction": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "package": {
            "$ref": "#/components/schemas/ResourceId"
          }
        },
        "additionalProperties": false,
        "description": "A request to create or update an Order."
      },
      "OrderSetRequest": {
        "type": "object",
        "properties": {
          "orderRequests": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderRequest"
            },
            "description": "A collection of OrderRequests.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A request to create or update multiple Orders."
      },
      "OtcConfirmation": {
        "type": "object",
        "properties": {
          "counterpartyAgreementId": {
            "$ref": "#/components/schemas/ResourceId"
          }
        },
        "additionalProperties": false,
        "description": "For the storage of any information pertinent to the confirmation of an OTC trade. e.g the Counterparty Agreement Code"
      },
      "OutputTransaction": {
        "required": [
          "instrumentUid",
          "settlementDate",
          "transactionDate",
          "transactionId",
          "type",
          "units"
        ],
        "type": "object",
        "properties": {
          "transactionId": {
            "type": "string",
            "description": "The unique identifier for the transaction."
          },
          "type": {
            "type": "string",
            "description": "The type of the transaction e.g. 'Buy', 'Sell'. The transaction type should have been pre-configured via the System Configuration API endpoint."
          },
          "description": {
            "type": "string",
            "description": "The description of the transaction. This only exists on transactions generated by LUSID e.g. a holdings adjustment transaction.",
            "nullable": true
          },
          "instrumentIdentifiers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "A set of instrument identifiers that can resolve the transaction to a unique instrument.",
            "nullable": true
          },
          "instrumentScope": {
            "type": "string",
            "description": "The scope in which the instrument lies.",
            "nullable": true
          },
          "instrumentUid": {
            "type": "string",
            "description": "The unqiue Lusid Instrument Id (LUID) of the instrument that the transaction is in."
          },
          "transactionDate": {
            "type": "string",
            "description": "The date of the transaction.",
            "format": "date-time"
          },
          "settlementDate": {
            "type": "string",
            "description": "The settlement date of the transaction.",
            "format": "date-time"
          },
          "units": {
            "type": "number",
            "description": "The number of units transacted in the associated instrument.",
            "format": "double"
          },
          "transactionAmount": {
            "type": "number",
            "description": "The total value of the transaction in the transaction currency.",
            "format": "double"
          },
          "transactionPrice": {
            "$ref": "#/components/schemas/TransactionPrice"
          },
          "totalConsideration": {
            "$ref": "#/components/schemas/CurrencyAndAmount"
          },
          "exchangeRate": {
            "type": "number",
            "description": "The exchange rate between the transaction and settlement currency (settlement currency being represented by the TotalConsideration.Currency). For example if the transaction currency is in USD and the settlement currency is in GBP this this the USD/GBP rate.",
            "format": "double"
          },
          "transactionToPortfolioRate": {
            "type": "number",
            "description": "The exchange rate between the transaction and portfolio currency. For example if the transaction currency is in USD and the portfolio currency is in GBP this this the USD/GBP rate.",
            "format": "double",
            "nullable": true
          },
          "transactionCurrency": {
            "type": "string",
            "description": "The transaction currency.",
            "nullable": true
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/PerpetualProperty"
            },
            "description": "Set of unique transaction properties and associated values to stored with the transaction. Each property will be from the 'Transaction' domain.",
            "nullable": true
          },
          "counterpartyId": {
            "type": "string",
            "description": "The identifier for the counterparty of the transaction.",
            "nullable": true
          },
          "source": {
            "type": "string",
            "description": "The source of the transaction. This is used to look up the appropriate transaction group set in the transaction type configuration.",
            "nullable": true
          },
          "transactionStatus": {
            "enum": [
              "Active",
              "Amended",
              "Cancelled"
            ],
            "type": "string",
            "description": "The status of the transaction. The available values are: Active, Amended, Cancelled"
          },
          "entryDateTime": {
            "type": "string",
            "description": "The asAt datetime that the transaction was added to LUSID.",
            "format": "date-time"
          },
          "cancelDateTime": {
            "type": "string",
            "description": "If the transaction has been cancelled, the asAt datetime that the transaction was cancelled.",
            "format": "date-time",
            "nullable": true
          },
          "realisedGainLoss": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RealisedGainLoss"
            },
            "description": "The collection of realised gains or losses resulting from relevant transactions e.g. a sale transaction. The cost used in calculating the realised gain or loss is determined by the accounting method defined when the transaction portfolio is created.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A list of output transactions."
      },
      "PagedResourceListOfAllocation": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "nextPage": {
            "type": "string",
            "description": "The next page of results.",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "description": "The previous page of results.",
            "nullable": true
          },
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Allocation"
            },
            "description": "The resources to list."
          },
          "href": {
            "type": "string",
            "description": "The URI of the resource list.",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A paginated list of resource that can be returned from a request."
      },
      "PagedResourceListOfCorporateActionSource": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "nextPage": {
            "type": "string",
            "description": "The next page of results.",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "description": "The previous page of results.",
            "nullable": true
          },
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CorporateActionSource"
            },
            "description": "The resources to list."
          },
          "href": {
            "type": "string",
            "description": "The URI of the resource list.",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A paginated list of resource that can be returned from a request."
      },
      "PagedResourceListOfCutLabelDefinition": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "nextPage": {
            "type": "string",
            "description": "The next page of results.",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "description": "The previous page of results.",
            "nullable": true
          },
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CutLabelDefinition"
            },
            "description": "The resources to list."
          },
          "href": {
            "type": "string",
            "description": "The URI of the resource list.",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A paginated list of resource that can be returned from a request."
      },
      "PagedResourceListOfInstrument": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "nextPage": {
            "type": "string",
            "description": "The next page of results.",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "description": "The previous page of results.",
            "nullable": true
          },
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Instrument"
            },
            "description": "The resources to list."
          },
          "href": {
            "type": "string",
            "description": "The URI of the resource list.",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A paginated list of resource that can be returned from a request."
      },
      "PagedResourceListOfLegalEntity": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "nextPage": {
            "type": "string",
            "description": "The next page of results.",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "description": "The previous page of results.",
            "nullable": true
          },
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LegalEntity"
            },
            "description": "The resources to list."
          },
          "href": {
            "type": "string",
            "description": "The URI of the resource list.",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A paginated list of resource that can be returned from a request."
      },
      "PagedResourceListOfOrder": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "nextPage": {
            "type": "string",
            "description": "The next page of results.",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "description": "The previous page of results.",
            "nullable": true
          },
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Order"
            },
            "description": "The resources to list."
          },
          "href": {
            "type": "string",
            "description": "The URI of the resource list.",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A paginated list of resource that can be returned from a request."
      },
      "PagedResourceListOfPortfolioGroupSearchResult": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "nextPage": {
            "type": "string",
            "description": "The next page of results.",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "description": "The previous page of results.",
            "nullable": true
          },
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PortfolioGroupSearchResult"
            },
            "description": "The resources to list."
          },
          "href": {
            "type": "string",
            "description": "The URI of the resource list.",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A paginated list of resource that can be returned from a request."
      },
      "PagedResourceListOfPortfolioSearchResult": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "nextPage": {
            "type": "string",
            "description": "The next page of results.",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "description": "The previous page of results.",
            "nullable": true
          },
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PortfolioSearchResult"
            },
            "description": "The resources to list."
          },
          "href": {
            "type": "string",
            "description": "The URI of the resource list.",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A paginated list of resource that can be returned from a request."
      },
      "PagedResourceListOfPropertyDefinitionSearchResult": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "nextPage": {
            "type": "string",
            "description": "The next page of results.",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "description": "The previous page of results.",
            "nullable": true
          },
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PropertyDefinitionSearchResult"
            },
            "description": "The resources to list."
          },
          "href": {
            "type": "string",
            "description": "The URI of the resource list.",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A paginated list of resource that can be returned from a request."
      },
      "PagedResourceListOfRelationshipDefinition": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "nextPage": {
            "type": "string",
            "description": "The next page of results.",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "description": "The previous page of results.",
            "nullable": true
          },
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RelationshipDefinition"
            },
            "description": "The resources to list."
          },
          "href": {
            "type": "string",
            "description": "The URI of the resource list.",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A paginated list of resource that can be returned from a request."
      },
      "PagedResourceListOfSequenceDefinition": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "nextPage": {
            "type": "string",
            "description": "The next page of results.",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "description": "The previous page of results.",
            "nullable": true
          },
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SequenceDefinition"
            },
            "description": "The resources to list."
          },
          "href": {
            "type": "string",
            "description": "The URI of the resource list.",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A paginated list of resource that can be returned from a request."
      },
      "PerformanceReturn": {
        "required": [
          "effectiveAt",
          "rateOfReturn"
        ],
        "type": "object",
        "properties": {
          "effectiveAt": {
            "type": "string",
            "description": "The effectiveAt for the return.",
            "format": "date-time"
          },
          "rateOfReturn": {
            "type": "number",
            "description": "The return number.",
            "format": "double"
          },
          "openingMarketValue": {
            "type": "number",
            "description": "The opening market value.",
            "format": "double",
            "nullable": true
          },
          "closingMarketValue": {
            "type": "number",
            "description": "The closing market value.",
            "format": "double",
            "nullable": true
          },
          "period": {
            "type": "string",
            "description": "Upsert the returns on a Daily or Monthly period. Defaults to Daily.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A list of Returns."
      },
      "PerformanceReturnsMetric": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "The type of the metric. Default to Return",
            "nullable": true
          },
          "window": {
            "type": "string",
            "description": "The given metric for the calculation i.e. 1Y, 1D.",
            "nullable": true
          },
          "allowPartial": {
            "type": "boolean",
            "description": "Bool if the metric is allowed partial results. Deafult to false."
          },
          "annualised": {
            "type": "boolean",
            "description": "Bool if the metric is annualized. Default to false."
          },
          "withFee": {
            "type": "boolean",
            "description": "Bool if the metric should consider the fees when is calculated. Default to false."
          },
          "seedAmount": {
            "type": "string",
            "description": "The given seed amount for the calculation of the indicative amount metrics.",
            "nullable": true
          },
          "alias": {
            "type": "string",
            "description": "The alias for the metric.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The request used in the AggregatedReturns."
      },
      "PerpetualProperty": {
        "required": [
          "key"
        ],
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "description": "The key of the property. This takes the format {domain}/{scope}/{code} e.g. 'Instrument/system/Name' or 'Transaction/strategy/quantsignal'."
          },
          "value": {
            "$ref": "#/components/schemas/PropertyValue"
          }
        },
        "additionalProperties": false
      },
      "Portfolio": {
        "required": [
          "created",
          "displayName",
          "id",
          "type"
        ],
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "description": "The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.",
            "format": "uri",
            "nullable": true
          },
          "id": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "type": {
            "enum": [
              "Transaction",
              "Reference",
              "DerivedTransaction"
            ],
            "type": "string",
            "description": "The type of the portfolio. The available values are: Transaction, Reference, DerivedTransaction"
          },
          "displayName": {
            "type": "string",
            "description": "The name of the portfolio."
          },
          "description": {
            "type": "string",
            "description": "The long form description of the portfolio.",
            "nullable": true
          },
          "created": {
            "type": "string",
            "description": "The effective datetime at which the portfolio was created. No transactions or constituents can be added to the portfolio before this date.",
            "format": "date-time"
          },
          "parentPortfolioId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "version": {
            "$ref": "#/components/schemas/Version"
          },
          "isDerived": {
            "type": "boolean",
            "description": "Whether or not this is a derived portfolio."
          },
          "baseCurrency": {
            "type": "string",
            "description": "The base currency of the portfolio.",
            "nullable": true
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Property"
            },
            "description": "The requested portfolio properties. These will be from the 'Portfolio' domain.",
            "nullable": true
          },
          "instrumentScopes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The instrument scope resolution strategy of this portfolio.",
            "nullable": true
          },
          "accountingMethod": {
            "enum": [
              "Default",
              "AverageCost",
              "FirstInFirstOut",
              "LastInFirstOut",
              "HighestCostFirst",
              "LowestCostFirst"
            ],
            "type": "string",
            "description": ". The available values are: Default, AverageCost, FirstInFirstOut, LastInFirstOut, HighestCostFirst, LowestCostFirst"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A list of portfolios."
      },
      "PortfolioCashFlow": {
        "required": [
          "balance",
          "balanceReportingCurrency",
          "cashflow",
          "cashflowReportingCurrency",
          "costBasisReportingCurrency",
          "fxRate",
          "groupById",
          "movementName",
          "sequenceNumber",
          "translationGainLoss",
          "type",
          "unrealisedGainLossReportingCurrency"
        ],
        "type": "object",
        "properties": {
          "groupById": {
            "type": "integer",
            "description": "The groupBy subHoldings and currency.",
            "format": "int32"
          },
          "sequenceNumber": {
            "type": "integer",
            "description": "Sequence number determining the order of the cash flow records.",
            "format": "int32"
          },
          "effectiveDate": {
            "type": "string",
            "description": "Indicates the date when the cash-flow settles.",
            "format": "date-time"
          },
          "subHoldingKeys": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/PerpetualProperty"
            },
            "description": "The sub-holding properties which identify the holding. Each property will be from the 'Transaction' domain. These are configured on a transaction portfolio.",
            "nullable": true
          },
          "type": {
            "type": "string",
            "description": "Indicates the record type (Closed, Open, Activity)."
          },
          "movementName": {
            "type": "string",
            "description": "Indicates the specific movement of the transaction that generated this cash flow."
          },
          "cashflow": {
            "$ref": "#/components/schemas/CurrencyAndAmount"
          },
          "balance": {
            "$ref": "#/components/schemas/CurrencyAndAmount"
          },
          "fxRate": {
            "type": "number",
            "description": "Exchange rate between the currency of this cash flow and the reporting currency.",
            "format": "double"
          },
          "cashflowReportingCurrency": {
            "$ref": "#/components/schemas/CurrencyAndAmount"
          },
          "balanceReportingCurrency": {
            "$ref": "#/components/schemas/CurrencyAndAmount"
          },
          "translationGainLoss": {
            "$ref": "#/components/schemas/CurrencyAndAmount"
          },
          "costBasisReportingCurrency": {
            "$ref": "#/components/schemas/CurrencyAndAmount"
          },
          "transaction": {
            "$ref": "#/components/schemas/Transaction"
          },
          "unrealisedGainLossReportingCurrency": {
            "$ref": "#/components/schemas/CurrencyAndAmount"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The details for the cashflow for a given portfolio."
      },
      "PortfolioCashLadder": {
        "required": [
          "currency",
          "records"
        ],
        "type": "object",
        "properties": {
          "currency": {
            "type": "string",
            "description": "The currency of the cash-flows."
          },
          "subHoldingKeys": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/PerpetualProperty"
            },
            "description": "The sub-holding properties which identify the holding. Each property will be from the 'Transaction' domain. These are configured on a transaction portfolio.",
            "nullable": true
          },
          "records": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CashLadderRecord"
            },
            "description": "A record of cash flows on a specific date."
          },
          "failed": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ErrorDetail"
            },
            "description": "The records that could not be returned along with a reason for their failure.",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PortfolioDetails": {
        "required": [
          "baseCurrency",
          "originPortfolioId",
          "version"
        ],
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "description": "The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.",
            "format": "uri",
            "nullable": true
          },
          "originPortfolioId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "version": {
            "$ref": "#/components/schemas/Version"
          },
          "baseCurrency": {
            "type": "string",
            "description": "The base currency of the transaction portfolio."
          },
          "corporateActionSourceId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "subHoldingKeys": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
            },
            "nullable": true
          },
          "instrumentScopes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The resolution strategy used to resolve instruments of transactions/holdings upserted to the transaction portfolio.",
            "nullable": true
          },
          "accountingMethod": {
            "enum": [
              "Default",
              "AverageCost",
              "FirstInFirstOut",
              "LastInFirstOut",
              "HighestCostFirst",
              "LowestCostFirst"
            ],
            "type": "string",
            "description": ". The available values are: Default, AverageCost, FirstInFirstOut, LastInFirstOut, HighestCostFirst, LowestCostFirst"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PortfolioEntityId": {
        "type": "object",
        "properties": {
          "scope": {
            "maxLength": 256,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9\\-_]+$",
            "type": "string",
            "description": "The scope within which the portfolio or portfolio group lives.",
            "nullable": true
          },
          "code": {
            "maxLength": 256,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9\\-_]+$",
            "type": "string",
            "description": "Portfolio name or code.",
            "nullable": true
          },
          "portfolioEntityType": {
            "maxLength": 128,
            "minLength": 0,
            "type": "string",
            "description": "String identifier for portfolio e.g. \"SinglePortfolio\" and \"GroupPortfolio\". If not specified, it is assumed to be a single portfolio.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Specification of a portfolio or portfolio group id, its scope and which it is."
      },
      "PortfolioGroup": {
        "required": [
          "displayName",
          "id"
        ],
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "description": "The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.",
            "format": "uri",
            "nullable": true
          },
          "id": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "displayName": {
            "type": "string",
            "description": "The name of the portfolio group."
          },
          "description": {
            "type": "string",
            "description": "The long form description of the portfolio group.",
            "nullable": true
          },
          "created": {
            "type": "string",
            "description": "The effective datetime at which the portfolio group was created. No portfolios or sub groups can be added to the group before this date.",
            "format": "date-time"
          },
          "portfolios": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResourceId"
            },
            "description": "The collection of resource identifiers for the portfolios contained in the portfolio group.",
            "nullable": true
          },
          "subGroups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResourceId"
            },
            "description": "The collection of resource identifiers for the portfolio groups contained in the portfolio group as sub groups.",
            "nullable": true
          },
          "version": {
            "$ref": "#/components/schemas/Version"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PortfolioGroupProperties": {
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "description": "The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.",
            "format": "uri",
            "nullable": true
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Property"
            },
            "description": "The portfolio group properties. These will be from the 'PortfolioGroup' domain.",
            "nullable": true
          },
          "version": {
            "$ref": "#/components/schemas/Version"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PortfolioGroupSearchResult": {
        "required": [
          "displayName",
          "id"
        ],
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "description": "The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.",
            "format": "uri",
            "nullable": true
          },
          "id": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "displayName": {
            "type": "string",
            "description": "The name of the portfolio group."
          },
          "description": {
            "type": "string",
            "description": "The long form description of the portfolio group.",
            "nullable": true
          },
          "created": {
            "type": "string",
            "description": "The effective datetime at which the portfolio group was created. No portfolios or sub groups can be added to the group before this date.",
            "format": "date-time"
          },
          "portfolios": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResourceId"
            },
            "description": "The collection of resource identifiers for the portfolios contained in the portfolio group.",
            "nullable": true
          },
          "subGroups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResourceId"
            },
            "description": "The collection of resource identifiers for the portfolio groups contained in the portfolio group as sub groups.",
            "nullable": true
          },
          "version": {
            "$ref": "#/components/schemas/Version"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PortfolioHolding": {
        "required": [
          "cost",
          "costPortfolioCcy",
          "holdingType",
          "instrumentUid",
          "settledUnits",
          "units"
        ],
        "type": "object",
        "properties": {
          "instrumentScope": {
            "type": "string",
            "description": "The scope in which the holding's instrument is in.",
            "nullable": true
          },
          "instrumentUid": {
            "type": "string",
            "description": "The unique Lusid Instrument Id (LUID) of the instrument that the holding is in."
          },
          "subHoldingKeys": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/PerpetualProperty"
            },
            "description": "The sub-holding properties which identify the holding. Each property will be from the 'Transaction' domain. These are configured on a transaction portfolio.",
            "nullable": true
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Property"
            },
            "description": "The properties which have been requested to be decorated onto the holding. These will be from the 'Instrument' or 'Holding' domain.",
            "nullable": true
          },
          "holdingType": {
            "type": "string",
            "description": "The code for the type of the holding e.g. P, B, C, R, F etc."
          },
          "units": {
            "type": "number",
            "description": "The total number of units of the holding.",
            "format": "double"
          },
          "settledUnits": {
            "type": "number",
            "description": "The total number of settled units of the holding.",
            "format": "double"
          },
          "cost": {
            "$ref": "#/components/schemas/CurrencyAndAmount"
          },
          "costPortfolioCcy": {
            "$ref": "#/components/schemas/CurrencyAndAmount"
          },
          "transaction": {
            "$ref": "#/components/schemas/Transaction"
          },
          "currency": {
            "type": "string",
            "description": "The holding currency.",
            "nullable": true
          },
          "holdingTypeName": {
            "type": "string",
            "description": "The decoded type of the holding e.g. Position, Balance, CashCommitment, Receivable, ForwardFX etc.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A list of holdings."
      },
      "PortfolioProperties": {
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "description": "The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.",
            "format": "uri",
            "nullable": true
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Property"
            },
            "description": "The portfolio properties. These will be from the 'Portfolio' domain.",
            "nullable": true
          },
          "version": {
            "$ref": "#/components/schemas/Version"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PortfolioReconciliationRequest": {
        "required": [
          "effectiveAt",
          "portfolioId"
        ],
        "type": "object",
        "properties": {
          "portfolioId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "effectiveAt": {
            "type": "string",
            "description": "The effective date of the portfolio",
            "format": "dateorcutlabel"
          },
          "asAt": {
            "type": "string",
            "description": "Optional. The AsAt date of the portfolio",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PortfolioSearchResult": {
        "required": [
          "created",
          "displayName",
          "id",
          "type"
        ],
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "type": {
            "enum": [
              "Transaction",
              "Reference",
              "DerivedTransaction"
            ],
            "type": "string",
            "description": "The type of the portfolio. The available values are: Transaction, Reference, DerivedTransaction"
          },
          "href": {
            "type": "string",
            "description": "The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.",
            "format": "uri",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "The long form description of the portfolio.",
            "nullable": true
          },
          "displayName": {
            "type": "string",
            "description": "The name of the portfolio."
          },
          "isDerived": {
            "type": "boolean",
            "description": "Whether or not this is a derived portfolio.",
            "readOnly": true
          },
          "created": {
            "type": "string",
            "description": "The effective datetime at which the portfolio was created. No transactions or constituents can be added to the portfolio before this date.",
            "format": "date-time"
          },
          "parentPortfolioId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "baseCurrency": {
            "type": "string",
            "description": "The base currency of the portfolio.",
            "nullable": true
          },
          "properties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Property"
            },
            "description": "The requested portfolio properties. These will be from the 'Portfolio' domain.",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A list of portfolios."
      },
      "PortfoliosReconciliationRequest": {
        "required": [
          "instrumentPropertyKeys",
          "left",
          "right"
        ],
        "type": "object",
        "properties": {
          "left": {
            "$ref": "#/components/schemas/PortfolioReconciliationRequest"
          },
          "right": {
            "$ref": "#/components/schemas/PortfolioReconciliationRequest"
          },
          "instrumentPropertyKeys": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}."
            },
            "description": "Instrument properties to be included with any identified breaks. These properties will be in the effective and AsAt dates of the left portfolio"
          }
        },
        "additionalProperties": false
      },
      "PricingContext": {
        "type": "object",
        "properties": {
          "modelRules": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VendorModelRule"
            },
            "description": "The set of model rules that are available. There may be multiple rules for Vendors, but only one per model-instrument pair.\r\nWhich of these preference sets is used depends upon the model choice selection if specified, or failing that the global default model specification\r\nin the options.",
            "nullable": true
          },
          "modelChoice": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ModelSelection"
            },
            "description": "The choice of which model selection (vendor library, pricing model) to use in evaluation of a given instrument type.",
            "nullable": true
          },
          "options": {
            "$ref": "#/components/schemas/PricingOptions"
          },
          "resultDataRules": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResultKeyRule"
            },
            "description": "Set of rules that control querying of unit results either for direct queries into aggregation or for\r\noverriding intermediate calculations. For example, a dirty price is made up from a clean price and the accrued interest.\r\nOne might consider overriding the accrued interest calculated by a model (perhaps one wants to match an external value or simply disagrees with the\r\ncalculated result) and use that in calculation of the dirty price.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Pricing context node. In order to price an instrument a number of configuration parameters are required to determine which\r\n(a) pricing model (ranging from a simple lookup of a market quote/price through to a Monte-Carlo simulation for the behaviour of its cashflows)\r\n(b) vendor library (Lusid internal models or those provided through an external Vendor such as Refinitiv (proprietary) or QuantLib (open source)\r\nare used in the pricing.\r\n\r\nIn conjunction with these there are a number of parameters that govern the behaviour of these models. For example, in pricing an Fx volatility\r\ndependent product such as an Fx option, there are various parameters that affect model behaviour for the smile. In Lusid a distinction is made between\r\nthose which are understood natively and those which are only held for use with a given vendor-model combination. The problem is that, unlike market\r\nquote data, there are few standards around model descriptions. Hence, apparently similar terminology can be mis-leading; for example in SABR models where\r\nthe basic parameters are agreed upon but most practical models have used an approximation with adjustments where the parameters can have wildly different meanings.\r\nTo avoid confusion or mis-behaviour in this area, where parameters are not understood to be interchangeable, they are only settable on a per-library per-model\r\nbasis, essentially as opaque data that will be given to the Vendor library \"verbatim\" but not used with any other."
      },
      "PricingOptions": {
        "type": "object",
        "properties": {
          "modelSelection": {
            "$ref": "#/components/schemas/ModelSelection"
          },
          "useInstrumentTypeToDeterminePricer": {
            "type": "boolean",
            "description": "If true then use the instrument type to set the default instrument pricer\r\nThis applies where no more specific set of overrides are provided on a per-vendor and instrument basis."
          },
          "allowAnyInstrumentsWithSecUidToPriceOffLookup": {
            "type": "boolean",
            "description": "By default, one would not expect to price and exotic instrument, i.e. an instrument with a complicated\r\ninstrument definition simply through looking up a price as there should be a better way of evaluating it.\r\nTo override that behaviour and allow lookup for a price from the instrument identifier(s), set this to true."
          },
          "allowPartiallySuccessfulEvaluation": {
            "type": "boolean",
            "description": "If true then a failure in task evaluation doesn't cause overall failure.\r\nresults will be returned where they succeeded and annotation elsewhere"
          },
          "produceSeparateResultForLinearOtcLegs": {
            "type": "boolean",
            "description": "If true (default), when pricing an Fx-Forward or Interest Rate Swap, Future and other linearly separable products, product two results, one for each leg\r\nrather than a single line result with the amalgamated/summed pv from both legs."
          },
          "enableUseOfCachedUnitResults": {
            "type": "boolean",
            "description": "If true, when pricing using a model or for an instrument that supports use of intermediate cached-results, use them.\r\nDefault is that this caching is turned off."
          },
          "windowValuationOnInstrumentStartEnd": {
            "type": "boolean",
            "description": "If true, when valuing an instrument outside the period where it is 'alive' (the start-maturity window) it will return a valuation of zero"
          },
          "removeContingentCashflowsInPaymentDiary": {
            "type": "boolean",
            "description": "When creating a payment diary, should contingent cash payments (e.g. from exercise of a swaption into a swap) be included or not.\r\ni.e. Is exercise or default being assumed to happen or not."
          },
          "useChildSubHoldingKeysForPortfolioExpansion": {
            "type": "boolean",
            "description": "Should fund constituents inherit subholding keys from the parent subholding keyb"
          },
          "validateDomesticAndQuoteCurrenciesAreConsistent": {
            "type": "boolean",
            "description": "Do we validate that the instrument domestic currency matches the quote currency (unless unknown/zzz) when using lookup pricing."
          }
        },
        "additionalProperties": false,
        "description": "Options for controlling the default aspects and behaviour of the pricing engine."
      },
      "ProcessedCommand": {
        "required": [
          "description",
          "processedTime",
          "userId"
        ],
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "The description of the command issued."
          },
          "path": {
            "type": "string",
            "description": "The unique identifier for the command including the request id.",
            "nullable": true
          },
          "userId": {
            "$ref": "#/components/schemas/User"
          },
          "processedTime": {
            "type": "string",
            "description": "The asAt datetime that the events published by the processing of this command were committed to LUSID.",
            "format": "date-time"
          }
        },
        "additionalProperties": false,
        "description": "The list of commands."
      },
      "Property": {
        "required": [
          "key"
        ],
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "description": "The key of the property. This takes the format {domain}/{scope}/{code} e.g. 'Instrument/system/Name' or 'Transaction/strategy/quantsignal'."
          },
          "value": {
            "$ref": "#/components/schemas/PropertyValue"
          },
          "effectiveFrom": {
            "type": "string",
            "description": "The effective datetime from which the property is valid.",
            "format": "date-time",
            "nullable": true
          },
          "effectiveUntil": {
            "type": "string",
            "description": "The effective datetime until which the property is valid. If not supplied this will be valid indefinitely, or until the next 'effectiveFrom' datetime of the property.",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PropertyDefinition": {
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "description": "The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.",
            "format": "uri",
            "nullable": true
          },
          "key": {
            "type": "string",
            "description": "The property key which uniquely identifies the property. The format for the property key is {domain}/{scope}/{code}, e.g. 'Portfolio/Manager/Id'.",
            "nullable": true
          },
          "valueType": {
            "enum": [
              "String",
              "Int",
              "Decimal",
              "DateTime",
              "Boolean",
              "Map",
              "List",
              "PropertyArray",
              "Percentage",
              "Code",
              "Id",
              "Uri",
              "CurrencyAndAmount",
              "TradePrice",
              "Currency",
              "MetricValue",
              "ResourceId",
              "ResultValue",
              "CutLocalTime",
              "DateOrCutLabel"
            ],
            "type": "string",
            "description": "The type of values that can be associated with this property. This is defined by the property's data type. The available values are: String, Int, Decimal, DateTime, Boolean, Map, List, PropertyArray, Percentage, Code, Id, Uri, CurrencyAndAmount, TradePrice, Currency, MetricValue, ResourceId, ResultValue, CutLocalTime, DateOrCutLabel"
          },
          "displayName": {
            "type": "string",
            "description": "The display name of the property.",
            "nullable": true
          },
          "dataTypeId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "type": {
            "enum": [
              "Label",
              "Metric",
              "Information"
            ],
            "type": "string",
            "description": "The type of the property. The available values are: Label, Metric, Information"
          },
          "unitSchema": {
            "enum": [
              "NoUnits",
              "Basic",
              "Iso4217Currency"
            ],
            "type": "string",
            "description": "The units that can be associated with the property's values. This is defined by the property's data type. The available values are: NoUnits, Basic, Iso4217Currency"
          },
          "domain": {
            "enum": [
              "NotDefined",
              "Transaction",
              "Portfolio",
              "Holding",
              "ReferenceHolding",
              "TransactionConfiguration",
              "Instrument",
              "CutLabelDefinition",
              "Analytic",
              "PortfolioGroup",
              "Person",
              "AccessMetadata",
              "Order",
              "UnitResult",
              "MarketData",
              "ConfigurationRecipe",
              "Allocation",
              "Calendar",
              "LegalEntity",
              "Placement",
              "Execution",
              "Block",
              "Participation",
              "Package",
              "OrderInstruction",
              "NextBestAction",
              "CustomEntity",
              "InstrumentEvent"
            ],
            "type": "string",
            "description": "The domain that the property exists in. The available values are: NotDefined, Transaction, Portfolio, Holding, ReferenceHolding, TransactionConfiguration, Instrument, CutLabelDefinition, Analytic, PortfolioGroup, Person, AccessMetadata, Order, UnitResult, MarketData, ConfigurationRecipe, Allocation, Calendar, LegalEntity, Placement, Execution, Block, Participation, Package, OrderInstruction, NextBestAction, CustomEntity, InstrumentEvent"
          },
          "scope": {
            "type": "string",
            "description": "The scope that the property exists in.",
            "nullable": true,
            "readOnly": true
          },
          "code": {
            "type": "string",
            "description": "The code of the property. Together with the domain and scope this uniquely identifies the property.",
            "nullable": true,
            "readOnly": true
          },
          "valueRequired": {
            "type": "boolean",
            "description": "This field is not implemented and should be disregarded."
          },
          "lifeTime": {
            "enum": [
              "Perpetual",
              "TimeVariant"
            ],
            "type": "string",
            "description": "Describes how the property's values can change over time. The available values are: Perpetual, TimeVariant"
          },
          "constraintStyle": {
            "type": "string",
            "description": "Describes the uniqueness and cardinality of the property for entity objects under the property domain specified in Key.",
            "nullable": true
          },
          "propertyDefinitionType": {
            "enum": [
              "ValueProperty",
              "DerivedDefinition"
            ],
            "type": "string",
            "description": "The definition type (DerivedDefinition or Definition). The available values are: ValueProperty, DerivedDefinition"
          },
          "propertyDescription": {
            "type": "string",
            "description": "A brief description of what a property of this property definition contains.",
            "nullable": true
          },
          "derivationFormula": {
            "type": "string",
            "description": "The rule that defines how data is composed for a derived property.",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A list of property definitions."
      },
      "PropertyDefinitionSearchResult": {
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "description": "The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.",
            "format": "uri",
            "nullable": true
          },
          "key": {
            "type": "string",
            "description": "The property key which uniquely identifies the property. The format for the property key is {domain}/{scope}/{code}, e.g. 'Portfolio/Manager/Id'.",
            "nullable": true
          },
          "valueType": {
            "enum": [
              "String",
              "Int",
              "Decimal",
              "DateTime",
              "Boolean",
              "Map",
              "List",
              "PropertyArray",
              "Percentage",
              "Code",
              "Id",
              "Uri",
              "CurrencyAndAmount",
              "TradePrice",
              "Currency",
              "MetricValue",
              "ResourceId",
              "ResultValue",
              "CutLocalTime",
              "DateOrCutLabel"
            ],
            "type": "string",
            "description": "The type of values that can be associated with this property. This is defined by the property's data type. The available values are: String, Int, Decimal, DateTime, Boolean, Map, List, PropertyArray, Percentage, Code, Id, Uri, CurrencyAndAmount, TradePrice, Currency, MetricValue, ResourceId, ResultValue, CutLocalTime, DateOrCutLabel"
          },
          "displayName": {
            "type": "string",
            "description": "The display name of the property.",
            "nullable": true
          },
          "dataTypeId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "type": {
            "enum": [
              "Label",
              "Metric",
              "Information"
            ],
            "type": "string",
            "description": "The type of the property. The available values are: Label, Metric, Information"
          },
          "unitSchema": {
            "enum": [
              "NoUnits",
              "Basic",
              "Iso4217Currency"
            ],
            "type": "string",
            "description": "The units that can be associated with the property's values. This is defined by the property's data type. The available values are: NoUnits, Basic, Iso4217Currency"
          },
          "domain": {
            "enum": [
              "NotDefined",
              "Transaction",
              "Portfolio",
              "Holding",
              "ReferenceHolding",
              "TransactionConfiguration",
              "Instrument",
              "CutLabelDefinition",
              "Analytic",
              "PortfolioGroup",
              "Person",
              "AccessMetadata",
              "Order",
              "UnitResult",
              "MarketData",
              "ConfigurationRecipe",
              "Allocation",
              "Calendar",
              "LegalEntity",
              "Placement",
              "Execution",
              "Block",
              "Participation",
              "Package",
              "OrderInstruction",
              "NextBestAction",
              "CustomEntity",
              "InstrumentEvent"
            ],
            "type": "string",
            "description": "The domain that the property exists in. The available values are: NotDefined, Transaction, Portfolio, Holding, ReferenceHolding, TransactionConfiguration, Instrument, CutLabelDefinition, Analytic, PortfolioGroup, Person, AccessMetadata, Order, UnitResult, MarketData, ConfigurationRecipe, Allocation, Calendar, LegalEntity, Placement, Execution, Block, Participation, Package, OrderInstruction, NextBestAction, CustomEntity, InstrumentEvent"
          },
          "scope": {
            "type": "string",
            "description": "The scope that the property exists in.",
            "nullable": true,
            "readOnly": true
          },
          "code": {
            "type": "string",
            "description": "The code of the property. Together with the domain and scope this uniquely identifies the property.",
            "nullable": true,
            "readOnly": true
          },
          "valueRequired": {
            "type": "boolean",
            "description": "This field is not implemented and should be disregarded."
          },
          "lifeTime": {
            "enum": [
              "Perpetual",
              "TimeVariant"
            ],
            "type": "string",
            "description": "Describes how the property's values can change over time. The available values are: Perpetual, TimeVariant"
          },
          "constraintStyle": {
            "type": "string",
            "description": "Describes the uniqueness and cardinality of the property for entity objects under the property domain specified in Key.",
            "nullable": true
          },
          "propertyDefinitionType": {
            "enum": [
              "ValueProperty",
              "DerivedDefinition"
            ],
            "type": "string",
            "description": "The definition type (DerivedDefinition or Definition). The available values are: ValueProperty, DerivedDefinition"
          },
          "propertyDescription": {
            "type": "string",
            "description": "A brief description of what a property of this property definition contains.",
            "nullable": true
          },
          "derivationFormula": {
            "type": "string",
            "description": "The rule that defines how data is composed for a derived property.",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A property definition search result"
      },
      "PropertyFilter": {
        "type": "object",
        "properties": {
          "left": {
            "type": "string",
            "description": "The key that uniquely identifies a queryable address in Lusid.",
            "nullable": true
          },
          "operator": {
            "enum": [
              "Equals",
              "NotEquals",
              "GreaterThan",
              "GreaterThanOrEqualTo",
              "LessThan",
              "LessThanOrEqualTo",
              "In"
            ],
            "type": "string",
            "description": "The available values are: Equals, NotEquals, GreaterThan, GreaterThanOrEqualTo, LessThan, LessThanOrEqualTo, In"
          },
          "right": {
            "type": "object",
            "additionalProperties": false,
            "nullable": true
          },
          "rightOperandType": {
            "enum": [
              "Absolute",
              "Property"
            ],
            "type": "string",
            "description": "The available values are: Absolute, Property"
          }
        },
        "additionalProperties": false
      },
      "PropertyInterval": {
        "required": [
          "asAtRange",
          "effectiveRange",
          "status",
          "value"
        ],
        "type": "object",
        "properties": {
          "value": {
            "$ref": "#/components/schemas/PropertyValue"
          },
          "effectiveRange": {
            "$ref": "#/components/schemas/DateRange"
          },
          "asAtRange": {
            "$ref": "#/components/schemas/DateRange"
          },
          "status": {
            "type": "string",
            "description": "Indicates whether the value is part of the prevailing effective date timeline for the requested asAt date, or whether it has been superseded by correctional activity"
          }
        },
        "additionalProperties": false
      },
      "PropertyValue": {
        "type": "object",
        "properties": {
          "labelValue": {
            "type": "string",
            "description": "The text value of a property defined as having the 'Label' type.",
            "nullable": true
          },
          "metricValue": {
            "$ref": "#/components/schemas/MetricValue"
          },
          "labelValueSet": {
            "$ref": "#/components/schemas/LabelValueSet"
          }
        },
        "additionalProperties": false,
        "description": "The value of the property."
      },
      "Quote": {
        "required": [
          "asAt",
          "quoteId",
          "uploadedBy"
        ],
        "type": "object",
        "properties": {
          "quoteId": {
            "$ref": "#/components/schemas/QuoteId"
          },
          "metricValue": {
            "$ref": "#/components/schemas/MetricValue"
          },
          "lineage": {
            "type": "string",
            "description": "Description of the quote's lineage e.g. 'FundAccountant_GreenQuality'.",
            "nullable": true
          },
          "cutLabel": {
            "type": "string",
            "description": "The cut label that this quote was updated or inserted with.",
            "nullable": true
          },
          "uploadedBy": {
            "type": "string",
            "description": "The unique id of the user that updated or inserted the quote."
          },
          "asAt": {
            "type": "string",
            "description": "The asAt datetime at which the quote was committed to LUSID.",
            "format": "date-time"
          },
          "scaleFactor": {
            "type": "number",
            "description": "An optional scale factor for non-standard scaling of quotes against the instrument. For example, if you wish the quote's Value to be scaled down by a factor of 100, enter 100. If not supplied, the default ScaleFactor is 1.",
            "format": "double",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The quote id, value and lineage of the quotes all keyed by a unique correlation id."
      },
      "QuoteId": {
        "required": [
          "effectiveAt",
          "quoteSeriesId"
        ],
        "type": "object",
        "properties": {
          "quoteSeriesId": {
            "$ref": "#/components/schemas/QuoteSeriesId"
          },
          "effectiveAt": {
            "type": "string",
            "description": "The effective datetime or cut label at which the quote is valid from.",
            "format": "dateorcutlabel"
          }
        },
        "additionalProperties": false,
        "description": "The unique identifier of the quote."
      },
      "QuoteSeriesId": {
        "required": [
          "field",
          "instrumentId",
          "instrumentIdType",
          "provider",
          "quoteType"
        ],
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "description": "The platform or vendor that provided the quote, e.g. 'DataScope', 'LUSID' etc."
          },
          "priceSource": {
            "type": "string",
            "description": "The source or originator of the quote, e.g. a bank or financial institution.",
            "nullable": true
          },
          "instrumentId": {
            "type": "string",
            "description": "The value of the instrument identifier that uniquely identifies the instrument that the quote is for, e.g. 'BBG00JX0P539'."
          },
          "instrumentIdType": {
            "enum": [
              "LusidInstrumentId",
              "Figi",
              "RIC",
              "QuotePermId",
              "Isin",
              "CurrencyPair",
              "ClientInternal"
            ],
            "type": "string",
            "description": "The type of instrument identifier used to uniquely identify the instrument that the quote is for, e.g. 'Figi'. The available values are: LusidInstrumentId, Figi, RIC, QuotePermId, Isin, CurrencyPair, ClientInternal",
            "nullable": true
          },
          "quoteType": {
            "enum": [
              "Price",
              "Spread",
              "Rate",
              "LogNormalVol",
              "NormalVol",
              "ParSpread",
              "IsdaSpread",
              "Upfront",
              "Index",
              "Ratio",
              "Delta"
            ],
            "type": "string",
            "description": "The type of the quote. This allows for quotes other than prices e.g. rates or spreads to be used. The available values are: Price, Spread, Rate, LogNormalVol, NormalVol, ParSpread, IsdaSpread, Upfront, Index, Ratio, Delta",
            "nullable": true
          },
          "field": {
            "type": "string",
            "description": "The field of the quote e.g. bid, mid, ask etc. This should be consistent across a time series of quotes. The allowed values are dependant on the specified Provider."
          }
        },
        "additionalProperties": false,
        "description": "The time invariant unique identifier of the quote. Combined with the effective datetime of the quote this\r\nuniquely identifies the quote. This can be thought of as a unique identifier for a time series of quotes."
      },
      "RealisedGainLoss": {
        "required": [
          "costPortfolioCcy",
          "costTradeCcy",
          "instrumentUid",
          "realisedTotal",
          "realisedTradeCcy",
          "units"
        ],
        "type": "object",
        "properties": {
          "instrumentScope": {
            "type": "string",
            "description": "The scope in which the instrument lies.",
            "nullable": true
          },
          "instrumentUid": {
            "type": "string",
            "description": "The unqiue Lusid Instrument Id (LUID) of the instrument that this gain or loss is associated with."
          },
          "units": {
            "type": "number",
            "description": "The number of units of the associated instrument against which the gain or loss has been realised.",
            "format": "double"
          },
          "purchaseTradeDate": {
            "type": "string",
            "description": "The effective datetime that the units associated with this gain or loss where originally purchased.",
            "format": "date-time",
            "nullable": true,
            "readOnly": true
          },
          "purchaseSettlementDate": {
            "type": "string",
            "description": "The effective datetime that the units associated with this gain or loss where originally settled.",
            "format": "date-time",
            "nullable": true,
            "readOnly": true
          },
          "purchasePrice": {
            "type": "number",
            "description": "The purchase price of each unit associated with this gain or loss.",
            "format": "double",
            "nullable": true
          },
          "costTradeCcy": {
            "$ref": "#/components/schemas/CurrencyAndAmount"
          },
          "costPortfolioCcy": {
            "$ref": "#/components/schemas/CurrencyAndAmount"
          },
          "realisedTradeCcy": {
            "$ref": "#/components/schemas/CurrencyAndAmount"
          },
          "realisedTotal": {
            "$ref": "#/components/schemas/CurrencyAndAmount"
          },
          "realisedMarket": {
            "$ref": "#/components/schemas/CurrencyAndAmount"
          },
          "realisedCurrency": {
            "$ref": "#/components/schemas/CurrencyAndAmount"
          }
        },
        "additionalProperties": false
      },
      "ReconciliationBreak": {
        "required": [
          "differenceCost",
          "differenceUnits",
          "instrumentProperties",
          "instrumentUid",
          "leftCost",
          "leftUnits",
          "rightCost",
          "rightUnits",
          "subHoldingKeys"
        ],
        "type": "object",
        "properties": {
          "instrumentScope": {
            "type": "string",
            "description": "The scope in which the instrument lies.",
            "nullable": true
          },
          "instrumentUid": {
            "type": "string",
            "description": "Unique instrument identifier"
          },
          "subHoldingKeys": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/PerpetualProperty"
            },
            "description": "Any other properties that comprise the Sub-Holding Key"
          },
          "leftUnits": {
            "type": "number",
            "description": "Units from the left hand side",
            "format": "double"
          },
          "rightUnits": {
            "type": "number",
            "description": "Units from the right hand side",
            "format": "double"
          },
          "differenceUnits": {
            "type": "number",
            "description": "Difference in units",
            "format": "double"
          },
          "leftCost": {
            "$ref": "#/components/schemas/CurrencyAndAmount"
          },
          "rightCost": {
            "$ref": "#/components/schemas/CurrencyAndAmount"
          },
          "differenceCost": {
            "$ref": "#/components/schemas/CurrencyAndAmount"
          },
          "instrumentProperties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Property"
            },
            "description": "Additional features relating to the instrument"
          }
        },
        "additionalProperties": false,
        "description": "A reconciliation break"
      },
      "ReferenceData": {
        "required": [
          "fieldDefinitions",
          "values"
        ],
        "type": "object",
        "properties": {
          "fieldDefinitions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FieldDefinition"
            }
          },
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FieldValue"
            }
          }
        },
        "additionalProperties": false
      },
      "ReferencePortfolioConstituent": {
        "required": [
          "currency",
          "instrumentUid",
          "weight"
        ],
        "type": "object",
        "properties": {
          "instrumentIdentifiers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Unique instrument identifiers",
            "nullable": true
          },
          "instrumentUid": {
            "type": "string",
            "description": "LUSID's internal unique instrument identifier, resolved from the instrument identifiers"
          },
          "currency": {
            "type": "string",
            "description": ""
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/PerpetualProperty"
            },
            "description": "Properties associated with the constituent",
            "nullable": true
          },
          "weight": {
            "type": "number",
            "description": "",
            "format": "double"
          },
          "floatingWeight": {
            "type": "number",
            "description": "",
            "format": "double",
            "nullable": true
          },
          "instrumentScope": {
            "type": "string",
            "description": "",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ReferencePortfolioConstituentRequest": {
        "required": [
          "instrumentIdentifiers",
          "weight"
        ],
        "type": "object",
        "properties": {
          "instrumentIdentifiers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Unique instrument identifiers"
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/PerpetualProperty"
            },
            "nullable": true
          },
          "weight": {
            "type": "number",
            "description": "",
            "format": "double"
          },
          "currency": {
            "type": "string",
            "description": "",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "RelatedEntity": {
        "required": [
          "displayName",
          "entityId",
          "entityType",
          "identifiers"
        ],
        "type": "object",
        "properties": {
          "entityType": {
            "type": "string",
            "description": "The type of the entity."
          },
          "entityId": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "The identifier of the other related entity in the relationship. It contains 'scope' and 'code' as keys for identifiers of a Portfolio or Portfolio Group, or 'idTypeScope', 'idTypeCode', 'code' as keys for identifiers of a Person or Legal Entity."
          },
          "displayName": {
            "type": "string",
            "description": "The display name of the entity."
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Property"
            },
            "description": "The properties of the entity. This field is empty until further notice.",
            "nullable": true
          },
          "scope": {
            "type": "string",
            "description": "The scope of the identifier",
            "nullable": true
          },
          "lusidUniqueId": {
            "$ref": "#/components/schemas/LusidUniqueId"
          },
          "identifiers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EntityIdentifier"
            },
            "description": "The identifiers of the related entity in the relationship."
          },
          "href": {
            "type": "string",
            "description": "The link to the entity.",
            "format": "uri",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Information about the other related entity in the relationship"
      },
      "Relationship": {
        "required": [
          "relatedEntity",
          "relationshipDefinitionId",
          "traversalDescription",
          "traversalDirection"
        ],
        "type": "object",
        "properties": {
          "version": {
            "$ref": "#/components/schemas/Version"
          },
          "relationshipDefinitionId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "relatedEntity": {
            "$ref": "#/components/schemas/RelatedEntity"
          },
          "traversalDirection": {
            "type": "string",
            "description": "Direction of relationship betwen the requested entity and related entity. This can be 'In' or 'Out'. Read more about relationships traversal direction in LUSID Knowledge Base here https://support.lusid.com/relationships."
          },
          "traversalDescription": {
            "type": "string",
            "description": "Description of the relationship based on relationship's traversal direction. If 'TraversalDirection' is 'Out', this description would be 'OutwardDescription' from the associated relationship definition. If 'TraversalDirection' is 'In', this description would be 'InwardDescription' from the associated relationship definition."
          },
          "effectiveFrom": {
            "type": "string",
            "description": "The effective datetime from which the relationship is valid.",
            "format": "date-time"
          },
          "effectiveUntil": {
            "type": "string",
            "description": "The effective datetime until which the relationship is valid. If no future deletions are present or an effective until has not been set for the relationship, this will be indefinite and represented by the maximum date.",
            "format": "date-time"
          }
        },
        "additionalProperties": false,
        "description": "Representation of a Relationship between a requested entity with the stated entity as RelatedEntityId"
      },
      "RelationshipDefinition": {
        "required": [
          "displayName",
          "inwardDescription",
          "lifeTime",
          "outwardDescription",
          "relationshipCardinality",
          "relationshipDefinitionId",
          "sourceEntityType",
          "targetEntityType"
        ],
        "type": "object",
        "properties": {
          "version": {
            "$ref": "#/components/schemas/Version"
          },
          "relationshipDefinitionId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "sourceEntityType": {
            "type": "string",
            "description": "The entity type of the source entity object."
          },
          "targetEntityType": {
            "type": "string",
            "description": "The entity type of the target entity object."
          },
          "displayName": {
            "maxLength": 512,
            "minLength": 1,
            "pattern": "^[\\s\\S]*$",
            "type": "string",
            "description": "The display name of the relationship."
          },
          "outwardDescription": {
            "maxLength": 512,
            "minLength": 1,
            "pattern": "^[\\s\\S]*$",
            "type": "string",
            "description": "The description to relate source entity object and target entity object"
          },
          "inwardDescription": {
            "maxLength": 512,
            "minLength": 1,
            "pattern": "^[\\s\\S]*$",
            "type": "string",
            "description": "The description to relate target entity object and source entity object"
          },
          "lifeTime": {
            "type": "string",
            "description": "Describes how the relationships can change over time."
          },
          "relationshipCardinality": {
            "type": "string",
            "description": "Describes the cardinality of the relationship between source entity and target entity."
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ResourceId": {
        "required": [
          "code",
          "scope"
        ],
        "type": "object",
        "properties": {
          "scope": {
            "maxLength": 512,
            "minLength": 1,
            "type": "string",
            "description": "The scope used to identify an entity"
          },
          "code": {
            "maxLength": 512,
            "minLength": 1,
            "type": "string",
            "description": "The code used to identify an entity"
          }
        },
        "additionalProperties": false,
        "description": "Identifiers of an entity"
      },
      "ResourceListOfAccessControlledResource": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccessControlledResource"
            },
            "description": "The resources to list."
          },
          "href": {
            "type": "string",
            "description": "The URI of the resource list.",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "description": "The next page of results.",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "description": "The previous page of results.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A collection of resources that can be returned from requests."
      },
      "ResourceListOfAccessMetadataValueOf": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/AccessMetadataValue"
              }
            },
            "description": "The resources to list."
          },
          "href": {
            "type": "string",
            "description": "The URI of the resource list.",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "description": "The next page of results.",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "description": "The previous page of results.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A collection of resources that can be returned from requests."
      },
      "ResourceListOfAllocation": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Allocation"
            },
            "description": "The resources to list."
          },
          "href": {
            "type": "string",
            "description": "The URI of the resource list.",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "description": "The next page of results.",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "description": "The previous page of results.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A collection of resources that can be returned from requests."
      },
      "ResourceListOfChange": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Change"
            },
            "description": "The resources to list."
          },
          "href": {
            "type": "string",
            "description": "The URI of the resource list.",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "description": "The next page of results.",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "description": "The previous page of results.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A collection of resources that can be returned from requests."
      },
      "ResourceListOfConstituentsAdjustmentHeader": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ConstituentsAdjustmentHeader"
            },
            "description": "The resources to list."
          },
          "href": {
            "type": "string",
            "description": "The URI of the resource list.",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "description": "The next page of results.",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "description": "The previous page of results.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A collection of resources that can be returned from requests."
      },
      "ResourceListOfCorporateAction": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CorporateAction"
            },
            "description": "The resources to list."
          },
          "href": {
            "type": "string",
            "description": "The URI of the resource list.",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "description": "The next page of results.",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "description": "The previous page of results.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A collection of resources that can be returned from requests."
      },
      "ResourceListOfDataType": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DataType"
            },
            "description": "The resources to list."
          },
          "href": {
            "type": "string",
            "description": "The URI of the resource list.",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "description": "The next page of results.",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "description": "The previous page of results.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A collection of resources that can be returned from requests."
      },
      "ResourceListOfGetRecipeResponse": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetRecipeResponse"
            },
            "description": "The resources to list."
          },
          "href": {
            "type": "string",
            "description": "The URI of the resource list.",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "description": "The next page of results.",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "description": "The previous page of results.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A collection of resources that can be returned from requests."
      },
      "ResourceListOfHoldingsAdjustmentHeader": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/HoldingsAdjustmentHeader"
            },
            "description": "The resources to list."
          },
          "href": {
            "type": "string",
            "description": "The URI of the resource list.",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "description": "The next page of results.",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "description": "The previous page of results.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A collection of resources that can be returned from requests."
      },
      "ResourceListOfInstrumentIdTypeDescriptor": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InstrumentIdTypeDescriptor"
            },
            "description": "The resources to list."
          },
          "href": {
            "type": "string",
            "description": "The URI of the resource list.",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "description": "The next page of results.",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "description": "The previous page of results.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A collection of resources that can be returned from requests."
      },
      "ResourceListOfIUnitDefinitionDto": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IUnitDefinitionDto"
            },
            "description": "The resources to list."
          },
          "href": {
            "type": "string",
            "description": "The URI of the resource list.",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "description": "The next page of results.",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "description": "The previous page of results.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A collection of resources that can be returned from requests."
      },
      "ResourceListOfLegalEntity": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LegalEntity"
            },
            "description": "The resources to list."
          },
          "href": {
            "type": "string",
            "description": "The URI of the resource list.",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "description": "The next page of results.",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "description": "The previous page of results.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A collection of resources that can be returned from requests."
      },
      "ResourceListOfOrder": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Order"
            },
            "description": "The resources to list."
          },
          "href": {
            "type": "string",
            "description": "The URI of the resource list.",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "description": "The next page of results.",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "description": "The previous page of results.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A collection of resources that can be returned from requests."
      },
      "ResourceListOfPerformanceReturn": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PerformanceReturn"
            },
            "description": "The resources to list."
          },
          "href": {
            "type": "string",
            "description": "The URI of the resource list.",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "description": "The next page of results.",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "description": "The previous page of results.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A collection of resources that can be returned from requests."
      },
      "ResourceListOfPortfolio": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Portfolio"
            },
            "description": "The resources to list."
          },
          "href": {
            "type": "string",
            "description": "The URI of the resource list.",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "description": "The next page of results.",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "description": "The previous page of results.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A collection of resources that can be returned from requests."
      },
      "ResourceListOfPortfolioCashFlow": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PortfolioCashFlow"
            },
            "description": "The resources to list."
          },
          "href": {
            "type": "string",
            "description": "The URI of the resource list.",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "description": "The next page of results.",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "description": "The previous page of results.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A collection of resources that can be returned from requests."
      },
      "ResourceListOfPortfolioCashLadder": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PortfolioCashLadder"
            },
            "description": "The resources to list."
          },
          "href": {
            "type": "string",
            "description": "The URI of the resource list.",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "description": "The next page of results.",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "description": "The previous page of results.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A collection of resources that can be returned from requests."
      },
      "ResourceListOfPortfolioGroup": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PortfolioGroup"
            },
            "description": "The resources to list."
          },
          "href": {
            "type": "string",
            "description": "The URI of the resource list.",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "description": "The next page of results.",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "description": "The previous page of results.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A collection of resources that can be returned from requests."
      },
      "ResourceListOfProcessedCommand": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProcessedCommand"
            },
            "description": "The resources to list."
          },
          "href": {
            "type": "string",
            "description": "The URI of the resource list.",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "description": "The next page of results.",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "description": "The previous page of results.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A collection of resources that can be returned from requests."
      },
      "ResourceListOfPropertyDefinition": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PropertyDefinition"
            },
            "description": "The resources to list."
          },
          "href": {
            "type": "string",
            "description": "The URI of the resource list.",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "description": "The next page of results.",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "description": "The previous page of results.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A collection of resources that can be returned from requests."
      },
      "ResourceListOfPropertyInterval": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PropertyInterval"
            },
            "description": "The resources to list."
          },
          "href": {
            "type": "string",
            "description": "The URI of the resource list.",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "description": "The next page of results.",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "description": "The previous page of results.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A collection of resources that can be returned from requests."
      },
      "ResourceListOfQuote": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Quote"
            },
            "description": "The resources to list."
          },
          "href": {
            "type": "string",
            "description": "The URI of the resource list.",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "description": "The next page of results.",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "description": "The previous page of results.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A collection of resources that can be returned from requests."
      },
      "ResourceListOfReconciliationBreak": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReconciliationBreak"
            },
            "description": "The resources to list."
          },
          "href": {
            "type": "string",
            "description": "The URI of the resource list.",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "description": "The next page of results.",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "description": "The previous page of results.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A collection of resources that can be returned from requests."
      },
      "ResourceListOfRelationship": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Relationship"
            },
            "description": "The resources to list."
          },
          "href": {
            "type": "string",
            "description": "The URI of the resource list.",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "description": "The next page of results.",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "description": "The previous page of results.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A collection of resources that can be returned from requests."
      },
      "ResourceListOfScopeDefinition": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ScopeDefinition"
            },
            "description": "The resources to list."
          },
          "href": {
            "type": "string",
            "description": "The URI of the resource list.",
            "format": "uri",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "description": "The next page of results.",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "description": "The previous page of results.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A collection of resources that can be returned from requests."
      },
      "ResponseMetaData": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "The type of meta data information being provided",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "The description of what occured for this specific piece of meta data",
            "nullable": true
          },
          "identifierType": {
            "type": "string",
            "description": "The type of the listed identifiers",
            "nullable": true
          },
          "identifiers": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The related identifiers that were impacted by this event",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Metadata related to an api response"
      },
      "ResultDataSchema": {
        "type": "object",
        "properties": {
          "nodeValueSchema": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/FieldSchema"
            },
            "nullable": true
          },
          "propertySchema": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/FieldSchema"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ResultKeyRule": {
        "required": [
          "resultKeyRuleType"
        ],
        "type": "object",
        "properties": {
          "resultKeyRuleType": {
            "enum": [
              "Invalid",
              "ResultDataKeyRule",
              "PortfolioResultDataKeyRule"
            ],
            "type": "string",
            "description": "The available values are: Invalid, ResultDataKeyRule, PortfolioResultDataKeyRule"
          }
        },
        "additionalProperties": false,
        "description": "A rule that describes how we resolve (unit) result data.",
        "discriminator": {
          "propertyName": "resultKeyRuleType"
        }
      },
      "ScopeDefinition": {
        "required": [
          "scope"
        ],
        "type": "object",
        "properties": {
          "scope": {
            "type": "string",
            "description": "The unique identifier for the scope."
          }
        },
        "additionalProperties": false,
        "description": "A list of scopes."
      },
      "SequenceDefinition": {
        "required": [
          "cycle",
          "id",
          "increment",
          "maxValue",
          "minValue",
          "start"
        ],
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "increment": {
            "type": "integer",
            "description": "The Resource Id of the sequence definition",
            "format": "int64"
          },
          "minValue": {
            "type": "integer",
            "description": "The minimum value of the sequence",
            "format": "int64"
          },
          "maxValue": {
            "type": "integer",
            "description": "The maximum value of the sequence",
            "format": "int64"
          },
          "start": {
            "type": "integer",
            "description": "The start value of the sequence",
            "format": "int64"
          },
          "value": {
            "type": "integer",
            "description": "The last used value of the sequence",
            "format": "int64",
            "nullable": true
          },
          "cycle": {
            "type": "boolean",
            "description": "Indicates if the sequence would start from minimun value once it reaches maximum value. If set to false, a failure would return if the sequence reaches maximum value."
          },
          "pattern": {
            "type": "string",
            "description": "The pattern to be used to generate next values in the sequence.",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SetLegalEntityIdentifiersRequest": {
        "type": "object",
        "properties": {
          "identifiers": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Property"
            },
            "description": "Identifiers to set for a Legal Entity. Identifiers not included in the request will not be amended.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SetLegalEntityPropertiesRequest": {
        "type": "object",
        "properties": {
          "properties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Property"
            },
            "description": "Properties to set for a Legal Entity. All time-variant properties must have same EffectiveFrom date. Properties not included in the request will not be amended.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SideConfigurationData": {
        "required": [
          "amount",
          "currency",
          "rate",
          "security",
          "side",
          "units"
        ],
        "type": "object",
        "properties": {
          "side": {
            "type": "string",
            "description": "The side's label."
          },
          "security": {
            "type": "string",
            "description": "The security, or instrument."
          },
          "currency": {
            "type": "string",
            "description": "The currency."
          },
          "rate": {
            "type": "string",
            "description": "The rate."
          },
          "units": {
            "type": "string",
            "description": "The units."
          },
          "amount": {
            "type": "string",
            "description": "The amount."
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Configuration needed to define a side. Sides are referenced by Label. Beyond that, other properties\r\ncan be used to reference either transaction fields, or transaction properties."
      },
      "Stream": {
        "type": "object",
        "properties": {
          "canRead": {
            "type": "boolean",
            "readOnly": true
          },
          "canWrite": {
            "type": "boolean",
            "readOnly": true
          },
          "canSeek": {
            "type": "boolean",
            "readOnly": true
          },
          "canTimeout": {
            "type": "boolean",
            "readOnly": true
          },
          "length": {
            "type": "integer",
            "format": "int64",
            "readOnly": true
          },
          "position": {
            "type": "integer",
            "format": "int64"
          },
          "readTimeout": {
            "type": "integer",
            "format": "int32"
          },
          "writeTimeout": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "TargetTaxLot": {
        "required": [
          "units"
        ],
        "type": "object",
        "properties": {
          "units": {
            "type": "number",
            "description": "The number of units of the instrument in this tax-lot.",
            "format": "double"
          },
          "cost": {
            "$ref": "#/components/schemas/CurrencyAndAmount"
          },
          "portfolioCost": {
            "type": "number",
            "description": "The total cost of the tax-lot in the transaction portfolio's base currency.",
            "format": "double",
            "nullable": true
          },
          "price": {
            "type": "number",
            "description": "The purchase price of each unit of the instrument held in this tax-lot. This forms part of the unique key required for multiple tax-lots.",
            "format": "double",
            "nullable": true
          },
          "purchaseDate": {
            "type": "string",
            "description": "The purchase date of this tax-lot. This forms part of the unique key required for multiple tax-lots.",
            "format": "date-time",
            "nullable": true
          },
          "settlementDate": {
            "type": "string",
            "description": "The settlement date of the tax-lot's opening transaction.",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Used to specify holdings target amounts at the tax-lot level"
      },
      "TargetTaxLotRequest": {
        "required": [
          "units"
        ],
        "type": "object",
        "properties": {
          "units": {
            "type": "number",
            "description": "The number of units of the instrument in this tax-lot.",
            "format": "double"
          },
          "cost": {
            "$ref": "#/components/schemas/CurrencyAndAmount"
          },
          "portfolioCost": {
            "type": "number",
            "description": "The total cost of the tax-lot in the transaction portfolio's base currency.",
            "format": "double",
            "nullable": true
          },
          "price": {
            "type": "number",
            "description": "The purchase price of each unit of the instrument held in this tax-lot. This forms part of the unique key required for multiple tax-lots.",
            "format": "double",
            "nullable": true
          },
          "purchaseDate": {
            "type": "string",
            "description": "The purchase date of this tax-lot. This forms part of the unique key required for multiple tax-lots.",
            "format": "date-time",
            "nullable": true
          },
          "settlementDate": {
            "type": "string",
            "description": "The settlement date of the tax-lot's opening transaction.",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Transaction": {
        "required": [
          "instrumentUid",
          "settlementDate",
          "totalConsideration",
          "transactionDate",
          "transactionId",
          "type",
          "units"
        ],
        "type": "object",
        "properties": {
          "transactionId": {
            "type": "string",
            "description": "The unique identifier for the transaction."
          },
          "type": {
            "type": "string",
            "description": "The type of the transaction e.g. 'Buy', 'Sell'. The transaction type should have been pre-configured via the System Configuration API endpoint."
          },
          "instrumentIdentifiers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "A set of instrument identifiers that can resolve the transaction to a unique instrument.",
            "nullable": true
          },
          "instrumentScope": {
            "type": "string",
            "description": "The scope in which the transaction's instrument lies.",
            "nullable": true
          },
          "instrumentUid": {
            "type": "string",
            "description": "The unqiue Lusid Instrument Id (LUID) of the instrument that the transaction is in."
          },
          "transactionDate": {
            "type": "string",
            "description": "The date of the transaction.",
            "format": "date-time"
          },
          "settlementDate": {
            "type": "string",
            "description": "The settlement date of the transaction.",
            "format": "date-time"
          },
          "units": {
            "type": "number",
            "description": "The number of units transacted in the associated instrument.",
            "format": "double"
          },
          "transactionPrice": {
            "$ref": "#/components/schemas/TransactionPrice"
          },
          "totalConsideration": {
            "$ref": "#/components/schemas/CurrencyAndAmount"
          },
          "exchangeRate": {
            "type": "number",
            "description": "The exchange rate between the transaction and settlement currency (settlement currency being represented by the TotalConsideration.Currency). For example if the transaction currency is in USD and the settlement currency is in GBP this this the USD/GBP rate.",
            "format": "double",
            "nullable": true
          },
          "transactionCurrency": {
            "type": "string",
            "description": "The transaction currency.",
            "nullable": true
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/PerpetualProperty"
            },
            "description": "Set of unique transaction properties and associated values to stored with the transaction. Each property will be from the 'Transaction' domain.",
            "nullable": true
          },
          "counterpartyId": {
            "type": "string",
            "description": "The identifier for the counterparty of the transaction.",
            "nullable": true
          },
          "source": {
            "type": "string",
            "description": "The source of the transaction. This is used to look up the appropriate transaction group set in the transaction type configuration.",
            "nullable": true
          },
          "entryDateTime": {
            "type": "string",
            "description": "The asAt datetime that the transaction was added to LUSID.",
            "format": "date-time"
          },
          "otcConfirmation": {
            "$ref": "#/components/schemas/OtcConfirmation"
          },
          "transactionStatus": {
            "enum": [
              "Active",
              "Amended",
              "Cancelled"
            ],
            "type": "string",
            "description": "The status of the transaction. The available values are: Active, Amended, Cancelled"
          },
          "cancelDateTime": {
            "type": "string",
            "description": "If the transaction has been cancelled, the asAt datetime that the transaction was cancelled.",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A list of transactions."
      },
      "TransactionConfigurationData": {
        "required": [
          "aliases",
          "movements"
        ],
        "type": "object",
        "properties": {
          "aliases": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TransactionConfigurationTypeAlias"
            },
            "description": "List of transaction types that map to this specific transaction configuration"
          },
          "movements": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TransactionConfigurationMovementData"
            },
            "description": "Movement data for the transaction type"
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/PerpetualProperty"
            },
            "description": "Properties attached to the transaction type",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TransactionConfigurationDataRequest": {
        "required": [
          "aliases",
          "movements"
        ],
        "type": "object",
        "properties": {
          "aliases": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TransactionConfigurationTypeAlias"
            },
            "description": "List of transaction codes that map to this specific transaction model"
          },
          "movements": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TransactionConfigurationMovementDataRequest"
            },
            "description": "Movement data for the transaction code"
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/PerpetualProperty"
            },
            "description": "Properties attached to the underlying holding.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TransactionConfigurationMovementData": {
        "required": [
          "direction",
          "movementTypes",
          "side"
        ],
        "type": "object",
        "properties": {
          "movementTypes": {
            "enum": [
              "Settlement",
              "Traded",
              "StockMovement",
              "FutureCash",
              "Commitment",
              "Receivable",
              "CashSettlement",
              "CashForward",
              "CashCommitment",
              "CashReceivable",
              "Accrual",
              "CashAccrual",
              "ForwardFx",
              "CashFxForward",
              "UnsettledCashTypes",
              "Carry",
              "CarryAsPnl",
              "VariationMargin"
            ],
            "type": "string",
            "description": ". The available values are: Settlement, Traded, StockMovement, FutureCash, Commitment, Receivable, CashSettlement, CashForward, CashCommitment, CashReceivable, Accrual, CashAccrual, ForwardFx, CashFxForward, UnsettledCashTypes, Carry, CarryAsPnl, VariationMargin"
          },
          "side": {
            "type": "string",
            "description": "The Side determines which of the fields from our transaction are used to generate the Movement. Side1 means the 'security' side of the transaction, ie the Instrument and Units; Side2 means the 'cash' side, ie the Total Consideration"
          },
          "direction": {
            "type": "integer",
            "description": " A multiplier to apply to Transaction amounts; the values are -1 to indicate to reverse the signs and 1 to indicate to use the signed values from the Transaction directly. For a typical Transaction with unsigned values, 1 means increase, -1 means decrease",
            "format": "int32"
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/PerpetualProperty"
            },
            "description": "The properties associated with the underlying Movement",
            "nullable": true
          },
          "mappings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TransactionPropertyMapping"
            },
            "description": "This allows you to map a transaction property to a property on the underlying holding",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "The movement name (optional)",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TransactionConfigurationMovementDataRequest": {
        "required": [
          "direction",
          "movementTypes",
          "side"
        ],
        "type": "object",
        "properties": {
          "movementTypes": {
            "enum": [
              "Settlement",
              "Traded",
              "StockMovement",
              "FutureCash",
              "Commitment",
              "Receivable",
              "CashSettlement",
              "CashForward",
              "CashCommitment",
              "CashReceivable",
              "Accrual",
              "CashAccrual",
              "ForwardFx",
              "CashFxForward",
              "UnsettledCashTypes",
              "Carry",
              "CarryAsPnl",
              "VariationMargin"
            ],
            "type": "string",
            "description": ". The available values are: Settlement, Traded, StockMovement, FutureCash, Commitment, Receivable, CashSettlement, CashForward, CashCommitment, CashReceivable, Accrual, CashAccrual, ForwardFx, CashFxForward, UnsettledCashTypes, Carry, CarryAsPnl, VariationMargin"
          },
          "side": {
            "type": "string",
            "description": "The movement side"
          },
          "direction": {
            "type": "integer",
            "description": "The movement direction",
            "format": "int32"
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/PerpetualProperty"
            },
            "description": "The properties associated with the underlying Movement.",
            "nullable": true
          },
          "mappings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TransactionPropertyMappingRequest"
            },
            "description": "This allows you to map a transaction property to a property on the underlying holding.",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "The movement name (optional)",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TransactionConfigurationTypeAlias": {
        "required": [
          "description",
          "transactionClass",
          "transactionRoles",
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "The transaction type"
          },
          "description": {
            "type": "string",
            "description": "Brief description of the transaction"
          },
          "transactionClass": {
            "type": "string",
            "description": "Relates types of a similar class. E.g. Buy/Sell, StockIn/StockOut"
          },
          "transactionGroup": {
            "type": "string",
            "description": "Group is a set of codes related to a source, or sync. DEPRECATED: This field will be removed, use `Source` instead",
            "nullable": true
          },
          "source": {
            "maxLength": 64,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9\\-_]+$",
            "type": "string",
            "description": "Used to group a set of transaction types",
            "nullable": true
          },
          "transactionRoles": {
            "enum": [
              "None",
              "LongLonger",
              "LongShorter",
              "ShortShorter",
              "Shorter",
              "ShortLonger",
              "Longer",
              "AllRoles"
            ],
            "type": "string",
            "description": ". The available values are: None, LongLonger, LongShorter, ShortShorter, Shorter, ShortLonger, Longer, AllRoles"
          },
          "isDefault": {
            "type": "boolean",
            "description": "IsDefault is a flag that denotes the default alias for a source. There can only be, at most, one per source."
          }
        },
        "additionalProperties": false
      },
      "TransactionPrice": {
        "type": "object",
        "properties": {
          "price": {
            "type": "number",
            "format": "double"
          },
          "type": {
            "enum": [
              "Price",
              "Yield",
              "Spread"
            ],
            "type": "string",
            "description": "The available values are: Price, Yield, Spread"
          }
        },
        "additionalProperties": false
      },
      "TransactionPropertyMapping": {
        "required": [
          "propertyKey"
        ],
        "type": "object",
        "properties": {
          "propertyKey": {
            "type": "string",
            "description": "The key that uniquely identifies the property. It has the format {domain}/{scope}/{code}"
          },
          "mapFrom": {
            "type": "string",
            "description": "The Property Key of the Property to map from",
            "nullable": true
          },
          "setTo": {
            "type": "object",
            "additionalProperties": false,
            "description": "A pointer to the Property being mapped from",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TransactionPropertyMappingRequest": {
        "required": [
          "propertyKey"
        ],
        "type": "object",
        "properties": {
          "propertyKey": {
            "type": "string",
            "description": "Uniquely identifies the property definition and consists of a Domain, Scope and Code."
          },
          "mapFrom": {
            "type": "string",
            "description": "The Property Key of the Property to map from.",
            "nullable": true
          },
          "setTo": {
            "type": "object",
            "additionalProperties": false,
            "description": "A pointer to the Property being mapped from.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TransactionQueryParameters": {
        "required": [
          "endDate",
          "startDate"
        ],
        "type": "object",
        "properties": {
          "startDate": {
            "type": "string",
            "description": "The lower bound effective datetime or cut label (inclusive) from which to build the transactions.",
            "format": "dateorcutlabel"
          },
          "endDate": {
            "type": "string",
            "description": "The upper bound effective datetime or cut label (inclusive) from which to retrieve transactions.",
            "format": "dateorcutlabel"
          },
          "queryMode": {
            "enum": [
              "TradeDate",
              "SettleDate"
            ],
            "type": "string",
            "description": "The date to compare against the upper and lower bounds for the effective datetime or cut label. Defaults to 'TradeDate' if not specified. The available values are: TradeDate, SettleDate"
          },
          "showCancelledTransactions": {
            "type": "boolean",
            "description": "Option to specify whether or not to include cancelled transactions in the output. Defaults to False if not specified."
          }
        },
        "additionalProperties": false
      },
      "TransactionRequest": {
        "required": [
          "instrumentIdentifiers",
          "settlementDate",
          "totalConsideration",
          "transactionDate",
          "transactionId",
          "type",
          "units"
        ],
        "type": "object",
        "properties": {
          "transactionId": {
            "type": "string",
            "description": "The unique identifier of the transaction."
          },
          "type": {
            "type": "string",
            "description": "The type of the transaction, for example 'Buy' or 'Sell'. The transaction type must have been pre-configured using the System Configuration API. If not, this operation will succeed but you are not able to calculate holdings for the portfolio that include this transaction."
          },
          "instrumentIdentifiers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "A set of instrument identifiers that can resolve the transaction to a unique instrument."
          },
          "transactionDate": {
            "type": "string",
            "description": "The date of the transaction.",
            "format": "dateorcutlabel"
          },
          "settlementDate": {
            "type": "string",
            "description": "The settlement date of the transaction.",
            "format": "dateorcutlabel"
          },
          "units": {
            "type": "number",
            "description": "The number of units of the transacted instrument.",
            "format": "double"
          },
          "transactionPrice": {
            "$ref": "#/components/schemas/TransactionPrice"
          },
          "totalConsideration": {
            "$ref": "#/components/schemas/CurrencyAndAmount"
          },
          "exchangeRate": {
            "type": "number",
            "description": "The exchange rate between the transaction and settlement currency (settlement currency being represented by TotalConsideration.Currency). For example, if the transaction currency is USD and the settlement currency is GBP, this would be the appropriate USD/GBP rate.",
            "format": "double",
            "nullable": true
          },
          "transactionCurrency": {
            "type": "string",
            "description": "The transaction currency.",
            "nullable": true
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/PerpetualProperty"
            },
            "description": "A list of unique transaction properties and associated values to store for the transaction. Each property must be from the 'Transaction' domain.",
            "nullable": true
          },
          "counterpartyId": {
            "type": "string",
            "description": "The identifier for the counterparty of the transaction.",
            "nullable": true
          },
          "source": {
            "type": "string",
            "description": "The source of the transaction. This is used to look up the appropriate transaction group set in the transaction type configuration.",
            "nullable": true
          },
          "otcConfirmation": {
            "$ref": "#/components/schemas/OtcConfirmation"
          }
        },
        "additionalProperties": false
      },
      "TransactionSetConfigurationData": {
        "required": [
          "transactionConfigs"
        ],
        "type": "object",
        "properties": {
          "transactionConfigs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TransactionConfigurationData"
            },
            "description": "Collection of transaction type models"
          },
          "sideDefinitions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SideConfigurationData"
            },
            "description": "Collection of side definitions",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A collection of the data required to configure transaction types.."
      },
      "UpdateCutLabelDefinitionRequest": {
        "required": [
          "cutLocalTime",
          "displayName",
          "timeZone"
        ],
        "type": "object",
        "properties": {
          "displayName": {
            "pattern": "^[\\s\\S]*$",
            "type": "string"
          },
          "description": {
            "pattern": "^[\\s\\S]*$",
            "type": "string",
            "nullable": true
          },
          "cutLocalTime": {
            "$ref": "#/components/schemas/CutLocalTime"
          },
          "timeZone": {
            "type": "string"
          }
        },
        "additionalProperties": false,
        "description": "This request specifies a new Cut Label Definition"
      },
      "UpdateInstrumentIdentifierRequest": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "The allowable instrument identifier to update, insert or remove e.g. 'Figi'."
          },
          "value": {
            "type": "string",
            "description": "The new value of the allowable instrument identifier. If unspecified the identifier will be removed from the instrument.",
            "nullable": true
          },
          "effectiveAt": {
            "type": "string",
            "description": "The effective datetime from which the identifier should be updated, inserted or removed. Defaults to the current LUSID system datetime if not specified.",
            "format": "dateorcutlabel",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpdatePortfolioGroupRequest": {
        "required": [
          "displayName"
        ],
        "type": "object",
        "properties": {
          "displayName": {
            "type": "string",
            "description": "The name of the portfolio group."
          },
          "description": {
            "type": "string",
            "description": "A long form description of the portfolio group.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpdatePortfolioRequest": {
        "required": [
          "displayName"
        ],
        "type": "object",
        "properties": {
          "displayName": {
            "type": "string",
            "description": "The name of the transaction portfolio."
          },
          "description": {
            "type": "string",
            "description": "The description of the transaction portfolio.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpdatePropertyDefinitionRequest": {
        "required": [
          "displayName"
        ],
        "type": "object",
        "properties": {
          "displayName": {
            "type": "string",
            "description": "The display name of the property."
          },
          "propertyDescription": {
            "maxLength": 512,
            "type": "string",
            "description": "Describes the property",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpdateRelationshipDefinitionRequest": {
        "required": [
          "displayName",
          "inwardDescription",
          "outwardDescription"
        ],
        "type": "object",
        "properties": {
          "displayName": {
            "maxLength": 512,
            "minLength": 1,
            "pattern": "^[\\s\\S]*$",
            "type": "string",
            "description": "The display name of the relation."
          },
          "outwardDescription": {
            "maxLength": 512,
            "minLength": 1,
            "pattern": "^[\\s\\S]*$",
            "type": "string",
            "description": "The description to relate source entity object and target entity object."
          },
          "inwardDescription": {
            "maxLength": 512,
            "minLength": 1,
            "pattern": "^[\\s\\S]*$",
            "type": "string",
            "description": "The description to relate target entity object and source entity object."
          }
        },
        "additionalProperties": false
      },
      "UpsertComplexMarketDataRequest": {
        "required": [
          "marketData",
          "marketDataId"
        ],
        "type": "object",
        "properties": {
          "marketDataId": {
            "$ref": "#/components/schemas/ComplexMarketDataId"
          },
          "marketData": {
            "$ref": "#/components/schemas/ComplexMarketData"
          }
        },
        "additionalProperties": false,
        "description": "The details of the complex market data item to upsert into Lusid."
      },
      "UpsertCorporateActionRequest": {
        "required": [
          "announcementDate",
          "corporateActionCode",
          "exDate",
          "paymentDate",
          "recordDate",
          "transitions"
        ],
        "type": "object",
        "properties": {
          "corporateActionCode": {
            "maxLength": 64,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9\\-_]+$",
            "type": "string",
            "description": "The unique identifier of this corporate action"
          },
          "description": {
            "maxLength": 1024,
            "minLength": 0,
            "pattern": "^[\\s\\S]*$",
            "type": "string",
            "description": "The description of the corporate action.",
            "nullable": true
          },
          "announcementDate": {
            "type": "string",
            "description": "The announcement date of the corporate action",
            "format": "date-time"
          },
          "exDate": {
            "type": "string",
            "description": "The ex date of the corporate action",
            "format": "date-time"
          },
          "recordDate": {
            "type": "string",
            "description": "The record date of the corporate action",
            "format": "date-time"
          },
          "paymentDate": {
            "type": "string",
            "description": "The payment date of the corporate action",
            "format": "date-time"
          },
          "transitions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CorporateActionTransitionRequest"
            },
            "description": "The transitions that result from this corporate action"
          }
        },
        "additionalProperties": false
      },
      "UpsertCorporateActionsResponse": {
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "description": "The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.",
            "format": "uri",
            "nullable": true
          },
          "values": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/CorporateAction"
            },
            "description": "The corporate actions which have been successfully updated or inserted.",
            "nullable": true
          },
          "failed": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ErrorDetail"
            },
            "description": "The corporate actions that could not be updated or inserted along with a reason for their failure.",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpsertInstrumentPropertiesResponse": {
        "required": [
          "asAtDate"
        ],
        "type": "object",
        "properties": {
          "asAtDate": {
            "type": "string",
            "description": "The as-at datetime at which properties were created or updated.",
            "format": "date-time"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpsertInstrumentPropertyRequest": {
        "required": [
          "identifier",
          "identifierType"
        ],
        "type": "object",
        "properties": {
          "identifierType": {
            "type": "string",
            "description": "The unique identifier type to search for the instrument, for example 'Figi'."
          },
          "identifier": {
            "type": "string",
            "description": "A value of that type to identify the instrument to upsert properties for, for example 'BBG000BLNNV0'."
          },
          "properties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Property"
            },
            "description": "A set of instrument properties and associated values to store for the instrument. Each property must be from the 'Instrument' domain.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpsertInstrumentsResponse": {
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "description": "The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.",
            "format": "uri",
            "nullable": true
          },
          "values": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Instrument"
            },
            "description": "The instruments which have been successfully updated or created.",
            "nullable": true
          },
          "failed": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ErrorDetail"
            },
            "description": "The instruments that could not be updated or created or were left unchanged without error along with a reason for their failure.",
            "nullable": true
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ResponseMetaData"
              }
            },
            "description": "Meta data associated with the upsert event.",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpsertLegalEntityAccessMetadataRequest": {
        "type": "object",
        "properties": {
          "metadata": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccessMetadataValue"
            },
            "description": "The access control metadata to assign to a Legal Entity that matches the identifier",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpsertLegalEntityRequest": {
        "required": [
          "displayName",
          "identifiers"
        ],
        "type": "object",
        "properties": {
          "identifiers": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Property"
            },
            "description": "The identifiers the legal entity will be upserted with.The provided keys should be idTypeScope, idTypeCode, code"
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Property"
            },
            "description": "A set of properties associated to the Legal Entity.",
            "nullable": true
          },
          "displayName": {
            "maxLength": 512,
            "minLength": 1,
            "pattern": "^[\\s\\S]*$",
            "type": "string",
            "description": "The display name of the Legal Entity"
          },
          "description": {
            "maxLength": 512,
            "minLength": 0,
            "pattern": "^[\\s\\S]*$",
            "type": "string",
            "description": "The description of the Legal Entity",
            "nullable": true
          },
          "counterpartyRiskInformation": {
            "$ref": "#/components/schemas/CounterpartyRiskInformation"
          }
        },
        "additionalProperties": false,
        "description": "Request to create or update an legal entity"
      },
      "UpsertPersonAccessMetadataRequest": {
        "type": "object",
        "properties": {
          "metadata": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccessMetadataValue"
            },
            "description": "The access control metadata to assign to a Person that matches the identifier",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpsertPortfolioAccessMetadataRequest": {
        "required": [
          "metadata"
        ],
        "type": "object",
        "properties": {
          "metadata": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccessMetadataValue"
            },
            "description": "The access control metadata to assign to portfolios that match the identifier"
          }
        },
        "additionalProperties": false
      },
      "UpsertPortfolioGroupAccessMetadataRequest": {
        "required": [
          "metadata"
        ],
        "type": "object",
        "properties": {
          "metadata": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccessMetadataValue"
            },
            "description": "The access control metadata to assign to portfolio groups that match the identifier"
          }
        },
        "additionalProperties": false
      },
      "UpsertPortfolioTransactionsResponse": {
        "required": [
          "version"
        ],
        "type": "object",
        "properties": {
          "version": {
            "$ref": "#/components/schemas/Version"
          },
          "href": {
            "type": "string",
            "description": "The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.",
            "format": "uri",
            "nullable": true
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ResponseMetaData"
              }
            },
            "description": "Contains warnings related to unresolved instruments or non-existent transaction types for the upserted trades",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpsertQuoteRequest": {
        "required": [
          "quoteId"
        ],
        "type": "object",
        "properties": {
          "quoteId": {
            "$ref": "#/components/schemas/QuoteId"
          },
          "metricValue": {
            "$ref": "#/components/schemas/MetricValue"
          },
          "lineage": {
            "type": "string",
            "description": "Description of the quote's lineage e.g. 'FundAccountant_GreenQuality'.",
            "nullable": true
          },
          "scaleFactor": {
            "type": "number",
            "description": "An optional scale factor for non-standard scaling of quotes against the instrument. For example, if you wish the quote's Value to be scaled down by a factor of 100, enter 100. If not supplied, the default ScaleFactor is 1.",
            "format": "double",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The details of the quote including its unique identifier, value and lineage."
      },
      "UpsertQuotesResponse": {
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "description": "The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.",
            "format": "uri",
            "nullable": true
          },
          "values": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Quote"
            },
            "description": "The quotes which have been successfully updated or inserted.",
            "nullable": true
          },
          "failed": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ErrorDetail"
            },
            "description": "The quotes that could not be updated or inserted along with a reason for their failure.",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpsertRecipeRequest": {
        "type": "object",
        "properties": {
          "configurationRecipe": {
            "$ref": "#/components/schemas/ConfigurationRecipe"
          },
          "configurationRecipeSnippet": {
            "$ref": "#/components/schemas/ConfigurationRecipeSnippet"
          }
        },
        "additionalProperties": false,
        "description": "A recipe or recipe snippet that is to be stored in the recipe structured data store.\r\nOnly one of these must be present."
      },
      "UpsertReferencePortfolioConstituentsRequest": {
        "required": [
          "constituents",
          "effectiveFrom",
          "weightType"
        ],
        "type": "object",
        "properties": {
          "effectiveFrom": {
            "type": "string",
            "description": "The first date from which the weights will apply",
            "format": "dateorcutlabel"
          },
          "weightType": {
            "enum": [
              "Static",
              "Floating",
              "Periodical"
            ],
            "type": "string",
            "description": "The available values are: Static, Floating, Periodical"
          },
          "periodType": {
            "enum": [
              "Daily",
              "Weekly",
              "Monthly",
              "Quarterly",
              "Annually"
            ],
            "type": "string",
            "description": "The available values are: Daily, Weekly, Monthly, Quarterly, Annually",
            "nullable": true
          },
          "periodCount": {
            "type": "integer",
            "description": "",
            "format": "int32",
            "nullable": true
          },
          "constituents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReferencePortfolioConstituentRequest"
            },
            "description": "Set of constituents (instrument/weight pairings)"
          }
        },
        "additionalProperties": false
      },
      "UpsertReferencePortfolioConstituentsResponse": {
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "version": {
            "$ref": "#/components/schemas/Version"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpsertReturnsResponse": {
        "required": [
          "version"
        ],
        "type": "object",
        "properties": {
          "version": {
            "$ref": "#/components/schemas/Version"
          },
          "href": {
            "type": "string",
            "description": "The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.",
            "format": "uri",
            "nullable": true
          },
          "values": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": {
                "type": "string",
                "format": "date-time"
              }
            },
            "description": "The set of values that were successfully retrieved.",
            "nullable": true
          },
          "failed": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": {
                "$ref": "#/components/schemas/ErrorDetail"
              }
            },
            "description": "The set of values that could not be retrieved due along with a reason for this, e.g badly formed request.",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Response from upserting Returns"
      },
      "UpsertSingleStructuredDataResponse": {
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "description": "The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.",
            "format": "uri",
            "nullable": true
          },
          "value": {
            "type": "string",
            "description": "The value that was successfully retrieved.",
            "format": "date-time"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Response from upserting structured data document"
      },
      "UpsertStructuredDataResponse": {
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "description": "The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.",
            "format": "uri",
            "nullable": true
          },
          "values": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "format": "date-time"
            },
            "description": "The set of values that were successfully retrieved.",
            "nullable": true
          },
          "failed": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ErrorDetail"
            },
            "description": "The set of values that could not be retrieved due along with a reason for this, e.g badly formed request.",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Response from upserting structured data document"
      },
      "UpsertTransactionPropertiesResponse": {
        "type": "object",
        "properties": {
          "href": {
            "type": "string",
            "description": "The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.",
            "format": "uri",
            "nullable": true
          },
          "version": {
            "$ref": "#/components/schemas/Version"
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/PerpetualProperty"
            },
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique id of the user.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The unique id of the user that issued the command."
      },
      "ValuationRequest": {
        "required": [
          "metrics",
          "portfolioEntityIds",
          "recipeId",
          "valuationSchedule"
        ],
        "type": "object",
        "properties": {
          "recipeId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "asAt": {
            "type": "string",
            "description": "The asAt date to use",
            "format": "date-time",
            "nullable": true
          },
          "metrics": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AggregateSpec"
            },
            "description": "The set of specifications to calculate or retrieve during the valuation and present in the results. For example:\r\nAggregateSpec('Holding/default/PV','Sum') for returning the PV (present value) of holdings\r\nAggregateSpec('Holding/default/Units','Sum') for returning the units of holidays\r\nAggregateSpec('Instrument/default/LusidInstrumentId','Value') for returning the Lusid Instrument identifier"
          },
          "groupBy": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "The key that uniquely identifies a queryable address in Lusid."
            },
            "description": "The set of items by which to perform grouping. This primarily matters when one or more of the metric operators is a mapping\r\nthat reduces set size, e.g. sum or proportion. The group-by statement determines the set of keys by which to break the results out.",
            "nullable": true
          },
          "filters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PropertyFilter"
            },
            "description": "A set of filters to use to reduce the data found in a request. Equivalent to the 'where ...' part of a Sql select statement.\r\nFor example, filter a set of values within a given range or matching a particular value.",
            "nullable": true
          },
          "sort": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderBySpec"
            },
            "description": "A (possibly empty/null) set of specifications for how to order the results.",
            "nullable": true
          },
          "reportCurrency": {
            "maxLength": 3,
            "minLength": 0,
            "type": "string",
            "description": "Three letter ISO currency string indicating what currency to report in for ReportCurrency denominated queries.\r\nIf not present, then the currency of the relevant portfolio will be used in its place.",
            "nullable": true
          },
          "equipWithSubtotals": {
            "type": "boolean",
            "description": "Flag directing the Valuation call to populate the results with subtotals of aggregates."
          },
          "portfolioEntityIds": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PortfolioEntityId"
            },
            "description": "The set of portfolio or portfolio group identifier(s) that is to be valued."
          },
          "valuationSchedule": {
            "$ref": "#/components/schemas/ValuationSchedule"
          }
        },
        "additionalProperties": false,
        "description": "Specification object for the parameters of a valuation"
      },
      "ValuationSchedule": {
        "required": [
          "effectiveAt"
        ],
        "type": "object",
        "properties": {
          "effectiveFrom": {
            "type": "string",
            "description": "If present, the EffectiveFrom and EffectiveAt dates are interpreted as a range of dates for which to perform a valuation.\r\nIn this case, valuation is calculated for the portfolio(s) for each business day in the given range.",
            "format": "dateorcutlabel",
            "nullable": true
          },
          "effectiveAt": {
            "type": "string",
            "description": "The market data time, i.e. the time to run the valuation request effective of.",
            "format": "dateorcutlabel"
          },
          "tenor": {
            "maxLength": 16,
            "minLength": 0,
            "type": "string",
            "description": "Tenor, e.g \"1D\", \"1M\" to be used in generating the date schedule when effectiveFrom and effectiveAt are both given and are not the same.",
            "nullable": true
          },
          "rollConvention": {
            "maxLength": 16,
            "minLength": 0,
            "type": "string",
            "description": "When Tenor is given and is not equal to \"1D\", there may be cases where \"date + tenor\" land on non-business days around month end.\r\nIn that case, the RollConvention, e.g. modified following \"MF\" would be applied to determine the next GBD.",
            "nullable": true
          },
          "holidayCalendars": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The holiday calendar(s) that should be used in determining the date schedule.\r\nHoliday calendar(s) are supplied by their names, for example, \"CoppClarke\". \r\nNote that when the calendars are not available (e.g. when the user has insufficient permissions), \r\na recipe setting will be used to determine whether the whole batch should then fail or whether the calendar not being available should simply be ignored.",
            "nullable": true
          },
          "valuationDateTimes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "If given, this is the exact set of dates on which to perform a valuation. This will replace/override all other specified values if given.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Specification object for the valuation schedule, how do we determine which days we wish to perform a valuation upon."
      },
      "VendorModelRule": {
        "required": [
          "instrumentType",
          "modelName",
          "supplier"
        ],
        "type": "object",
        "properties": {
          "supplier": {
            "enum": [
              "Lusid",
              "RefinitivQps",
              "RefinitivTracsWeb",
              "VolMaster",
              "IsdaCds",
              "YieldBook"
            ],
            "type": "string",
            "description": "The available values are: Lusid, RefinitivQps, RefinitivTracsWeb, VolMaster, IsdaCds, YieldBook"
          },
          "modelName": {
            "maxLength": 128,
            "minLength": 0,
            "type": "string",
            "description": "The vendor library model name"
          },
          "instrumentType": {
            "maxLength": 32,
            "minLength": 0,
            "type": "string",
            "description": "The vendor library instrument type"
          },
          "parameters": {
            "maxLength": 64,
            "minLength": 0,
            "type": "string",
            "description": "THIS FIELD IS DEPRECATED - use ModelOptions\r\nThe set of opaque model parameters, provided as a Json object, that is a string object which will internally be converted to a dictionary of string to object.\r\nNote that this is not intended as the final form of this object. It will be replaced with a more structured object as the set of parameters that are possible is\r\nbetter understood.",
            "nullable": true
          },
          "modelOptions": {
            "$ref": "#/components/schemas/ModelOptions"
          },
          "instrumentId": {
            "type": "string",
            "description": "This field should generally not be required. It indicates a specific case where there is a particular need to make a rule apply to only a single instrument\r\nspecified by an identifier on that instrument such as its LUID. One particular example would be to control the behaviour of a look-through portfolio scaling\r\nmethodology, such as where there is a mixture of indices and credit-debit portfolios where scaling on the sum of valuation would be deemed incorrectly for one\r\nset but desired in general.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A rule that identifies the set of preferences to be used for a given library, model and instrument type.\r\nThere can be many such rules, though only the first found for a given combination would be used."
      },
      "Version": {
        "required": [
          "asAtDate",
          "effectiveFrom"
        ],
        "type": "object",
        "properties": {
          "effectiveFrom": {
            "type": "string",
            "description": "The effective datetime at which this version became valid. Only applies when a single entity is being interacted with.",
            "format": "date-time"
          },
          "asAtDate": {
            "type": "string",
            "description": "The asAt datetime at which the data was committed to LUSID.",
            "format": "date-time"
          }
        },
        "additionalProperties": false,
        "description": "The version metadata."
      },
      "VersionedResourceListOfA2BDataRecord": {
        "required": [
          "values",
          "version"
        ],
        "type": "object",
        "properties": {
          "version": {
            "$ref": "#/components/schemas/Version"
          },
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/A2BDataRecord"
            },
            "description": "The resources to list."
          },
          "href": {
            "type": "string",
            "description": "The URI of the resource list.",
            "format": "uri",
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "description": "The next page of results.",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "description": "The previous page of results.",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "VersionedResourceListOfA2BMovementRecord": {
        "required": [
          "values",
          "version"
        ],
        "type": "object",
        "properties": {
          "version": {
            "$ref": "#/components/schemas/Version"
          },
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/A2BMovementRecord"
            },
            "description": "The resources to list."
          },
          "href": {
            "type": "string",
            "description": "The URI of the resource list.",
            "format": "uri",
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "description": "The next page of results.",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "description": "The previous page of results.",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "VersionedResourceListOfOutputTransaction": {
        "required": [
          "values",
          "version"
        ],
        "type": "object",
        "properties": {
          "version": {
            "$ref": "#/components/schemas/Version"
          },
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OutputTransaction"
            },
            "description": "The resources to list."
          },
          "href": {
            "type": "string",
            "description": "The URI of the resource list.",
            "format": "uri",
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "description": "The next page of results.",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "description": "The previous page of results.",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "VersionedResourceListOfPortfolioHolding": {
        "required": [
          "values",
          "version"
        ],
        "type": "object",
        "properties": {
          "version": {
            "$ref": "#/components/schemas/Version"
          },
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PortfolioHolding"
            },
            "description": "The resources to list."
          },
          "href": {
            "type": "string",
            "description": "The URI of the resource list.",
            "format": "uri",
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "description": "The next page of results.",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "description": "The previous page of results.",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "VersionedResourceListOfTransaction": {
        "required": [
          "values",
          "version"
        ],
        "type": "object",
        "properties": {
          "version": {
            "$ref": "#/components/schemas/Version"
          },
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Transaction"
            },
            "description": "The resources to list."
          },
          "href": {
            "type": "string",
            "description": "The URI of the resource list.",
            "format": "uri",
            "nullable": true
          },
          "nextPage": {
            "type": "string",
            "description": "The next page of results.",
            "nullable": true
          },
          "previousPage": {
            "type": "string",
            "description": "The previous page of results.",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "VersionSummaryDto": {
        "type": "object",
        "properties": {
          "apiVersion": {
            "type": "string",
            "nullable": true
          },
          "buildVersion": {
            "type": "string",
            "nullable": true
          },
          "excelVersion": {
            "type": "string",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            },
            "description": "Collection of links.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "WeightedInstrument": {
        "type": "object",
        "properties": {
          "quantity": {
            "type": "number",
            "description": "The quantity of the instrument that is owned.",
            "format": "double"
          },
          "holdingIdentifier": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "description": "Identifier for the instrument.\r\nFor a single, unique trade or transaction this can be thought of as equivalent to the transaction identifier, or\r\na composite of the sub-holding keys for a regular sub-holding. When there are multiple transactions sharing the same underlying instrument\r\nsuch as purchase of shares on multiple dates where tax implications are different this would not be the case.\r\n\r\nIn an inlined aggregation request if this is wanted to identify a line item, it can be specified in the set of aggregation keys given on the aggregation\r\nrequest that accompanies the set of weighted instruments.",
            "nullable": true
          },
          "instrument": {
            "$ref": "#/components/schemas/LusidInstrument"
          }
        },
        "additionalProperties": false,
        "description": "Specification for a holding or quantity of (weight for) an instrument on a given date."
      }
    },
    "securitySchemes": {
      "oauth2": {
        "type": "oauth2",
        "description": "OAuth2 Implicit Grant",
        "flows": {
          "implicit": {
            "authorizationUrl": "https://dummyurl.lusid.com/",
            "scopes": {}
          }
        }
      }
    }
  },
  "security": [
    {}
  ],
  "tags": [
    {
      "name": "Aggregation",
      "description": "Methods for accessing aggregated data"
    },
    {
      "name": "Allocations",
      "description": "Methods for interacting with Allocations. This is experimental functionality, with limited documentation presently. An Allocation represents the redistribution of market Executions against an originating Order. Allocations are treated monotemporally; any updates are effective at the as-at time of update, and its not possible to make retroactive (or forward) changes."
    },
    {
      "name": "Application Metadata",
      "description": "Methods for querying application metadata"
    },
    {
      "name": "Blocks",
      "description": "A Block represents a set of orders for the same instrument, intended to record for example a trader'saggregation of outstanding orders at a given time. Blocks are treated monotemporally; any updates are effectiveat the as-at time of update, and it's not possible to make retroactive (or forward) changes."
    },
    {
      "name": "Calendars",
      "description": ""
    },
    {
      "name": "Complex Market Data",
      "description": "Methods for the storage and retrieval of complex market data documents."
    },
    {
      "name": "Compliance",
      "description": "Methods for storage and retrieval of compliance data: rules and results."
    },
    {
      "name": "Configuration Recipe",
      "description": "Methods for the storage and retrieval of Configuration Recipe documents. Read more about these in the LUSID Knowledge Base here https://support.lusid.com/what-is-a-lusid-recipe-and-how-is-it-used."
    },
    {
      "name": "Conventions",
      "description": "Methods for the storage and retrieval of flow conventions."
    },
    {
      "name": "Corporate Action Sources",
      "description": "Methods for storage and retrieval of Corporate Action Sources"
    },
    {
      "name": "Counterparties",
      "description": "Methods for the storage and retrieval of counterparty related information such as Counterparty Agreements, Credit Support Annexes and Netting Set data."
    },
    {
      "name": "CustomEntities",
      "description": ""
    },
    {
      "name": "CustomEntityDefinitions",
      "description": ""
    },
    {
      "name": "Cut Label Definitions",
      "description": "Methods for interacting with Cut Label Definitions"
    },
    {
      "name": "Data Types",
      "description": "Methods for administering data types"
    },
    {
      "name": "Derived Transaction Portfolios",
      "description": "A derived transaction portfolio inherits all the transactions from a parent transaction portfolio (though it can also contain its own transactions), enabling different modelling strategies to be devised, among other operations. Note that a derived transaction portfolio is a type of portfolio, so endpoints in the TransactionPortfolios API and the Portfolios API can also be called. For more information, see https://support.lusid.com/knowledgebase/article/KA-01853."
    },
    {
      "name": "Entities",
      "description": "Methods for querying data about entities"
    },
    {
      "name": "Executions",
      "description": "Methods for interacting with Executions. This is experimental functionality, with limited documentation presently. An Execution represents a market's fill of a street order. Executions are treated monotemporally; any updates are effective at the as-at time of update, and its not possible to make retroactive (or forward) changes."
    },
    {
      "name": "Instrument Events",
      "description": "Methods for querying for instrument events."
    },
    {
      "name": "Instruments",
      "description": "An instrument represents a financial asset that an investor owns or has exposure to. Each transaction should be booked against an instrument stored in the LUSID instrument master. For more information, see https://support.lusid.com/knowledgebase/article/KA-01857."
    },
    {
      "name": "Legal Entities",
      "description": "Endpoints for interacting with Legal Entities."
    },
    {
      "name": "OrderGraph",
      "description": "The order graph is a way of looking at orders with the various entities relating to the order, such as blocks, orders, placements, allocations and executions in one place. It also contains some state information which can not be obtained any other way."
    },
    {
      "name": "OrderInstructions",
      "description": "Methods for handling order instructions."
    },
    {
      "name": "Orders",
      "description": "Methods for interacting with Orders. This is experimental functionality, with limited documentation presently. An Order represents an investor's instruction to a broker or similar agent to but or sell a single security. Orders are treated monotemporally; any updates are effective at the as-at time of update, and its not possible to make retroactive (or forward) changes."
    },
    {
      "name": "Packages",
      "description": "A structure used to describe the structure of an order or orders that make up a non-trivial trade."
    },
    {
      "name": "Participations",
      "description": "A Participation records an order's participation in a specific placement. Participations are treatedmonotemporally; any updates are effective at the as-at time of update, and its not possible to make retroactive(or forward) changes."
    },
    {
      "name": "Persons",
      "description": "Endpoints for interacting with Persons entities."
    },
    {
      "name": "Placements",
      "description": "Methods for interacting with Placements. This is experimental functionality, with limited documentation presently. A Placement represents a trader's placement of a street order with a specific entity in the market to buy or sell a single security. Placements are treated monotemporally; any updates are effective at the as-at time of update, and its not possible to make retroactive (or forward) changes."
    },
    {
      "name": "Portfolio Groups",
      "description": "Methods for interacting with Portfolios Groups. Read more about Portfolio Groups in the LUSID Knowledge Base here https://support.lusid.com/how-do-you-group-and-aggregate-portfolios."
    },
    {
      "name": "Portfolios",
      "description": "A portfolio is a store of economic information. There are three types: transaction, reference and derived transaction. Note that these endpoints can also be called when interacting with the respective Transaction Portfolios API,  Reference Portfolio API and Derived Transaction Portfolios API. For more information, see https://support.lusid.com/knowledgebase/article/KA-01848."
    },
    {
      "name": "Property Definitions",
      "description": "Methods for interacting with Properties. Read more about Properties in the LUSID Knowledge Base here https://support.lusid.com/what-is-a-property."
    },
    {
      "name": "Quotes",
      "description": "Methods for the storage and retrieval of Quotes. Read more about Quotes in the LUSID Knowledge Base here https://support.lusid.com/what-is-a-quote."
    },
    {
      "name": "Reconciliations",
      "description": "Endpoints for performing reconciliations"
    },
    {
      "name": "Reference Portfolio",
      "description": "A reference portfolio stores a weighted set of instruments rather than transactions, enabling entities such as indices to be represented. Note that a reference portfolio is a type of portfolio, so endpoints in the Portfolios API can also be called. For more information, see https://support.lusid.com/knowledgebase/article/KA-01852."
    },
    {
      "name": "Relation Definitions",
      "description": "Methods for interacting with Relations Definitions."
    },
    {
      "name": "Relations",
      "description": "Methods for interacting with Relations."
    },
    {
      "name": "Relationship Definitions",
      "description": "Methods for interacting with Relationship Definitions. Read more about Relationship in the LUSID Knowledge Base at https://support.lusid.com/relationships."
    },
    {
      "name": "Relationships",
      "description": "Methods for interacting with Relationships. Read more about Relationships in the LUSID Knowledge Base here https://support.lusid.com/relationships."
    },
    {
      "name": "Schemas",
      "description": "Methods for retrieval of Schemas"
    },
    {
      "name": "Scopes",
      "description": "Methods for interacting with Scopes. Read more about Scopes in the LUSID Knowledge Base here https://support.lusid.com/what-is-a-scope-in-lusid-and-how-is-it-used."
    },
    {
      "name": "Search",
      "description": "Methods providing Search capability."
    },
    {
      "name": "Sequences",
      "description": "Methods for generating and using sequences."
    },
    {
      "name": "Structured Result Data",
      "description": "The structured result store persists information that might be useful to help value a portfolio or analyse performance or risk, but that is not traded like quote data (which can be stored in the quote store). For more information, see https://support.lusid.com/knowledgebase/article/KA-01893."
    },
    {
      "name": "System Configuration",
      "description": "LUSID is a transaction-based system. Every transaction in a particular instrument should belong to a transaction type in order that it might contribute to measuring your holding (position) in that instrument. Transaction types are a fundamental building block of LUSID, and care should be exercised when changing them. For more information, see https://support.lusid.com/knowledgebase/article/KA-01872/."
    },
    {
      "name": "Transaction Configuration",
      "description": "LUSID is a transaction-based system. Every transaction in a particular instrument should belong to a transaction type in order that it might contribute to measuring your holding (position) in that instrument. Transaction types are a fundamental building block of LUSID, and care should be exercised when changing them. For more information, see https://support.lusid.com/knowledgebase/article/KA-01872/."
    },
    {
      "name": "Transaction Fees",
      "description": "Methods to retrieve applicable fees for a transaction, and manage the rules that defined them"
    },
    {
      "name": "Transaction Portfolios",
      "description": "A transaction portfolio stores transactions and calculates instrument holdings and cash balances, enabling valuation, analytic, profit & loss, risk assessment and other operations to be performed. Note that a transaction portfolio is a type of portfolio, so endpoints in the Portfolios API can also be called. For more information, see https://support.lusid.com/knowledgebase/article/KA-01851."
    },
    {
      "name": "Translation",
      "description": "Methods for translating between dialects."
    }
  ],
  "x-tagGroups": {
    "name": "API",
    "tags": [
      "Aggregation",
      "Allocations",
      "Application Metadata",
      "Blocks",
      "Calendars",
      "Complex Market Data",
      "Compliance",
      "Configuration Recipe",
      "Conventions",
      "Corporate Action Sources",
      "Counterparties",
      "CustomEntities",
      "CustomEntityDefinitions",
      "Cut Label Definitions",
      "Data Types",
      "Derived Transaction Portfolios",
      "Entities",
      "Executions",
      "Instrument Events",
      "Instruments",
      "Legal Entities",
      "OrderGraph",
      "OrderInstructions",
      "Orders",
      "Packages",
      "Participations",
      "Persons",
      "Placements",
      "Portfolio Groups",
      "Portfolios",
      "Property Definitions",
      "Quotes",
      "Reconciliations",
      "Reference Portfolio",
      "Relation Definitions",
      "Relations",
      "Relationship Definitions",
      "Relationships",
      "Schemas",
      "Scopes",
      "Search",
      "Sequences",
      "Structured Result Data",
      "System Configuration",
      "Transaction Configuration",
      "Transaction Fees",
      "Transaction Portfolios",
      "Translation"
    ]
  }
}
