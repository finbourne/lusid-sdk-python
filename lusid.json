{
  "swagger": "2.0",
  "info": {
    "version": "0.10.221",
    "title": "LUSID API",
    "description": "# Introduction\n\nThis page documents the [LUSID APIs](https://api.lusid.com/swagger), which allows authorised clients to query and update their data within the LUSID platform.\n\nSDKs to interact with the LUSID APIs are available in the following languages :\n\n* [C#](https://github.com/finbourne/lusid-sdk-csharp)\n* [Java](https://github.com/finbourne/lusid-sdk-java)\n* [JavaScript](https://github.com/finbourne/lusid-sdk-js)\n* [Python](https://github.com/finbourne/lusid-sdk-python)\n\n# Data Model\n\nThe LUSID API has a relatively lightweight but extremely powerful data model.   One of the goals of LUSID was not to enforce on clients a single rigid data model but rather to provide a flexible foundation onto which clients can streamline their data.   One of the primary tools to extend the data model is through using properties.  Properties can be associated with amongst others: -\n* Transactions\n* Instruments\n* Portfolios \n\nThe LUSID data model is exposed through the LUSID APIs.  The APIs provide access to both business objects and the meta data used to configure the systems behaviours.   The key business entities are: -\n* **Portfolios**\nA portfolio is the primary container for transactions and holdings. \n* **Derived Portfolios**\nDerived portfolios allow portfolios to be created based on other portfolios, by overriding or overlaying specific items\n* **Holdings**\nA holding is a position account for a instrument within a portfolio.  Holdings can only be adjusted via transactions.\n* **Transactions**\nA Transaction is a source of transactions used to manipulate holdings. \n* **Corporate Actions**\nA corporate action is a market event which occurs to a instrument, for example a stock split\n* **Instruments** \nA instrument represents a currency, tradable instrument or OTC contract that is attached to a transaction and a holding.\n* **Properties**\nSeveral entities allow additional user defined properties to be associated with them.   For example, a Portfolio manager may be associated with a portfolio\n\nMeta data includes: -\n* **Transaction Types**\nTransactions are booked with a specific transaction type.  The types are client defined and are used to map the Transaction to a series of movements which update the portfolio holdings. \n* **Properties Types**\nTypes of user defined properties used within the system.\n\nThis section describes the data model that LUSID exposes via the APIs.\n\n## Scope\n\nAll data in LUSID is segregated at the client level.  Entities in LUSID are identifiable by a unique code.  Every entity lives within a logical data partition known as a Scope.  Scope is an identity namespace allowing two entities with the same unique code to co-exist within individual address spaces.\n\nFor example, prices for equities from different vendors may be uploaded into different scopes such as `client/vendor1` and `client/vendor2`.  A portfolio may then be valued using either of the price sources by referencing the appropriate scope.\n\nLUSID Clients cannot access scopes of other clients.\n\n## Schema\n\nA detailed description of the entities used by the API and parameters for endpoints which take a JSON document can be retrieved via the `schema` endpoint.\n\n## Instruments\n\nLUSID has its own built-in instrument master which you can use to master your own instrument universe.\n\nEvery instrument must be created with one or more unique market identifiers, such as [FIGI](https://openfigi.com/). For any non-listed instruments (eg OTCs), you can upload an instrument against a custom ID of your choosing.\n\nIn addition, LUSID will allocate each instrument a unique 'LUSID instrument identifier'. The LUSID instrument identifier is what is used when uploading transactions, holdings, prices, etc. The API exposes an `instrument/lookup` endpoint which can be used to lookup these LUSID identifiers using their market identifiers.\n\nCash can be referenced using the ISO currency code prefixed with \"`CCY_`\" e.g. `CCY_GBP`\n\n## Instrument Prices (Analytics)\n\nInstrument prices are stored in LUSID's Analytics Store\n\n| Field|Type|Description |\n| ---|---|--- |\n| InstrumentUid|string|Unique instrument identifier |\n| Value|decimal|Value of the analytic, eg price |\n| Denomination|string|Underlying unit of the analytic, eg currency, EPS etc. |\n\n\n## Instrument Data\n\nInstrument data can be uploaded to the system using the [Instrument Properties](#tag/InstrumentProperties) endpoint.\n\n| Field|Type|Description |\n| ---|---|--- |\n\n\n## Portfolios\n\nPortfolios are the top-level entity containers within LUSID, containing transactions, corporate actions and holdings.    The transactions build up the portfolio holdings on which valuations, analytics profit & loss and risk can be calculated.    \nProperties can be associated with Portfolios to add in additional model data.  Portfolio properties can be changed over time as well.  For example, to allow a Portfolio Manager to be linked with a Portfolio.\n\nAdditionally, portfolios can be securitised and held by other portfolios, allowing LUSID to perform \"drill-through\" into underlying fund holdings\n\n### Reference Portfolios\nReference portfolios are portfolios that contain only weights, as opposed to transactions, and are designed to represent entities such as indices.\n\n### Derived Portfolios\n\nLUSID also allows for a portfolio to be composed of another portfolio via derived portfolios.  A derived portfolio can contain its own transactions and also inherits any transactions from its parent portfolio.  Any changes made to the parent portfolio are automatically reflected in derived portfolio.\n\nDerived portfolios in conjunction with scopes are a powerful construct.  For example, to do pre-trade what-if analysis, a derived portfolio could be created a new namespace linked to the underlying live (parent) portfolio.  Analysis can then be undertaken on the derived portfolio without affecting the live portfolio.\n\n### Portfolio Groups\nPortfolio groups allow the construction of a hierarchy from portfolios and groups.  Portfolio operations on the group are executed on an aggregated set of portfolios in the hierarchy. \n\nFor example:\n \n* Global Portfolios _(group)_\n  * APAC _(group)_\n    * Hong Kong _(portfolio)_\n    * Japan _(portfolio)_\n  * Europe _(group)_\n    * France _(portfolio)_\n    * Germany _(portfolio)_\n  * UK _(portfolio)_\n \nIn this example **Global Portfolios** is a group that consists of an aggregate of **Hong Kong**, **Japan**, **France**, **Germany** and **UK** portfolios.\n\n### Movements Engine\nThe Movements engine sits on top of the immutable event store and is used to manage the relationship between input trading actions and their associated portfolio holdings.   \n\nThe movements engine reads in the following entity types:-\n* Posting Transactions\n* Applying Corporate Actions \n* Holding Adjustments\n\nThese are converted to one or more movements and used by the movements engine to calculate holdings.  At the same time it also calculates running balances, and realised P&L.  The outputs from the movements engine are holdings and transactions.\n\n## Transactions\n\nA transaction represents an economic activity against a Portfolio.\n\nTransactions are processed according to a configuration. This will tell the LUSID engine how to interpret the transaction and correctly update the holdings. LUSID comes with a set of transaction types you can use out of the box, or you can configure your own set(s) of transactions.\n\nFor more details see the [LUSID Getting Started Guide for transaction configuration.](https://support.finbourne.com/hc/en-us/articles/360016737511-Configuring-Transaction-Types)\n\n| Field|Type|Description |\n| ---|---|--- |\n| TransactionId|string|Unique transaction identifier |\n| Type|string|LUSID transaction type code - Buy, Sell, StockIn, StockOut, etc |\n| InstrumentIdentifiers|map|Unique instrument identifiers |\n| InstrumentUid|string|LUSID's internal unique instrument identifier, resolved from the instrument identifiers |\n| TransactionDate|datetime|Transaction date |\n| SettlementDate|datetime|Settlement date |\n| Units|decimal|Quantity of trade in units of the instrument |\n| TransactionPrice|tradeprice|Execution price for the transaction |\n| TotalConsideration|currencyandamount|Total value of the transaction in settlement currency |\n| ExchangeRate|decimal|Rate between transaction and settlement currency |\n| TransactionCurrency|currency|Transaction currency |\n| CounterpartyId|string|Counterparty identifier |\n| Source|string|Where this transaction came from |\n| NettingSet|string|  |\n\n\nFrom these fields, the following values can be calculated\n * **Transaction value in Transaction currency**: TotalConsideration / ExchangeRate\n * **Transaction value in Portfolio currency**: Transaction value in Transaction currency * TradeToPortfolioRate\n\n### Example Transactions\n\n#### A Common Purchase Example\nThree example transactions are shown in the table below. \n\nThey represent a purchase of USD denominated IBM shares within a Sterling denominated portfolio.\n\n * The first two transactions are for separate buy and fx trades\n   * Buying 500 IBM shares for $71,480.00\n   * A foreign exchange conversion to fund the IBM purchase. (Buy $71,480.00 for &#163;54,846.60)\n * The third transaction is an alternate version of the above trades. Buying 500 IBM shares and settling directly in Sterling.\n\n| Column |  Buy Trade | Fx Trade | Buy Trade with foreign Settlement |\n| ----- | ----- | ----- | ----- |\n| TransactionId | FBN00001 | FBN00002 | FBN00003 |\n| Type | Buy | FxBuy | Buy |\n| InstrumentIdentifiers | { \"figi\", \"BBG000BLNNH6\" } | { \"CCY\", \"CCY_USD\" } | { \"figi\", \"BBG000BLNNH6\" } |\n| TransactionDate | 2018-08-02 | 2018-08-02 | 2018-08-02 |\n| SettlementDate | 2018-08-06 | 2018-08-06 | 2018-08-06 |\n| Units | 500 | 71480 | 500 |\n| TransactionPrice | 142.96 | 1 | 142.96 |\n| TradeCurrency | USD | USD | USD |\n| ExchangeRate | 1 | 0.7673 | 0.7673 |\n| TotalConsideration.Amount | 71480.00 | 54846.60 | 54846.60 |\n| TotalConsideration.Currency | USD | GBP | GBP |\n| Trade/default/TradeToPortfolioRate&ast; | 0.7673 | 0.7673 | 0.7673 |\n\n[&ast; This is a property field]\n\n#### A Forward FX Example\n\nLUSID has a flexible transaction modelling system, and there are a number of different ways of modelling forward fx trades.\n\nThe default LUSID transaction types are FwdFxBuy and FwdFxSell. Other types and behaviours can be configured as required.\n\nUsing these transaction types, the holdings query will report two forward positions. One in each currency. \n\nSince an FX trade is an exchange of one currency for another, the following two 6 month forward transactions are equivalent:\n\n| Column |  Forward 'Sell' Trade | Forward 'Buy' Trade |\n| ----- | ----- | ----- |\n| TransactionId | FBN00004 | FBN00005 |\n| Type | FwdFxSell | FwdFxBuy |\n| InstrumentIdentifiers | { \"CCY\", \"CCY_GBP\" } | { \"CCY\", \"CCY_USD\" } |\n| TransactionDate | 2018-08-02 | 2018-08-02 |\n| SettlementDate | 2019-02-06 | 2019-02-06 |\n| Units | 10000.00 | 13142.00 |\n| TransactionPrice |1 | 1 |\n| TradeCurrency | GBP | USD |\n| ExchangeRate | 1.3142 | 0.760919 |\n| TotalConsideration.Amount | 13142.00 | 10000.00 |\n| TotalConsideration.Currency | USD | GBP |\n| Trade/default/TradeToPortfolioRate | 1.0 | 0.760919 |\n\n## Holdings\n\nA holding represents a position in a instrument or cash on a given date.\n\n| Field|Type|Description |\n| ---|---|--- |\n| InstrumentUid|string|Unique instrument identifier |\n| HoldingType|string|Type of holding, eg Position, Balance, CashCommitment, Receivable, ForwardFX |\n| Units|decimal|Quantity of holding |\n| SettledUnits|decimal|Settled quantity of holding |\n| Cost|currencyandamount|Book cost of holding in transaction currency |\n| CostPortfolioCcy|currencyandamount|Book cost of holding in portfolio currency |\n| Transaction|Transaction|If this is commitment-type holding, the transaction behind it |\n\n\n## Corporate Actions\n\nCorporate actions are represented within LUSID in terms of a set of instrument-specific 'transitions'.  These transitions are used to specify the participants of the corporate action, and the effect that the corporate action will have on holdings in those participants.\n\n### Corporate Action\n\n| Field|Type|Description |\n| ---|---|--- |\n| CorporateActionCode|code|The unique identifier of this corporate action |\n| AnnouncementDate|datetime|The announcement date of the corporate action |\n| ExDate|datetime|The ex date of the corporate action |\n| RecordDate|datetime|The record date of the corporate action |\n| PaymentDate|datetime|The payment date of the corporate action |\n| Transitions|list|The transitions that result from this corporate action |\n\n\n### Transition\n\n| Field|Type|Description |\n| ---|---|--- |\n| InputTransition|transition|Indicating the basis of the corporate action - which security and how many units |\n| OutputTransitions|list|What will be generated relative to the input transition |\n\n\n### Example Corporate Action Transitions\n\n#### A Dividend Action Transition\n\nIn this example, for each share of IBM, 0.20 units (or 20 pence) of GBP are generated.\n\n| Column |  Input Transition | Output Transition |\n| ----- | ----- | ----- |\n| Instrument Identifiers | { \"figi\" : \"BBG000BLNNH6\" } | { \"ccy\" : \"CCY_GBP\" } |\n| Units Factor | 1 | 0.20 |\n| Cost Factor | 1 | 0 |\n\n#### A Split Action Transition\n\nIn this example, for each share of IBM, we end up with 2 units (2 shares) of IBM, with total value unchanged.\n\n| Column |  Input Transition | Output Transition |\n| ----- | ----- | ----- |\n| Instrument Identifiers | { \"figi\" : \"BBG000BLNNH6\" } | { \"figi\" : \"BBG000BLNNH6\" } |\n| Units Factor | 1 | 2 |\n| Cost Factor | 1 | 1 |\n\n#### A Spinoff Action Transition\n\nIn this example, for each share of IBM, we end up with 1 unit (1 share) of IBM and 3 units (3 shares) of Celestica, with 85% of the value remaining on the IBM share, and 5% in each Celestica share (15% total).\n\n| Column |  Input Transition | Output Transition 1 | Output Transition 2 |\n| ----- | ----- | ----- | ----- |\n| Instrument Identifiers | { \"figi\" : \"BBG000BLNNH6\" } | { \"figi\" : \"BBG000BLNNH6\" } | { \"figi\" : \"BBG000HBGRF3\" } |\n| Units Factor | 1 | 1 | 3 |\n| Cost Factor | 1 | 0.85 | 0.15 |\n\n## Property\n\nProperties are key-value pairs that can be applied to any entity within a domain (where a domain is `trade`, `portfolio`, `security` etc).  Properties must be defined before use with a `PropertyDefinition` and can then subsequently be added to entities.\n\n# Schemas\n\nThe following headers are returned on all responses from LUSID\n\n| Name | Purpose |\n| --- | --- |\n| lusid-meta-duration | Duration of the request |\n| lusid-meta-success | Whether or not LUSID considered the request to be successful |\n| lusid-meta-requestId | The unique identifier for the request |\n| lusid-schema-url | Url of the schema for the data being returned |\n| lusid-property-schema-url | Url of the schema for any properties |\n\n\n# Error Codes\n\n| Code|Name|Description |\n| ---|---|--- |\n| <a name=\"102\">102</a>|VersionNotFound|  |\n| <a name=\"104\">104</a>|InstrumentNotFound|  |\n| <a name=\"105\">105</a>|PropertyNotFound|  |\n| <a name=\"106\">106</a>|PortfolioRecursionDepth|  |\n| <a name=\"108\">108</a>|GroupNotFound|  |\n| <a name=\"109\">109</a>|PortfolioNotFound|  |\n| <a name=\"110\">110</a>|PropertySchemaNotFound|  |\n| <a name=\"111\">111</a>|PortfolioAncestryNotFound|  |\n| <a name=\"112\">112</a>|PortfolioWithIdAlreadyExists|  |\n| <a name=\"113\">113</a>|OrphanedPortfolio|  |\n| <a name=\"119\">119</a>|MissingBaseClaims|  |\n| <a name=\"121\">121</a>|PropertyNotDefined|  |\n| <a name=\"122\">122</a>|CannotDeleteSystemProperty|  |\n| <a name=\"123\">123</a>|CannotModifyImmutablePropertyField|  |\n| <a name=\"124\">124</a>|PropertyAlreadyExists|  |\n| <a name=\"125\">125</a>|InvalidPropertyLifeTime|  |\n| <a name=\"127\">127</a>|CannotModifyDefaultDataType|  |\n| <a name=\"128\">128</a>|GroupAlreadyExists|  |\n| <a name=\"129\">129</a>|NoSuchDataType|  |\n| <a name=\"132\">132</a>|ValidationError|  |\n| <a name=\"133\">133</a>|LoopDetectedInGroupHierarchy|  |\n| <a name=\"135\">135</a>|SubGroupAlreadyExists|  |\n| <a name=\"138\">138</a>|PriceSourceNotFound|  |\n| <a name=\"139\">139</a>|AnalyticStoreNotFound|  |\n| <a name=\"141\">141</a>|AnalyticStoreAlreadyExists|  |\n| <a name=\"143\">143</a>|ClientInstrumentAlreadyExists|  |\n| <a name=\"144\">144</a>|DuplicateInParameterSet|  |\n| <a name=\"147\">147</a>|ResultsNotFound|  |\n| <a name=\"148\">148</a>|OrderFieldNotInResultSet|  |\n| <a name=\"149\">149</a>|OperationFailed|  |\n| <a name=\"150\">150</a>|ElasticSearchError|  |\n| <a name=\"151\">151</a>|InvalidParameterValue|  |\n| <a name=\"153\">153</a>|CommandProcessingFailure|  |\n| <a name=\"154\">154</a>|EntityStateConstructionFailure|  |\n| <a name=\"155\">155</a>|EntityTimelineDoesNotExist|  |\n| <a name=\"156\">156</a>|EventPublishFailure|  |\n| <a name=\"157\">157</a>|InvalidRequestFailure|  |\n| <a name=\"158\">158</a>|EventPublishUnknown|  |\n| <a name=\"159\">159</a>|EventQueryFailure|  |\n| <a name=\"160\">160</a>|BlobDidNotExistFailure|  |\n| <a name=\"162\">162</a>|SubSystemRequestFailure|  |\n| <a name=\"163\">163</a>|SubSystemConfigurationFailure|  |\n| <a name=\"165\">165</a>|FailedToDelete|  |\n| <a name=\"166\">166</a>|UpsertClientInstrumentFailure|  |\n| <a name=\"167\">167</a>|IllegalAsAtInterval|  |\n| <a name=\"168\">168</a>|IllegalBitemporalQuery|  |\n| <a name=\"169\">169</a>|InvalidAlternateId|  |\n| <a name=\"170\">170</a>|CannotAddSourcePortfolioPropertyExplicitly|  |\n| <a name=\"171\">171</a>|EntityAlreadyExistsInGroup|  |\n| <a name=\"173\">173</a>|EntityWithIdAlreadyExists|  |\n| <a name=\"174\">174</a>|DerivedPortfolioDetailsDoNotExist|  |\n| <a name=\"176\">176</a>|PortfolioWithNameAlreadyExists|  |\n| <a name=\"177\">177</a>|InvalidTransactions|  |\n| <a name=\"178\">178</a>|ReferencePortfolioNotFound|  |\n| <a name=\"179\">179</a>|DuplicateIdFailure|  |\n| <a name=\"180\">180</a>|CommandRetrievalFailure|  |\n| <a name=\"181\">181</a>|DataFilterApplicationFailure|  |\n| <a name=\"182\">182</a>|SearchFailed|  |\n| <a name=\"183\">183</a>|MovementsEngineConfigurationKeyFailure|  |\n| <a name=\"184\">184</a>|FxRateSourceNotFound|  |\n| <a name=\"185\">185</a>|AccrualSourceNotFound|  |\n| <a name=\"186\">186</a>|AccessDenied|  |\n| <a name=\"187\">187</a>|InvalidIdentityToken|  |\n| <a name=\"188\">188</a>|InvalidRequestHeaders|  |\n| <a name=\"189\">189</a>|PriceNotFound|  |\n| <a name=\"190\">190</a>|InvalidSubHoldingKeysProvided|  |\n| <a name=\"191\">191</a>|DuplicateSubHoldingKeysProvided|  |\n| <a name=\"192\">192</a>|CutDefinitionNotFound|  |\n| <a name=\"193\">193</a>|CutDefinitionInvalid|  |\n| <a name=\"200\">200</a>|InvalidUnitForDataType|  |\n| <a name=\"201\">201</a>|InvalidTypeForDataType|  |\n| <a name=\"202\">202</a>|InvalidValueForDataType|  |\n| <a name=\"203\">203</a>|UnitNotDefinedForDataType|  |\n| <a name=\"204\">204</a>|UnitsNotSupportedOnDataType|  |\n| <a name=\"205\">205</a>|CannotSpecifyUnitsOnDataType|  |\n| <a name=\"206\">206</a>|UnitSchemaInconsistentWithDataType|  |\n| <a name=\"207\">207</a>|UnitDefinitionNotSpecified|  |\n| <a name=\"208\">208</a>|DuplicateUnitDefinitionsSpecified|  |\n| <a name=\"209\">209</a>|InvalidUnitsDefinition|  |\n| <a name=\"210\">210</a>|InvalidInstrumentIdentifierUnit|  |\n| <a name=\"211\">211</a>|HoldingsAdjustmentDoesNotExist|  |\n| <a name=\"212\">212</a>|CouldNotBuildExcelUrl|  |\n| <a name=\"213\">213</a>|CouldNotGetExcelVersion|  |\n| <a name=\"214\">214</a>|InstrumentByCodeNotFound|  |\n| <a name=\"215\">215</a>|EntitySchemaDoesNotExist|  |\n| <a name=\"216\">216</a>|FeatureNotSupportedOnPortfolioType|  |\n| <a name=\"217\">217</a>|QuoteNotFoundFailure|  |\n| <a name=\"219\">219</a>|InvalidInstrumentDefinition|  |\n| <a name=\"221\">221</a>|InstrumentUpsertFailure|  |\n| <a name=\"222\">222</a>|ReferencePortfolioRequestNotSupported|  |\n| <a name=\"223\">223</a>|TransactionPortfolioRequestNotSupported|  |\n| <a name=\"224\">224</a>|InvalidPropertyValueAssignment|  |\n| <a name=\"230\">230</a>|TransactionTypeNotFound|  |\n| <a name=\"231\">231</a>|TransactionTypeDuplication|  |\n| <a name=\"232\">232</a>|PortfolioDoesNotExistAtGivenDate|  |\n| <a name=\"233\">233</a>|QueryParserFailure|  |\n| <a name=\"234\">234</a>|DuplicateConstituentFailure|  |\n| <a name=\"235\">235</a>|UnresolvedInstrumentConstituentFailure|  |\n| <a name=\"236\">236</a>|UnresolvedInstrumentInTransitionFailure|  |\n| <a name=\"300\">300</a>|MissingRecipeFailure|  |\n| <a name=\"301\">301</a>|DependenciesFailure|  |\n| <a name=\"304\">304</a>|PortfolioPreprocessFailure|  |\n| <a name=\"310\">310</a>|ValuationEngineFailure|  |\n| <a name=\"311\">311</a>|TaskFactoryFailure|  |\n| <a name=\"312\">312</a>|TaskEvaluationFailure|  |\n| <a name=\"350\">350</a>|InstrumentFailure|  |\n| <a name=\"351\">351</a>|CashFlowsFailure|  |\n| <a name=\"360\">360</a>|AggregationFailure|  |\n| <a name=\"370\">370</a>|ResultRetrievalFailure|  |\n| <a name=\"371\">371</a>|ResultProcessingFailure|  |\n| <a name=\"371\">371</a>|ResultProcessingFailure|  |\n| <a name=\"372\">372</a>|VendorResultProcessingFailure|  |\n| <a name=\"374\">374</a>|AttemptToUpsertDuplicateQuotes|  |\n| <a name=\"375\">375</a>|CorporateActionSourceDoesNotExist|  |\n| <a name=\"376\">376</a>|InstrumentIdentifierAlreadyInUse|  |\n| <a name=\"377\">377</a>|CorporateActionSourceAlreadyExists|  |\n| <a name=\"-10\">-10</a>|ServerConfigurationError|  |\n| <a name=\"-1\">-1</a>|Unknown error|  |\n",
    "termsOfService": "Not to be used without explicit authorisation from FINBOURNE",
    "contact": {
      "name": "FINBOURNE Technology",
      "url": "https://www.finbourne.com",
      "email": "info@finbourne.com"
    },
    "x-logo": {
      "url": "https://content.finbourne.com/FINBOURNE.png",
      "backgroundColor": "#415464"
    }
  },
  "paths": {
    "/api/datatypes/{scope}": {
      "get": {
        "tags": [
          "Data Types"
        ],
        "summary": "List data types",
        "description": "List all data types in a specified scope",
        "operationId": "ListDataTypes",
        "consumes": [],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The requested scope of the data types",
            "required": true,
            "type": "string"
          },
          {
            "name": "includeSystem",
            "in": "query",
            "description": "Whether to additionally include those data types in the \"system\" scope",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "Optional. Order the results by these fields. Use use the '-' sign to denote descending order e.g. -MyFieldName",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "uniqueItems": false
          },
          {
            "name": "start",
            "in": "query",
            "description": "Optional. When paginating, skip this number of results",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Optional. When paginating, limit the number of returned results to this many.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Optional. Expression to filter the result set",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ResourceListOfDataType"
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "schema": {
              "$ref": "#/definitions/LusidValidationProblemDetails"
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/LusidProblemDetails"
            }
          }
        },
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/datatypes/{scope}/{code}": {
      "get": {
        "tags": [
          "Data Types"
        ],
        "summary": "Get data type definition",
        "description": "Get the definition of a specified data type",
        "operationId": "GetDataType",
        "consumes": [],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the data type",
            "required": true,
            "type": "string"
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the data type",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DataType"
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "schema": {
              "$ref": "#/definitions/LusidValidationProblemDetails"
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/LusidProblemDetails"
            }
          }
        },
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/datatypes/{scope}/{code}/units": {
      "get": {
        "tags": [
          "Data Types"
        ],
        "summary": "Get units from data type",
        "description": "Get the definitions of the specified units associated bound to a specific data type",
        "operationId": "GetUnitsFromDataType",
        "consumes": [],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the data type",
            "required": true,
            "type": "string"
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the data type",
            "required": true,
            "type": "string"
          },
          {
            "name": "units",
            "in": "query",
            "description": "One or more unit identifiers for which the definition is being requested",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "uniqueItems": false
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Optional. Expression to filter the result set",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ResourceListOfIUnitDefinitionDto"
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "schema": {
              "$ref": "#/definitions/LusidValidationProblemDetails"
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/LusidProblemDetails"
            }
          }
        },
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/derivedtransactionportfolios/{scope}": {
      "post": {
        "tags": [
          "Derived Transaction Portfolios"
        ],
        "summary": "Create derived transaction portfolio",
        "description": "Creates a transaction portfolio that derives from an existing transaction portfolio. In a derived portfolio, parts of the portfolio can either be specific to this portfolio, or can be inherited from a \"parent\". Different parts of the portfolio (e.g. transactions or properties) are combined in different ways. The portfolio details are either overridden in entirety, or not at all. The same is true for properties. Transactions on a derived portfolio are merged with its parent portfolio's transactions. If the parent portfolio is itself a derived portfolio, transactions from that parent are also merged (and that parent's portfolio's, if it is also a derived portfolio, and so on).",
        "operationId": "CreateDerivedPortfolio",
        "consumes": [],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope into which to create the new derived portfolio",
            "required": true,
            "type": "string"
          },
          {
            "name": "portfolio",
            "in": "body",
            "description": "The root object of the new derived portfolio, containing a populated reference portfolio id and reference scope",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CreateDerivedTransactionPortfolioRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The created derived portfolio, with populated id",
            "schema": {
              "$ref": "#/definitions/Portfolio"
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "schema": {
              "$ref": "#/definitions/LusidValidationProblemDetails"
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/LusidProblemDetails"
            }
          }
        },
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/derivedtransactionportfolios/{scope}/{code}/details": {
      "delete": {
        "tags": [
          "Derived Transaction Portfolios"
        ],
        "summary": "Delete portfolio details",
        "description": "Deletes the portfolio details for the specified derived transaction portfolio",
        "operationId": "DeleteDerivedPortfolioDetails",
        "consumes": [],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the portfolio",
            "required": true,
            "type": "string"
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the portfolio",
            "required": true,
            "type": "string"
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "The effective date of the change",
            "required": false,
            "type": "string",
            "format": "dateorcutlabel"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeletedEntityResponse"
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "schema": {
              "$ref": "#/definitions/LusidValidationProblemDetails"
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/LusidProblemDetails"
            }
          }
        },
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/instruments": {
      "get": {
        "tags": [
          "Instruments"
        ],
        "summary": "Get all of the currently mastered instruments in LUSID",
        "description": "Lists all instruments that have been mastered within LUSID.",
        "operationId": "ListInstruments",
        "consumes": [],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "asAt",
            "in": "query",
            "description": "Optional. The AsAt time",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "Optional. The effective date of the query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Optional. The pagination token to continue listing instruments. This value is returned from a previous call to ListInstruments.\r\nIf this is set, then the sortBy, filter, effectiveAt, and asAt fields must not have changed. Also, if set, a start value cannot be set.",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "Optional. Order the results by these fields. Use use the '-' sign to denote descending order e.g. -MyFieldName",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "uniqueItems": false
          },
          {
            "name": "start",
            "in": "query",
            "description": "Optional. When paginating, skip this number of results",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Optional. When paginating, limit the number of returned results to this many",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Optional. Expression to filter the result set - the default filter returns only instruments in the Active state",
            "required": false,
            "type": "string",
            "default": "State eq 'Active'"
          },
          {
            "name": "instrumentPropertyKeys",
            "in": "query",
            "description": "Optional. Keys of the properties to be decorated on to the instrument",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "uniqueItems": false
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ResourceListOfInstrument"
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "schema": {
              "$ref": "#/definitions/LusidValidationProblemDetails"
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/LusidProblemDetails"
            }
          }
        },
        "x-fbn-apistatus": "EarlyAccess"
      },
      "post": {
        "tags": [
          "Instruments"
        ],
        "summary": "Upsert instruments",
        "description": "Attempt to master one or more instruments in LUSID's instrument master. Each instrument is keyed by some unique key. This key is unimportant, and serves only as a method to identify created instruments in the response.\r\n\r\nThe response will return both the collection of successfully created instruments, as well as those that were rejected and why their creation failed. They will be keyed against the key supplied in the\r\nrequest.\r\n            \r\nIt is important to always check the 'Failed' set for any unsuccessful results.",
        "operationId": "UpsertInstruments",
        "consumes": [],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "requests",
            "in": "body",
            "description": "The instrument definitions",
            "required": false,
            "schema": {
              "type": "object",
              "additionalProperties": {
                "$ref": "#/definitions/InstrumentDefinition"
              },
              "example": {
                "request_id_1": {
                  "name": "Instrument name",
                  "identifiers": {
                    "ClientInternal": {
                      "value": "some-identifier",
                      "effectiveAt": "0001-01-01T00:00:00+00:00"
                    },
                    "Figi": {
                      "value": "some-figi-code",
                      "effectiveAt": "0001-01-01T00:00:00+00:00"
                    }
                  },
                  "properties": [
                    {
                      "key": "Instrument/default/Isin",
                      "value": {
                        "labelValue": "US0378331005",
                        "effectiveFrom": "2018-06-18T09:00:00+00:00"
                      }
                    }
                  ],
                  "lookThroughPortfolioId": {
                    "scope": "MyScope",
                    "code": "portfolio-code"
                  },
                  "definition": {
                    "instrumentFormat": "some-format",
                    "content": "{\"some-key\": \"some-value\"}"
                  }
                },
                "request_id_2": {
                  "name": "Instrument name",
                  "identifiers": {
                    "ClientInternal": {
                      "value": "some-identifier-2",
                      "effectiveAt": "0001-01-01T00:00:00+00:00"
                    },
                    "Figi": {
                      "value": "some-figi-code-2",
                      "effectiveAt": "0001-01-01T00:00:00+00:00"
                    }
                  },
                  "properties": [],
                  "lookThroughPortfolioId": {
                    "scope": "MyScope",
                    "code": "portfolio-code"
                  },
                  "definition": {
                    "instrumentFormat": "some-format",
                    "content": "{\"some-key\": \"some-value\"}"
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UpsertInstrumentsResponse"
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "schema": {
              "$ref": "#/definitions/LusidValidationProblemDetails"
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/LusidProblemDetails"
            }
          }
        },
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/instruments/{identifierType}/{identifier}": {
      "get": {
        "tags": [
          "Instruments"
        ],
        "summary": "Get instrument definition",
        "description": "Get an individual instrument by the one of its unique instrument identifiers. Optionally, it is possible to decorate each instrument with specified property data.",
        "operationId": "GetInstrument",
        "consumes": [],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "identifierType",
            "in": "path",
            "description": "The type of identifier being supplied",
            "required": true,
            "type": "string"
          },
          {
            "name": "identifier",
            "in": "path",
            "description": "The identifier of the requested instrument",
            "required": true,
            "type": "string"
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "Optional. The effective date of the query",
            "required": false,
            "type": "string",
            "format": "dateorcutlabel"
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "Optional. The AsAt date of the query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "instrumentPropertyKeys",
            "in": "query",
            "description": "Optional. Keys of the properties to be decorated on to the instrument",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "uniqueItems": false
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Instrument"
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "schema": {
              "$ref": "#/definitions/LusidValidationProblemDetails"
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/LusidProblemDetails"
            }
          }
        },
        "x-fbn-apistatus": "EarlyAccess"
      },
      "post": {
        "tags": [
          "Instruments"
        ],
        "summary": "Update instrument identifier",
        "description": "Adds, updates, or removes an identifier on an instrument",
        "operationId": "UpdateInstrumentIdentifier",
        "consumes": [],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "identifierType",
            "in": "path",
            "description": "The type of identifier being supplied",
            "required": true,
            "type": "string"
          },
          {
            "name": "identifier",
            "in": "path",
            "description": "The instrument identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "request",
            "in": "body",
            "description": "The identifier to add, update, or remove",
            "required": false,
            "schema": {
              "$ref": "#/definitions/UpdateInstrumentIdentifierRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Instrument"
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "schema": {
              "$ref": "#/definitions/LusidValidationProblemDetails"
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/LusidProblemDetails"
            }
          }
        },
        "x-fbn-apistatus": "EarlyAccess"
      },
      "delete": {
        "tags": [
          "Instruments"
        ],
        "summary": "Delete instrument",
        "description": "Attempt to delete one or more \"client\" instruments.\r\n\r\nThe response will include those instruments that could not be deleted (as well as any available details).\r\n            \r\nIt is important to always check the 'Failed' set for any unsuccessful results.",
        "operationId": "DeleteInstrument",
        "consumes": [],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "identifierType",
            "in": "path",
            "description": "The type of identifier being supplied",
            "required": true,
            "type": "string"
          },
          {
            "name": "identifier",
            "in": "path",
            "description": "The instrument identifier",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeleteInstrumentResponse"
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "schema": {
              "$ref": "#/definitions/LusidValidationProblemDetails"
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/LusidProblemDetails"
            }
          }
        },
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/instruments/$get": {
      "post": {
        "tags": [
          "Instruments"
        ],
        "summary": "Get instrument definition",
        "description": "Get a collection of instruments by a set of identifiers. Optionally, it is possible to decorate each instrument with specified property data.",
        "operationId": "GetInstruments",
        "consumes": [],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "identifierType",
            "in": "query",
            "description": "The type of identifiers being supplied",
            "required": true,
            "type": "string"
          },
          {
            "name": "identifiers",
            "in": "body",
            "description": "The identifiers of the instruments to get",
            "required": true,
            "schema": {
              "uniqueItems": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "example": [
                "instrument-identifier-1",
                "instrument-identifier-2"
              ]
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "Optional. The effective date of the request",
            "required": false,
            "type": "string",
            "format": "dateorcutlabel"
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "Optional. The as at date of the request",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "instrumentPropertyKeys",
            "in": "query",
            "description": "Optional. Keys of the properties to be decorated on to the instrument",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "uniqueItems": false
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/GetInstrumentsResponse"
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "schema": {
              "$ref": "#/definitions/LusidValidationProblemDetails"
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/LusidProblemDetails"
            }
          }
        },
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/instruments/$upsertproperties": {
      "post": {
        "tags": [
          "Instruments"
        ],
        "summary": "Upsert instrument properties",
        "description": "Attempt to upsert property data for one or more instruments, properties, and effective dates.\r\n\r\nThe response will include the details of any failures that occurred during data storage.\r\n            \r\nIt is important to always check the 'Failed' collection for any unsuccessful results.",
        "operationId": "UpsertInstrumentsProperties",
        "consumes": [],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "instrumentProperties",
            "in": "body",
            "description": "The instrument property data",
            "required": false,
            "schema": {
              "uniqueItems": false,
              "type": "array",
              "items": {
                "$ref": "#/definitions/UpsertInstrumentPropertyRequest"
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UpsertInstrumentPropertiesResponse"
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "schema": {
              "$ref": "#/definitions/LusidValidationProblemDetails"
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/LusidProblemDetails"
            }
          }
        },
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/instruments/identifiers": {
      "get": {
        "tags": [
          "Instruments"
        ],
        "summary": "Get allowable instrument identifiers",
        "description": "Returns a collection of instrument identifier type descriptors. Each descriptor specifies the properties\r\nof a particular instrument identifier - its name, its cardinality (whether or not multiple instruments can\r\nshare the same identifier value), and its corresponding PropertyKey.",
        "operationId": "GetInstrumentIdentifiers",
        "consumes": [],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ResourceListOfInstrumentIdTypeDescriptor"
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/LusidProblemDetails"
            }
          }
        },
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/login/saml/{domain}": {
      "get": {
        "tags": [
          "Login"
        ],
        "summary": "Get SAML Identity Provider",
        "description": "Get the unique identifier for the SAML 2.0 Identity Provider to be used for domain.",
        "operationId": "GetSamlIdentityProviderId",
        "consumes": [],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "domain",
            "in": "path",
            "description": "The domain that the user will be logging in to",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The ID of the SAML Identity Provider to be used (may be null)",
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "schema": {
              "$ref": "#/definitions/LusidValidationProblemDetails"
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/LusidProblemDetails"
            }
          }
        },
        "x-fbn-apistatus": "Stable"
      }
    },
    "/api/metadata/access/resources": {
      "get": {
        "tags": [
          "Application Metadata"
        ],
        "summary": "Get resources available for access control",
        "description": "Get the comprehensive set of resources that are available for access control",
        "operationId": "ListAccessControlledResources",
        "consumes": [],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "description": "Optional. Expression to filter the result set",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ResourceListOfAccessControlledResource"
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "schema": {
              "$ref": "#/definitions/LusidValidationProblemDetails"
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/LusidProblemDetails"
            }
          }
        },
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/metadata/downloads/exceladdin": {
      "get": {
        "tags": [
          "Application Metadata"
        ],
        "summary": "Download Excel Addin",
        "description": "Download the LUSID Excel Addin for Microsoft Excel. Not providing a specific value will return the latest version being returned",
        "operationId": "GetExcelAddin",
        "consumes": [],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "version",
            "in": "query",
            "description": "The requested version of the Excel plugin",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/FileResponse"
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "schema": {
              "$ref": "#/definitions/LusidValidationProblemDetails"
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/LusidProblemDetails"
            }
          }
        },
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/metadata/versions": {
      "get": {
        "tags": [
          "Application Metadata"
        ],
        "summary": "Get LUSID versions",
        "description": "Get the semantic versions associated with LUSID and its ecosystem",
        "operationId": "GetLusidVersions",
        "consumes": [],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Collection of versions associated with LUSID",
            "schema": {
              "$ref": "#/definitions/VersionSummaryDto"
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/LusidProblemDetails"
            }
          }
        },
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/portfoliogroups/{scope}": {
      "get": {
        "tags": [
          "Portfolio Groups"
        ],
        "summary": "List groups in scope",
        "description": "Lists all portfolio groups in a specified scope",
        "operationId": "ListPortfolioGroups",
        "consumes": [],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope",
            "required": true,
            "type": "string"
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "Optional. The AsAt date of the data",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "Optional. Order the results by these fields. Use use the '-' sign to denote descending order e.g. -MyFieldName",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "uniqueItems": false
          },
          {
            "name": "start",
            "in": "query",
            "description": "Optional. When paginating, skip this number of results",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Optional. When paginating, limit the number of returned results to this many.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Optional. Expression to filter the result set",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ResourceListOfPortfolioGroup"
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "schema": {
              "$ref": "#/definitions/LusidValidationProblemDetails"
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/LusidProblemDetails"
            }
          }
        },
        "x-fbn-apistatus": "EarlyAccess"
      },
      "post": {
        "tags": [
          "Portfolio Groups"
        ],
        "summary": "Create group",
        "description": "Create a new portfolio group.",
        "operationId": "CreatePortfolioGroup",
        "consumes": [],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope into which the portfolio group will be created",
            "required": true,
            "type": "string"
          },
          {
            "name": "request",
            "in": "body",
            "description": "The definition of the new portfolio group",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CreatePortfolioGroupRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/PortfolioGroup"
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "schema": {
              "$ref": "#/definitions/LusidValidationProblemDetails"
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/LusidProblemDetails"
            }
          }
        },
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/portfoliogroups/{scope}/{code}": {
      "get": {
        "tags": [
          "Portfolio Groups"
        ],
        "summary": "Get portfolio group",
        "description": "Get the definition of the specified portfolio group",
        "operationId": "GetPortfolioGroup",
        "consumes": [],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the portfolio group",
            "required": true,
            "type": "string"
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the portfolio group",
            "required": true,
            "type": "string"
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "Optional. The AsAt date of the data",
            "required": false,
            "type": "string",
            "format": "date-time"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/PortfolioGroup"
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "schema": {
              "$ref": "#/definitions/LusidValidationProblemDetails"
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/LusidProblemDetails"
            }
          }
        },
        "x-fbn-apistatus": "EarlyAccess"
      },
      "put": {
        "tags": [
          "Portfolio Groups"
        ],
        "summary": "Update group",
        "description": "Update the definition of the specified existing portfolio group.\r\n\r\nNot all elements within a portfolio group definition are modifiable after creation.",
        "operationId": "UpdatePortfolioGroup",
        "consumes": [],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the portfolio group",
            "required": true,
            "type": "string"
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the portfolio group",
            "required": true,
            "type": "string"
          },
          {
            "name": "request",
            "in": "body",
            "description": "The updated definition of the portfolio group",
            "required": false,
            "schema": {
              "$ref": "#/definitions/UpdatePortfolioGroupRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/PortfolioGroup"
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "schema": {
              "$ref": "#/definitions/LusidValidationProblemDetails"
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/LusidProblemDetails"
            }
          }
        },
        "x-fbn-apistatus": "EarlyAccess"
      },
      "delete": {
        "tags": [
          "Portfolio Groups"
        ],
        "summary": "Delete group",
        "description": "Deletes the definition of the specified portfolio group",
        "operationId": "DeletePortfolioGroup",
        "consumes": [],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the portfolio group",
            "required": true,
            "type": "string"
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the portfolio group",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeletedEntityResponse"
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "schema": {
              "$ref": "#/definitions/LusidValidationProblemDetails"
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/LusidProblemDetails"
            }
          }
        },
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/portfoliogroups/{scope}/{code}/commands": {
      "get": {
        "tags": [
          "Portfolio Groups"
        ],
        "summary": "Get commands",
        "description": "Gets all commands that modified a specific portfolio group",
        "operationId": "GetPortfolioGroupCommands",
        "consumes": [],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the portfolio group",
            "required": true,
            "type": "string"
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the portfolio group",
            "required": true,
            "type": "string"
          },
          {
            "name": "fromAsAt",
            "in": "query",
            "description": "Optional. Filters commands by those that were processed at or after this date and time",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "toAsAt",
            "in": "query",
            "description": "Optional. Filters commands by those that were processed at or before this date and time",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "Optional. Order the results by these fields. Use use the '-' sign to denote descending order e.g. -MyFieldName",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "uniqueItems": false
          },
          {
            "name": "start",
            "in": "query",
            "description": "Optional. When paginating, skip this number of results",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Optional. When paginating, limit the number of returned results to this many.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Optional. Expression to filter the result set",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The commands that modified the specified portfolio group.",
            "schema": {
              "$ref": "#/definitions/ResourceListOfProcessedCommand"
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "schema": {
              "$ref": "#/definitions/LusidValidationProblemDetails"
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/LusidProblemDetails"
            }
          }
        },
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/portfoliogroups/{scope}/{code}/expansion": {
      "get": {
        "tags": [
          "Portfolio Groups"
        ],
        "summary": "Get a full expansion of a portfolio group",
        "description": "Lists all portfolios in a group, and all sub groups. Portfolios are decorated with their properties.",
        "operationId": "GetPortfolioGroupExpansion",
        "consumes": [],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the portfolio",
            "required": true,
            "type": "string"
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the portfolio",
            "required": true,
            "type": "string"
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "Optional. The effective date of the data",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "Optional. The AsAt date of the data",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "propertyFilter",
            "in": "query",
            "description": "Optional. The restricted set of properties that should be returned",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "uniqueItems": false
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ExpandedGroup"
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "schema": {
              "$ref": "#/definitions/LusidValidationProblemDetails"
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/LusidProblemDetails"
            }
          }
        },
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/portfoliogroups/{scope}/{code}/portfolios": {
      "post": {
        "tags": [
          "Portfolio Groups"
        ],
        "summary": "Add portfolio to group",
        "description": "Adds a portfolio to a previously defined portfolio group",
        "operationId": "AddPortfolioToGroup",
        "consumes": [],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the portfolio group to which a portfolio is being added",
            "required": true,
            "type": "string"
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the portfolio group to which a portfolio is being added",
            "required": true,
            "type": "string"
          },
          {
            "name": "portfolioId",
            "in": "body",
            "description": "The id of the portfolio",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ResourceId"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/PortfolioGroup"
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "schema": {
              "$ref": "#/definitions/LusidValidationProblemDetails"
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/LusidProblemDetails"
            }
          }
        },
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/portfoliogroups/{scope}/{code}/portfolios/{portfolioScope}/{portfolioCode}": {
      "delete": {
        "tags": [
          "Portfolio Groups"
        ],
        "summary": "Remove portfolio from group",
        "description": "Removes a portfolio from a portfolio group",
        "operationId": "DeletePortfolioFromGroup",
        "consumes": [],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the portfolio group",
            "required": true,
            "type": "string"
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the portfolio group",
            "required": true,
            "type": "string"
          },
          {
            "name": "portfolioScope",
            "in": "path",
            "description": "The scope of the portfolio being removed",
            "required": true,
            "type": "string"
          },
          {
            "name": "portfolioCode",
            "in": "path",
            "description": "The code of the portfolio being removed",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/PortfolioGroup"
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "schema": {
              "$ref": "#/definitions/LusidValidationProblemDetails"
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/LusidProblemDetails"
            }
          }
        },
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/portfoliogroups/{scope}/{code}/subgroups": {
      "post": {
        "tags": [
          "Portfolio Groups"
        ],
        "summary": "Add group to group",
        "description": "Adds a portfolio group, as a sub-group, to an existing portfolio group",
        "operationId": "AddSubGroupToGroup",
        "consumes": [],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the portfolio group to which a sub-group is being added",
            "required": true,
            "type": "string"
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the portfolio group to which a sub-group is being added",
            "required": true,
            "type": "string"
          },
          {
            "name": "portfolioGroupId",
            "in": "body",
            "description": "The id of the portfolio group being added as a sub-group",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ResourceId"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/PortfolioGroup"
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "schema": {
              "$ref": "#/definitions/LusidValidationProblemDetails"
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/LusidProblemDetails"
            }
          }
        },
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/portfoliogroups/{scope}/{code}/subgroups/{subgroupScope}/{subgroupCode}": {
      "delete": {
        "tags": [
          "Portfolio Groups"
        ],
        "summary": "Remove group from group",
        "description": "Remove a portfolio group (sub-group) from a parent portfolio group",
        "operationId": "DeleteSubGroupFromGroup",
        "consumes": [],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the portfolio group",
            "required": true,
            "type": "string"
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the portfolio group",
            "required": true,
            "type": "string"
          },
          {
            "name": "subgroupScope",
            "in": "path",
            "description": "The scope of the sub-group being removed",
            "required": true,
            "type": "string"
          },
          {
            "name": "subgroupCode",
            "in": "path",
            "description": "The code of the sub-group being removed",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/PortfolioGroup"
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "schema": {
              "$ref": "#/definitions/LusidValidationProblemDetails"
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/LusidProblemDetails"
            }
          }
        },
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/portfolios": {
      "get": {
        "tags": [
          "Portfolios"
        ],
        "summary": "List portfolios",
        "description": "List all portfolios matching the specified criteria.\r\n            \r\nExample query syntax for the query parameter:\r\n            \r\n- To see which portfolios have holdings in the specified instruments:\r\n            \r\n    instrument.identifiers in (('LusidInstrumentId', 'LUID_PPA8HI6M'), ('Figi', 'BBG000BLNNH6'))\r\n            \r\n* Note that copy/pasting above examples results in incorrect single quote character",
        "operationId": "ListPortfolios",
        "consumes": [],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "Optional. The effective date of the data",
            "required": false,
            "type": "string",
            "format": "dateorcutlabel"
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "Optional. The AsAt date of the data",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Optional. The pagination token to continue listing portfolios. This value is returned from a previous call to ListPortfolios.\r\nIf this is set, then the sortBy, filter, query, effectiveAt, and asAt fields must not have changed. Also, if set, a start\r\nvalue cannot be set.",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "Optional. Order the results by these fields. Use use the '-' sign to denote descending order e.g. -MyFieldName",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "uniqueItems": false
          },
          {
            "name": "start",
            "in": "query",
            "description": "Optional. When paginating, skip this number of results",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Optional. When paginating, limit the number of returned results to this many.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Optional. Expression to filter the result set",
            "required": false,
            "type": "string"
          },
          {
            "name": "query",
            "in": "query",
            "description": "Optional. Expression specifying the criteria that the returned portfolios must meet",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of portfolios",
            "schema": {
              "$ref": "#/definitions/ResourceListOfPortfolio"
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "schema": {
              "$ref": "#/definitions/LusidValidationProblemDetails"
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/LusidProblemDetails"
            }
          }
        },
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/portfolios/{scope}": {
      "get": {
        "tags": [
          "Portfolios"
        ],
        "summary": "List portfolios for scope",
        "description": "List all the portfolios in the specified scope",
        "operationId": "ListPortfoliosForScope",
        "consumes": [],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope",
            "required": true,
            "type": "string"
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "Optional. The effective date of the data",
            "required": false,
            "type": "string",
            "format": "dateorcutlabel"
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "Optional. The AsAt date of the data",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "Optional. Order the results by these fields. Use use the '-' sign to denote descending order e.g. -MyFieldName",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "uniqueItems": false
          },
          {
            "name": "start",
            "in": "query",
            "description": "Optional. When paginating, skip this number of results",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Optional. When paginating, limit the number of returned results to this many.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Optional. Expression to filter the result set",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of portfolios in the requested scope",
            "schema": {
              "$ref": "#/definitions/ResourceListOfPortfolio"
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "schema": {
              "$ref": "#/definitions/LusidValidationProblemDetails"
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/LusidProblemDetails"
            }
          }
        },
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/portfolios/{scope}/{code}": {
      "get": {
        "tags": [
          "Portfolios"
        ],
        "summary": "Get portfolio definition",
        "description": "Retrieves the basic set of information about a portfolio using the specified scope and code.",
        "operationId": "GetPortfolio",
        "consumes": [],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the portfolio",
            "required": true,
            "type": "string"
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the portfolio",
            "required": true,
            "type": "string"
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "Optional. The effective date of the data",
            "required": false,
            "type": "string",
            "format": "dateorcutlabel"
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "Optional. The AsAt date of the data",
            "required": false,
            "type": "string",
            "format": "date-time"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested portfolio",
            "schema": {
              "$ref": "#/definitions/Portfolio"
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "schema": {
              "$ref": "#/definitions/LusidValidationProblemDetails"
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/LusidProblemDetails"
            }
          }
        },
        "x-fbn-apistatus": "EarlyAccess"
      },
      "put": {
        "tags": [
          "Portfolios"
        ],
        "summary": "Update portfolio definition",
        "description": "Update the definition of a specific portfolio. Note, some parts of a portfolio definition are not available for modification after the initial creation.",
        "operationId": "UpdatePortfolio",
        "consumes": [],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the portfolio",
            "required": true,
            "type": "string"
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the portfolio",
            "required": true,
            "type": "string"
          },
          {
            "name": "request",
            "in": "body",
            "description": "The updated portfolio definition",
            "required": false,
            "schema": {
              "$ref": "#/definitions/UpdatePortfolioRequest"
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "Optional. The effective date for the change",
            "required": false,
            "type": "string",
            "format": "dateorcutlabel"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Portfolio"
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "schema": {
              "$ref": "#/definitions/LusidValidationProblemDetails"
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/LusidProblemDetails"
            }
          }
        },
        "x-fbn-apistatus": "EarlyAccess"
      },
      "delete": {
        "tags": [
          "Portfolios"
        ],
        "summary": "Delete portfolio",
        "description": "Delete a portfolio at the specified effectiveAt",
        "operationId": "DeletePortfolio",
        "consumes": [],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the portfolio",
            "required": true,
            "type": "string"
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the portfolio",
            "required": true,
            "type": "string"
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "Optional. The effective date of the deletion",
            "required": false,
            "type": "string",
            "format": "dateorcutlabel"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeletedEntityResponse"
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "schema": {
              "$ref": "#/definitions/LusidValidationProblemDetails"
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/LusidProblemDetails"
            }
          }
        },
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/portfolios/{scope}/{code}/commands": {
      "get": {
        "tags": [
          "Portfolios"
        ],
        "summary": "Get commands",
        "description": "Gets all commands that modified a specific portfolio, including any input transactions.",
        "operationId": "GetPortfolioCommands",
        "consumes": [],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the portfolio",
            "required": true,
            "type": "string"
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the portfolio",
            "required": true,
            "type": "string"
          },
          {
            "name": "fromAsAt",
            "in": "query",
            "description": "Optional. Filters commands by those that were processed at or after this date and time",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "toAsAt",
            "in": "query",
            "description": "Optional. Filters commands by those that were processed at or before this date and time",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "Optional. Order the results by these fields. Use use the '-' sign to denote descending order e.g. -MyFieldName",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "uniqueItems": false
          },
          {
            "name": "start",
            "in": "query",
            "description": "Optional. When paginating, skip this number of results",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Optional. When paginating, limit the number of returned results to this many.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Optional. Expression to filter the result set",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The commands that modified the specified portfolio.",
            "schema": {
              "$ref": "#/definitions/ResourceListOfProcessedCommand"
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "schema": {
              "$ref": "#/definitions/LusidValidationProblemDetails"
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/LusidProblemDetails"
            }
          }
        },
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/portfolios/{scope}/{code}/properties": {
      "get": {
        "tags": [
          "Portfolios"
        ],
        "summary": "Get portfolio properties",
        "description": "Get the properties of a portfolio",
        "operationId": "GetPortfolioProperties",
        "consumes": [],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the portfolio",
            "required": true,
            "type": "string"
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the portfolio",
            "required": true,
            "type": "string"
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "Optional. The effective date of the data",
            "required": false,
            "type": "string",
            "format": "dateorcutlabel"
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "Optional. The AsAt date of the data",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "Optional. Order the results by these fields. Use use the '-' sign to denote descending order e.g. -MyFieldName",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "uniqueItems": false
          },
          {
            "name": "start",
            "in": "query",
            "description": "Optional. When paginating, skip this number of results",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Optional. When paginating, limit the number of returned results to this many.",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The properties of the requested portfolio",
            "schema": {
              "$ref": "#/definitions/PortfolioProperties"
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "schema": {
              "$ref": "#/definitions/LusidValidationProblemDetails"
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/LusidProblemDetails"
            }
          }
        },
        "x-fbn-apistatus": "EarlyAccess"
      },
      "post": {
        "tags": [
          "Portfolios"
        ],
        "summary": "Upsert portfolio properties",
        "description": "Upsert one or more property values to a portfolio. All properties must be of the domain Portfolio.",
        "operationId": "UpsertPortfolioProperties",
        "consumes": [],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the portfolio",
            "required": true,
            "type": "string"
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the portfolio",
            "required": true,
            "type": "string"
          },
          {
            "name": "portfolioProperties",
            "in": "body",
            "description": "The property values to be upserted to the portfolio. Time variant properties must have an EffectiveFrom date.",
            "required": false,
            "schema": {
              "type": "object",
              "additionalProperties": {
                "$ref": "#/definitions/PropertyValue"
              },
              "example": {
                "Portfolio/MyScope/MyPropertyName": {
                  "metricValue": {
                    "value": 12345.5672,
                    "unit": "Unit"
                  },
                  "effectiveFrom": "2019-06-07T15:45:07.9929287+00:00"
                },
                "Portfolio/MyScope/MyPropertyName2": {
                  "metricValue": {
                    "value": 925.3,
                    "unit": "Unit"
                  },
                  "effectiveFrom": "2019-06-07T15:45:07.992931+00:00"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/PortfolioProperties"
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "schema": {
              "$ref": "#/definitions/LusidValidationProblemDetails"
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/LusidProblemDetails"
            }
          }
        },
        "x-fbn-apistatus": "EarlyAccess"
      },
      "delete": {
        "tags": [
          "Portfolios"
        ],
        "summary": "Delete portfolio properties",
        "description": "Delete one, many or all property values from a portfolio for the specified effectiveAt\r\n            \r\nSpecifying no effectiveAt will delete all properties",
        "operationId": "DeletePortfolioProperties",
        "consumes": [],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the portfolio",
            "required": true,
            "type": "string"
          },
          {
            "name": "code",
            "in": "path",
            "description": "Code for the portfolio",
            "required": true,
            "type": "string"
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "Optional. The effective date of the deletion",
            "required": false,
            "type": "string",
            "format": "dateorcutlabel"
          },
          {
            "name": "portfolioPropertyKeys",
            "in": "query",
            "description": "Optional. The keys of the properties to be deleted. None specified indicates the intention to delete all properties from the portfolio",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "uniqueItems": false
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeletedEntityResponse"
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "schema": {
              "$ref": "#/definitions/LusidValidationProblemDetails"
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/LusidProblemDetails"
            }
          }
        },
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/portfolios/$reconcileholdings": {
      "post": {
        "tags": [
          "Reconciliations"
        ],
        "summary": "Reconcile portfolio holdings",
        "description": "Reconcile the holdings of two portfolios.",
        "operationId": "ReconcileHoldings",
        "consumes": [],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "description": "The specifications of the inputs to the reconciliation",
            "required": false,
            "schema": {
              "$ref": "#/definitions/PortfoliosReconciliationRequest"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "Optional. Order the results by these fields. Use use the '-' sign to denote descending order e.g. -MyFieldName",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "uniqueItems": false
          },
          {
            "name": "start",
            "in": "query",
            "description": "Optional. When paginating, skip this number of results",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Optional. When paginating, limit the number of returned results to this many.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Optional. Expression to filter the result set",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested reconciliation",
            "schema": {
              "$ref": "#/definitions/ResourceListOfReconciliationBreak"
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "schema": {
              "$ref": "#/definitions/LusidValidationProblemDetails"
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/LusidProblemDetails"
            }
          }
        },
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/propertydefinitions": {
      "get": {
        "tags": [
          "Property Definitions"
        ],
        "summary": "Get multiple property definitions",
        "description": "Get one or more property definitions",
        "operationId": "GetMultiplePropertyDefinitions",
        "consumes": [],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "propertyKeys",
            "in": "query",
            "description": "One or more keys for properties for which the schema should be returned",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "uniqueItems": false
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "Optional. The AsAt date of the data",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "Optional. Order the results by these fields. Use use the '-' sign to denote descending order e.g. -MyFieldName",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "uniqueItems": false
          },
          {
            "name": "start",
            "in": "query",
            "description": "Optional. When paginating, skip this number of results",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Optional. When paginating, limit the number of returned results to this many.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Optional. Expression to filter the result set",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ResourceListOfPropertyDefinition"
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "schema": {
              "$ref": "#/definitions/LusidValidationProblemDetails"
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/LusidProblemDetails"
            }
          }
        },
        "x-fbn-apistatus": "EarlyAccess"
      },
      "post": {
        "tags": [
          "Property Definitions"
        ],
        "summary": "Define a new property",
        "description": "Create a new property definition",
        "operationId": "CreatePropertyDefinition",
        "consumes": [],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "definition",
            "in": "body",
            "description": "The definition of the new property",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CreatePropertyDefinitionRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/PropertyDefinition"
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "schema": {
              "$ref": "#/definitions/LusidValidationProblemDetails"
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/LusidProblemDetails"
            }
          }
        },
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/propertydefinitions/{domain}/{scope}/{code}": {
      "get": {
        "tags": [
          "Property Definitions"
        ],
        "summary": "Get property definition",
        "description": "Retrieve the definition for the identified property",
        "operationId": "GetPropertyDefinition",
        "consumes": [],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "domain",
            "in": "path",
            "description": "The Property Domain of the requested property",
            "required": true,
            "type": "string",
            "enum": [
              "Trade",
              "Portfolio",
              "Holding",
              "ReferenceHolding",
              "TransactionConfiguration",
              "Instrument",
              "CutLabelDefinition",
              "Analytic"
            ]
          },
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the requested property",
            "required": true,
            "type": "string"
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the requested property",
            "required": true,
            "type": "string"
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "Optional. The AsAt date of the data",
            "required": false,
            "type": "string",
            "format": "date-time"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/PropertyDefinition"
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "schema": {
              "$ref": "#/definitions/LusidValidationProblemDetails"
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/LusidProblemDetails"
            }
          }
        },
        "x-fbn-apistatus": "EarlyAccess"
      },
      "put": {
        "tags": [
          "Property Definitions"
        ],
        "summary": "Update the definition of the specified existing property",
        "description": "Not all elements within a property definition are modifiable due to the potential implications for data\r\nalready stored against these properties",
        "operationId": "UpdatePropertyDefinition",
        "consumes": [],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "domain",
            "in": "path",
            "description": "The Property Domain of the property being updated",
            "required": true,
            "type": "string",
            "enum": [
              "Trade",
              "Portfolio",
              "Holding",
              "ReferenceHolding",
              "TransactionConfiguration",
              "Instrument",
              "CutLabelDefinition",
              "Analytic"
            ]
          },
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the property to be updated",
            "required": true,
            "type": "string"
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the property to be updated",
            "required": true,
            "type": "string"
          },
          {
            "name": "definition",
            "in": "body",
            "description": "The updated definition of the property",
            "required": false,
            "schema": {
              "$ref": "#/definitions/UpdatePropertyDefinitionRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/PropertyDefinition"
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "schema": {
              "$ref": "#/definitions/LusidValidationProblemDetails"
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/LusidProblemDetails"
            }
          }
        },
        "x-fbn-apistatus": "EarlyAccess"
      },
      "delete": {
        "tags": [
          "Property Definitions"
        ],
        "summary": "Delete property definition",
        "description": "Delete the definition of the specified property",
        "operationId": "DeletePropertyDefinition",
        "consumes": [],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "domain",
            "in": "path",
            "description": "The Property Domain of the property to be deleted",
            "required": true,
            "type": "string",
            "enum": [
              "Trade",
              "Portfolio",
              "Holding",
              "ReferenceHolding",
              "TransactionConfiguration",
              "Instrument",
              "CutLabelDefinition",
              "Analytic"
            ]
          },
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the property to be deleted",
            "required": true,
            "type": "string"
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the property to be deleted",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeletedEntityResponse"
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "schema": {
              "$ref": "#/definitions/LusidValidationProblemDetails"
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/LusidProblemDetails"
            }
          }
        },
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/referenceportfolios/{scope}": {
      "post": {
        "tags": [
          "Reference Portfolio"
        ],
        "summary": "Create reference portfolio",
        "description": "Create a new reference portfolio.",
        "operationId": "CreateReferencePortfolio",
        "consumes": [],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The intended scope of the portfolio",
            "required": true,
            "type": "string"
          },
          {
            "name": "referencePortfolio",
            "in": "body",
            "description": "The portfolio creation request object",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CreateReferencePortfolioRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The created reference portfolio, with populated id",
            "schema": {
              "$ref": "#/definitions/Portfolio"
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "schema": {
              "$ref": "#/definitions/LusidValidationProblemDetails"
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/LusidProblemDetails"
            }
          }
        },
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/referenceportfolios/{scope}/{code}/constituents": {
      "get": {
        "tags": [
          "Reference Portfolio"
        ],
        "summary": "Get constituents",
        "description": "Get all the constituents in the specified reference portfolio",
        "operationId": "GetReferencePortfolioConstituents",
        "consumes": [],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the portfolio",
            "required": true,
            "type": "string"
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the portfolio",
            "required": true,
            "type": "string"
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "Optional. The effective date of the constituents to retrieve",
            "required": false,
            "type": "string",
            "format": "dateorcutlabel"
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "Optional. The AsAt date of the data",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "Optional. Order the results by these fields. Use the '-' sign to denote descending order e.g. -MyFieldName",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "uniqueItems": false
          },
          {
            "name": "start",
            "in": "query",
            "description": "Optional. When paginating, skip this number of results",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Optional. When paginating, limit the number of returned results to this many",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "instrumentPropertyKeys",
            "in": "query",
            "description": "Optional. The Properties of the constituents",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "uniqueItems": false
          }
        ],
        "responses": {
          "200": {
            "description": "The requested reference portfolio constituents",
            "schema": {
              "$ref": "#/definitions/GetReferencePortfolioConstituentsResponse"
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "schema": {
              "$ref": "#/definitions/LusidValidationProblemDetails"
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/LusidProblemDetails"
            }
          }
        },
        "x-fbn-apistatus": "EarlyAccess"
      },
      "post": {
        "tags": [
          "Reference Portfolio"
        ],
        "summary": "Add constituents",
        "description": "Add constituents to the specified reference portfolio.",
        "operationId": "UpsertReferencePortfolioConstituents",
        "consumes": [],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the portfolio",
            "required": true,
            "type": "string"
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the portfolio",
            "required": true,
            "type": "string"
          },
          {
            "name": "constituents",
            "in": "body",
            "description": "The constituents to upload to the portfolio",
            "required": false,
            "schema": {
              "$ref": "#/definitions/UpsertReferencePortfolioConstituentsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UpsertReferencePortfolioConstituentsResponse"
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "schema": {
              "$ref": "#/definitions/LusidValidationProblemDetails"
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/LusidProblemDetails"
            }
          }
        },
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/referenceportfolios/{scope}/{code}/constituentsadjustments": {
      "get": {
        "tags": [
          "Reference Portfolio"
        ],
        "summary": "Gets constituents adjustments in an interval of effective time.",
        "description": "Specify a time period in which you'd like to see the list of times that adjustments where made to this portfolio",
        "operationId": "ListConstituentsAdjustments",
        "consumes": [],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the portfolio",
            "required": true,
            "type": "string"
          },
          {
            "name": "code",
            "in": "path",
            "description": "Code for the portfolio",
            "required": true,
            "type": "string"
          },
          {
            "name": "fromEffectiveAt",
            "in": "query",
            "description": "Events between this time (inclusive) and the toEffectiveAt are returned.",
            "required": false,
            "type": "string",
            "format": "dateorcutlabel"
          },
          {
            "name": "toEffectiveAt",
            "in": "query",
            "description": "Events between this time (inclusive) and the fromEffectiveAt are returned.",
            "required": false,
            "type": "string",
            "format": "dateorcutlabel"
          },
          {
            "name": "asAtTime",
            "in": "query",
            "description": "The as-at time for which the result is valid.",
            "required": false,
            "type": "string",
            "format": "date-time"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ResourceListOfConstituentsAdjustmentHeader"
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "schema": {
              "$ref": "#/definitions/LusidValidationProblemDetails"
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/LusidProblemDetails"
            }
          }
        },
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/scopes": {
      "get": {
        "tags": [
          "Scopes"
        ],
        "summary": "List scopes",
        "description": "List all the scopes",
        "operationId": "ListScopes",
        "consumes": [],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "sortBy",
            "in": "query",
            "description": "Optional. Order the results by these fields. Use use the '-' sign to denote descending order e.g. -MyFieldName",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "uniqueItems": false
          },
          {
            "name": "start",
            "in": "query",
            "description": "Optional. When paginating, skip this number of results",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Optional. When paginating, limit the number of returned results to this many.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Optional. Expression to filter the result set",
            "required": false,
            "type": "string"
          },
          {
            "name": "query",
            "in": "query",
            "description": "Optional. Expression specifying the criteria that the returned portfolios must meet",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of scopes",
            "schema": {
              "$ref": "#/definitions/ResourceListOfScopeDefinition"
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "schema": {
              "$ref": "#/definitions/LusidValidationProblemDetails"
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/LusidProblemDetails"
            }
          }
        },
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/systemconfiguration/cutlabels": {
      "get": {
        "tags": [
          "Cut Label Definitions"
        ],
        "summary": "List Existing Cut Labels",
        "description": "List all the Cut Label Definitions that are valid at the given AsAt time",
        "operationId": "ListCutLabelDefinitions",
        "consumes": [],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "asAt",
            "in": "query",
            "description": "Optional. The As At time at which listed Cut Labels are valid",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "Optional. Order the results by these fields. Use use the '-' sign to denote descending order e.g. -MyFieldName",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "uniqueItems": false
          },
          {
            "name": "start",
            "in": "query",
            "description": "Optional. When paginating, skip this number of results",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Optional. When paginating, limit the number of returned results to this many.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Optional. Expression to filter the result set",
            "required": false,
            "type": "string"
          },
          {
            "name": "query",
            "in": "query",
            "description": "Optional. Expression specifying the criteria that the returned portfolios must meet",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of cut labels",
            "schema": {
              "$ref": "#/definitions/ResourceListOfCutLabelDefinition"
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "schema": {
              "$ref": "#/definitions/LusidValidationProblemDetails"
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/LusidProblemDetails"
            }
          }
        },
        "x-fbn-apistatus": "EarlyAccess"
      },
      "post": {
        "tags": [
          "Cut Label Definitions"
        ],
        "summary": "Create a Cut Label",
        "description": "Create a Cut Label valid in all scopes",
        "operationId": "CreateCutLabelDefinition",
        "consumes": [],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "createRequest",
            "in": "body",
            "description": "The cut label definition",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CreateCutLabelDefinitionRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The created cut label",
            "schema": {
              "$ref": "#/definitions/CutLabelDefinition"
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "schema": {
              "$ref": "#/definitions/LusidValidationProblemDetails"
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/LusidProblemDetails"
            }
          }
        },
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/systemconfiguration/cutlabels/{code}": {
      "get": {
        "tags": [
          "Cut Label Definitions"
        ],
        "summary": "Get a Cut Label",
        "description": "Get a specified cut label at a given time",
        "operationId": "GetCutLabelDefinition",
        "consumes": [],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "description": "The Code of the Cut Label that is being queried",
            "required": true,
            "type": "string"
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "The time at which to get the Cut Label",
            "required": false,
            "type": "string",
            "format": "date-time"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested cut label",
            "schema": {
              "$ref": "#/definitions/CutLabelDefinition"
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "schema": {
              "$ref": "#/definitions/LusidValidationProblemDetails"
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/LusidProblemDetails"
            }
          }
        },
        "x-fbn-apistatus": "EarlyAccess"
      },
      "put": {
        "tags": [
          "Cut Label Definitions"
        ],
        "summary": "Update a Cut Label",
        "description": "Update a specified cut label",
        "operationId": "UpdateCutLabelDefinition",
        "consumes": [],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "description": "The Code of the Cut Label that is being updated",
            "required": true,
            "type": "string"
          },
          {
            "name": "updateRequest",
            "in": "body",
            "description": "The cut label update definition",
            "required": false,
            "schema": {
              "$ref": "#/definitions/UpdateCutLabelDefinitionRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The updated cut label",
            "schema": {
              "$ref": "#/definitions/CutLabelDefinition"
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "schema": {
              "$ref": "#/definitions/LusidValidationProblemDetails"
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/LusidProblemDetails"
            }
          }
        },
        "x-fbn-apistatus": "EarlyAccess"
      },
      "delete": {
        "tags": [
          "Cut Label Definitions"
        ],
        "summary": "Delete a Cut Label",
        "description": "Delete a specified cut label",
        "operationId": "DeleteCutLabelDefinition",
        "consumes": [],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "description": "The Code of the Cut Label that is being Deleted",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The time of deletion",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "schema": {
              "$ref": "#/definitions/LusidValidationProblemDetails"
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/LusidProblemDetails"
            }
          }
        },
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/systemconfiguration/transactiontypes": {
      "get": {
        "tags": [
          "System Configuration"
        ],
        "summary": "List transaction types",
        "description": "Get the list of persisted transaction types",
        "operationId": "ListConfigurationTransactionTypes",
        "consumes": [],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ResourceListOfTransactionConfigurationData"
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/LusidProblemDetails"
            }
          }
        },
        "x-fbn-apistatus": "EarlyAccess"
      },
      "post": {
        "tags": [
          "System Configuration"
        ],
        "summary": "Create transaction type",
        "description": "Create a new transaction type by specifying a definition and the mappings to movements",
        "operationId": "CreateConfigurationTransactionType",
        "consumes": [],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "type",
            "in": "body",
            "description": "A transaction type definition",
            "required": false,
            "schema": {
              "$ref": "#/definitions/TransactionConfigurationDataRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ResourceListOfTransactionConfigurationData"
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "schema": {
              "$ref": "#/definitions/LusidValidationProblemDetails"
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/LusidProblemDetails"
            }
          }
        },
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/transactionportfolios/{scope}": {
      "post": {
        "tags": [
          "Transaction Portfolios"
        ],
        "summary": "Create transaction portfolio",
        "description": "Create a transaction portfolio in a specific scope",
        "operationId": "CreatePortfolio",
        "consumes": [],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope into which the transaction portfolio will be created",
            "required": true,
            "type": "string"
          },
          {
            "name": "createRequest",
            "in": "body",
            "description": "The transaction portfolio definition",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CreateTransactionPortfolioRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The created portfolio, with populated id",
            "schema": {
              "$ref": "#/definitions/Portfolio"
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "schema": {
              "$ref": "#/definitions/LusidValidationProblemDetails"
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/LusidProblemDetails"
            }
          }
        },
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/transactionportfolios/{scope}/{code}/details": {
      "get": {
        "tags": [
          "Transaction Portfolios"
        ],
        "summary": "Get portfolio details",
        "description": "Get the details document associated with a transaction portfolio\r\n            \r\nWhen requesting details from a derived transaction portfolio, the returned set of details could come from a different transaction portfolio",
        "operationId": "GetDetails",
        "consumes": [],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the portfolio",
            "required": true,
            "type": "string"
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the portfolio",
            "required": true,
            "type": "string"
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "Optional. The effective date of the data",
            "required": false,
            "type": "string",
            "format": "dateorcutlabel"
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "Optional. The AsAt date of the data",
            "required": false,
            "type": "string",
            "format": "date-time"
          }
        ],
        "responses": {
          "200": {
            "description": "The details of the requested portfolio",
            "schema": {
              "$ref": "#/definitions/PortfolioDetails"
            },
            "examples": {
              "application/json": {
                "originPortfolioId": {
                  "scope": "Region",
                  "code": "UK"
                },
                "baseCurrency": "GBP",
                "corporateActionSourceId": {
                  "scope": "Sources",
                  "code": "Vendor1"
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "schema": {
              "$ref": "#/definitions/LusidValidationProblemDetails"
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/LusidProblemDetails"
            }
          }
        },
        "x-fbn-apistatus": "EarlyAccess"
      },
      "post": {
        "tags": [
          "Transaction Portfolios"
        ],
        "summary": "Upsert details",
        "description": "Update the portfolio details for the specified transaction portfolios or add if it doesn't already exist (in the case of a derived transaction portfolio).",
        "operationId": "UpsertPortfolioDetails",
        "consumes": [],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the portfolio",
            "required": true,
            "type": "string"
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the portfolio",
            "required": true,
            "type": "string"
          },
          {
            "name": "details",
            "in": "body",
            "description": "The set of details for the portfolio",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CreatePortfolioDetails"
            }
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "Optional. The effective date of the change",
            "required": false,
            "type": "string",
            "format": "dateorcutlabel"
          }
        ],
        "responses": {
          "200": {
            "description": "The latest version of the created/updated details",
            "schema": {
              "$ref": "#/definitions/PortfolioDetails"
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "schema": {
              "$ref": "#/definitions/LusidValidationProblemDetails"
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/LusidProblemDetails"
            }
          }
        },
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/transactionportfolios/{scope}/{code}/executions": {
      "post": {
        "tags": [
          "Transaction Portfolios"
        ],
        "summary": "Upsert executions",
        "description": "Inserts new executions, or updates those already present",
        "operationId": "UpsertExecutions",
        "consumes": [],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the portfolio",
            "required": true,
            "type": "string"
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the portfolio",
            "required": true,
            "type": "string"
          },
          {
            "name": "executions",
            "in": "body",
            "description": "The executions to be updated",
            "required": false,
            "schema": {
              "uniqueItems": false,
              "type": "array",
              "items": {
                "$ref": "#/definitions/ExecutionRequest"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UpsertPortfolioExecutionsResponse"
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "schema": {
              "$ref": "#/definitions/LusidValidationProblemDetails"
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/LusidProblemDetails"
            }
          }
        },
        "x-fbn-apistatus": "EarlyAccess"
      },
      "delete": {
        "tags": [
          "Transaction Portfolios"
        ],
        "summary": "Delete executions",
        "description": "Delete one or more executions from a transaction portfolio",
        "operationId": "DeleteExecutions",
        "consumes": [],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the portfolio",
            "required": true,
            "type": "string"
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the portfolio",
            "required": true,
            "type": "string"
          },
          {
            "name": "executionIds",
            "in": "query",
            "description": "Ids of executions to delete",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "uniqueItems": false
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeletedEntityResponse"
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "schema": {
              "$ref": "#/definitions/LusidValidationProblemDetails"
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/LusidProblemDetails"
            }
          }
        },
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/transactionportfolios/{scope}/{code}/holdings": {
      "get": {
        "tags": [
          "Transaction Portfolios"
        ],
        "summary": "Get holdings",
        "description": "Get the aggregate holdings of a transaction portfolio.  If no effectiveAt or asAt\r\nare supplied then values will be defaulted to the latest system time.",
        "operationId": "GetHoldings",
        "consumes": [],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the portfolio",
            "required": true,
            "type": "string"
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the portfolio",
            "required": true,
            "type": "string"
          },
          {
            "name": "byTaxlots",
            "in": "query",
            "description": "Option to expand holdings to return the underlying tax-lots",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "effectiveAt",
            "in": "query",
            "description": "Optional. The effective date of the portfolio",
            "required": false,
            "type": "string",
            "format": "dateorcutlabel"
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "Optional. The AsAt date of the data",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "Optional. Order the results by these fields. Use use the '-' sign to denote descending order e.g. -MyFieldName",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "uniqueItems": false
          },
          {
            "name": "start",
            "in": "query",
            "description": "Optional. When paginating, skip this number of results",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Optional. When paginating, limit the number of returned results to this many.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Optional. Expression to filter the result set",
            "required": false,
            "type": "string"
          },
          {
            "name": "propertyKeys",
            "in": "query",
            "description": "Optional. Keys for the Holding or instrument property values that will be decorated onto the transactions. No properties will be decorated if none are specified.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "uniqueItems": false
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/VersionedResourceListOfPortfolioHolding"
            },
            "examples": {
              "application/json": {
                "version": {
                  "effectiveFrom": "2019-03-05T12:00:00+00:00",
                  "asAtDate": "2019-03-05T12:00:00+00:00"
                },
                "values": [
                  {
                    "instrumentUid": "LUID_SR358GMZ",
                    "holdingType": "P",
                    "units": 10,
                    "settledUnits": 10,
                    "cost": {
                      "amount": 2.5,
                      "currency": "GBP"
                    },
                    "costPortfolioCcy": {
                      "amount": 2.5,
                      "currency": "GBP"
                    }
                  }
                ]
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "schema": {
              "$ref": "#/definitions/LusidValidationProblemDetails"
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/LusidProblemDetails"
            }
          }
        },
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/transactionportfolios/{scope}/{code}/holdings/{effectiveAt}": {
      "put": {
        "tags": [
          "Transaction Portfolios"
        ],
        "summary": "Set all holdings on a transaction portfolio",
        "description": "Prompt the creation of transactions in a specific transaction portfolio to bring all holdings to the specified targets",
        "operationId": "SetHoldings",
        "consumes": [],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the transaction portfolio",
            "required": true,
            "type": "string"
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the transaction portfolio",
            "required": true,
            "type": "string"
          },
          {
            "name": "effectiveAt",
            "in": "path",
            "description": "The effective date of the change",
            "required": true,
            "type": "string",
            "format": "dateorcutlabel"
          },
          {
            "name": "holdingAdjustments",
            "in": "body",
            "description": "The complete set of holdings adjustments for the portfolio",
            "required": false,
            "schema": {
              "uniqueItems": false,
              "type": "array",
              "items": {
                "$ref": "#/definitions/AdjustHoldingRequest"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/AdjustHolding"
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "schema": {
              "$ref": "#/definitions/LusidValidationProblemDetails"
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/LusidProblemDetails"
            }
          }
        },
        "x-fbn-apistatus": "EarlyAccess"
      },
      "post": {
        "tags": [
          "Transaction Portfolios"
        ],
        "summary": "Adjust holdings",
        "description": "Adjust one or more holdings in a transaction portfolio\r\n\r\nPrompt the creation of transactions in a specific transaction portfolio to bring selected holdings to the specified targets",
        "operationId": "AdjustHoldings",
        "consumes": [],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the portfolio",
            "required": true,
            "type": "string"
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the portfolio",
            "required": true,
            "type": "string"
          },
          {
            "name": "effectiveAt",
            "in": "path",
            "description": "The effective date of the change",
            "required": true,
            "type": "string",
            "format": "dateorcutlabel"
          },
          {
            "name": "holdingAdjustments",
            "in": "body",
            "description": "The selected set of holdings adjustments",
            "required": false,
            "schema": {
              "uniqueItems": false,
              "type": "array",
              "items": {
                "$ref": "#/definitions/AdjustHoldingRequest"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/AdjustHolding"
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "schema": {
              "$ref": "#/definitions/LusidValidationProblemDetails"
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/LusidProblemDetails"
            }
          }
        },
        "x-fbn-apistatus": "EarlyAccess"
      },
      "delete": {
        "tags": [
          "Transaction Portfolios"
        ],
        "summary": "Cancel holdings adjustments",
        "description": "Cancel previous adjust-holdings for the portfolio for a specific date",
        "operationId": "CancelAdjustHoldings",
        "consumes": [],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the portfolio",
            "required": true,
            "type": "string"
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the portfolio",
            "required": true,
            "type": "string"
          },
          {
            "name": "effectiveAt",
            "in": "path",
            "description": "The effective date of the change",
            "required": true,
            "type": "string",
            "format": "dateorcutlabel"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeletedEntityResponse"
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "schema": {
              "$ref": "#/definitions/LusidValidationProblemDetails"
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/LusidProblemDetails"
            }
          }
        },
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/transactionportfolios/{scope}/{code}/holdingsadjustments": {
      "get": {
        "tags": [
          "Transaction Portfolios"
        ],
        "summary": "List holdings adjustments",
        "description": "Get holdings adjustments from a transaction portfolio in an interval of effective time.",
        "operationId": "ListHoldingsAdjustments",
        "consumes": [],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the portfolio",
            "required": true,
            "type": "string"
          },
          {
            "name": "code",
            "in": "path",
            "description": "Code for the portfolio",
            "required": true,
            "type": "string"
          },
          {
            "name": "fromEffectiveAt",
            "in": "query",
            "description": "Holdings adjustments between this time (inclusive) and the toEffectiveAt are returned.",
            "required": false,
            "type": "string",
            "format": "dateorcutlabel"
          },
          {
            "name": "toEffectiveAt",
            "in": "query",
            "description": "Holdings adjustments between this time (inclusive) and the fromEffectiveAt are returned.",
            "required": false,
            "type": "string",
            "format": "dateorcutlabel"
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "Optional. The AsAt date of the data",
            "required": false,
            "type": "string",
            "format": "date-time"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ResourceListOfHoldingsAdjustmentHeader"
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "schema": {
              "$ref": "#/definitions/LusidValidationProblemDetails"
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/LusidProblemDetails"
            }
          }
        },
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/transactionportfolios/{scope}/{code}/holdingsadjustments/{effectiveAt}": {
      "get": {
        "tags": [
          "Transaction Portfolios"
        ],
        "summary": "Get holding adjustment",
        "description": "Get a holdings adjustment for a transaction portfolio at a specific effective time.\r\n\r\nA holdings adjustment definition will only be returned if one exists for the specified effective time",
        "operationId": "GetHoldingsAdjustment",
        "consumes": [],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the portfolio",
            "required": true,
            "type": "string"
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the portfolio",
            "required": true,
            "type": "string"
          },
          {
            "name": "effectiveAt",
            "in": "path",
            "description": "The effective time of the holdings adjustment",
            "required": true,
            "type": "string",
            "format": "dateorcutlabel"
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "Optional. The AsAt date of the data",
            "required": false,
            "type": "string",
            "format": "date-time"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/HoldingsAdjustment"
            },
            "examples": {
              "application/json": {
                "value": {
                  "effectiveAt": "0001-01-01T00:00:00+00:00",
                  "version": {
                    "effectiveFrom": "2019-03-05T00:00:00+00:00",
                    "asAtDate": "2019-03-08T00:00:00+00:00"
                  },
                  "unmatchedHoldingMethod": "KeepTheSame",
                  "adjustments": [
                    {
                      "instrumentIdentifiers": {
                        "Instrument/default/ClientInternal": "CLI-192836"
                      },
                      "instrumentUid": "LUID_DSI8QCNM",
                      "subHoldingKeys": [],
                      "taxLots": [
                        {
                          "units": 10,
                          "cost": {
                            "amount": 120,
                            "currency": "GBP"
                          }
                        }
                      ]
                    },
                    {
                      "instrumentIdentifiers": {
                        "Instrument/default/ClientInternal": "CLI-462810"
                      },
                      "instrumentUid": "LUID_PWEQWMXB",
                      "subHoldingKeys": [],
                      "taxLots": [
                        {
                          "units": 10,
                          "cost": {
                            "amount": 120,
                            "currency": "GBP"
                          }
                        }
                      ]
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "schema": {
              "$ref": "#/definitions/LusidValidationProblemDetails"
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/LusidProblemDetails"
            }
          }
        },
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/transactionportfolios/{scope}/{code}/transactions": {
      "get": {
        "tags": [
          "Transaction Portfolios"
        ],
        "summary": "Get transactions",
        "description": "Get the transactions from a transaction portfolio\r\n\r\nWhen the requested portfolio is a derived transaction portfolio, the returned set of transactions is the union set of all transactions of the parent (and ancestors) and the specified portfolio.",
        "operationId": "GetTransactions",
        "consumes": [],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the portfolio",
            "required": true,
            "type": "string"
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the portfolio",
            "required": true,
            "type": "string"
          },
          {
            "name": "fromTransactionDate",
            "in": "query",
            "description": "Optional. Limit the returned transactions to those with a transaction date equal or later than this date",
            "required": false,
            "type": "string",
            "format": "dateorcutlabel"
          },
          {
            "name": "toTransactionDate",
            "in": "query",
            "description": "Optional. Limit the returned transactions to those with a transaction date equal or before this date",
            "required": false,
            "type": "string",
            "format": "dateorcutlabel"
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "Optional. The AsAt date of the data",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "Optional. Order the results by these fields. Use use the '-' sign to denote descending order e.g. -MyFieldName",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "uniqueItems": false
          },
          {
            "name": "start",
            "in": "query",
            "description": "Optional. When paginating, skip this number of results",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Optional. When paginating, limit the number of returned results to this many.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "propertyKeys",
            "in": "query",
            "description": "Optional. Keys for the transaction or instrument property values that will be decorated onto the transactions. No properties will be decorated if none are specified.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "uniqueItems": false
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Optional. Expression to filter the result set",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested portfolio transactions",
            "schema": {
              "$ref": "#/definitions/VersionedResourceListOfTransaction"
            },
            "examples": {
              "application/json": {
                "version": {
                  "effectiveFrom": "2019-06-07T15:45:08.7521181+00:00",
                  "asAtDate": "2019-06-07T15:35:08.7521184+00:00"
                },
                "values": [
                  {
                    "transactionId": "TXN-00001",
                    "type": "Buy",
                    "instrumentIdentifiers": {
                      "Instrument/default/RIC": "RIC.L"
                    },
                    "instrumentUid": "LUID_UC1JKM32",
                    "transactionDate": "2018-08-04T00:00:00+00:00",
                    "settlementDate": "2018-08-06T00:00:00+00:00",
                    "units": 1000,
                    "transactionPrice": {
                      "price": 88.8,
                      "type": "Price"
                    },
                    "totalConsideration": {
                      "amount": 88800,
                      "currency": "USD"
                    },
                    "properties": [
                      {
                        "key": "Trade/default/TradeToPortfolioRate",
                        "value": 0.765
                      },
                      {
                        "key": "Trade/default/SourcePortfolioId",
                        "value": "DEMO-PORTFOLIO-ID"
                      },
                      {
                        "key": "Trade/default/SourcePortfolioScope",
                        "value": "DEMO-SCOPE"
                      }
                    ],
                    "source": "",
                    "nettingSet": "NettingSet"
                  }
                ],
                "href": "http://example.com"
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "schema": {
              "$ref": "#/definitions/LusidValidationProblemDetails"
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/LusidProblemDetails"
            }
          }
        },
        "x-fbn-apistatus": "EarlyAccess"
      },
      "post": {
        "tags": [
          "Transaction Portfolios"
        ],
        "summary": "Upsert transactions into the specified transaction portfolio",
        "description": "Upsert transactions",
        "operationId": "UpsertTransactions",
        "consumes": [],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the portfolio",
            "required": true,
            "type": "string"
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code for the portfolio",
            "required": true,
            "type": "string"
          },
          {
            "name": "transactions",
            "in": "body",
            "description": "The transactions to be upserted",
            "required": false,
            "schema": {
              "uniqueItems": false,
              "type": "array",
              "items": {
                "$ref": "#/definitions/TransactionRequest"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UpsertPortfolioTransactionsResponse"
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "schema": {
              "$ref": "#/definitions/LusidValidationProblemDetails"
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/LusidProblemDetails"
            }
          }
        },
        "x-fbn-apistatus": "EarlyAccess"
      },
      "delete": {
        "tags": [
          "Transaction Portfolios"
        ],
        "summary": "Delete transactions",
        "description": "Delete one or more transactions from a transaction portfolio",
        "operationId": "DeleteTransactions",
        "consumes": [],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the portfolio",
            "required": true,
            "type": "string"
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the portfolio",
            "required": true,
            "type": "string"
          },
          {
            "name": "transactionIds",
            "in": "query",
            "description": "Ids of transactions to delete",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "uniqueItems": false
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeletedEntityResponse"
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "schema": {
              "$ref": "#/definitions/LusidValidationProblemDetails"
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/LusidProblemDetails"
            }
          }
        },
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/transactionportfolios/{scope}/{code}/transactions/{transactionId}/properties": {
      "post": {
        "tags": [
          "Transaction Portfolios"
        ],
        "summary": "Add transaction properties",
        "description": "Upsert one or more transaction properties to a single transaction in a portfolio",
        "operationId": "AddTransactionProperty",
        "consumes": [],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the portfolio",
            "required": true,
            "type": "string"
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the portfolio",
            "required": true,
            "type": "string"
          },
          {
            "name": "transactionId",
            "in": "path",
            "description": "Id of transaction",
            "required": true,
            "type": "string"
          },
          {
            "name": "transactionProperties",
            "in": "body",
            "description": "Transaction properties values",
            "required": false,
            "schema": {
              "type": "object",
              "additionalProperties": {
                "$ref": "#/definitions/PerpetualPropertyValue"
              },
              "example": {
                "Trade/MyScope/MyPropertyName": {
                  "metricValue": {
                    "value": 12345.5672,
                    "unit": "Unit"
                  }
                },
                "Trade/MyScope/MyPropertyName2": {
                  "metricValue": {
                    "value": 925.3,
                    "unit": "Unit"
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/AddTransactionPropertyResponse"
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "schema": {
              "$ref": "#/definitions/LusidValidationProblemDetails"
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/LusidProblemDetails"
            }
          }
        },
        "x-fbn-apistatus": "EarlyAccess"
      },
      "delete": {
        "tags": [
          "Transaction Portfolios"
        ],
        "summary": "Delete transaction property",
        "description": "Delete a property value from a single transaction in a portfolio",
        "operationId": "DeletePropertyFromTransaction",
        "consumes": [],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the portfolio",
            "required": true,
            "type": "string"
          },
          {
            "name": "code",
            "in": "path",
            "description": "Code for the portfolio",
            "required": true,
            "type": "string"
          },
          {
            "name": "transactionId",
            "in": "path",
            "description": "Id of the transaction to delete the property from",
            "required": true,
            "type": "string"
          },
          {
            "name": "transactionPropertyKey",
            "in": "query",
            "description": "The key of the property to be deleted",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeletedEntityResponse"
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "schema": {
              "$ref": "#/definitions/LusidValidationProblemDetails"
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/LusidProblemDetails"
            }
          }
        },
        "x-fbn-apistatus": "EarlyAccess"
      }
    },
    "/api/transactionportfolios/{scope}/{code}/transactions/$build": {
      "post": {
        "tags": [
          "Transaction Portfolios"
        ],
        "summary": "Build output transactions",
        "description": "Builds and returns the collection of all types of transactions that affect the holdings of a portfolio in to a set of output transactions",
        "operationId": "BuildTransactions",
        "consumes": [],
        "produces": [
          "text/plain",
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "scope",
            "in": "path",
            "description": "The scope of the portfolio",
            "required": true,
            "type": "string"
          },
          {
            "name": "code",
            "in": "path",
            "description": "The code of the portfolio",
            "required": true,
            "type": "string"
          },
          {
            "name": "asAt",
            "in": "query",
            "description": "Optional. The AsAt date of the data",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "Optional. Order the results by these fields. Use use the '-' sign to denote descending order e.g. -MyFieldName",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "uniqueItems": false
          },
          {
            "name": "start",
            "in": "query",
            "description": "Optional. When paginating, skip this number of results",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Optional. When paginating, limit the number of returned results to this many.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "propertyKeys",
            "in": "query",
            "description": "Optional. Keys for the transaction or instrument property values that will be decorated onto the transactions. No properties will be decorated if none are specified.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "uniqueItems": false
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Optional. Expression to filter the result set",
            "required": false,
            "type": "string"
          },
          {
            "name": "parameters",
            "in": "body",
            "description": "Optional. Transaction query parameters",
            "required": false,
            "schema": {
              "$ref": "#/definitions/TransactionQueryParameters"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested portfolio transactions",
            "schema": {
              "$ref": "#/definitions/VersionedResourceListOfOutputTransaction"
            },
            "examples": {
              "application/json": {
                "version": {
                  "effectiveFrom": "2019-06-07T15:45:08.826803+00:00",
                  "asAtDate": "2019-06-07T15:35:08.8268033+00:00"
                },
                "values": [
                  {
                    "transactionId": "TXN-00001",
                    "type": "Buy",
                    "description": "Purchase",
                    "instrumentIdentifiers": {
                      "Instrument/default/RIC": "RIC.L"
                    },
                    "instrumentUid": "LUID_JLH24106",
                    "transactionDate": "2018-08-04T00:00:00+00:00",
                    "settlementDate": "2018-08-06T00:00:00+00:00",
                    "units": 1000,
                    "transactionAmount": 88800,
                    "transactionPrice": {
                      "price": 88.8,
                      "type": "Price"
                    },
                    "totalConsideration": {
                      "amount": 88800,
                      "currency": "USD"
                    },
                    "exchangeRate": 1,
                    "transactionToPortfolioRate": 0.7648,
                    "transactionCurrency": "USD",
                    "properties": [
                      {
                        "key": "Trade/default/TradeToPortfolioRate",
                        "value": 0.765
                      },
                      {
                        "key": "Trade/default/SourcePortfolioId",
                        "value": "DEMO-PORTFOLIO-ID"
                      },
                      {
                        "key": "Trade/default/SourcePortfolioScope",
                        "value": "DEMO-SCOPE"
                      }
                    ],
                    "source": "",
                    "transactionStatus": "Cancelled",
                    "entryDateTime": "2018-08-04T12:22:06+00:00",
                    "cancelDateTime": "2018-08-04T12:25:14+00:00"
                  },
                  {
                    "transactionId": "TXN-00002",
                    "type": "Sell",
                    "description": "Sale",
                    "instrumentIdentifiers": {
                      "Instrument/default/ClientInternal": "INT:00024106"
                    },
                    "instrumentUid": "LUID_OI5JX1V7",
                    "transactionDate": "2018-08-07T00:00:00+00:00",
                    "settlementDate": "2018-08-10T00:00:00+00:00",
                    "units": 10000,
                    "transactionAmount": 1470100,
                    "transactionPrice": {
                      "price": 147.01,
                      "type": "Price"
                    },
                    "totalConsideration": {
                      "amount": 1470100,
                      "currency": "USD"
                    },
                    "exchangeRate": 1,
                    "transactionToPortfolioRate": 0.772,
                    "transactionCurrency": "USD",
                    "properties": [
                      {
                        "key": "Trade/default/TradeToPortfolioRate",
                        "value": 0.772
                      },
                      {
                        "key": "Trade/default/SourcePortfolioId",
                        "value": "DEMO-PORTFOLIO-ID"
                      },
                      {
                        "key": "Trade/default/SourcePortfolioScope",
                        "value": "DEMO-SCOPE"
                      },
                      {
                        "key": "Trade/default/ResultantHolding",
                        "value": 3500
                      }
                    ],
                    "source": "",
                    "transactionStatus": "Active",
                    "entryDateTime": "2018-08-07T10:30:12+00:00",
                    "realisedGainLoss": [
                      {
                        "instrumentUid": "LUID_OI5JX1V7",
                        "units": 4500,
                        "purchaseTradeDate": "2018-08-02T00:00:00+00:00",
                        "purchaseSettlementDate": "2018-08-05T00:00:00+00:00",
                        "purchasePrice": 142.96,
                        "costTradeCcy": {
                          "amount": 643320,
                          "currency": "USD"
                        },
                        "costPortfolioCcy": {
                          "amount": 493619.44,
                          "currency": "GBP"
                        },
                        "realisedTradeCcy": {
                          "amount": 18225,
                          "currency": "USD"
                        },
                        "realisedTotal": {
                          "amount": 17093.3,
                          "currency": "GBP"
                        },
                        "realisedMarket": {
                          "amount": 14069.7,
                          "currency": "GBP"
                        },
                        "realisedCurrency": {
                          "amount": 3023.6,
                          "currency": "GBP"
                        }
                      },
                      {
                        "instrumentUid": "LUID_OI5JX1V7",
                        "units": 4500,
                        "purchaseTradeDate": "2018-08-03T00:00:00+00:00",
                        "purchaseSettlementDate": "2018-08-06T00:00:00+00:00",
                        "purchasePrice": 147.7,
                        "costTradeCcy": {
                          "amount": 664650,
                          "currency": "USD"
                        },
                        "costPortfolioCcy": {
                          "amount": 510517.67,
                          "currency": "GBP"
                        },
                        "realisedTradeCcy": {
                          "amount": -3105,
                          "currency": "USD"
                        },
                        "realisedTotal": {
                          "amount": 195.07,
                          "currency": "GBP"
                        },
                        "realisedMarket": {
                          "amount": -2397.06,
                          "currency": "GBP"
                        },
                        "realisedCurrency": {
                          "amount": 2592.13,
                          "currency": "GBP"
                        }
                      },
                      {
                        "instrumentUid": "LUID_OI5JX1V7",
                        "units": 1000,
                        "purchaseTradeDate": "2018-08-06T00:00:00+00:00",
                        "purchaseSettlementDate": "2018-08-08T00:00:00+00:00",
                        "purchasePrice": 146.03,
                        "costTradeCcy": {
                          "amount": 146030,
                          "currency": "USD"
                        },
                        "costPortfolioCcy": {
                          "amount": 112851.98,
                          "currency": "GBP"
                        },
                        "realisedTradeCcy": {
                          "amount": 980,
                          "currency": "USD"
                        },
                        "realisedTotal": {
                          "amount": 639.74,
                          "currency": "GBP"
                        },
                        "realisedMarket": {
                          "amount": 756.56,
                          "currency": "GBP"
                        },
                        "realisedCurrency": {
                          "amount": -116.82,
                          "currency": "GBP"
                        }
                      }
                    ]
                  }
                ],
                "href": "http://example.com",
                "count": 2
              }
            }
          },
          "400": {
            "description": "The details of the input related failure",
            "schema": {
              "$ref": "#/definitions/LusidValidationProblemDetails"
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/LusidProblemDetails"
            }
          }
        },
        "x-fbn-apistatus": "EarlyAccess"
      }
    }
  },
  "definitions": {
    "Link": {
      "required": [
        "relation",
        "href",
        "method"
      ],
      "type": "object",
      "properties": {
        "relation": {
          "enum": [
            "Root",
            "Properties",
            "Transactions",
            "Details",
            "Constituents",
            "Holdings",
            "Commands",
            "HoldingsAdjustments",
            "Parent",
            "PropertySchema",
            "EntitySchema",
            "NextPage",
            "PreviousPage",
            "Quote",
            "ConstituentsAdjustments",
            "Values"
          ],
          "type": "string"
        },
        "href": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "method": {
          "enum": [
            "POST",
            "GET",
            "PATCH",
            "DELETE"
          ],
          "type": "string"
        }
      }
    },
    "LusidValidationProblemDetails": {
      "required": [
        "name",
        "code"
      ],
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "errorDetails": {
          "uniqueItems": false,
          "type": "array",
          "items": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        },
        "code": {
          "format": "int32",
          "type": "integer"
        },
        "errors": {
          "type": "object",
          "additionalProperties": {
            "uniqueItems": false,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "readOnly": true
        },
        "type": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "status": {
          "format": "int32",
          "type": "integer"
        },
        "detail": {
          "type": "string"
        },
        "instance": {
          "type": "string"
        }
      }
    },
    "LusidProblemDetails": {
      "required": [
        "name",
        "code"
      ],
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "errorDetails": {
          "uniqueItems": false,
          "type": "array",
          "items": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        },
        "code": {
          "format": "int32",
          "type": "integer"
        },
        "type": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "status": {
          "format": "int32",
          "type": "integer"
        },
        "detail": {
          "type": "string"
        },
        "instance": {
          "type": "string"
        }
      }
    },
    "DeletedEntityResponse": {
      "type": "object",
      "properties": {
        "href": {
          "type": "string"
        },
        "effectiveFrom": {
          "format": "date-time",
          "type": "string"
        },
        "asAt": {
          "format": "date-time",
          "type": "string"
        },
        "links": {
          "uniqueItems": false,
          "type": "array",
          "items": {
            "$ref": "#/definitions/Link"
          }
        }
      }
    },
    "ResourceId": {
      "type": "object",
      "properties": {
        "scope": {
          "type": "string"
        },
        "code": {
          "type": "string"
        }
      },
      "example": {
        "scope": "MyScope",
        "code": "MyCode"
      }
    },
    "Version": {
      "description": "Describes the version metadata of an entity.",
      "type": "object",
      "properties": {
        "effectiveFrom": {
          "format": "date-time",
          "description": "",
          "type": "string"
        },
        "asAtDate": {
          "format": "date-time",
          "description": "",
          "type": "string"
        }
      }
    },
    "ErrorDetail": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "detail": {
          "type": "string"
        }
      }
    },
    "DataType": {
      "required": [
        "typeValueRange",
        "id",
        "displayName",
        "description",
        "valueType"
      ],
      "type": "object",
      "properties": {
        "href": {
          "type": "string"
        },
        "typeValueRange": {
          "enum": [
            "Open",
            "Closed"
          ],
          "type": "string"
        },
        "id": {
          "$ref": "#/definitions/ResourceId"
        },
        "displayName": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "valueType": {
          "enum": [
            "String",
            "Int",
            "Decimal",
            "DateTime",
            "Boolean",
            "Map",
            "List",
            "PropertyArray",
            "Percentage",
            "BenchmarkType",
            "Code",
            "Id",
            "Uri",
            "ArrayOfIds",
            "ArrayOfTransactionAliases",
            "ArrayofTransactionMovements",
            "ArrayofUnits",
            "StringArray",
            "CurrencyAndAmount",
            "TradePrice",
            "UnitCreation",
            "Currency",
            "UserId",
            "MetricValue",
            "QuoteId",
            "ArrayOfQuoteIds",
            "ResourceId",
            "ResultValue",
            "CutLocalTime",
            "DateOrCutLabel",
            "Transition"
          ],
          "type": "string"
        },
        "acceptableValues": {
          "uniqueItems": false,
          "type": "array",
          "items": {
            "type": "object"
          }
        },
        "unitSchema": {
          "enum": [
            "NoUnits",
            "Basic",
            "Iso4217Currency"
          ],
          "type": "string"
        },
        "acceptableUnits": {
          "uniqueItems": false,
          "type": "array",
          "items": {
            "$ref": "#/definitions/IUnitDefinitionDto"
          }
        },
        "links": {
          "uniqueItems": false,
          "type": "array",
          "items": {
            "$ref": "#/definitions/Link"
          }
        }
      }
    },
    "IUnitDefinitionDto": {
      "type": "object",
      "properties": {
        "schema": {
          "enum": [
            "NoUnits",
            "Basic",
            "Iso4217Currency"
          ],
          "type": "string",
          "readOnly": true
        },
        "code": {
          "type": "string",
          "readOnly": true
        },
        "displayName": {
          "type": "string",
          "readOnly": true
        },
        "description": {
          "type": "string",
          "readOnly": true
        }
      }
    },
    "ResourceListOfDataType": {
      "required": [
        "values"
      ],
      "type": "object",
      "properties": {
        "values": {
          "uniqueItems": false,
          "type": "array",
          "items": {
            "$ref": "#/definitions/DataType"
          }
        },
        "href": {
          "description": "The Uri that returns the same result as the original request,\r\nbut may include resolved as at time(s).",
          "type": "string"
        },
        "count": {
          "format": "int32",
          "description": "The total number of items (when available)",
          "type": "integer"
        },
        "links": {
          "uniqueItems": false,
          "type": "array",
          "items": {
            "$ref": "#/definitions/Link"
          }
        }
      }
    },
    "ResourceListOfIUnitDefinitionDto": {
      "required": [
        "values"
      ],
      "type": "object",
      "properties": {
        "values": {
          "uniqueItems": false,
          "type": "array",
          "items": {
            "$ref": "#/definitions/IUnitDefinitionDto"
          }
        },
        "href": {
          "description": "The Uri that returns the same result as the original request,\r\nbut may include resolved as at time(s).",
          "type": "string"
        },
        "count": {
          "format": "int32",
          "description": "The total number of items (when available)",
          "type": "integer"
        },
        "links": {
          "uniqueItems": false,
          "type": "array",
          "items": {
            "$ref": "#/definitions/Link"
          }
        }
      }
    },
    "CreateDerivedTransactionPortfolioRequest": {
      "required": [
        "displayName",
        "code",
        "parentPortfolioId"
      ],
      "type": "object",
      "properties": {
        "displayName": {
          "description": "",
          "type": "string"
        },
        "description": {
          "description": "",
          "type": "string"
        },
        "code": {
          "description": "",
          "type": "string"
        },
        "parentPortfolioId": {
          "$ref": "#/definitions/ResourceId",
          "description": ""
        },
        "created": {
          "format": "date-time",
          "description": "",
          "type": "string"
        },
        "corporateActionSourceId": {
          "$ref": "#/definitions/ResourceId",
          "description": ""
        },
        "accountingMethod": {
          "description": "",
          "enum": [
            "Default",
            "AverageCost",
            "FirstInFirstOut",
            "LastInFirstOut",
            "HighestCostFirst",
            "LowestCostFirst"
          ],
          "type": "string"
        },
        "subHoldingKeys": {
          "description": "",
          "uniqueItems": false,
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "example": {
        "displayName": "MyDerivedPortfolioName",
        "description": "Example long form portfolio description",
        "code": "MyDerivedPortfolioCode",
        "parentPortfolioId": {
          "scope": "MyParentPortfolioScope",
          "code": "MyParentPortfolioCode"
        },
        "created": "2019-06-07T15:45:07.1925558+00:00",
        "corporateActionSourceId": {
          "scope": "MyScope",
          "code": "MyCorporateActionSourceId"
        },
        "accountingMethod": "FirstInFirstOut",
        "subHoldingKeys": [
          "Trade/MyScope/Strategy",
          "Trade/MyScope/SubAccount"
        ]
      }
    },
    "Portfolio": {
      "type": "object",
      "properties": {
        "href": {
          "description": "Link to retrieve the current entity",
          "type": "string"
        },
        "id": {
          "$ref": "#/definitions/ResourceId",
          "description": "Identifier for the portfolio"
        },
        "type": {
          "description": "The type of portfolio this is (e.g. Transaction Portfolio, Reference  Portfolio)",
          "enum": [
            "Transaction",
            "Reference",
            "DerivedTransaction"
          ],
          "type": "string"
        },
        "displayName": {
          "description": "Display name of the portfolio",
          "type": "string"
        },
        "description": {
          "description": "Description of the portfolio",
          "type": "string"
        },
        "created": {
          "format": "date-time",
          "description": "Portfolio creation time in UTC",
          "type": "string"
        },
        "parentPortfolioId": {
          "$ref": "#/definitions/ResourceId",
          "description": "If this is a derived portfolio, the identifier of the portfolio from which it is derived"
        },
        "version": {
          "$ref": "#/definitions/Version",
          "description": "The version of the portfolio"
        },
        "isDerived": {
          "type": "boolean"
        },
        "links": {
          "uniqueItems": false,
          "type": "array",
          "items": {
            "$ref": "#/definitions/Link"
          }
        }
      }
    },
    "InstrumentDefinition": {
      "required": [
        "name",
        "identifiers"
      ],
      "type": "object",
      "properties": {
        "name": {
          "description": "Required. The name of the instrument",
          "type": "string"
        },
        "identifiers": {
          "description": "Required. A set of identifiers that identify this instrument (BBG123456)\r\nwith the key being the type of identifier (RIC, FIGI).\r\nMust include atleast one unique identifier.",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/InstrumentIdValue"
          }
        },
        "properties": {
          "description": "Optional. A collection of properties to upsert on the instrument.",
          "uniqueItems": false,
          "type": "array",
          "items": {
            "$ref": "#/definitions/InstrumentProperty"
          }
        },
        "lookThroughPortfolioId": {
          "$ref": "#/definitions/ResourceId",
          "description": "Optional. The identifier of the portfolio that represents this instrument."
        },
        "definition": {
          "$ref": "#/definitions/InstrumentEconomicDefinition",
          "description": "Expanded instrument definition - in the case of OTC instruments\r\nthis contains the definition of the non-exchange traded instrument.\r\nThe format for this can be client-defined, but in order to transparently use\r\nvendor libraries it must conform to a format that LUSID understands."
        }
      }
    },
    "InstrumentIdValue": {
      "required": [
        "value"
      ],
      "type": "object",
      "properties": {
        "value": {
          "description": "The value of the instrument id, which must not be empty or null. e.g, 'BBG123456'",
          "type": "string"
        },
        "effectiveAt": {
          "format": "date-time",
          "description": "The effective at date of the instrument id, which is optional. The default value in the null case\r\nis DateTimeOffset.MinValue.",
          "type": "string"
        }
      }
    },
    "InstrumentProperty": {
      "type": "object",
      "properties": {
        "key": {
          "description": "The property key of the property, e.g, 'Instrument/default/Isin'",
          "type": "string"
        },
        "value": {
          "$ref": "#/definitions/PropertyValue",
          "description": "The value of the property, which must not be empty or null. e.g, 'US0378331005'"
        }
      }
    },
    "InstrumentEconomicDefinition": {
      "description": "Expanded instrument definition - in the case of OTC instruments\r\nthis contains the definition of the non-exchange traded instrument.\r\nThe format for this can be client-defined, but in order to transparently use\r\nvendor libraries it must conform to a format that LUSID understands.",
      "required": [
        "instrumentFormat",
        "content"
      ],
      "type": "object",
      "properties": {
        "instrumentFormat": {
          "type": "string"
        },
        "content": {
          "type": "string"
        }
      }
    },
    "PropertyValue": {
      "type": "object",
      "properties": {
        "labelValue": {
          "description": "",
          "type": "string"
        },
        "metricValue": {
          "$ref": "#/definitions/MetricValue",
          "description": ""
        },
        "effectiveFrom": {
          "format": "date-time",
          "description": "Date for which the property is effective from",
          "type": "string"
        }
      }
    },
    "MetricValue": {
      "type": "object",
      "properties": {
        "value": {
          "format": "double",
          "type": "number"
        },
        "unit": {
          "type": "string"
        }
      }
    },
    "UpsertInstrumentsResponse": {
      "type": "object",
      "properties": {
        "href": {
          "type": "string"
        },
        "values": {
          "description": "The collection of upserted instruments with their latest parameters.",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/Instrument"
          }
        },
        "failed": {
          "description": "If any instruments failed to be upserted, they will be listed in 'Failed', along\r\nwith a reason why.",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/ErrorDetail"
          }
        },
        "links": {
          "uniqueItems": false,
          "type": "array",
          "items": {
            "$ref": "#/definitions/Link"
          }
        }
      }
    },
    "Instrument": {
      "required": [
        "state"
      ],
      "type": "object",
      "properties": {
        "href": {
          "type": "string"
        },
        "lusidInstrumentId": {
          "description": "The lusid instrument id (LUID) of the instrument",
          "type": "string"
        },
        "version": {
          "$ref": "#/definitions/Version",
          "description": "The version of the instrument"
        },
        "name": {
          "description": "The name of the instrument",
          "type": "string"
        },
        "identifiers": {
          "description": "The set of identifiers that can be used to uniquely identify the instrument",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "properties": {
          "description": "Any requested instrument properties. If no property can be found for the instrument, then\r\na value of 'Unknown' will be returned",
          "uniqueItems": false,
          "type": "array",
          "items": {
            "$ref": "#/definitions/Property"
          }
        },
        "lookthroughPortfolio": {
          "$ref": "#/definitions/ResourceId",
          "description": "The lookthrough portfolio of the instrument (if any)."
        },
        "instrumentDefinition": {
          "$ref": "#/definitions/InstrumentEconomicDefinition",
          "description": "The economic definition of the instrument for an OTC or instrument where an expanded definition exists."
        },
        "state": {
          "enum": [
            "Active",
            "Inactive"
          ],
          "type": "string"
        },
        "links": {
          "uniqueItems": false,
          "type": "array",
          "items": {
            "$ref": "#/definitions/Link"
          }
        }
      }
    },
    "Property": {
      "required": [
        "key",
        "value"
      ],
      "type": "object",
      "properties": {
        "key": {
          "description": "",
          "type": "string"
        },
        "value": {
          "description": "",
          "type": "object"
        },
        "unit": {
          "description": "",
          "type": "string"
        },
        "effectiveFrom": {
          "format": "date-time",
          "description": "Date for which the property is effective from",
          "type": "string"
        }
      }
    },
    "ResourceListOfInstrument": {
      "required": [
        "values"
      ],
      "type": "object",
      "properties": {
        "values": {
          "uniqueItems": false,
          "type": "array",
          "items": {
            "$ref": "#/definitions/Instrument"
          }
        },
        "href": {
          "description": "The Uri that returns the same result as the original request,\r\nbut may include resolved as at time(s).",
          "type": "string"
        },
        "count": {
          "format": "int32",
          "description": "The total number of items (when available)",
          "type": "integer"
        },
        "links": {
          "uniqueItems": false,
          "type": "array",
          "items": {
            "$ref": "#/definitions/Link"
          }
        }
      }
    },
    "UpdateInstrumentIdentifierRequest": {
      "type": "object",
      "properties": {
        "type": {
          "description": "The type of the identifier to upsert. This must be one of the code types marked as \r\nallowable for instrument identifiers.",
          "type": "string"
        },
        "value": {
          "description": "The value of the identifier. If set to `null`, this will remove the identifier completely.\r\nNote that, if an instrument only has one identifier, it is an error to remove this.",
          "type": "string"
        },
        "effectiveAt": {
          "format": "dateorcutlabel",
          "description": "The date at which the identifier modification is to be effective from. If unset, will\r\ndefault to `now`.",
          "type": "string"
        }
      },
      "example": {
        "type": "Figi",
        "value": "updated-figi",
        "effectiveAt": "2018-02-01T10:00:00+00:00"
      }
    },
    "DeleteInstrumentResponse": {
      "type": "object",
      "properties": {
        "href": {
          "type": "string"
        },
        "asAt": {
          "format": "date-time",
          "description": "The 'as at' time that the instrument was deleted at. As at times preceding this can\r\nstill be used to query the instrument.",
          "type": "string"
        },
        "links": {
          "uniqueItems": false,
          "type": "array",
          "items": {
            "$ref": "#/definitions/Link"
          }
        }
      }
    },
    "GetInstrumentsResponse": {
      "type": "object",
      "properties": {
        "href": {
          "type": "string"
        },
        "values": {
          "description": "The instruments, keyed by their requested identifier. Only instruments that were found\r\nwill be contained in this collection.",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/Instrument"
          }
        },
        "failed": {
          "description": "If any instruments were not found, then they will be listed in as 'Failed', along with the nature\r\nof their failure.",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/ErrorDetail"
          }
        },
        "links": {
          "uniqueItems": false,
          "type": "array",
          "items": {
            "$ref": "#/definitions/Link"
          }
        }
      }
    },
    "UpsertInstrumentPropertyRequest": {
      "type": "object",
      "properties": {
        "lusidInstrumentId": {
          "description": "Unique instrument identifier",
          "type": "string"
        },
        "properties": {
          "description": "A collection of properties to create or update",
          "uniqueItems": false,
          "type": "array",
          "items": {
            "$ref": "#/definitions/InstrumentProperty"
          }
        },
        "deletedProperties": {
          "description": "A collection of property keys to remove property values from, if any are set for the instrument",
          "uniqueItems": false,
          "type": "array",
          "items": {
            "$ref": "#/definitions/DeleteInstrumentPropertyRequest"
          }
        }
      },
      "example": {
        "lusidInstrumentId": "LUID_00000000",
        "properties": [
          {
            "key": "Instrument/MyScope/MyPropertyName",
            "value": {
              "labelValue": "MyValue",
              "effectiveFrom": "2019-06-07T15:45:07.3376609+00:00"
            }
          }
        ],
        "deletedProperties": []
      }
    },
    "DeleteInstrumentPropertyRequest": {
      "type": "object",
      "properties": {
        "instrumentPropertyKey": {
          "description": "The property key of the property to be removed from the instrument, e.g 'Instrument/default/Cusip`",
          "type": "string"
        },
        "effectiveFrom": {
          "format": "date-time",
          "description": "The date at which the property removal should be effective from. If no value is set, then 'now' is used.",
          "type": "string"
        }
      }
    },
    "UpsertInstrumentPropertiesResponse": {
      "required": [
        "asAtDate"
      ],
      "type": "object",
      "properties": {
        "asAtDate": {
          "format": "date-time",
          "type": "string"
        },
        "links": {
          "uniqueItems": false,
          "type": "array",
          "items": {
            "$ref": "#/definitions/Link"
          }
        }
      }
    },
    "ResourceListOfInstrumentIdTypeDescriptor": {
      "required": [
        "values"
      ],
      "type": "object",
      "properties": {
        "values": {
          "uniqueItems": false,
          "type": "array",
          "items": {
            "$ref": "#/definitions/InstrumentIdTypeDescriptor"
          }
        },
        "href": {
          "description": "The Uri that returns the same result as the original request,\r\nbut may include resolved as at time(s).",
          "type": "string"
        },
        "count": {
          "format": "int32",
          "description": "The total number of items (when available)",
          "type": "integer"
        },
        "links": {
          "uniqueItems": false,
          "type": "array",
          "items": {
            "$ref": "#/definitions/Link"
          }
        }
      }
    },
    "InstrumentIdTypeDescriptor": {
      "description": "Describes an instrument identifier type - what it's name, property key, and cardinality type are.",
      "required": [
        "idName",
        "propertyKeyValue",
        "isUniqueIdentifier"
      ],
      "type": "object",
      "properties": {
        "idName": {
          "description": "The name of the identifier type",
          "type": "string"
        },
        "propertyKeyValue": {
          "description": "The property key that corresponds to this instrument identifier type",
          "type": "string"
        },
        "isUniqueIdentifier": {
          "description": "The cardinality of the identifier type (i.e., how many instruments may share an identifer\r\nof this identifier type)",
          "type": "boolean"
        }
      }
    },
    "ResourceListOfAccessControlledResource": {
      "required": [
        "values"
      ],
      "type": "object",
      "properties": {
        "values": {
          "uniqueItems": false,
          "type": "array",
          "items": {
            "$ref": "#/definitions/AccessControlledResource"
          }
        },
        "href": {
          "description": "The Uri that returns the same result as the original request,\r\nbut may include resolved as at time(s).",
          "type": "string"
        },
        "count": {
          "format": "int32",
          "description": "The total number of items (when available)",
          "type": "integer"
        },
        "links": {
          "uniqueItems": false,
          "type": "array",
          "items": {
            "$ref": "#/definitions/Link"
          }
        }
      }
    },
    "AccessControlledResource": {
      "description": "A resource to which access can be controlled",
      "required": [
        "description",
        "actions"
      ],
      "type": "object",
      "properties": {
        "application": {
          "description": "The application to which this resource belongs",
          "type": "string"
        },
        "name": {
          "description": "The display name of the resource",
          "type": "string"
        },
        "description": {
          "description": "The description of the resource",
          "type": "string"
        },
        "actions": {
          "description": "The actions acceptable for this type of resource",
          "uniqueItems": false,
          "type": "array",
          "items": {
            "$ref": "#/definitions/AccessControlledAction"
          }
        },
        "identifierParts": {
          "description": "The constituent parts of a valid identifier for this resource",
          "uniqueItems": false,
          "type": "array",
          "items": {
            "$ref": "#/definitions/IdentifierPartSchema"
          }
        },
        "links": {
          "uniqueItems": false,
          "type": "array",
          "items": {
            "$ref": "#/definitions/Link"
          }
        }
      }
    },
    "AccessControlledAction": {
      "description": "An action on LUSID that can be access controlled",
      "required": [
        "description",
        "action"
      ],
      "type": "object",
      "properties": {
        "description": {
          "description": "The description of the action",
          "type": "string"
        },
        "action": {
          "$ref": "#/definitions/ActionId",
          "description": "The fully qualified ActionId that can be access controlled"
        },
        "limitedSet": {
          "description": "When populated, the provided values are the limited set of resources that are allowed to be specified for\r\naccess control for this action",
          "uniqueItems": false,
          "type": "array",
          "items": {
            "$ref": "#/definitions/IdSelectorDefinition"
          }
        },
        "links": {
          "uniqueItems": false,
          "type": "array",
          "items": {
            "$ref": "#/definitions/Link"
          }
        }
      }
    },
    "IdentifierPartSchema": {
      "description": "The schema of an contributing part of a valid LUSID resource identifier",
      "required": [
        "index",
        "name",
        "displayName",
        "description",
        "required"
      ],
      "type": "object",
      "properties": {
        "index": {
          "format": "int32",
          "description": "The typical index in the identifier in which this part appears",
          "type": "integer",
          "readOnly": true
        },
        "name": {
          "description": "The name of the identifier part that can/should be provided for this resource type",
          "type": "string",
          "readOnly": true
        },
        "displayName": {
          "description": "The display name of the identifier part",
          "type": "string",
          "readOnly": true
        },
        "description": {
          "description": "A brief description of the point of this identifier part",
          "type": "string",
          "readOnly": true
        },
        "required": {
          "description": "Whether a value is required to be provided",
          "type": "boolean",
          "readOnly": true
        },
        "links": {
          "uniqueItems": false,
          "type": "array",
          "items": {
            "$ref": "#/definitions/Link"
          }
        }
      }
    },
    "ActionId": {
      "required": [
        "scope",
        "activity",
        "entity"
      ],
      "type": "object",
      "properties": {
        "scope": {
          "maxLength": 100,
          "minLength": 3,
          "type": "string"
        },
        "activity": {
          "maxLength": 25,
          "minLength": 3,
          "type": "string"
        },
        "entity": {
          "maxLength": 25,
          "minLength": 3,
          "type": "string"
        }
      }
    },
    "IdSelectorDefinition": {
      "type": "object",
      "properties": {
        "identifier": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "actions": {
          "uniqueItems": false,
          "type": "array",
          "items": {
            "$ref": "#/definitions/ActionId"
          }
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        }
      }
    },
    "FileResponse": {
      "description": "Allows a file (represented as a stream) to be returned from an Api call",
      "type": "object",
      "properties": {
        "fileStream": {
          "$ref": "#/definitions/Stream",
          "readOnly": true
        },
        "contentType": {
          "type": "string",
          "readOnly": true
        },
        "downloadedFilename": {
          "type": "string",
          "readOnly": true
        }
      }
    },
    "Stream": {
      "type": "object",
      "properties": {
        "canRead": {
          "type": "boolean",
          "readOnly": true
        },
        "canSeek": {
          "type": "boolean",
          "readOnly": true
        },
        "canTimeout": {
          "type": "boolean",
          "readOnly": true
        },
        "canWrite": {
          "type": "boolean",
          "readOnly": true
        },
        "length": {
          "format": "int64",
          "type": "integer",
          "readOnly": true
        },
        "position": {
          "format": "int64",
          "type": "integer"
        },
        "readTimeout": {
          "format": "int32",
          "type": "integer"
        },
        "writeTimeout": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "VersionSummaryDto": {
      "type": "object",
      "properties": {
        "apiVersion": {
          "type": "string",
          "readOnly": true
        },
        "buildVersion": {
          "type": "string",
          "readOnly": true
        },
        "excelVersion": {
          "type": "string",
          "readOnly": true
        },
        "links": {
          "uniqueItems": false,
          "type": "array",
          "items": {
            "$ref": "#/definitions/Link"
          }
        }
      }
    },
    "CreatePortfolioGroupRequest": {
      "required": [
        "code",
        "displayName"
      ],
      "type": "object",
      "properties": {
        "code": {
          "type": "string"
        },
        "values": {
          "uniqueItems": false,
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResourceId"
          }
        },
        "subGroups": {
          "uniqueItems": false,
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResourceId"
          }
        },
        "displayName": {
          "type": "string"
        },
        "description": {
          "type": "string"
        }
      },
      "example": {
        "code": "MyGroupCode",
        "values": [
          {
            "scope": "MyScope",
            "code": "MyPortfolioCode1"
          },
          {
            "scope": "MyScope",
            "code": "MyPortfolioCode2"
          }
        ],
        "subGroups": [
          {
            "scope": "MyScope",
            "code": "MySubGroupCode"
          }
        ],
        "displayName": "MyGroupName",
        "description": "My group description"
      }
    },
    "PortfolioGroup": {
      "type": "object",
      "properties": {
        "href": {
          "type": "string"
        },
        "id": {
          "$ref": "#/definitions/ResourceId"
        },
        "displayName": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "portfolios": {
          "uniqueItems": false,
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResourceId"
          }
        },
        "subGroups": {
          "uniqueItems": false,
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResourceId"
          }
        },
        "version": {
          "$ref": "#/definitions/Version"
        },
        "links": {
          "uniqueItems": false,
          "type": "array",
          "items": {
            "$ref": "#/definitions/Link"
          }
        }
      }
    },
    "ResourceListOfPortfolioGroup": {
      "required": [
        "values"
      ],
      "type": "object",
      "properties": {
        "values": {
          "uniqueItems": false,
          "type": "array",
          "items": {
            "$ref": "#/definitions/PortfolioGroup"
          }
        },
        "href": {
          "description": "The Uri that returns the same result as the original request,\r\nbut may include resolved as at time(s).",
          "type": "string"
        },
        "count": {
          "format": "int32",
          "description": "The total number of items (when available)",
          "type": "integer"
        },
        "links": {
          "uniqueItems": false,
          "type": "array",
          "items": {
            "$ref": "#/definitions/Link"
          }
        }
      }
    },
    "UpdatePortfolioGroupRequest": {
      "required": [
        "displayName"
      ],
      "type": "object",
      "properties": {
        "displayName": {
          "type": "string"
        },
        "description": {
          "type": "string"
        }
      },
      "example": {
        "displayName": "MyGroupName",
        "description": "My Group Description"
      }
    },
    "ResourceListOfProcessedCommand": {
      "required": [
        "values"
      ],
      "type": "object",
      "properties": {
        "values": {
          "uniqueItems": false,
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProcessedCommand"
          }
        },
        "href": {
          "description": "The Uri that returns the same result as the original request,\r\nbut may include resolved as at time(s).",
          "type": "string"
        },
        "count": {
          "format": "int32",
          "description": "The total number of items (when available)",
          "type": "integer"
        },
        "links": {
          "uniqueItems": false,
          "type": "array",
          "items": {
            "$ref": "#/definitions/Link"
          }
        }
      }
    },
    "ProcessedCommand": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string"
        },
        "path": {
          "type": "string"
        },
        "userId": {
          "$ref": "#/definitions/User",
          "description": "The user that issued the command."
        },
        "processedTime": {
          "description": "The as at time of the events published by the processing of\r\nthis command.",
          "type": "object"
        }
      }
    },
    "User": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "readOnly": true
        }
      }
    },
    "ExpandedGroup": {
      "type": "object",
      "properties": {
        "href": {
          "type": "string"
        },
        "id": {
          "$ref": "#/definitions/ResourceId"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "values": {
          "uniqueItems": false,
          "type": "array",
          "items": {
            "$ref": "#/definitions/CompletePortfolio"
          }
        },
        "subGroups": {
          "uniqueItems": false,
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExpandedGroup"
          }
        },
        "version": {
          "$ref": "#/definitions/Version"
        },
        "links": {
          "uniqueItems": false,
          "type": "array",
          "items": {
            "$ref": "#/definitions/Link"
          }
        }
      }
    },
    "CompletePortfolio": {
      "type": "object",
      "properties": {
        "id": {
          "$ref": "#/definitions/ResourceId",
          "readOnly": true
        },
        "href": {
          "type": "string",
          "readOnly": true
        },
        "description": {
          "type": "string",
          "readOnly": true
        },
        "displayName": {
          "type": "string",
          "readOnly": true
        },
        "created": {
          "format": "date-time",
          "type": "string",
          "readOnly": true
        },
        "parentPortfolioId": {
          "$ref": "#/definitions/ResourceId",
          "readOnly": true
        },
        "isDerived": {
          "type": "boolean",
          "readOnly": true
        },
        "type": {
          "enum": [
            "Transaction",
            "Reference",
            "DerivedTransaction"
          ],
          "type": "string",
          "readOnly": true
        },
        "version": {
          "$ref": "#/definitions/Version"
        },
        "properties": {
          "uniqueItems": false,
          "type": "array",
          "items": {
            "$ref": "#/definitions/Property"
          }
        },
        "baseCurrency": {
          "type": "string"
        },
        "links": {
          "uniqueItems": false,
          "type": "array",
          "items": {
            "$ref": "#/definitions/Link"
          }
        }
      }
    },
    "ResourceListOfPortfolio": {
      "required": [
        "values"
      ],
      "type": "object",
      "properties": {
        "values": {
          "uniqueItems": false,
          "type": "array",
          "items": {
            "$ref": "#/definitions/Portfolio"
          }
        },
        "href": {
          "description": "The Uri that returns the same result as the original request,\r\nbut may include resolved as at time(s).",
          "type": "string"
        },
        "count": {
          "format": "int32",
          "description": "The total number of items (when available)",
          "type": "integer"
        },
        "links": {
          "uniqueItems": false,
          "type": "array",
          "items": {
            "$ref": "#/definitions/Link"
          }
        }
      }
    },
    "UpdatePortfolioRequest": {
      "required": [
        "displayName"
      ],
      "type": "object",
      "properties": {
        "displayName": {
          "description": "",
          "type": "string"
        },
        "description": {
          "description": "",
          "type": "string"
        },
        "created": {
          "format": "date-time",
          "description": "",
          "type": "string"
        }
      },
      "example": {
        "displayName": "MyPortfolioName",
        "description": "Long form description of portfolio",
        "created": "2019-06-07T15:45:07.9568371+00:00"
      }
    },
    "PortfolioProperties": {
      "type": "object",
      "properties": {
        "href": {
          "type": "string"
        },
        "originPortfolioId": {
          "$ref": "#/definitions/ResourceId"
        },
        "properties": {
          "uniqueItems": false,
          "type": "array",
          "items": {
            "$ref": "#/definitions/Property"
          }
        },
        "version": {
          "$ref": "#/definitions/Version",
          "description": "The version of the portfolio"
        },
        "links": {
          "uniqueItems": false,
          "type": "array",
          "items": {
            "$ref": "#/definitions/Link"
          }
        }
      }
    },
    "PortfoliosReconciliationRequest": {
      "required": [
        "left",
        "right",
        "instrumentPropertyKeys"
      ],
      "type": "object",
      "properties": {
        "left": {
          "$ref": "#/definitions/PortfolioReconciliationRequest",
          "description": "The specification of the left hand side of the portfolio reconciliation"
        },
        "right": {
          "$ref": "#/definitions/PortfolioReconciliationRequest",
          "description": "The specification of the right hand side of the portfolio reconciliation"
        },
        "instrumentPropertyKeys": {
          "description": "Instrument properties to be included with any identified breaks. These properties will be in the effective and AsAt dates of the left portfolio",
          "uniqueItems": false,
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "example": {
        "left": {
          "portfolioId": {
            "scope": "MySourceScope",
            "code": "MySourcePortfolioCode"
          },
          "effectiveAt": "2019-06-07T15:45:08.035219+00:00",
          "asAt": "2019-06-07T15:45:08.0352218+00:00"
        },
        "right": {
          "portfolioId": {
            "scope": "MyTargetScope",
            "code": "MyTargetPortfolioCode"
          },
          "effectiveAt": "2019-06-07T15:45:08.0352234+00:00",
          "asAt": "2019-06-07T15:45:08.0352237+00:00"
        },
        "instrumentPropertyKeys": [
          "Instrument/default/Name"
        ]
      }
    },
    "PortfolioReconciliationRequest": {
      "required": [
        "portfolioId",
        "effectiveAt"
      ],
      "type": "object",
      "properties": {
        "portfolioId": {
          "$ref": "#/definitions/ResourceId",
          "description": "The id of the portfolio to be reconciled"
        },
        "effectiveAt": {
          "format": "dateorcutlabel",
          "description": "The effective date of the portfolio",
          "type": "string"
        },
        "asAt": {
          "format": "date-time",
          "description": "Optional. The AsAt date of the portfolio",
          "type": "string"
        }
      }
    },
    "ResourceListOfReconciliationBreak": {
      "required": [
        "values"
      ],
      "type": "object",
      "properties": {
        "values": {
          "uniqueItems": false,
          "type": "array",
          "items": {
            "$ref": "#/definitions/ReconciliationBreak"
          }
        },
        "href": {
          "description": "The Uri that returns the same result as the original request,\r\nbut may include resolved as at time(s).",
          "type": "string"
        },
        "count": {
          "format": "int32",
          "description": "The total number of items (when available)",
          "type": "integer"
        },
        "links": {
          "uniqueItems": false,
          "type": "array",
          "items": {
            "$ref": "#/definitions/Link"
          }
        }
      }
    },
    "ReconciliationBreak": {
      "description": "A reconciliation break",
      "required": [
        "instrumentUid",
        "subHoldingKeys",
        "leftUnits",
        "rightUnits",
        "differenceUnits",
        "leftCost",
        "rightCost",
        "differenceCost",
        "instrumentProperties"
      ],
      "type": "object",
      "properties": {
        "instrumentUid": {
          "description": "Unique instrument identifier",
          "type": "string"
        },
        "subHoldingKeys": {
          "description": "Any other properties that comprise the Sub-Holding Key",
          "uniqueItems": false,
          "type": "array",
          "items": {
            "$ref": "#/definitions/PerpetualProperty"
          }
        },
        "leftUnits": {
          "format": "double",
          "description": "Units from the left hand side",
          "type": "number"
        },
        "rightUnits": {
          "format": "double",
          "description": "Units from the right hand side",
          "type": "number"
        },
        "differenceUnits": {
          "format": "double",
          "description": "Difference in units",
          "type": "number"
        },
        "leftCost": {
          "$ref": "#/definitions/CurrencyAndAmount",
          "description": "Cost from the left hand side"
        },
        "rightCost": {
          "$ref": "#/definitions/CurrencyAndAmount",
          "description": "Cost from the right hand side"
        },
        "differenceCost": {
          "$ref": "#/definitions/CurrencyAndAmount",
          "description": "Difference in cost"
        },
        "instrumentProperties": {
          "description": "Additional features relating to the security",
          "uniqueItems": false,
          "type": "array",
          "items": {
            "$ref": "#/definitions/Property"
          }
        }
      }
    },
    "PerpetualProperty": {
      "description": "This is intended to be the external facing unitemporal property specification data type.",
      "required": [
        "key",
        "value"
      ],
      "type": "object",
      "properties": {
        "key": {
          "description": "",
          "type": "string"
        },
        "value": {
          "description": "",
          "type": "object"
        },
        "unit": {
          "description": "",
          "type": "string"
        }
      }
    },
    "CurrencyAndAmount": {
      "type": "object",
      "properties": {
        "amount": {
          "format": "double",
          "type": "number"
        },
        "currency": {
          "type": "string"
        }
      }
    },
    "CreatePropertyDefinitionRequest": {
      "type": "object",
      "properties": {
        "domain": {
          "enum": [
            "Trade",
            "Portfolio",
            "Holding",
            "ReferenceHolding",
            "TransactionConfiguration",
            "Instrument",
            "CutLabelDefinition",
            "Analytic"
          ],
          "type": "string"
        },
        "scope": {
          "type": "string"
        },
        "code": {
          "type": "string"
        },
        "valueRequired": {
          "type": "boolean"
        },
        "displayName": {
          "type": "string"
        },
        "dataTypeId": {
          "$ref": "#/definitions/ResourceId"
        },
        "lifeTime": {
          "enum": [
            "Perpetual",
            "TimeVariant"
          ],
          "type": "string"
        },
        "type": {
          "enum": [
            "Label",
            "Metric",
            "Information"
          ],
          "type": "string"
        }
      },
      "example": {
        "domain": "Portfolio",
        "scope": "MyScope",
        "code": "MyPropertyName",
        "valueRequired": false,
        "displayName": "My Property Display Name",
        "dataTypeId": {
          "scope": "system",
          "code": "string"
        },
        "lifeTime": "Perpetual",
        "type": "Label"
      }
    },
    "PropertyDefinition": {
      "type": "object",
      "properties": {
        "href": {
          "type": "string"
        },
        "key": {
          "type": "string"
        },
        "valueType": {
          "enum": [
            "String",
            "Int",
            "Decimal",
            "DateTime",
            "Boolean",
            "Map",
            "List",
            "PropertyArray",
            "Percentage",
            "BenchmarkType",
            "Code",
            "Id",
            "Uri",
            "ArrayOfIds",
            "ArrayOfTransactionAliases",
            "ArrayofTransactionMovements",
            "ArrayofUnits",
            "StringArray",
            "CurrencyAndAmount",
            "TradePrice",
            "UnitCreation",
            "Currency",
            "UserId",
            "MetricValue",
            "QuoteId",
            "ArrayOfQuoteIds",
            "ResourceId",
            "ResultValue",
            "CutLocalTime",
            "DateOrCutLabel",
            "Transition"
          ],
          "type": "string"
        },
        "valueRequired": {
          "type": "boolean"
        },
        "displayName": {
          "type": "string"
        },
        "dataTypeId": {
          "$ref": "#/definitions/ResourceId"
        },
        "lifeTime": {
          "enum": [
            "Perpetual",
            "TimeVariant"
          ],
          "type": "string"
        },
        "type": {
          "enum": [
            "Label",
            "Metric",
            "Information"
          ],
          "type": "string"
        },
        "unitSchema": {
          "enum": [
            "NoUnits",
            "Basic",
            "Iso4217Currency"
          ],
          "type": "string"
        },
        "domain": {
          "enum": [
            "Trade",
            "Portfolio",
            "Holding",
            "ReferenceHolding",
            "TransactionConfiguration",
            "Instrument",
            "CutLabelDefinition",
            "Analytic"
          ],
          "type": "string",
          "readOnly": true
        },
        "scope": {
          "type": "string",
          "readOnly": true
        },
        "code": {
          "type": "string",
          "readOnly": true
        },
        "links": {
          "uniqueItems": false,
          "type": "array",
          "items": {
            "$ref": "#/definitions/Link"
          }
        }
      }
    },
    "ResourceListOfPropertyDefinition": {
      "required": [
        "values"
      ],
      "type": "object",
      "properties": {
        "values": {
          "uniqueItems": false,
          "type": "array",
          "items": {
            "$ref": "#/definitions/PropertyDefinition"
          }
        },
        "href": {
          "description": "The Uri that returns the same result as the original request,\r\nbut may include resolved as at time(s).",
          "type": "string"
        },
        "count": {
          "format": "int32",
          "description": "The total number of items (when available)",
          "type": "integer"
        },
        "links": {
          "uniqueItems": false,
          "type": "array",
          "items": {
            "$ref": "#/definitions/Link"
          }
        }
      }
    },
    "UpdatePropertyDefinitionRequest": {
      "type": "object",
      "properties": {
        "displayName": {
          "type": "string"
        },
        "lifeTime": {
          "enum": [
            "Perpetual",
            "TimeVariant"
          ],
          "type": "string"
        },
        "type": {
          "enum": [
            "Label",
            "Metric",
            "Information"
          ],
          "type": "string"
        }
      },
      "example": {
        "displayName": "MyPropertyName",
        "lifeTime": "Perpetual",
        "type": "Label"
      }
    },
    "CreateReferencePortfolioRequest": {
      "required": [
        "displayName",
        "code"
      ],
      "type": "object",
      "properties": {
        "displayName": {
          "description": "",
          "type": "string"
        },
        "description": {
          "description": "",
          "type": "string"
        },
        "code": {
          "description": "",
          "type": "string"
        },
        "created": {
          "format": "date-time",
          "description": "",
          "type": "string"
        },
        "properties": {
          "description": "Portfolio properties to add to the portfolio",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/PerpetualPropertyValue"
          }
        }
      },
      "example": {
        "displayName": "MyPortfolioName",
        "description": "Description of my portfolio",
        "code": "MyPortfolioCode",
        "created": "2019-06-07T15:45:08.1233891+00:00",
        "properties": {}
      }
    },
    "PerpetualPropertyValue": {
      "type": "object",
      "properties": {
        "labelValue": {
          "description": "",
          "type": "string"
        },
        "metricValue": {
          "$ref": "#/definitions/MetricValue",
          "description": ""
        }
      }
    },
    "UpsertReferencePortfolioConstituentsRequest": {
      "required": [
        "effectiveFrom",
        "weightType",
        "constituents"
      ],
      "type": "object",
      "properties": {
        "effectiveFrom": {
          "format": "date-time",
          "description": "",
          "type": "string"
        },
        "weightType": {
          "description": "",
          "enum": [
            "Static",
            "Floating",
            "Periodical"
          ],
          "type": "string"
        },
        "periodType": {
          "description": "",
          "enum": [
            "Daily",
            "Weekly",
            "Monthly",
            "Quarterly",
            "Annually"
          ],
          "type": "string"
        },
        "periodCount": {
          "format": "int32",
          "description": "",
          "type": "integer"
        },
        "constituents": {
          "description": "Set of constituents (instrument/weight pairings)",
          "uniqueItems": false,
          "type": "array",
          "items": {
            "$ref": "#/definitions/ReferencePortfolioConstituentRequest"
          }
        }
      },
      "example": {
        "effectiveFrom": "2019-06-07T15:45:08.1504197+00:00",
        "weightType": "Periodical",
        "periodType": "Quarterly",
        "periodCount": 2,
        "constituents": [
          {
            "instrumentIdentifiers": {
              "Instrument/default/Figi": "BBG0077GZM13",
              "Instrument/default/Isin": "GB00BH4HKS39"
            },
            "properties": {
              "Portfolio/MyScope/MyPropertyKey": {
                "metricValue": {
                  "value": 12345.5672,
                  "unit": "Unit"
                }
              }
            },
            "weight": 100,
            "currency": "GBP"
          },
          {
            "instrumentIdentifiers": {
              "Instrument/default/Figi": "BBG0077H2WN1",
              "Instrument/default/Isin": "US0378331005"
            },
            "properties": {},
            "weight": 50,
            "currency": "USD"
          }
        ]
      }
    },
    "ReferencePortfolioConstituentRequest": {
      "required": [
        "instrumentIdentifiers",
        "weight"
      ],
      "type": "object",
      "properties": {
        "instrumentIdentifiers": {
          "description": "Unique instrument identifiers",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "properties": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/PerpetualPropertyValue"
          }
        },
        "weight": {
          "format": "double",
          "description": "",
          "type": "number"
        },
        "currency": {
          "description": "",
          "type": "string"
        }
      }
    },
    "UpsertReferencePortfolioConstituentsResponse": {
      "type": "object",
      "properties": {
        "href": {
          "type": "string"
        },
        "version": {
          "$ref": "#/definitions/Version"
        },
        "links": {
          "uniqueItems": false,
          "type": "array",
          "items": {
            "$ref": "#/definitions/Link"
          }
        }
      }
    },
    "GetReferencePortfolioConstituentsResponse": {
      "required": [
        "effectiveFrom",
        "weightType",
        "constituents"
      ],
      "type": "object",
      "properties": {
        "effectiveFrom": {
          "format": "date-time",
          "description": "",
          "type": "string"
        },
        "weightType": {
          "description": "",
          "enum": [
            "Static",
            "Floating",
            "Periodical"
          ],
          "type": "string"
        },
        "periodType": {
          "description": "",
          "enum": [
            "Daily",
            "Weekly",
            "Monthly",
            "Quarterly",
            "Annually"
          ],
          "type": "string"
        },
        "periodCount": {
          "format": "int32",
          "description": "",
          "type": "integer"
        },
        "constituents": {
          "description": "Set of constituents (instrument/weight pairings)",
          "uniqueItems": false,
          "type": "array",
          "items": {
            "$ref": "#/definitions/ReferencePortfolioConstituent"
          }
        },
        "href": {
          "description": "The Uri that returns the same result as the original request,\r\nbut may include resolved as at time(s).",
          "type": "string"
        },
        "links": {
          "uniqueItems": false,
          "type": "array",
          "items": {
            "$ref": "#/definitions/Link"
          }
        }
      }
    },
    "ReferencePortfolioConstituent": {
      "required": [
        "instrumentUid",
        "currency",
        "weight"
      ],
      "type": "object",
      "properties": {
        "instrumentIdentifiers": {
          "description": "Unique instrument identifiers",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "instrumentUid": {
          "description": "LUSID's internal unique instrument identifier, resolved from the instrument identifiers",
          "type": "string"
        },
        "currency": {
          "description": "",
          "type": "string"
        },
        "properties": {
          "description": "Properties associated with the constituent",
          "uniqueItems": false,
          "type": "array",
          "items": {
            "$ref": "#/definitions/Property"
          }
        },
        "weight": {
          "format": "double",
          "description": "",
          "type": "number"
        },
        "floatingWeight": {
          "format": "double",
          "description": "",
          "type": "number"
        }
      }
    },
    "ResourceListOfConstituentsAdjustmentHeader": {
      "required": [
        "values"
      ],
      "type": "object",
      "properties": {
        "values": {
          "uniqueItems": false,
          "type": "array",
          "items": {
            "$ref": "#/definitions/ConstituentsAdjustmentHeader"
          }
        },
        "href": {
          "description": "The Uri that returns the same result as the original request,\r\nbut may include resolved as at time(s).",
          "type": "string"
        },
        "count": {
          "format": "int32",
          "description": "The total number of items (when available)",
          "type": "integer"
        },
        "links": {
          "uniqueItems": false,
          "type": "array",
          "items": {
            "$ref": "#/definitions/Link"
          }
        }
      }
    },
    "ConstituentsAdjustmentHeader": {
      "type": "object",
      "properties": {
        "effectiveAt": {
          "format": "date-time",
          "description": "There can be at most one holdings adjustment for a portfolio at a\r\nspecific effective time so this uniquely identifies the adjustment.",
          "type": "string"
        },
        "version": {
          "$ref": "#/definitions/Version"
        },
        "links": {
          "uniqueItems": false,
          "type": "array",
          "items": {
            "$ref": "#/definitions/Link"
          }
        }
      }
    },
    "ResourceListOfScopeDefinition": {
      "required": [
        "values"
      ],
      "type": "object",
      "properties": {
        "values": {
          "uniqueItems": false,
          "type": "array",
          "items": {
            "$ref": "#/definitions/ScopeDefinition"
          }
        },
        "href": {
          "description": "The Uri that returns the same result as the original request,\r\nbut may include resolved as at time(s).",
          "type": "string"
        },
        "count": {
          "format": "int32",
          "description": "The total number of items (when available)",
          "type": "integer"
        },
        "links": {
          "uniqueItems": false,
          "type": "array",
          "items": {
            "$ref": "#/definitions/Link"
          }
        }
      }
    },
    "ScopeDefinition": {
      "description": "Defines a scope",
      "required": [
        "scope"
      ],
      "type": "object",
      "properties": {
        "scope": {
          "description": "",
          "type": "string"
        }
      }
    },
    "CreateCutLabelDefinitionRequest": {
      "description": "This request specifies a new Cut Label Definition",
      "required": [
        "code",
        "displayName",
        "cutLocalTime",
        "timeZone"
      ],
      "type": "object",
      "properties": {
        "code": {
          "type": "string"
        },
        "displayName": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "cutLocalTime": {
          "$ref": "#/definitions/CutLocalTime"
        },
        "timeZone": {
          "type": "string"
        }
      },
      "example": {
        "code": "CutLabelCode",
        "displayName": "CutLabelDisplayName",
        "description": "description of cut label",
        "cutLocalTime": {
          "hours": 17,
          "minutes": 0
        },
        "timeZone": "GB"
      }
    },
    "CutLocalTime": {
      "type": "object",
      "properties": {
        "hours": {
          "format": "int32",
          "type": "integer"
        },
        "minutes": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "CutLabelDefinition": {
      "type": "object",
      "properties": {
        "code": {
          "description": "",
          "type": "string"
        },
        "displayName": {
          "description": "",
          "type": "string"
        },
        "description": {
          "description": "",
          "type": "string"
        },
        "cutLocalTime": {
          "$ref": "#/definitions/CutLocalTime",
          "description": ""
        },
        "timeZone": {
          "description": "",
          "type": "string"
        },
        "href": {
          "type": "string",
          "readOnly": true
        },
        "links": {
          "uniqueItems": false,
          "type": "array",
          "items": {
            "$ref": "#/definitions/Link"
          }
        }
      }
    },
    "ResourceListOfCutLabelDefinition": {
      "required": [
        "values"
      ],
      "type": "object",
      "properties": {
        "values": {
          "uniqueItems": false,
          "type": "array",
          "items": {
            "$ref": "#/definitions/CutLabelDefinition"
          }
        },
        "href": {
          "description": "The Uri that returns the same result as the original request,\r\nbut may include resolved as at time(s).",
          "type": "string"
        },
        "count": {
          "format": "int32",
          "description": "The total number of items (when available)",
          "type": "integer"
        },
        "links": {
          "uniqueItems": false,
          "type": "array",
          "items": {
            "$ref": "#/definitions/Link"
          }
        }
      }
    },
    "UpdateCutLabelDefinitionRequest": {
      "description": "This request specifies a new Cut Label Definition",
      "required": [
        "displayName",
        "cutLocalTime",
        "timeZone"
      ],
      "type": "object",
      "properties": {
        "displayName": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "cutLocalTime": {
          "$ref": "#/definitions/CutLocalTime"
        },
        "timeZone": {
          "type": "string"
        }
      },
      "example": {
        "displayName": "CutLabelDisplayName",
        "description": "description of cut label",
        "cutLocalTime": {
          "hours": 17,
          "minutes": 0
        },
        "timeZone": "GB"
      }
    },
    "TransactionConfigurationDataRequest": {
      "required": [
        "aliases",
        "movements"
      ],
      "type": "object",
      "properties": {
        "aliases": {
          "description": "List of transaction codes that map to this specific transaction model",
          "uniqueItems": false,
          "type": "array",
          "items": {
            "$ref": "#/definitions/TransactionConfigurationTypeAlias"
          }
        },
        "movements": {
          "description": "Movement data for the transaction code",
          "uniqueItems": false,
          "type": "array",
          "items": {
            "$ref": "#/definitions/TransactionConfigurationMovementDataRequest"
          }
        },
        "properties": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/PerpetualPropertyValue"
          }
        }
      },
      "example": {
        "aliases": [
          {
            "type": "Sell-FIFO",
            "description": "Sale using FIFO logic",
            "transactionClass": "FIFO",
            "transactionGroup": "MyGroup",
            "transactionRoles": "LongShorter"
          }
        ],
        "movements": [
          {
            "movementTypes": "StockMovement",
            "side": "Side1",
            "direction": -1,
            "properties": {
              "TransactionConfiguration/default/TaxLotSelectionMethod": {
                "labelValue": "FirstInFirstOut"
              }
            },
            "mappings": []
          },
          {
            "movementTypes": "CashCommitment",
            "side": "Side2",
            "direction": 1,
            "properties": {},
            "mappings": []
          }
        ],
        "properties": {
          "TransactionConfiguration/default/Example": {
            "labelValue": "Value"
          }
        }
      }
    },
    "TransactionConfigurationTypeAlias": {
      "required": [
        "type",
        "description",
        "transactionClass",
        "transactionGroup",
        "transactionRoles"
      ],
      "type": "object",
      "properties": {
        "type": {
          "description": "The transaction type",
          "type": "string"
        },
        "description": {
          "description": "Brief description of the transaction",
          "type": "string"
        },
        "transactionClass": {
          "description": "Relates types of a similar class. E.g. Buy/Sell, StockIn/StockOut",
          "type": "string"
        },
        "transactionGroup": {
          "description": "Group is a set of codes related to a source, or sync",
          "type": "string"
        },
        "transactionRoles": {
          "description": "Transactions role within a class. E.g. Increase a long position",
          "enum": [
            "None",
            "LongLonger",
            "LongShorter",
            "ShortShorter",
            "ShortLonger",
            "Longer",
            "Shorter",
            "AllRoles"
          ],
          "type": "string"
        }
      }
    },
    "TransactionConfigurationMovementDataRequest": {
      "required": [
        "movementTypes",
        "side",
        "direction"
      ],
      "type": "object",
      "properties": {
        "movementTypes": {
          "description": "The Movement Types",
          "enum": [
            "Settlement",
            "Traded",
            "ForwardFx",
            "Commitment",
            "Receivable",
            "CashSettlement",
            "Accrual",
            "UnsettledCashTypes",
            "StockMovement",
            "CashCommitment",
            "CashReceivable",
            "CashForward",
            "CashAccrual"
          ],
          "type": "string"
        },
        "side": {
          "description": "The Movement Side",
          "enum": [
            "Side1",
            "Side2",
            "BondInt"
          ],
          "type": "string"
        },
        "direction": {
          "format": "int32",
          "description": "The Movement direction",
          "type": "integer"
        },
        "properties": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/PerpetualPropertyValue"
          }
        },
        "mappings": {
          "uniqueItems": false,
          "type": "array",
          "items": {
            "$ref": "#/definitions/TransactionPropertyMappingRequest"
          }
        }
      }
    },
    "TransactionPropertyMappingRequest": {
      "required": [
        "propertyKey"
      ],
      "type": "object",
      "properties": {
        "propertyKey": {
          "description": "The Side",
          "type": "string"
        },
        "mapFrom": {
          "description": "The Side",
          "type": "string"
        },
        "setTo": {
          "description": "The Side",
          "type": "object"
        }
      }
    },
    "ResourceListOfTransactionConfigurationData": {
      "required": [
        "values"
      ],
      "type": "object",
      "properties": {
        "values": {
          "uniqueItems": false,
          "type": "array",
          "items": {
            "$ref": "#/definitions/TransactionConfigurationData"
          }
        },
        "href": {
          "description": "The Uri that returns the same result as the original request,\r\nbut may include resolved as at time(s).",
          "type": "string"
        },
        "count": {
          "format": "int32",
          "description": "The total number of items (when available)",
          "type": "integer"
        },
        "links": {
          "uniqueItems": false,
          "type": "array",
          "items": {
            "$ref": "#/definitions/Link"
          }
        }
      }
    },
    "TransactionConfigurationData": {
      "required": [
        "aliases",
        "movements"
      ],
      "type": "object",
      "properties": {
        "aliases": {
          "description": "List of transaction codes that map to this specific transaction model",
          "uniqueItems": false,
          "type": "array",
          "items": {
            "$ref": "#/definitions/TransactionConfigurationTypeAlias"
          }
        },
        "movements": {
          "description": "Movement data for the transaction code",
          "uniqueItems": false,
          "type": "array",
          "items": {
            "$ref": "#/definitions/TransactionConfigurationMovementData"
          }
        },
        "properties": {
          "uniqueItems": false,
          "type": "array",
          "items": {
            "$ref": "#/definitions/PerpetualProperty"
          }
        }
      }
    },
    "TransactionConfigurationMovementData": {
      "required": [
        "movementTypes",
        "side",
        "direction"
      ],
      "type": "object",
      "properties": {
        "movementTypes": {
          "description": "The Movement Types",
          "enum": [
            "Settlement",
            "Traded",
            "ForwardFx",
            "Commitment",
            "Receivable",
            "CashSettlement",
            "Accrual",
            "UnsettledCashTypes",
            "StockMovement",
            "CashCommitment",
            "CashReceivable",
            "CashForward",
            "CashAccrual"
          ],
          "type": "string"
        },
        "side": {
          "description": "The Movement Side",
          "enum": [
            "Side1",
            "Side2",
            "BondInt"
          ],
          "type": "string"
        },
        "direction": {
          "format": "int32",
          "description": "The Movement direction",
          "type": "integer"
        },
        "properties": {
          "uniqueItems": false,
          "type": "array",
          "items": {
            "$ref": "#/definitions/PerpetualProperty"
          }
        },
        "mappings": {
          "uniqueItems": false,
          "type": "array",
          "items": {
            "$ref": "#/definitions/TransactionPropertyMapping"
          }
        }
      }
    },
    "TransactionPropertyMapping": {
      "required": [
        "propertyKey"
      ],
      "type": "object",
      "properties": {
        "propertyKey": {
          "description": "The Side",
          "type": "string"
        },
        "mapFrom": {
          "description": "The Side",
          "type": "string"
        },
        "setTo": {
          "description": "The Side",
          "type": "object"
        }
      }
    },
    "CreateTransactionPortfolioRequest": {
      "required": [
        "displayName",
        "code",
        "baseCurrency"
      ],
      "type": "object",
      "properties": {
        "displayName": {
          "description": "",
          "type": "string"
        },
        "description": {
          "description": "",
          "type": "string"
        },
        "code": {
          "description": "",
          "type": "string"
        },
        "created": {
          "format": "date-time",
          "description": "",
          "type": "string"
        },
        "baseCurrency": {
          "description": "",
          "type": "string"
        },
        "corporateActionSourceId": {
          "$ref": "#/definitions/ResourceId",
          "description": ""
        },
        "accountingMethod": {
          "description": "",
          "enum": [
            "Default",
            "AverageCost",
            "FirstInFirstOut",
            "LastInFirstOut",
            "HighestCostFirst",
            "LowestCostFirst"
          ],
          "type": "string"
        },
        "subHoldingKeys": {
          "description": "",
          "uniqueItems": false,
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "properties": {
          "description": "Portfolio properties to add to the portfolio",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/PropertyValue"
          }
        }
      },
      "example": {
        "displayName": "Portfolio UK",
        "description": "Portfolio for UK market",
        "code": "PortfolioUk",
        "created": "2018-03-05T12:00:00+00:00",
        "baseCurrency": "GBP",
        "corporateActionSourceId": {
          "scope": "Sources",
          "code": "Vendor1"
        },
        "accountingMethod": "Default",
        "subHoldingKeys": [],
        "properties": {
          "Portfolio/Manager/Name": {
            "labelValue": "Matt Smith"
          },
          "Portfolio/Manager/Id": {
            "metricValue": {
              "value": 1628483,
              "unit": "NoUnits"
            }
          }
        }
      }
    },
    "PortfolioDetails": {
      "type": "object",
      "properties": {
        "href": {
          "type": "string"
        },
        "originPortfolioId": {
          "$ref": "#/definitions/ResourceId"
        },
        "version": {
          "$ref": "#/definitions/Version",
          "description": "The version of the portfolio"
        },
        "baseCurrency": {
          "type": "string"
        },
        "corporateActionSourceId": {
          "$ref": "#/definitions/ResourceId"
        },
        "links": {
          "uniqueItems": false,
          "type": "array",
          "items": {
            "$ref": "#/definitions/Link"
          }
        }
      }
    },
    "CreatePortfolioDetails": {
      "type": "object",
      "properties": {
        "baseCurrency": {
          "type": "string"
        },
        "corporateActionSourceId": {
          "$ref": "#/definitions/ResourceId"
        }
      },
      "example": {
        "baseCurrency": "GBP",
        "corporateActionSourceId": {
          "scope": "Sources",
          "code": "Vendor1"
        }
      }
    },
    "ExecutionRequest": {
      "required": [
        "executionId",
        "side",
        "instrumentIdentifiers",
        "transactionTime",
        "lastShares",
        "lastPx",
        "currency"
      ],
      "type": "object",
      "properties": {
        "executionId": {
          "description": "FIX Field 17.  Unique execution identifier.",
          "type": "string"
        },
        "side": {
          "description": "FIX Field 54.",
          "type": "string"
        },
        "instrumentIdentifiers": {
          "description": "Unique instrument identifiers",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "transactionTime": {
          "format": "date-time",
          "description": "FIX field 60.  Time the transaction represented by this ExecutionReport occurred.",
          "type": "string"
        },
        "lastShares": {
          "format": "double",
          "description": "FIX field 32.",
          "type": "number"
        },
        "lastPx": {
          "format": "double",
          "description": "FIX field 31.",
          "type": "number"
        },
        "currency": {
          "description": "FIX field 15.",
          "type": "string"
        }
      },
      "example": {
        "executionId": "ExecutionId-11111",
        "side": "SellShort",
        "instrumentIdentifiers": {
          "ClientInternal": "CLI-183461"
        },
        "transactionTime": "2018-03-05T12:00:00+00:00",
        "lastShares": 1000,
        "lastPx": 1.23,
        "currency": "USD"
      }
    },
    "UpsertPortfolioExecutionsResponse": {
      "type": "object",
      "properties": {
        "version": {
          "$ref": "#/definitions/Version"
        },
        "href": {
          "type": "string"
        },
        "links": {
          "uniqueItems": false,
          "type": "array",
          "items": {
            "$ref": "#/definitions/Link"
          }
        }
      }
    },
    "VersionedResourceListOfPortfolioHolding": {
      "required": [
        "values"
      ],
      "type": "object",
      "properties": {
        "version": {
          "$ref": "#/definitions/Version"
        },
        "values": {
          "uniqueItems": false,
          "type": "array",
          "items": {
            "$ref": "#/definitions/PortfolioHolding"
          }
        },
        "href": {
          "description": "The Uri that returns the same result as the original request,\r\nbut may include resolved as at time(s).",
          "type": "string"
        },
        "count": {
          "format": "int32",
          "description": "The total number of items (when available)",
          "type": "integer"
        },
        "links": {
          "uniqueItems": false,
          "type": "array",
          "items": {
            "$ref": "#/definitions/Link"
          }
        }
      }
    },
    "PortfolioHolding": {
      "required": [
        "instrumentUid",
        "holdingType",
        "units",
        "settledUnits",
        "cost",
        "costPortfolioCcy"
      ],
      "type": "object",
      "properties": {
        "instrumentUid": {
          "description": "Unique instrument identifier",
          "type": "string"
        },
        "subHoldingKeys": {
          "uniqueItems": false,
          "type": "array",
          "items": {
            "$ref": "#/definitions/PerpetualProperty"
          }
        },
        "properties": {
          "uniqueItems": false,
          "type": "array",
          "items": {
            "$ref": "#/definitions/Property"
          }
        },
        "holdingType": {
          "description": "Type of holding, eg Position, Balance, CashCommitment, Receivable, ForwardFX",
          "type": "string"
        },
        "units": {
          "format": "double",
          "description": "Quantity of holding",
          "type": "number"
        },
        "settledUnits": {
          "format": "double",
          "description": "Settled quantity of holding",
          "type": "number"
        },
        "cost": {
          "$ref": "#/definitions/CurrencyAndAmount",
          "description": "Book cost of holding in transaction currency"
        },
        "costPortfolioCcy": {
          "$ref": "#/definitions/CurrencyAndAmount",
          "description": "Book cost of holding in portfolio currency"
        },
        "transaction": {
          "$ref": "#/definitions/Transaction",
          "description": "If this is commitment-type holding, the transaction behind it"
        }
      }
    },
    "Transaction": {
      "required": [
        "transactionId",
        "type",
        "instrumentUid",
        "transactionDate",
        "settlementDate",
        "units",
        "transactionPrice",
        "totalConsideration",
        "source"
      ],
      "type": "object",
      "properties": {
        "transactionId": {
          "description": "Unique transaction identifier",
          "type": "string"
        },
        "type": {
          "description": "LUSID transaction type code - Buy, Sell, StockIn, StockOut, etc",
          "type": "string"
        },
        "instrumentIdentifiers": {
          "description": "Unique instrument identifiers",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "instrumentUid": {
          "description": "LUSID's internal unique instrument identifier, resolved from the instrument identifiers",
          "type": "string"
        },
        "transactionDate": {
          "format": "date-time",
          "description": "Transaction date",
          "type": "string"
        },
        "settlementDate": {
          "format": "date-time",
          "description": "Settlement date",
          "type": "string"
        },
        "units": {
          "format": "double",
          "description": "Quantity of trade in units of the instrument",
          "type": "number"
        },
        "transactionPrice": {
          "$ref": "#/definitions/TransactionPrice",
          "description": "Execution price for the transaction"
        },
        "totalConsideration": {
          "$ref": "#/definitions/CurrencyAndAmount",
          "description": "Total value of the transaction in settlement currency"
        },
        "exchangeRate": {
          "format": "double",
          "description": "Rate between transaction and settlement currency",
          "type": "number"
        },
        "transactionCurrency": {
          "description": "Transaction currency",
          "type": "string"
        },
        "properties": {
          "uniqueItems": false,
          "type": "array",
          "items": {
            "$ref": "#/definitions/PerpetualProperty"
          }
        },
        "counterpartyId": {
          "description": "Counterparty identifier",
          "type": "string"
        },
        "source": {
          "description": "Where this transaction came from",
          "type": "string"
        },
        "nettingSet": {
          "description": "",
          "type": "string"
        }
      }
    },
    "TransactionPrice": {
      "description": "A price with its associated type",
      "type": "object",
      "properties": {
        "price": {
          "format": "double",
          "type": "number"
        },
        "type": {
          "enum": [
            "Price",
            "Yield",
            "Spread"
          ],
          "type": "string"
        }
      }
    },
    "AdjustHoldingRequest": {
      "description": "This request specifies target holdings. i.e. holding data that the\r\nsystem should match. When processed by the movement\r\nengine, it will create 'true-up' adjustments on the fly.",
      "required": [
        "instrumentIdentifiers",
        "taxLots"
      ],
      "type": "object",
      "properties": {
        "instrumentIdentifiers": {
          "description": "Unique instrument identifiers",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "subHoldingKeys": {
          "description": "Key fields to uniquely index the sub holdings of a instrument",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/PerpetualPropertyValue"
          }
        },
        "properties": {
          "description": "Arbitrary properties to store with the holding",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/PerpetualPropertyValue"
          }
        },
        "taxLots": {
          "description": "1 or more quantity amounts",
          "uniqueItems": false,
          "type": "array",
          "items": {
            "$ref": "#/definitions/TargetTaxLotRequest"
          }
        }
      },
      "example": {
        "instrumentIdentifiers": {
          "Instrument/default/Figi": "BBG000C6K6G9",
          "Instrument/default/Isin": "GB00BH4HKS39"
        },
        "subHoldingKeys": {
          "Trade/Algo/Name": {
            "labelValue": "Algo1"
          }
        },
        "properties": {
          "Holding/Entity/Name": {
            "labelValue": "Financial Entity"
          }
        },
        "taxLots": [
          {
            "units": 100,
            "cost": {
              "amount": 10000,
              "currency": "GBP"
            },
            "portfolioCost": 10000,
            "price": 100,
            "purchaseDate": "2018-03-05T00:00:00+00:00",
            "settlementDate": "2018-03-08T00:00:00+00:00"
          }
        ]
      }
    },
    "TargetTaxLotRequest": {
      "required": [
        "units"
      ],
      "type": "object",
      "properties": {
        "units": {
          "format": "double",
          "description": "Quantity of holding",
          "type": "number"
        },
        "cost": {
          "$ref": "#/definitions/CurrencyAndAmount",
          "description": "Book cost of holding in transaction currency"
        },
        "portfolioCost": {
          "format": "double",
          "description": "Book cost of holding in portfolio currency",
          "type": "number"
        },
        "price": {
          "format": "double",
          "description": "Purchase price. Part of the unique key required for multiple taxlots",
          "type": "number"
        },
        "purchaseDate": {
          "format": "date-time",
          "description": "Purchase Date. Part of the unique key required for multiple taxlots",
          "type": "string"
        },
        "settlementDate": {
          "format": "date-time",
          "description": "Original settlement date of the tax-lot's opening transaction.",
          "type": "string"
        }
      }
    },
    "AdjustHolding": {
      "description": "The response given from the AdjustHoldings Api call",
      "type": "object",
      "properties": {
        "href": {
          "type": "string"
        },
        "version": {
          "$ref": "#/definitions/Version"
        },
        "links": {
          "uniqueItems": false,
          "type": "array",
          "items": {
            "$ref": "#/definitions/Link"
          }
        }
      }
    },
    "ResourceListOfHoldingsAdjustmentHeader": {
      "required": [
        "values"
      ],
      "type": "object",
      "properties": {
        "values": {
          "uniqueItems": false,
          "type": "array",
          "items": {
            "$ref": "#/definitions/HoldingsAdjustmentHeader"
          }
        },
        "href": {
          "description": "The Uri that returns the same result as the original request,\r\nbut may include resolved as at time(s).",
          "type": "string"
        },
        "count": {
          "format": "int32",
          "description": "The total number of items (when available)",
          "type": "integer"
        },
        "links": {
          "uniqueItems": false,
          "type": "array",
          "items": {
            "$ref": "#/definitions/Link"
          }
        }
      }
    },
    "HoldingsAdjustmentHeader": {
      "description": "Summary information of a holdings adjustment for a single portfolio and effective date.",
      "type": "object",
      "properties": {
        "effectiveAt": {
          "format": "date-time",
          "description": "There can be at most one holdings adjustment for a portfolio at a\r\nspecific effective time so this uniquely identifies the adjustment.",
          "type": "string"
        },
        "version": {
          "$ref": "#/definitions/Version"
        },
        "unmatchedHoldingMethod": {
          "enum": [
            "PositionToZero",
            "KeepTheSame"
          ],
          "type": "string"
        },
        "links": {
          "uniqueItems": false,
          "type": "array",
          "items": {
            "$ref": "#/definitions/Link"
          }
        }
      }
    },
    "HoldingsAdjustment": {
      "description": "Full content of a holdings adjustment for a single portfolio and effective date.",
      "type": "object",
      "properties": {
        "effectiveAt": {
          "format": "date-time",
          "description": "There can be at most one holdings adjustment for a portfolio at a\r\nspecific effective time so this uniquely identifies the adjustment.",
          "type": "string"
        },
        "version": {
          "$ref": "#/definitions/Version"
        },
        "unmatchedHoldingMethod": {
          "enum": [
            "PositionToZero",
            "KeepTheSame"
          ],
          "type": "string"
        },
        "adjustments": {
          "uniqueItems": false,
          "type": "array",
          "items": {
            "$ref": "#/definitions/HoldingAdjustment"
          }
        },
        "links": {
          "uniqueItems": false,
          "type": "array",
          "items": {
            "$ref": "#/definitions/Link"
          }
        }
      }
    },
    "HoldingAdjustment": {
      "description": "This 'dto' contains target holdings. i.e. holding data that the\r\nsystem should match. When processed by the movement\r\nengine, it will create 'true-up' adjustments on the fly.",
      "required": [
        "instrumentUid",
        "taxLots"
      ],
      "type": "object",
      "properties": {
        "instrumentIdentifiers": {
          "description": "Unique instrument identifiers",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "instrumentUid": {
          "description": "LUSID's internal unique instrument identifier, resolved from the instrument identifiers",
          "type": "string"
        },
        "subHoldingKeys": {
          "description": "Key fields to uniquely index the sub holdings of a instrument",
          "uniqueItems": false,
          "type": "array",
          "items": {
            "$ref": "#/definitions/PerpetualProperty"
          }
        },
        "properties": {
          "description": "Arbitrary properties to store with the holding",
          "uniqueItems": false,
          "type": "array",
          "items": {
            "$ref": "#/definitions/PerpetualProperty"
          }
        },
        "taxLots": {
          "description": "1 or more quantity amounts",
          "uniqueItems": false,
          "type": "array",
          "items": {
            "$ref": "#/definitions/TargetTaxLot"
          }
        }
      }
    },
    "TargetTaxLot": {
      "description": "Used to specify holdings target amounts at the tax-lot level",
      "required": [
        "units"
      ],
      "type": "object",
      "properties": {
        "units": {
          "format": "double",
          "description": "Quantity of holding",
          "type": "number"
        },
        "cost": {
          "$ref": "#/definitions/CurrencyAndAmount",
          "description": "Book cost of holding in transaction currency"
        },
        "portfolioCost": {
          "format": "double",
          "description": "Book cost of holding in portfolio currency",
          "type": "number"
        },
        "price": {
          "format": "double",
          "description": "Purchase price. Part of the unique key required for multiple taxlots",
          "type": "number"
        },
        "purchaseDate": {
          "format": "date-time",
          "description": "Purchase Date. Part of the unique key required for multiple taxlots",
          "type": "string"
        },
        "settlementDate": {
          "format": "date-time",
          "description": "Original settlement date of the tax-lot's opening transaction.",
          "type": "string"
        }
      }
    },
    "VersionedResourceListOfTransaction": {
      "required": [
        "values"
      ],
      "type": "object",
      "properties": {
        "version": {
          "$ref": "#/definitions/Version"
        },
        "values": {
          "uniqueItems": false,
          "type": "array",
          "items": {
            "$ref": "#/definitions/Transaction"
          }
        },
        "href": {
          "description": "The Uri that returns the same result as the original request,\r\nbut may include resolved as at time(s).",
          "type": "string"
        },
        "count": {
          "format": "int32",
          "description": "The total number of items (when available)",
          "type": "integer"
        },
        "links": {
          "uniqueItems": false,
          "type": "array",
          "items": {
            "$ref": "#/definitions/Link"
          }
        }
      }
    },
    "TransactionRequest": {
      "required": [
        "transactionId",
        "type",
        "instrumentIdentifiers",
        "transactionDate",
        "settlementDate",
        "units",
        "transactionPrice",
        "totalConsideration"
      ],
      "type": "object",
      "properties": {
        "transactionId": {
          "description": "Unique transaction identifier",
          "type": "string"
        },
        "type": {
          "description": "LUSID transaction type code - Buy, Sell, StockIn, StockOut, etc",
          "type": "string"
        },
        "instrumentIdentifiers": {
          "description": "Unique instrument identifiers",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "transactionDate": {
          "format": "dateorcutlabel",
          "description": "Transaction date",
          "type": "string"
        },
        "settlementDate": {
          "format": "dateorcutlabel",
          "description": "Settlement date",
          "type": "string"
        },
        "units": {
          "format": "double",
          "description": "Quantity of trade in units of the instrument",
          "type": "number"
        },
        "transactionPrice": {
          "$ref": "#/definitions/TransactionPrice",
          "description": "Execution price for the transaction"
        },
        "totalConsideration": {
          "$ref": "#/definitions/CurrencyAndAmount",
          "description": "Total value of the transaction in settlement currency"
        },
        "exchangeRate": {
          "format": "double",
          "description": "Rate between transaction and settlement currency",
          "type": "number"
        },
        "transactionCurrency": {
          "description": "Transaction currency",
          "type": "string"
        },
        "properties": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/PerpetualPropertyValue"
          }
        },
        "counterpartyId": {
          "description": "Counterparty identifier",
          "type": "string"
        },
        "source": {
          "description": "Where this transaction came from",
          "type": "string"
        },
        "nettingSet": {
          "description": "",
          "type": "string"
        }
      },
      "example": {
        "transactionId": "TransactionId-111111",
        "type": "StockIn",
        "instrumentIdentifiers": {
          "Instrument/default/Figi": "BBG000C6K6G9",
          "Instrument/default/Isin": "GB00BH4HKS39"
        },
        "transactionDate": "2019-06-07T15:45:08.7859617+00:00",
        "settlementDate": "2019-06-10T15:45:08.7859632+00:00",
        "units": 1000,
        "transactionPrice": {
          "price": 123,
          "type": "Price"
        },
        "totalConsideration": {
          "amount": 123000,
          "currency": "GBP"
        },
        "transactionCurrency": "GBP",
        "properties": {
          "Trade/Algo/Name": {
            "labelValue": "Algo1"
          }
        },
        "counterpartyId": "CounterpartyId-118263",
        "source": "",
        "nettingSet": "NettingSet"
      }
    },
    "UpsertPortfolioTransactionsResponse": {
      "type": "object",
      "properties": {
        "version": {
          "$ref": "#/definitions/Version"
        },
        "href": {
          "type": "string"
        },
        "links": {
          "uniqueItems": false,
          "type": "array",
          "items": {
            "$ref": "#/definitions/Link"
          }
        }
      }
    },
    "AddTransactionPropertyResponse": {
      "type": "object",
      "properties": {
        "href": {
          "type": "string"
        },
        "version": {
          "$ref": "#/definitions/Version"
        },
        "links": {
          "uniqueItems": false,
          "type": "array",
          "items": {
            "$ref": "#/definitions/Link"
          }
        }
      }
    },
    "TransactionQueryParameters": {
      "type": "object",
      "properties": {
        "startDate": {
          "format": "date-time",
          "description": "The required set of transactions should begin from this date",
          "type": "string"
        },
        "endDate": {
          "format": "date-time",
          "description": "The required set of transactions should end at this date",
          "type": "string"
        },
        "queryMode": {
          "description": "The method for date selection. Trade date or Settlement date",
          "enum": [
            "None",
            "TradeDate",
            "SettleDate"
          ],
          "type": "string"
        },
        "showCancelledTransactions": {
          "description": "Option to include cancelled transactions in the results",
          "type": "boolean"
        }
      },
      "example": {
        "startDate": "2018-03-05T00:00:00+00:00",
        "endDate": "2018-03-19T00:00:00+00:00",
        "queryMode": "TradeDate",
        "showCancelledTransactions": false
      }
    },
    "VersionedResourceListOfOutputTransaction": {
      "required": [
        "values"
      ],
      "type": "object",
      "properties": {
        "version": {
          "$ref": "#/definitions/Version"
        },
        "values": {
          "uniqueItems": false,
          "type": "array",
          "items": {
            "$ref": "#/definitions/OutputTransaction"
          }
        },
        "href": {
          "description": "The Uri that returns the same result as the original request,\r\nbut may include resolved as at time(s).",
          "type": "string"
        },
        "count": {
          "format": "int32",
          "description": "The total number of items (when available)",
          "type": "integer"
        },
        "links": {
          "uniqueItems": false,
          "type": "array",
          "items": {
            "$ref": "#/definitions/Link"
          }
        }
      }
    },
    "OutputTransaction": {
      "type": "object",
      "properties": {
        "transactionId": {
          "description": "Unique transaction identifier",
          "type": "string",
          "readOnly": true
        },
        "type": {
          "description": "LUSID transaction type code - Buy, Sell, StockIn, StockOut, etc",
          "type": "string",
          "readOnly": true
        },
        "description": {
          "description": "LUSID transaction description",
          "type": "string",
          "readOnly": true
        },
        "instrumentIdentifiers": {
          "description": "Unique instrument identifiers",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "instrumentUid": {
          "description": "LUSID's internal unique instrument identifier, resolved from the instrument identifiers",
          "type": "string",
          "readOnly": true
        },
        "transactionDate": {
          "format": "date-time",
          "description": "Transaction date",
          "type": "string",
          "readOnly": true
        },
        "settlementDate": {
          "format": "date-time",
          "description": "Settlement date",
          "type": "string",
          "readOnly": true
        },
        "units": {
          "format": "double",
          "description": "Quantity of trade in units of the instrument",
          "type": "number",
          "readOnly": true
        },
        "transactionAmount": {
          "format": "double",
          "description": "Total value of the transaction in trade currency",
          "type": "number",
          "readOnly": true
        },
        "transactionPrice": {
          "$ref": "#/definitions/TransactionPrice",
          "description": "Execution price for the transaction",
          "readOnly": true
        },
        "totalConsideration": {
          "$ref": "#/definitions/CurrencyAndAmount",
          "description": "Total value of the transaction in settlement currency",
          "readOnly": true
        },
        "exchangeRate": {
          "format": "double",
          "description": "Rate between transaction and settlement currency",
          "type": "number",
          "readOnly": true
        },
        "transactionToPortfolioRate": {
          "format": "double",
          "description": "Rate between transaction and portfolio currency",
          "type": "number",
          "readOnly": true
        },
        "transactionCurrency": {
          "description": "Transaction currency",
          "type": "string",
          "readOnly": true
        },
        "properties": {
          "uniqueItems": false,
          "type": "array",
          "items": {
            "$ref": "#/definitions/PerpetualProperty"
          },
          "readOnly": true
        },
        "counterpartyId": {
          "description": "Counterparty identifier",
          "type": "string",
          "readOnly": true
        },
        "source": {
          "description": "Where this transaction came from",
          "type": "string",
          "readOnly": true
        },
        "nettingSet": {
          "description": "",
          "type": "string",
          "readOnly": true
        },
        "transactionStatus": {
          "description": "Transaction status (active, amended or cancelled)",
          "enum": [
            "Active",
            "Amended",
            "Cancelled"
          ],
          "type": "string",
          "readOnly": true
        },
        "entryDateTime": {
          "format": "date-time",
          "description": "Date / time the transaction was booked into LUSID",
          "type": "string",
          "readOnly": true
        },
        "cancelDateTime": {
          "format": "date-time",
          "description": "Date / time the cancellation was booked into LUSID",
          "type": "string",
          "readOnly": true
        },
        "realisedGainLoss": {
          "description": "Collection of gains or losses",
          "uniqueItems": false,
          "type": "array",
          "items": {
            "$ref": "#/definitions/RealisedGainLoss"
          },
          "readOnly": true
        }
      }
    },
    "RealisedGainLoss": {
      "type": "object",
      "properties": {
        "instrumentUid": {
          "description": "Unique instrument identifier",
          "type": "string",
          "readOnly": true
        },
        "units": {
          "format": "double",
          "description": "Quantity against which gain has been made in units of the instrument",
          "type": "number",
          "readOnly": true
        },
        "purchaseTradeDate": {
          "format": "date-time",
          "description": "Date the position was originally purchased",
          "type": "string",
          "readOnly": true
        },
        "purchaseSettlementDate": {
          "format": "date-time",
          "description": "Date the position originally settled",
          "type": "string",
          "readOnly": true
        },
        "purchasePrice": {
          "format": "double",
          "description": "Price the instrument was purchased at",
          "type": "number",
          "readOnly": true
        },
        "costTradeCcy": {
          "$ref": "#/definitions/CurrencyAndAmount",
          "description": "Purchase cost in the trade currency",
          "readOnly": true
        },
        "costPortfolioCcy": {
          "$ref": "#/definitions/CurrencyAndAmount",
          "description": "Purchase cost in the trade currency",
          "readOnly": true
        },
        "realisedTradeCcy": {
          "$ref": "#/definitions/CurrencyAndAmount",
          "description": "Gains or losses in the trade currency",
          "readOnly": true
        },
        "realisedTotal": {
          "$ref": "#/definitions/CurrencyAndAmount",
          "description": "Total gains or losses in the portfolio currency",
          "readOnly": true
        },
        "realisedMarket": {
          "$ref": "#/definitions/CurrencyAndAmount",
          "description": "Market gains or losses in the portfolio currency",
          "readOnly": true
        },
        "realisedCurrency": {
          "$ref": "#/definitions/CurrencyAndAmount",
          "description": "Currency gains or losses in the portfolio currency",
          "readOnly": true
        }
      }
    }
  },
  "securityDefinitions": {
    "oauth2": {
      "flow": "implicit",
      "authorizationUrl": "Dummy/v1/authorize",
      "type": "oauth2",
      "description": "OAuth2 Implicit Grant"
    }
  },
  "security": [
    {
      "oauth2": []
    }
  ],
  "tags": [
    {
      "name": "Aggregation",
      "description": "Methods for accessing aggregated data"
    },
    {
      "name": "Analytics Stores",
      "description": "Methods for interacting with Analytic Stores"
    },
    {
      "name": "Application Metadata",
      "description": "Methods for querying application metadata"
    },
    {
      "name": "Corporate Action Sources",
      "description": "Methods for storage and retrieval of Corporate Action Sources"
    },
    {
      "name": "Cut Label Definitions",
      "description": "Methods for interacting with Cut Label Definitions"
    },
    {
      "name": "Data Types",
      "description": "Methods for administering data types"
    },
    {
      "name": "Derived Transaction Portfolios",
      "description": "Methods for interacting with derived transaction portfolios"
    },
    {
      "name": "Entities",
      "description": "Methods for querying data about entities"
    },
    {
      "name": "Instruments",
      "description": "Methods for interacting with instruments"
    },
    {
      "name": "Login",
      "description": "Methods to handle login"
    },
    {
      "name": "Portfolio Groups",
      "description": "Methods for interacting with Portfolios Groups"
    },
    {
      "name": "Portfolios",
      "description": "Methods for interacting with Portfolios"
    },
    {
      "name": "Property Definitions",
      "description": "Methods for interacting with Properties"
    },
    {
      "name": "Quotes",
      "description": "Methods for the storage and retrieval of Quotes"
    },
    {
      "name": "Reconciliations",
      "description": "Endpoints for performing reconciliations"
    },
    {
      "name": "Reference Portfolio",
      "description": "Methods for interacting with Reference Portfolios"
    },
    {
      "name": "Results",
      "description": "Methods for storage and retrieval of Calculation Results"
    },
    {
      "name": "Schemas",
      "description": "Methods for retrieval of Schemas"
    },
    {
      "name": "Scopes",
      "description": "Methods for interacting with Scopes"
    },
    {
      "name": "Search",
      "description": "Methods providing Search capability"
    },
    {
      "name": "System Configuration",
      "description": "Methods for updating system configuration with Portfolios"
    },
    {
      "name": "Transaction Portfolios",
      "description": "Methods for interacting with transaction portfolios"
    }
  ],
  "x-tagGroups": [
    {
      "name": "API",
      "tags": [
        "Aggregation",
        "Analytics Stores",
        "Application Metadata",
        "Corporate Action Sources",
        "Cut Label Definitions",
        "Data Types",
        "Derived Transaction Portfolios",
        "Entities",
        "Instruments",
        "Login",
        "Portfolio Groups",
        "Portfolios",
        "Property Definitions",
        "Quotes",
        "Reconciliations",
        "Reference Portfolio",
        "Results",
        "Schemas",
        "Scopes",
        "Search",
        "System Configuration",
        "Transaction Portfolios"
      ]
    }
  ]
}
