# coding: utf-8

"""
    LUSID API

    FINBOURNE Technology  # noqa: E501

    Contact: info@finbourne.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, Optional
from pydantic.v1 import BaseModel, Field, StrictStr, constr, validator

class ComponentRule(BaseModel):
    """
    ComponentRule
    """
    match_criteria: constr(strict=True, max_length=16384, min_length=1) = Field(..., alias="matchCriteria")
    components: Optional[Dict[str, StrictStr]] = None
    __properties = ["matchCriteria", "components"]

    @validator('match_criteria')
    def match_criteria_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[\s\S]*$", value):
            raise ValueError(r"must validate the regular expression /^[\s\S]*$/")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ComponentRule:
        """Create an instance of ComponentRule from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if components (nullable) is None
        # and __fields_set__ contains the field
        if self.components is None and "components" in self.__fields_set__:
            _dict['components'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ComponentRule:
        """Create an instance of ComponentRule from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ComponentRule.parse_obj(obj)

        _obj = ComponentRule.parse_obj({
            "match_criteria": obj.get("matchCriteria"),
            "components": obj.get("components")
        })
        return _obj
