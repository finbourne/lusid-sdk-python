# coding: utf-8

"""
    LUSID API

    FINBOURNE Technology  # noqa: E501

    Contact: info@finbourne.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Dict
from pydantic import BaseModel
from lusid.models.compliance_rule import ComplianceRule

class ComplianceRuleUpsertResponse(BaseModel):
    """
    ComplianceRuleUpsertResponse
    """
    values: Dict[str, ComplianceRule] = ...
    __properties = ["values"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ComplianceRuleUpsertResponse:
        """Create an instance of ComplianceRuleUpsertResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each value in values (dict)
        _field_dict = {}
        if self.values:
            for _key in self.values:
                if self.values[_key]:
                    _field_dict[_key] = self.values[_key].to_dict()
            _dict['values'] = _field_dict
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ComplianceRuleUpsertResponse:
        """Create an instance of ComplianceRuleUpsertResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ComplianceRuleUpsertResponse.parse_obj(obj)

        # raise errors for additional fields in the input
        for _key in obj.keys():
            if _key not in cls.__properties:
                raise ValueError("Error due to additional fields (not defined in ComplianceRuleUpsertResponse) in the input: " + obj)

        _obj = ComplianceRuleUpsertResponse.parse_obj({
            "values": {k: None if v is None else {ik: ComplianceRule.from_dict(iv) for ik, iv in v.items()} for k, v in obj.get("values").items()} if obj.get("values") is not None else None,
        })
        return _obj

