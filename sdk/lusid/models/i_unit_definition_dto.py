# coding: utf-8

"""
    LUSID API

    FINBOURNE Technology  # noqa: E501

    Contact: info@finbourne.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, Optional
from pydantic.v1 import BaseModel, Field, StrictStr, validator

class IUnitDefinitionDto(BaseModel):
    """
    IUnitDefinitionDto
    """
    var_schema: Optional[StrictStr] = Field(None, alias="schema", description="The available values are: NoUnits, Basic, Iso4217Currency")
    code: Optional[StrictStr] = None
    display_name: Optional[StrictStr] = Field(None, alias="displayName")
    description: Optional[StrictStr] = None
    __properties = ["schema", "code", "displayName", "description"]

    @validator('var_schema')
    def var_schema_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('NoUnits', 'Basic', 'Iso4217Currency'):
            raise ValueError("must be one of enum values ('NoUnits', 'Basic', 'Iso4217Currency')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> IUnitDefinitionDto:
        """Create an instance of IUnitDefinitionDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "code",
                            "display_name",
                            "description",
                          },
                          exclude_none=True)
        # set to None if code (nullable) is None
        # and __fields_set__ contains the field
        if self.code is None and "code" in self.__fields_set__:
            _dict['code'] = None

        # set to None if display_name (nullable) is None
        # and __fields_set__ contains the field
        if self.display_name is None and "display_name" in self.__fields_set__:
            _dict['displayName'] = None

        # set to None if description (nullable) is None
        # and __fields_set__ contains the field
        if self.description is None and "description" in self.__fields_set__:
            _dict['description'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> IUnitDefinitionDto:
        """Create an instance of IUnitDefinitionDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return IUnitDefinitionDto.parse_obj(obj)

        _obj = IUnitDefinitionDto.parse_obj({
            "var_schema": obj.get("schema"),
            "code": obj.get("code"),
            "display_name": obj.get("displayName"),
            "description": obj.get("description")
        })
        return _obj
