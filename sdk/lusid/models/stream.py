# coding: utf-8

"""
    LUSID API

    FINBOURNE Technology  # noqa: E501

    Contact: info@finbourne.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, Optional
from pydantic.v1 import BaseModel, Field, StrictBool, StrictInt

class Stream(BaseModel):
    """
    Stream
    """
    can_read: Optional[StrictBool] = Field(None, alias="canRead")
    can_write: Optional[StrictBool] = Field(None, alias="canWrite")
    can_seek: Optional[StrictBool] = Field(None, alias="canSeek")
    can_timeout: Optional[StrictBool] = Field(None, alias="canTimeout")
    length: Optional[StrictInt] = None
    position: Optional[StrictInt] = None
    read_timeout: Optional[StrictInt] = Field(None, alias="readTimeout")
    write_timeout: Optional[StrictInt] = Field(None, alias="writeTimeout")
    __properties = ["canRead", "canWrite", "canSeek", "canTimeout", "length", "position", "readTimeout", "writeTimeout"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Stream:
        """Create an instance of Stream from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "can_read",
                            "can_write",
                            "can_seek",
                            "can_timeout",
                            "length",
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Stream:
        """Create an instance of Stream from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Stream.parse_obj(obj)

        _obj = Stream.parse_obj({
            "can_read": obj.get("canRead"),
            "can_write": obj.get("canWrite"),
            "can_seek": obj.get("canSeek"),
            "can_timeout": obj.get("canTimeout"),
            "length": obj.get("length"),
            "position": obj.get("position"),
            "read_timeout": obj.get("readTimeout"),
            "write_timeout": obj.get("writeTimeout")
        })
        return _obj
