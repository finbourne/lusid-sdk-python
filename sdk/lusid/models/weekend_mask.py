# coding: utf-8

"""
    LUSID API

    FINBOURNE Technology  # noqa: E501

    Contact: info@finbourne.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, List
from pydantic.v1 import BaseModel, Field, conlist, constr, validator
from lusid.models.day_of_week import DayOfWeek

class WeekendMask(BaseModel):
    """
    WeekendMask
    """
    days: conlist(DayOfWeek) = Field(...)
    time_zone: constr(strict=True, max_length=256, min_length=1) = Field(..., alias="timeZone")
    __properties = ["days", "timeZone"]

    @validator('time_zone')
    def time_zone_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[a-zA-Z0-9\-_]+$", value):
            raise ValueError(r"must validate the regular expression /^[a-zA-Z0-9\-_]+$/")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> WeekendMask:
        """Create an instance of WeekendMask from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> WeekendMask:
        """Create an instance of WeekendMask from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return WeekendMask.parse_obj(obj)

        _obj = WeekendMask.parse_obj({
            "days": obj.get("days"),
            "time_zone": obj.get("timeZone")
        })
        return _obj
