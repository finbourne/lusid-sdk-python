# coding: utf-8

"""
    LUSID API

    FINBOURNE Technology  # noqa: E501

    Contact: info@finbourne.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, Optional
from pydantic.v1 import BaseModel, Field
from lusid.models.credit_support_annex import CreditSupportAnnex

class UpsertCreditSupportAnnexRequest(BaseModel):
    """
    Credit Support Annex information. The interaction in terms of margining requirements between a set of trades for a given counterparty.  # noqa: E501
    """
    credit_support_annex: Optional[CreditSupportAnnex] = Field(None, alias="creditSupportAnnex")
    __properties = ["creditSupportAnnex"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> UpsertCreditSupportAnnexRequest:
        """Create an instance of UpsertCreditSupportAnnexRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of credit_support_annex
        if self.credit_support_annex:
            _dict['creditSupportAnnex'] = self.credit_support_annex.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> UpsertCreditSupportAnnexRequest:
        """Create an instance of UpsertCreditSupportAnnexRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return UpsertCreditSupportAnnexRequest.parse_obj(obj)

        _obj = UpsertCreditSupportAnnexRequest.parse_obj({
            "credit_support_annex": CreditSupportAnnex.from_dict(obj.get("creditSupportAnnex")) if obj.get("creditSupportAnnex") is not None else None
        })
        return _obj
