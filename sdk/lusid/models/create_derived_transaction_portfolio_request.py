# coding: utf-8

"""
    LUSID API

    FINBOURNE Technology  # noqa: E501

    The version of the OpenAPI document: 0.11.2875
    Contact: info@finbourne.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

class CreateDerivedTransactionPortfolioRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
      required_map (dict): The key is attribute name
                           and the value is whether it is 'required' or 'optional'.
    """
    openapi_types = {
        'display_name': 'str',
        'description': 'str',
        'code': 'str',
        'parent_portfolio_id': 'ResourceId',
        'created': 'datetime',
        'corporate_action_source_id': 'ResourceId',
        'accounting_method': 'str',
        'sub_holding_keys': 'list[str]'
    }

    attribute_map = {
        'display_name': 'displayName',
        'description': 'description',
        'code': 'code',
        'parent_portfolio_id': 'parentPortfolioId',
        'created': 'created',
        'corporate_action_source_id': 'corporateActionSourceId',
        'accounting_method': 'accountingMethod',
        'sub_holding_keys': 'subHoldingKeys'
    }

    required_map = {
        'display_name': 'required',
        'description': 'optional',
        'code': 'required',
        'parent_portfolio_id': 'required',
        'created': 'optional',
        'corporate_action_source_id': 'optional',
        'accounting_method': 'optional',
        'sub_holding_keys': 'optional'
    }

    def __init__(self, display_name=None, description=None, code=None, parent_portfolio_id=None, created=None, corporate_action_source_id=None, accounting_method=None, sub_holding_keys=None):  # noqa: E501
        """
        CreateDerivedTransactionPortfolioRequest - a model defined in OpenAPI

        :param display_name:  (required)
        :type display_name: str
        :param description: 
        :type description: str
        :param code:  (required)
        :type code: str
        :param parent_portfolio_id:  (required)
        :type parent_portfolio_id: lusid.ResourceId
        :param created: 
        :type created: datetime
        :param corporate_action_source_id: 
        :type corporate_action_source_id: lusid.ResourceId
        :param accounting_method:  The available values are: Default, AverageCost, FirstInFirstOut, LastInFirstOut, HighestCostFirst, LowestCostFirst
        :type accounting_method: str
        :param sub_holding_keys: 
        :type sub_holding_keys: list[str]

        """  # noqa: E501

        self._display_name = None
        self._description = None
        self._code = None
        self._parent_portfolio_id = None
        self._created = None
        self._corporate_action_source_id = None
        self._accounting_method = None
        self._sub_holding_keys = None
        self.discriminator = None

        self.display_name = display_name
        self.description = description
        self.code = code
        self.parent_portfolio_id = parent_portfolio_id
        self.created = created
        if corporate_action_source_id is not None:
            self.corporate_action_source_id = corporate_action_source_id
        if accounting_method is not None:
            self.accounting_method = accounting_method
        self.sub_holding_keys = sub_holding_keys

    @property
    def display_name(self):
        """Gets the display_name of this CreateDerivedTransactionPortfolioRequest.  # noqa: E501


        :return: The display_name of this CreateDerivedTransactionPortfolioRequest.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this CreateDerivedTransactionPortfolioRequest.


        :param display_name: The display_name of this CreateDerivedTransactionPortfolioRequest.  # noqa: E501
        :type: str
        """
        if display_name is None:
            raise ValueError("Invalid value for `display_name`, must not be `None`")  # noqa: E501
        if display_name is not None and len(display_name) > 512:
            raise ValueError("Invalid value for `display_name`, length must be less than or equal to `512`")  # noqa: E501
        if display_name is not None and len(display_name) < 1:
            raise ValueError("Invalid value for `display_name`, length must be greater than or equal to `1`")  # noqa: E501
        if (display_name is not None and not re.search(r'(?s).*', display_name)):  # noqa: E501
            raise ValueError(r"Invalid value for `display_name`, must be a follow pattern or equal to `/(?s).*/`")  # noqa: E501

        self._display_name = display_name

    @property
    def description(self):
        """Gets the description of this CreateDerivedTransactionPortfolioRequest.  # noqa: E501


        :return: The description of this CreateDerivedTransactionPortfolioRequest.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateDerivedTransactionPortfolioRequest.


        :param description: The description of this CreateDerivedTransactionPortfolioRequest.  # noqa: E501
        :type: str
        """
        if description is not None and len(description) > 1024:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `1024`")  # noqa: E501
        if description is not None and len(description) < 0:
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `0`")  # noqa: E501
        if (description is not None and not re.search(r'(?s).*', description)):  # noqa: E501
            raise ValueError(r"Invalid value for `description`, must be a follow pattern or equal to `/(?s).*/`")  # noqa: E501

        self._description = description

    @property
    def code(self):
        """Gets the code of this CreateDerivedTransactionPortfolioRequest.  # noqa: E501


        :return: The code of this CreateDerivedTransactionPortfolioRequest.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this CreateDerivedTransactionPortfolioRequest.


        :param code: The code of this CreateDerivedTransactionPortfolioRequest.  # noqa: E501
        :type: str
        """
        if code is None:
            raise ValueError("Invalid value for `code`, must not be `None`")  # noqa: E501
        if code is not None and len(code) > 64:
            raise ValueError("Invalid value for `code`, length must be less than or equal to `64`")  # noqa: E501
        if code is not None and len(code) < 1:
            raise ValueError("Invalid value for `code`, length must be greater than or equal to `1`")  # noqa: E501
        if (code is not None and not re.search(r'^[a-zA-Z0-9\-_]+$', code)):  # noqa: E501
            raise ValueError(r"Invalid value for `code`, must be a follow pattern or equal to `/^[a-zA-Z0-9\-_]+$/`")  # noqa: E501

        self._code = code

    @property
    def parent_portfolio_id(self):
        """Gets the parent_portfolio_id of this CreateDerivedTransactionPortfolioRequest.  # noqa: E501


        :return: The parent_portfolio_id of this CreateDerivedTransactionPortfolioRequest.  # noqa: E501
        :rtype: ResourceId
        """
        return self._parent_portfolio_id

    @parent_portfolio_id.setter
    def parent_portfolio_id(self, parent_portfolio_id):
        """Sets the parent_portfolio_id of this CreateDerivedTransactionPortfolioRequest.


        :param parent_portfolio_id: The parent_portfolio_id of this CreateDerivedTransactionPortfolioRequest.  # noqa: E501
        :type: ResourceId
        """
        if parent_portfolio_id is None:
            raise ValueError("Invalid value for `parent_portfolio_id`, must not be `None`")  # noqa: E501

        self._parent_portfolio_id = parent_portfolio_id

    @property
    def created(self):
        """Gets the created of this CreateDerivedTransactionPortfolioRequest.  # noqa: E501


        :return: The created of this CreateDerivedTransactionPortfolioRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this CreateDerivedTransactionPortfolioRequest.


        :param created: The created of this CreateDerivedTransactionPortfolioRequest.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def corporate_action_source_id(self):
        """Gets the corporate_action_source_id of this CreateDerivedTransactionPortfolioRequest.  # noqa: E501


        :return: The corporate_action_source_id of this CreateDerivedTransactionPortfolioRequest.  # noqa: E501
        :rtype: ResourceId
        """
        return self._corporate_action_source_id

    @corporate_action_source_id.setter
    def corporate_action_source_id(self, corporate_action_source_id):
        """Sets the corporate_action_source_id of this CreateDerivedTransactionPortfolioRequest.


        :param corporate_action_source_id: The corporate_action_source_id of this CreateDerivedTransactionPortfolioRequest.  # noqa: E501
        :type: ResourceId
        """

        self._corporate_action_source_id = corporate_action_source_id

    @property
    def accounting_method(self):
        """Gets the accounting_method of this CreateDerivedTransactionPortfolioRequest.  # noqa: E501

        The available values are: Default, AverageCost, FirstInFirstOut, LastInFirstOut, HighestCostFirst, LowestCostFirst  # noqa: E501

        :return: The accounting_method of this CreateDerivedTransactionPortfolioRequest.  # noqa: E501
        :rtype: str
        """
        return self._accounting_method

    @accounting_method.setter
    def accounting_method(self, accounting_method):
        """Sets the accounting_method of this CreateDerivedTransactionPortfolioRequest.

        The available values are: Default, AverageCost, FirstInFirstOut, LastInFirstOut, HighestCostFirst, LowestCostFirst  # noqa: E501

        :param accounting_method: The accounting_method of this CreateDerivedTransactionPortfolioRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["Default", "AverageCost", "FirstInFirstOut", "LastInFirstOut", "HighestCostFirst", "LowestCostFirst"]  # noqa: E501
        if accounting_method not in allowed_values:
            raise ValueError(
                "Invalid value for `accounting_method` ({0}), must be one of {1}"  # noqa: E501
                .format(accounting_method, allowed_values)
            )

        self._accounting_method = accounting_method

    @property
    def sub_holding_keys(self):
        """Gets the sub_holding_keys of this CreateDerivedTransactionPortfolioRequest.  # noqa: E501


        :return: The sub_holding_keys of this CreateDerivedTransactionPortfolioRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._sub_holding_keys

    @sub_holding_keys.setter
    def sub_holding_keys(self, sub_holding_keys):
        """Sets the sub_holding_keys of this CreateDerivedTransactionPortfolioRequest.


        :param sub_holding_keys: The sub_holding_keys of this CreateDerivedTransactionPortfolioRequest.  # noqa: E501
        :type: list[str]
        """

        self._sub_holding_keys = sub_holding_keys

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateDerivedTransactionPortfolioRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
