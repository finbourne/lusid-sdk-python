# coding: utf-8

"""
    LUSID API

    FINBOURNE Technology  # noqa: E501

    Contact: info@finbourne.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict
from pydantic.v1 import BaseModel, Field
from lusid.models.metadata_key_value import MetadataKeyValue

class BatchUpsertPortfolioAccessMetadataRequest(BaseModel):
    """
    BatchUpsertPortfolioAccessMetadataRequest
    """
    portfolios_with_metadata: Dict[str, MetadataKeyValue] = Field(..., alias="portfoliosWithMetadata", description="The set of portfolios with the access control metadata")
    __properties = ["portfoliosWithMetadata"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> BatchUpsertPortfolioAccessMetadataRequest:
        """Create an instance of BatchUpsertPortfolioAccessMetadataRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each value in portfolios_with_metadata (dict)
        _field_dict = {}
        if self.portfolios_with_metadata:
            for _key in self.portfolios_with_metadata:
                if self.portfolios_with_metadata[_key]:
                    _field_dict[_key] = self.portfolios_with_metadata[_key].to_dict()
            _dict['portfoliosWithMetadata'] = _field_dict
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> BatchUpsertPortfolioAccessMetadataRequest:
        """Create an instance of BatchUpsertPortfolioAccessMetadataRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return BatchUpsertPortfolioAccessMetadataRequest.parse_obj(obj)

        _obj = BatchUpsertPortfolioAccessMetadataRequest.parse_obj({
            "portfolios_with_metadata": dict(
                (_k, MetadataKeyValue.from_dict(_v))
                for _k, _v in obj.get("portfoliosWithMetadata").items()
            )
            if obj.get("portfoliosWithMetadata") is not None
            else None
        })
        return _obj
