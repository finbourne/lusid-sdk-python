# coding: utf-8

"""
    LUSID API

    FINBOURNE Technology  # noqa: E501

    Contact: info@finbourne.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, Optional
from pydantic.v1 import BaseModel, Field
from lusid.models.recipe_composer import RecipeComposer

class UpsertRecipeComposerRequest(BaseModel):
    """
    A recipe composer that is to be stored in the recipe composer data store or used for inline resolving.  # noqa: E501
    """
    recipe_composer: Optional[RecipeComposer] = Field(None, alias="recipeComposer")
    __properties = ["recipeComposer"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> UpsertRecipeComposerRequest:
        """Create an instance of UpsertRecipeComposerRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of recipe_composer
        if self.recipe_composer:
            _dict['recipeComposer'] = self.recipe_composer.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> UpsertRecipeComposerRequest:
        """Create an instance of UpsertRecipeComposerRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return UpsertRecipeComposerRequest.parse_obj(obj)

        _obj = UpsertRecipeComposerRequest.parse_obj({
            "recipe_composer": RecipeComposer.from_dict(obj.get("recipeComposer")) if obj.get("recipeComposer") is not None else None
        })
        return _obj
