# coding: utf-8

"""
    LUSID API

    FINBOURNE Technology  # noqa: E501

    Contact: info@finbourne.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, List, Optional
from pydantic.v1 import BaseModel, Field, conlist
from lusid.models.economic_dependency_with_complex_market_data import EconomicDependencyWithComplexMarketData
from lusid.models.economic_dependency_with_quote import EconomicDependencyWithQuote

class MarketDataOverrides(BaseModel):
    """
    Class which holds market data overrides to be used in valuation  # noqa: E501
    """
    complex_market_data: Optional[conlist(EconomicDependencyWithComplexMarketData)] = Field(None, alias="complexMarketData", description="A list of EconomicDependency paired with quote data satisfying that economic dependency")
    quotes: Optional[conlist(EconomicDependencyWithQuote)] = Field(None, description="A list of EconomicDependency paired with a ComplexMarketData satisfying that economic dependency")
    __properties = ["complexMarketData", "quotes"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> MarketDataOverrides:
        """Create an instance of MarketDataOverrides from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in complex_market_data (list)
        _items = []
        if self.complex_market_data:
            for _item in self.complex_market_data:
                if _item:
                    _items.append(_item.to_dict())
            _dict['complexMarketData'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in quotes (list)
        _items = []
        if self.quotes:
            for _item in self.quotes:
                if _item:
                    _items.append(_item.to_dict())
            _dict['quotes'] = _items
        # set to None if complex_market_data (nullable) is None
        # and __fields_set__ contains the field
        if self.complex_market_data is None and "complex_market_data" in self.__fields_set__:
            _dict['complexMarketData'] = None

        # set to None if quotes (nullable) is None
        # and __fields_set__ contains the field
        if self.quotes is None and "quotes" in self.__fields_set__:
            _dict['quotes'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> MarketDataOverrides:
        """Create an instance of MarketDataOverrides from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return MarketDataOverrides.parse_obj(obj)

        _obj = MarketDataOverrides.parse_obj({
            "complex_market_data": [EconomicDependencyWithComplexMarketData.from_dict(_item) for _item in obj.get("complexMarketData")] if obj.get("complexMarketData") is not None else None,
            "quotes": [EconomicDependencyWithQuote.from_dict(_item) for _item in obj.get("quotes")] if obj.get("quotes") is not None else None
        })
        return _obj
