# coding: utf-8

"""
    LUSID API

    FINBOURNE Technology  # noqa: E501

    Contact: info@finbourne.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, List, Optional
from pydantic.v1 import BaseModel, Field, StrictInt, StrictStr, conlist, constr
from lusid.models.resource_id import ResourceId

class DataModelSummary(BaseModel):
    """
    DataModelSummary
    """
    id: Optional[ResourceId] = None
    display_name: Optional[StrictStr] = Field(None, alias="displayName", description="The name of the Custom Data Model.")
    description: Optional[StrictStr] = Field(None, description="A description for the Custom Data Model.")
    entity_type: constr(strict=True, min_length=1) = Field(..., alias="entityType", description="The entity type that the Custom Data Model binds to.")
    type: Optional[StrictStr] = Field(None, description="Either Root or Leaf or Intermediate.")
    precedence: Optional[StrictInt] = Field(None, description="Where in the hierarchy this model sits.")
    children: Optional[conlist(DataModelSummary)] = Field(None, description="Child Custom Data Models that will inherit from this data model.")
    __properties = ["id", "displayName", "description", "entityType", "type", "precedence", "children"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def __str__(self):
        """For `print` and `pprint`"""
        return pprint.pformat(self.dict(by_alias=False))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> DataModelSummary:
        """Create an instance of DataModelSummary from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of id
        if self.id:
            _dict['id'] = self.id.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in children (list)
        _items = []
        if self.children:
            for _item in self.children:
                if _item:
                    _items.append(_item.to_dict())
            _dict['children'] = _items
        # set to None if display_name (nullable) is None
        # and __fields_set__ contains the field
        if self.display_name is None and "display_name" in self.__fields_set__:
            _dict['displayName'] = None

        # set to None if description (nullable) is None
        # and __fields_set__ contains the field
        if self.description is None and "description" in self.__fields_set__:
            _dict['description'] = None

        # set to None if type (nullable) is None
        # and __fields_set__ contains the field
        if self.type is None and "type" in self.__fields_set__:
            _dict['type'] = None

        # set to None if children (nullable) is None
        # and __fields_set__ contains the field
        if self.children is None and "children" in self.__fields_set__:
            _dict['children'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> DataModelSummary:
        """Create an instance of DataModelSummary from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return DataModelSummary.parse_obj(obj)

        _obj = DataModelSummary.parse_obj({
            "id": ResourceId.from_dict(obj.get("id")) if obj.get("id") is not None else None,
            "display_name": obj.get("displayName"),
            "description": obj.get("description"),
            "entity_type": obj.get("entityType"),
            "type": obj.get("type"),
            "precedence": obj.get("precedence"),
            "children": [DataModelSummary.from_dict(_item) for _item in obj.get("children")] if obj.get("children") is not None else None
        })
        return _obj
