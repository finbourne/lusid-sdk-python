# coding: utf-8

"""
    LUSID API

    FINBOURNE Technology  # noqa: E501

    Contact: info@finbourne.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, List
from pydantic.v1 import BaseModel, Field, StrictStr, conlist, constr, validator

class GeneralLedgerProfileMapping(BaseModel):
    """
    GeneralLedgerProfileMapping
    """
    mapping_filter: constr(strict=True, max_length=16384, min_length=1) = Field(..., alias="mappingFilter", description="The filter syntax for the Mapping filter. See https://support.lusid.com/knowledgebase/article/KA-02140 for more information on filter syntax")
    levels: conlist(StrictStr, max_items=5) = Field(..., description="References fields and properties on the associated Journal Entry Line and graph of associated objects.")
    __properties = ["mappingFilter", "levels"]

    @validator('mapping_filter')
    def mapping_filter_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[\s\S]*$", value):
            raise ValueError(r"must validate the regular expression /^[\s\S]*$/")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> GeneralLedgerProfileMapping:
        """Create an instance of GeneralLedgerProfileMapping from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> GeneralLedgerProfileMapping:
        """Create an instance of GeneralLedgerProfileMapping from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return GeneralLedgerProfileMapping.parse_obj(obj)

        _obj = GeneralLedgerProfileMapping.parse_obj({
            "mapping_filter": obj.get("mappingFilter"),
            "levels": obj.get("levels")
        })
        return _obj
