# coding: utf-8

"""
    LUSID API

    FINBOURNE Technology  # noqa: E501

    Contact: info@finbourne.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict
from pydantic.v1 import BaseModel, Field, constr
from lusid.models.side_definition_request import SideDefinitionRequest

class SidesDefinitionRequest(BaseModel):
    """
    SidesDefinitionRequest
    """
    side: constr(strict=True, max_length=64, min_length=1) = Field(..., description="A unique label identifying the side definition.")
    side_request: SideDefinitionRequest = Field(..., alias="sideRequest")
    __properties = ["side", "sideRequest"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> SidesDefinitionRequest:
        """Create an instance of SidesDefinitionRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of side_request
        if self.side_request:
            _dict['sideRequest'] = self.side_request.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> SidesDefinitionRequest:
        """Create an instance of SidesDefinitionRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return SidesDefinitionRequest.parse_obj(obj)

        _obj = SidesDefinitionRequest.parse_obj({
            "side": obj.get("side"),
            "side_request": SideDefinitionRequest.from_dict(obj.get("sideRequest")) if obj.get("sideRequest") is not None else None
        })
        return _obj
