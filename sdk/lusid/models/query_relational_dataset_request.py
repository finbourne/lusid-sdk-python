# coding: utf-8

"""
    LUSID API

    FINBOURNE Technology  # noqa: E501

    Contact: info@finbourne.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, List, Optional
from pydantic.v1 import StrictStr, Field, BaseModel, Field, StrictStr, conlist, constr 

class QueryRelationalDatasetRequest(BaseModel):
    """
    QueryRelationalDatasetRequest
    """
    query_method:  StrictStr = Field(...,alias="queryMethod", description="The method used to query data points. Can be either 'Latest' or 'TimeSeries'.") 
    filter:  Optional[StrictStr] = Field(None,alias="filter", description="Expression to filter the result set. For more information about filtering LUSID results, see https://support.lusid.com/knowledgebase/article/KA-01914.") 
    custom_sort_by: Optional[conlist(StrictStr)] = Field(None, alias="customSortBy", description="A list of fields to sort the results by. For example, to sort by a Value field 'AValueField' in descending order, specify 'AValueField DESC'.")
    __properties = ["queryMethod", "filter", "customSortBy"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def __str__(self):
        """For `print` and `pprint`"""
        return pprint.pformat(self.dict(by_alias=False))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> QueryRelationalDatasetRequest:
        """Create an instance of QueryRelationalDatasetRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if filter (nullable) is None
        # and __fields_set__ contains the field
        if self.filter is None and "filter" in self.__fields_set__:
            _dict['filter'] = None

        # set to None if custom_sort_by (nullable) is None
        # and __fields_set__ contains the field
        if self.custom_sort_by is None and "custom_sort_by" in self.__fields_set__:
            _dict['customSortBy'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> QueryRelationalDatasetRequest:
        """Create an instance of QueryRelationalDatasetRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return QueryRelationalDatasetRequest.parse_obj(obj)

        _obj = QueryRelationalDatasetRequest.parse_obj({
            "query_method": obj.get("queryMethod"),
            "filter": obj.get("filter"),
            "custom_sort_by": obj.get("customSortBy")
        })
        return _obj
