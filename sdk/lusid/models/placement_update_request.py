# coding: utf-8

"""
    LUSID API

    FINBOURNE Technology  # noqa: E501

    Contact: info@finbourne.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, Optional, Union
from pydantic.v1 import BaseModel, Field, StrictFloat, StrictInt, StrictStr, constr
from lusid.models.perpetual_property import PerpetualProperty
from lusid.models.resource_id import ResourceId

class PlacementUpdateRequest(BaseModel):
    """
    A request to create or update a Placement.  # noqa: E501
    """
    id: ResourceId = Field(...)
    quantity: Optional[Union[StrictFloat, StrictInt]] = Field(None, description="The quantity of given instrument ordered.")
    properties: Optional[Dict[str, PerpetualProperty]] = Field(None, description="Client-defined properties associated with this placement.")
    counterparty: Optional[StrictStr] = Field(None, description="Optionally specifies the market entity this placement is placed with.")
    execution_system: Optional[constr(strict=True, max_length=256, min_length=1)] = Field(None, alias="executionSystem", description="Optionally specifies the execution system in use.")
    entry_type: Optional[constr(strict=True, max_length=256, min_length=1)] = Field(None, alias="entryType", description="Optionally specifies the entry type of this placement.")
    __properties = ["id", "quantity", "properties", "counterparty", "executionSystem", "entryType"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PlacementUpdateRequest:
        """Create an instance of PlacementUpdateRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of id
        if self.id:
            _dict['id'] = self.id.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each value in properties (dict)
        _field_dict = {}
        if self.properties:
            for _key in self.properties:
                if self.properties[_key]:
                    _field_dict[_key] = self.properties[_key].to_dict()
            _dict['properties'] = _field_dict
        # set to None if quantity (nullable) is None
        # and __fields_set__ contains the field
        if self.quantity is None and "quantity" in self.__fields_set__:
            _dict['quantity'] = None

        # set to None if properties (nullable) is None
        # and __fields_set__ contains the field
        if self.properties is None and "properties" in self.__fields_set__:
            _dict['properties'] = None

        # set to None if counterparty (nullable) is None
        # and __fields_set__ contains the field
        if self.counterparty is None and "counterparty" in self.__fields_set__:
            _dict['counterparty'] = None

        # set to None if execution_system (nullable) is None
        # and __fields_set__ contains the field
        if self.execution_system is None and "execution_system" in self.__fields_set__:
            _dict['executionSystem'] = None

        # set to None if entry_type (nullable) is None
        # and __fields_set__ contains the field
        if self.entry_type is None and "entry_type" in self.__fields_set__:
            _dict['entryType'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PlacementUpdateRequest:
        """Create an instance of PlacementUpdateRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PlacementUpdateRequest.parse_obj(obj)

        _obj = PlacementUpdateRequest.parse_obj({
            "id": ResourceId.from_dict(obj.get("id")) if obj.get("id") is not None else None,
            "quantity": obj.get("quantity"),
            "properties": dict(
                (_k, PerpetualProperty.from_dict(_v))
                for _k, _v in obj.get("properties").items()
            )
            if obj.get("properties") is not None
            else None,
            "counterparty": obj.get("counterparty"),
            "execution_system": obj.get("executionSystem"),
            "entry_type": obj.get("entryType")
        })
        return _obj
