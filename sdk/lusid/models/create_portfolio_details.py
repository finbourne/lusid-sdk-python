# coding: utf-8

"""
    LUSID API

    FINBOURNE Technology  # noqa: E501

    Contact: info@finbourne.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, Optional
from pydantic.v1 import BaseModel, Field
from lusid.models.resource_id import ResourceId

class CreatePortfolioDetails(BaseModel):
    """
    CreatePortfolioDetails
    """
    corporate_action_source_id: Optional[ResourceId] = Field(None, alias="corporateActionSourceId")
    __properties = ["corporateActionSourceId"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CreatePortfolioDetails:
        """Create an instance of CreatePortfolioDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of corporate_action_source_id
        if self.corporate_action_source_id:
            _dict['corporateActionSourceId'] = self.corporate_action_source_id.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CreatePortfolioDetails:
        """Create an instance of CreatePortfolioDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CreatePortfolioDetails.parse_obj(obj)

        _obj = CreatePortfolioDetails.parse_obj({
            "corporate_action_source_id": ResourceId.from_dict(obj.get("corporateActionSourceId")) if obj.get("corporateActionSourceId") is not None else None
        })
        return _obj
