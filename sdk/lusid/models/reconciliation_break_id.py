# coding: utf-8

"""
    LUSID API

    FINBOURNE Technology  # noqa: E501

    Contact: info@finbourne.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr
from lusid.models.reconciliation_run_id import ReconciliationRunId

class ReconciliationBreakId(BaseModel):
    """
    ReconciliationBreakId
    """
    reconciliation_run: Optional[ReconciliationRunId] = Field(None, alias="reconciliationRun")
    break_id: Optional[StrictStr] = Field(None, alias="breakId")
    as_string: Optional[StrictStr] = Field(None, alias="asString")
    __properties = ["reconciliationRun", "breakId", "asString"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ReconciliationBreakId:
        """Create an instance of ReconciliationBreakId from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "as_string",
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of reconciliation_run
        if self.reconciliation_run:
            _dict['reconciliationRun'] = self.reconciliation_run.to_dict()
        # set to None if break_id (nullable) is None
        # and __fields_set__ contains the field
        if self.break_id is None and "break_id" in self.__fields_set__:
            _dict['breakId'] = None

        # set to None if as_string (nullable) is None
        # and __fields_set__ contains the field
        if self.as_string is None and "as_string" in self.__fields_set__:
            _dict['asString'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ReconciliationBreakId:
        """Create an instance of ReconciliationBreakId from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ReconciliationBreakId.parse_obj(obj)

        # raise errors for additional fields in the input
        for _key in obj.keys():
            if _key not in cls.__properties:
                raise ValueError("Error due to additional fields (not defined in ReconciliationBreakId) in the input: " + obj)

        _obj = ReconciliationBreakId.parse_obj({
            "reconciliation_run": ReconciliationRunId.from_dict(obj.get("reconciliationRun")) if obj.get("reconciliationRun") is not None else None,
            "break_id": obj.get("breakId"),
            "as_string": obj.get("asString")
        })
        return _obj

