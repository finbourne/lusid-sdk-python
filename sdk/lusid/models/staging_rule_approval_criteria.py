# coding: utf-8

"""
    LUSID API

    FINBOURNE Technology  # noqa: E501

    Contact: info@finbourne.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, Optional
from pydantic import BaseModel, Field, StrictInt, constr

class StagingRuleApprovalCriteria(BaseModel):
    """
    StagingRuleApprovalCriteria
    """
    required_approvals: Optional[StrictInt] = Field(None, alias="requiredApprovals")
    deciding_user: Optional[constr(strict=True, max_length=16384, min_length=0)] = Field(None, alias="decidingUser")
    __properties = ["requiredApprovals", "decidingUser"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> StagingRuleApprovalCriteria:
        """Create an instance of StagingRuleApprovalCriteria from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if required_approvals (nullable) is None
        # and __fields_set__ contains the field
        if self.required_approvals is None and "required_approvals" in self.__fields_set__:
            _dict['requiredApprovals'] = None

        # set to None if deciding_user (nullable) is None
        # and __fields_set__ contains the field
        if self.deciding_user is None and "deciding_user" in self.__fields_set__:
            _dict['decidingUser'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> StagingRuleApprovalCriteria:
        """Create an instance of StagingRuleApprovalCriteria from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return StagingRuleApprovalCriteria.parse_obj(obj)

        _obj = StagingRuleApprovalCriteria.parse_obj({
            "required_approvals": obj.get("requiredApprovals"),
            "deciding_user": obj.get("decidingUser")
        })
        return _obj
