# coding: utf-8

"""
    LUSID API

    FINBOURNE Technology  # noqa: E501

    Contact: info@finbourne.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, Dict, Optional
from pydantic.v1 import BaseModel, Field, StrictInt, StrictStr, constr
from lusid.models.data_type import DataType

class DataTypeEntity(BaseModel):
    """
    DataTypeEntity
    """
    href: StrictStr = Field(..., description="The specific Uniform Resource Identifier (URI) for this resource at the requested effective and asAt datetime.")
    entity_unique_id: constr(strict=True, min_length=1) = Field(..., alias="entityUniqueId", description="The unique id of the entity.")
    as_at_version_number: Optional[StrictInt] = Field(None, alias="asAtVersionNumber", description="The integer version number for the entity (the entity was created at version 1)")
    status: constr(strict=True, min_length=1) = Field(..., description="The status of the entity at the current time.")
    as_at_deleted: Optional[datetime] = Field(None, alias="asAtDeleted", description="The asAt datetime at which the entity was deleted.")
    user_id_deleted: Optional[StrictStr] = Field(None, alias="userIdDeleted", description="The unique id of the user who deleted the entity.")
    request_id_deleted: Optional[StrictStr] = Field(None, alias="requestIdDeleted", description="The unique request id of the command that deleted the entity.")
    effective_at_created: Optional[datetime] = Field(None, alias="effectiveAtCreated", description="The EffectiveAt this Entity is created, if entity does not currently exist in EffectiveAt.")
    prevailing_data_type: Optional[DataType] = Field(None, alias="prevailingDataType")
    deleted_data_type: Optional[DataType] = Field(None, alias="deletedDataType")
    previewed_status: Optional[StrictStr] = Field(None, alias="previewedStatus", description="The status of the previewed entity.")
    previewed_data_type: Optional[DataType] = Field(None, alias="previewedDataType")
    __properties = ["href", "entityUniqueId", "asAtVersionNumber", "status", "asAtDeleted", "userIdDeleted", "requestIdDeleted", "effectiveAtCreated", "prevailingDataType", "deletedDataType", "previewedStatus", "previewedDataType"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> DataTypeEntity:
        """Create an instance of DataTypeEntity from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of prevailing_data_type
        if self.prevailing_data_type:
            _dict['prevailingDataType'] = self.prevailing_data_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of deleted_data_type
        if self.deleted_data_type:
            _dict['deletedDataType'] = self.deleted_data_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of previewed_data_type
        if self.previewed_data_type:
            _dict['previewedDataType'] = self.previewed_data_type.to_dict()
        # set to None if as_at_version_number (nullable) is None
        # and __fields_set__ contains the field
        if self.as_at_version_number is None and "as_at_version_number" in self.__fields_set__:
            _dict['asAtVersionNumber'] = None

        # set to None if as_at_deleted (nullable) is None
        # and __fields_set__ contains the field
        if self.as_at_deleted is None and "as_at_deleted" in self.__fields_set__:
            _dict['asAtDeleted'] = None

        # set to None if user_id_deleted (nullable) is None
        # and __fields_set__ contains the field
        if self.user_id_deleted is None and "user_id_deleted" in self.__fields_set__:
            _dict['userIdDeleted'] = None

        # set to None if request_id_deleted (nullable) is None
        # and __fields_set__ contains the field
        if self.request_id_deleted is None and "request_id_deleted" in self.__fields_set__:
            _dict['requestIdDeleted'] = None

        # set to None if effective_at_created (nullable) is None
        # and __fields_set__ contains the field
        if self.effective_at_created is None and "effective_at_created" in self.__fields_set__:
            _dict['effectiveAtCreated'] = None

        # set to None if previewed_status (nullable) is None
        # and __fields_set__ contains the field
        if self.previewed_status is None and "previewed_status" in self.__fields_set__:
            _dict['previewedStatus'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> DataTypeEntity:
        """Create an instance of DataTypeEntity from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return DataTypeEntity.parse_obj(obj)

        _obj = DataTypeEntity.parse_obj({
            "href": obj.get("href"),
            "entity_unique_id": obj.get("entityUniqueId"),
            "as_at_version_number": obj.get("asAtVersionNumber"),
            "status": obj.get("status"),
            "as_at_deleted": obj.get("asAtDeleted"),
            "user_id_deleted": obj.get("userIdDeleted"),
            "request_id_deleted": obj.get("requestIdDeleted"),
            "effective_at_created": obj.get("effectiveAtCreated"),
            "prevailing_data_type": DataType.from_dict(obj.get("prevailingDataType")) if obj.get("prevailingDataType") is not None else None,
            "deleted_data_type": DataType.from_dict(obj.get("deletedDataType")) if obj.get("deletedDataType") is not None else None,
            "previewed_status": obj.get("previewedStatus"),
            "previewed_data_type": DataType.from_dict(obj.get("previewedDataType")) if obj.get("previewedDataType") is not None else None
        })
        return _obj
