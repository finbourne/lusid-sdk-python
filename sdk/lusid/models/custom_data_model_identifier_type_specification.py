# coding: utf-8

"""
    LUSID API

    FINBOURNE Technology  # noqa: E501

    Contact: info@finbourne.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, Optional
from pydantic.v1 import BaseModel, Field, StrictBool, StrictStr

class CustomDataModelIdentifierTypeSpecification(BaseModel):
    """
    CustomDataModelIdentifierTypeSpecification
    """
    identifier_key: StrictStr = Field(..., alias="identifierKey", description="The identifier type that is required/allowed on the bound entity.")
    required: Optional[StrictBool] = Field(None, description="Whether identifier type is required or allowed.")
    __properties = ["identifierKey", "required"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def __str__(self):
        """For `print` and `pprint`"""
        return pprint.pformat(self.dict(by_alias=False))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CustomDataModelIdentifierTypeSpecification:
        """Create an instance of CustomDataModelIdentifierTypeSpecification from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CustomDataModelIdentifierTypeSpecification:
        """Create an instance of CustomDataModelIdentifierTypeSpecification from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CustomDataModelIdentifierTypeSpecification.parse_obj(obj)

        _obj = CustomDataModelIdentifierTypeSpecification.parse_obj({
            "identifier_key": obj.get("identifierKey"),
            "required": obj.get("required")
        })
        return _obj
