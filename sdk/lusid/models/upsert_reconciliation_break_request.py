# coding: utf-8

"""
    LUSID API

    FINBOURNE Technology  # noqa: E501

    Contact: info@finbourne.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Dict, Optional
from pydantic import BaseModel, Field, StrictStr, constr, validator

class UpsertReconciliationBreakRequest(BaseModel):
    """
    UpsertReconciliationBreakRequest
    """
    left_fields: Optional[Dict[str, StrictStr]] = Field(None, alias="leftFields", description="Fields for the left hand side of the reconciliation")
    right_fields: Optional[Dict[str, StrictStr]] = Field(None, alias="rightFields", description="Fields for the right hand side of the reconciliation")
    diff: Optional[constr(strict=True, max_length=512, min_length=1)] = Field(None, description="The difference between two matching fields")
    __properties = ["leftFields", "rightFields", "diff"]

    @validator('diff')
    def diff_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^\d{1,3}(,\d{3})*(\.\d+)?$", value):
            raise ValueError(r"must validate the regular expression /^\d{1,3}(,\d{3})*(\.\d+)?$/")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> UpsertReconciliationBreakRequest:
        """Create an instance of UpsertReconciliationBreakRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if left_fields (nullable) is None
        # and __fields_set__ contains the field
        if self.left_fields is None and "left_fields" in self.__fields_set__:
            _dict['leftFields'] = None

        # set to None if right_fields (nullable) is None
        # and __fields_set__ contains the field
        if self.right_fields is None and "right_fields" in self.__fields_set__:
            _dict['rightFields'] = None

        # set to None if diff (nullable) is None
        # and __fields_set__ contains the field
        if self.diff is None and "diff" in self.__fields_set__:
            _dict['diff'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> UpsertReconciliationBreakRequest:
        """Create an instance of UpsertReconciliationBreakRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return UpsertReconciliationBreakRequest.parse_obj(obj)

        # raise errors for additional fields in the input
        for _key in obj.keys():
            if _key not in cls.__properties:
                raise ValueError("Error due to additional fields (not defined in UpsertReconciliationBreakRequest) in the input: " + obj)

        _obj = UpsertReconciliationBreakRequest.parse_obj({
            "left_fields": obj.get("leftFields"),
            "right_fields": obj.get("rightFields"),
            "diff": obj.get("diff")
        })
        return _obj

