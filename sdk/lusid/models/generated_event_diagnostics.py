# coding: utf-8

"""
    LUSID API

    FINBOURNE Technology  # noqa: E501

    Contact: info@finbourne.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, List
from pydantic.v1 import BaseModel, Field, StrictStr, conlist, constr

class GeneratedEventDiagnostics(BaseModel):
    """
    Represents a set of diagnostics per generatedEvent, where applicable.  # noqa: E501
    """
    instrument_event_id: constr(strict=True, min_length=1) = Field(..., alias="instrumentEventId")
    type: constr(strict=True, min_length=1) = Field(...)
    detail: constr(strict=True, min_length=1) = Field(...)
    error_details: conlist(StrictStr) = Field(..., alias="errorDetails")
    __properties = ["instrumentEventId", "type", "detail", "errorDetails"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> GeneratedEventDiagnostics:
        """Create an instance of GeneratedEventDiagnostics from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> GeneratedEventDiagnostics:
        """Create an instance of GeneratedEventDiagnostics from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return GeneratedEventDiagnostics.parse_obj(obj)

        _obj = GeneratedEventDiagnostics.parse_obj({
            "instrument_event_id": obj.get("instrumentEventId"),
            "type": obj.get("type"),
            "detail": obj.get("detail"),
            "error_details": obj.get("errorDetails")
        })
        return _obj
