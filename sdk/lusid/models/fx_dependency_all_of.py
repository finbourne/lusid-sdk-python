# coding: utf-8

"""
    LUSID API

    FINBOURNE Technology  # noqa: E501

    Contact: info@finbourne.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime

from pydantic import BaseModel, Field, StrictStr, validator

class FxDependencyAllOf(BaseModel):
    """
    FxDependencyAllOf
    """
    domestic_currency: StrictStr = Field(..., alias="domesticCurrency", description="DomesticCurrency is the first currency in a currency pair quote e.g. eur-gbp, eur is the domestic currency.")
    foreign_currency: StrictStr = Field(..., alias="foreignCurrency", description="ForeignCurrency is the second currency in a currency pair quote e.g. eur-gbp, gbp is the foreign currency.")
    var_date: datetime = Field(..., alias="date", description="The effectiveAt of the fx rate.")
    dependency_type: StrictStr = Field(..., alias="dependencyType", description="The available values are: Opaque, Cash, Discounting, EquityCurve, EquityVol, Fx, FxForwards, FxVol, IndexProjection, IrVol, Quote, Vendor")
    additional_properties: Dict[str, Any] = {}
    __properties = ["domesticCurrency", "foreignCurrency", "date", "dependencyType"]

    @validator('dependency_type')
    def dependency_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('Opaque', 'Cash', 'Discounting', 'EquityCurve', 'EquityVol', 'Fx', 'FxForwards', 'FxVol', 'IndexProjection', 'IrVol', 'Quote', 'Vendor'):
            raise ValueError("must be one of enum values ('Opaque', 'Cash', 'Discounting', 'EquityCurve', 'EquityVol', 'Fx', 'FxForwards', 'FxVol', 'IndexProjection', 'IrVol', 'Quote', 'Vendor')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> FxDependencyAllOf:
        """Create an instance of FxDependencyAllOf from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "additional_properties"
                          },
                          exclude_none=True)
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> FxDependencyAllOf:
        """Create an instance of FxDependencyAllOf from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return FxDependencyAllOf.parse_obj(obj)

        _obj = FxDependencyAllOf.parse_obj({
            "domestic_currency": obj.get("domesticCurrency"),
            "foreign_currency": obj.get("foreignCurrency"),
            "var_date": obj.get("date"),
            "dependency_type": obj.get("dependencyType")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj

