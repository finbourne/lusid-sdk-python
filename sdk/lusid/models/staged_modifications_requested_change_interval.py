# coding: utf-8

"""
    LUSID API

    FINBOURNE Technology  # noqa: E501

    Contact: info@finbourne.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, Optional
from pydantic.v1 import BaseModel, Field, StrictStr
from lusid.models.staged_modification_effective_range import StagedModificationEffectiveRange

class StagedModificationsRequestedChangeInterval(BaseModel):
    """
    StagedModificationsRequestedChangeInterval
    """
    attribute_name: Optional[StrictStr] = Field(None, alias="attributeName", description="Name of the property the change applies to.")
    effective_range: Optional[StagedModificationEffectiveRange] = Field(None, alias="effectiveRange")
    previous_value: Optional[Any] = Field(None, alias="previousValue", description="The previous value of the attribute before the requested change is applied.")
    new_value: Optional[Any] = Field(None, alias="newValue", description="The value of the attribute once the requested change is applied.")
    as_at_basis: Optional[StrictStr] = Field(None, alias="asAtBasis", description="Whether the change represents the modification when the request was made or the modification as it would be at the latest time.")
    __properties = ["attributeName", "effectiveRange", "previousValue", "newValue", "asAtBasis"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> StagedModificationsRequestedChangeInterval:
        """Create an instance of StagedModificationsRequestedChangeInterval from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of effective_range
        if self.effective_range:
            _dict['effectiveRange'] = self.effective_range.to_dict()
        # set to None if attribute_name (nullable) is None
        # and __fields_set__ contains the field
        if self.attribute_name is None and "attribute_name" in self.__fields_set__:
            _dict['attributeName'] = None

        # set to None if previous_value (nullable) is None
        # and __fields_set__ contains the field
        if self.previous_value is None and "previous_value" in self.__fields_set__:
            _dict['previousValue'] = None

        # set to None if new_value (nullable) is None
        # and __fields_set__ contains the field
        if self.new_value is None and "new_value" in self.__fields_set__:
            _dict['newValue'] = None

        # set to None if as_at_basis (nullable) is None
        # and __fields_set__ contains the field
        if self.as_at_basis is None and "as_at_basis" in self.__fields_set__:
            _dict['asAtBasis'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> StagedModificationsRequestedChangeInterval:
        """Create an instance of StagedModificationsRequestedChangeInterval from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return StagedModificationsRequestedChangeInterval.parse_obj(obj)

        _obj = StagedModificationsRequestedChangeInterval.parse_obj({
            "attribute_name": obj.get("attributeName"),
            "effective_range": StagedModificationEffectiveRange.from_dict(obj.get("effectiveRange")) if obj.get("effectiveRange") is not None else None,
            "previous_value": obj.get("previousValue"),
            "new_value": obj.get("newValue"),
            "as_at_basis": obj.get("asAtBasis")
        })
        return _obj
