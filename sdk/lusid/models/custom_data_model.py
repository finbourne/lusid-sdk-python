# coding: utf-8

"""
    LUSID API

    FINBOURNE Technology  # noqa: E501

    Contact: info@finbourne.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, Optional
from pydantic.v1 import BaseModel, Field
from lusid.models.custom_data_model_criteria import CustomDataModelCriteria
from lusid.models.data_model_summary import DataModelSummary

class CustomDataModel(BaseModel):
    """
    CustomDataModel
    """
    data_model_summary: Optional[DataModelSummary] = Field(None, alias="dataModelSummary")
    inherited: Optional[CustomDataModelCriteria] = None
    incremental: Optional[CustomDataModelCriteria] = None
    applied: Optional[CustomDataModelCriteria] = None
    __properties = ["dataModelSummary", "inherited", "incremental", "applied"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def __str__(self):
        """For `print` and `pprint`"""
        return pprint.pformat(self.dict(by_alias=False))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CustomDataModel:
        """Create an instance of CustomDataModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of data_model_summary
        if self.data_model_summary:
            _dict['dataModelSummary'] = self.data_model_summary.to_dict()
        # override the default output from pydantic by calling `to_dict()` of inherited
        if self.inherited:
            _dict['inherited'] = self.inherited.to_dict()
        # override the default output from pydantic by calling `to_dict()` of incremental
        if self.incremental:
            _dict['incremental'] = self.incremental.to_dict()
        # override the default output from pydantic by calling `to_dict()` of applied
        if self.applied:
            _dict['applied'] = self.applied.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CustomDataModel:
        """Create an instance of CustomDataModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CustomDataModel.parse_obj(obj)

        _obj = CustomDataModel.parse_obj({
            "data_model_summary": DataModelSummary.from_dict(obj.get("dataModelSummary")) if obj.get("dataModelSummary") is not None else None,
            "inherited": CustomDataModelCriteria.from_dict(obj.get("inherited")) if obj.get("inherited") is not None else None,
            "incremental": CustomDataModelCriteria.from_dict(obj.get("incremental")) if obj.get("incremental") is not None else None,
            "applied": CustomDataModelCriteria.from_dict(obj.get("applied")) if obj.get("applied") is not None else None
        })
        return _obj
