# coding: utf-8

"""
    LUSID API

    FINBOURNE Technology  # noqa: E501

    Contact: info@finbourne.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict
from pydantic.v1 import BaseModel, Field, constr

class GroupReconciliationComparisonRuleStringValueMap(BaseModel):
    """
    GroupReconciliationComparisonRuleStringValueMap
    """
    left_value: constr(strict=True, max_length=256, min_length=1) = Field(..., alias="leftValue", description="The left string to map")
    right_value: constr(strict=True, max_length=256, min_length=1) = Field(..., alias="rightValue", description="The right string to map")
    direction: constr(strict=True, min_length=1) = Field(..., description="The direction to map. \"UniDirectional\" | \"BiDirectional\"")
    __properties = ["leftValue", "rightValue", "direction"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> GroupReconciliationComparisonRuleStringValueMap:
        """Create an instance of GroupReconciliationComparisonRuleStringValueMap from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> GroupReconciliationComparisonRuleStringValueMap:
        """Create an instance of GroupReconciliationComparisonRuleStringValueMap from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return GroupReconciliationComparisonRuleStringValueMap.parse_obj(obj)

        _obj = GroupReconciliationComparisonRuleStringValueMap.parse_obj({
            "left_value": obj.get("leftValue"),
            "right_value": obj.get("rightValue"),
            "direction": obj.get("direction")
        })
        return _obj
