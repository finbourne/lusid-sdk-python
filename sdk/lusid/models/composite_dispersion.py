# coding: utf-8

"""
    LUSID API

    FINBOURNE Technology  # noqa: E501

    Contact: info@finbourne.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import List, Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, conlist
from lusid.models.resource_id import ResourceId

class CompositeDispersion(BaseModel):
    """
    A list of Dispersion calculations for the given years.
    """
    effective_at: datetime = Field(..., alias="effectiveAt", description="The date for which dipsersion calculation has been done. This should be 31 Dec for each given year.")
    dispersion_calculation: Union[StrictFloat, StrictInt] = Field(..., alias="dispersionCalculation", description="The result for the dispersion calculation on the given effectiveAt.")
    variance: Union[StrictFloat, StrictInt] = Field(..., description="The variance on the given effectiveAt.")
    first_quartile: Union[StrictFloat, StrictInt] = Field(..., alias="firstQuartile", description="First Quartile (Q1) =  (lower quartile) = the middle of the bottom half of the returns.")
    third_quartile: Union[StrictFloat, StrictInt] = Field(..., alias="thirdQuartile", description="Third Quartile (Q3) =  (higher quartile) = the middle of the top half of the returns.")
    range: Union[StrictFloat, StrictInt] = Field(..., description="Highest return - Lowest return.")
    constituents_in_scope: Optional[conlist(ResourceId)] = Field(None, alias="constituentsInScope", description="List containing Composite members which are part of the dispersion calcualtion.")
    constituents_excluded: Optional[conlist(ResourceId)] = Field(None, alias="constituentsExcluded", description="List containing the Composite members which are not part of the dispersion calculation")
    __properties = ["effectiveAt", "dispersionCalculation", "variance", "firstQuartile", "thirdQuartile", "range", "constituentsInScope", "constituentsExcluded"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CompositeDispersion:
        """Create an instance of CompositeDispersion from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in constituents_in_scope (list)
        _items = []
        if self.constituents_in_scope:
            for _item in self.constituents_in_scope:
                if _item:
                    _items.append(_item.to_dict())
            _dict['constituentsInScope'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in constituents_excluded (list)
        _items = []
        if self.constituents_excluded:
            for _item in self.constituents_excluded:
                if _item:
                    _items.append(_item.to_dict())
            _dict['constituentsExcluded'] = _items
        # set to None if constituents_in_scope (nullable) is None
        # and __fields_set__ contains the field
        if self.constituents_in_scope is None and "constituents_in_scope" in self.__fields_set__:
            _dict['constituentsInScope'] = None

        # set to None if constituents_excluded (nullable) is None
        # and __fields_set__ contains the field
        if self.constituents_excluded is None and "constituents_excluded" in self.__fields_set__:
            _dict['constituentsExcluded'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CompositeDispersion:
        """Create an instance of CompositeDispersion from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CompositeDispersion.parse_obj(obj)

        # raise errors for additional fields in the input
        for _key in obj.keys():
            if _key not in cls.__properties:
                raise ValueError("Error due to additional fields (not defined in CompositeDispersion) in the input: " + obj)

        _obj = CompositeDispersion.parse_obj({
            "effective_at": obj.get("effectiveAt"),
            "dispersion_calculation": obj.get("dispersionCalculation"),
            "variance": obj.get("variance"),
            "first_quartile": obj.get("firstQuartile"),
            "third_quartile": obj.get("thirdQuartile"),
            "range": obj.get("range"),
            "constituents_in_scope": [ResourceId.from_dict(_item) for _item in obj.get("constituentsInScope")] if obj.get("constituentsInScope") is not None else None,
            "constituents_excluded": [ResourceId.from_dict(_item) for _item in obj.get("constituentsExcluded")] if obj.get("constituentsExcluded") is not None else None
        })
        return _obj

