# coding: utf-8

"""
    LUSID API

    FINBOURNE Technology  # noqa: E501

    Contact: info@finbourne.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, Dict, Optional
from pydantic.v1 import StrictStr, Field, BaseModel, Field, StrictStr, constr, validator 

class CalculateOrderDatesRequest(BaseModel):
    """
    CalculateOrderDatesRequest
    """
    instrument_identifier_type:  StrictStr = Field(...,alias="instrumentIdentifierType") 
    instrument_identifier:  StrictStr = Field(...,alias="instrumentIdentifier") 
    instrument_scope:  Optional[StrictStr] = Field(None,alias="instrumentScope") 
    received_date: Optional[datetime] = Field(None, alias="receivedDate")
    price_date: Optional[datetime] = Field(None, alias="priceDate")
    transaction_category:  Optional[StrictStr] = Field(None,alias="transactionCategory") 
    liquidating_share_class_identifier:  Optional[StrictStr] = Field(None,alias="liquidatingShareClassIdentifier") 
    liquidating_share_class_identifier_type:  Optional[StrictStr] = Field(None,alias="liquidatingShareClassIdentifierType") 
    liquidating_share_class_instrument_scope:  Optional[StrictStr] = Field(None,alias="liquidatingShareClassInstrumentScope") 
    __properties = ["instrumentIdentifierType", "instrumentIdentifier", "instrumentScope", "receivedDate", "priceDate", "transactionCategory", "liquidatingShareClassIdentifier", "liquidatingShareClassIdentifierType", "liquidatingShareClassInstrumentScope"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def __str__(self):
        """For `print` and `pprint`"""
        return pprint.pformat(self.dict(by_alias=False))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CalculateOrderDatesRequest:
        """Create an instance of CalculateOrderDatesRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if instrument_scope (nullable) is None
        # and __fields_set__ contains the field
        if self.instrument_scope is None and "instrument_scope" in self.__fields_set__:
            _dict['instrumentScope'] = None

        # set to None if transaction_category (nullable) is None
        # and __fields_set__ contains the field
        if self.transaction_category is None and "transaction_category" in self.__fields_set__:
            _dict['transactionCategory'] = None

        # set to None if liquidating_share_class_identifier (nullable) is None
        # and __fields_set__ contains the field
        if self.liquidating_share_class_identifier is None and "liquidating_share_class_identifier" in self.__fields_set__:
            _dict['liquidatingShareClassIdentifier'] = None

        # set to None if liquidating_share_class_identifier_type (nullable) is None
        # and __fields_set__ contains the field
        if self.liquidating_share_class_identifier_type is None and "liquidating_share_class_identifier_type" in self.__fields_set__:
            _dict['liquidatingShareClassIdentifierType'] = None

        # set to None if liquidating_share_class_instrument_scope (nullable) is None
        # and __fields_set__ contains the field
        if self.liquidating_share_class_instrument_scope is None and "liquidating_share_class_instrument_scope" in self.__fields_set__:
            _dict['liquidatingShareClassInstrumentScope'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CalculateOrderDatesRequest:
        """Create an instance of CalculateOrderDatesRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CalculateOrderDatesRequest.parse_obj(obj)

        _obj = CalculateOrderDatesRequest.parse_obj({
            "instrument_identifier_type": obj.get("instrumentIdentifierType"),
            "instrument_identifier": obj.get("instrumentIdentifier"),
            "instrument_scope": obj.get("instrumentScope"),
            "received_date": obj.get("receivedDate"),
            "price_date": obj.get("priceDate"),
            "transaction_category": obj.get("transactionCategory"),
            "liquidating_share_class_identifier": obj.get("liquidatingShareClassIdentifier"),
            "liquidating_share_class_identifier_type": obj.get("liquidatingShareClassIdentifierType"),
            "liquidating_share_class_instrument_scope": obj.get("liquidatingShareClassInstrumentScope")
        })
        return _obj
