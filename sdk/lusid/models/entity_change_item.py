# coding: utf-8

"""
    LUSID API

    FINBOURNE Technology  # noqa: E501

    Contact: info@finbourne.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, Dict, Optional
from pydantic.v1 import BaseModel, Field, StrictInt, StrictStr, constr

class EntityChangeItem(BaseModel):
    """
    Defines a change that occured for an entity  # noqa: E501
    """
    as_at_modified: datetime = Field(..., alias="asAtModified", description="The date/time of the change.")
    user_id_modified: constr(strict=True, min_length=1) = Field(..., alias="userIdModified", description="The unique identifier of the user that made the change.")
    request_id_modified: constr(strict=True, min_length=1) = Field(..., alias="requestIdModified", description="The unique identifier of the request that the changes were part of.")
    as_at_version_number: StrictInt = Field(..., alias="asAtVersionNumber", description="The version number for the entity (the entity was created at version 1). This may refer to the version number of a changed related entity, not a change for the entity itself.")
    action: constr(strict=True, min_length=1) = Field(..., description="The action performed on the entity.")
    action_description: constr(strict=True, min_length=1) = Field(..., alias="actionDescription", description="Description of the action performed on the entity.")
    attribute_name: Optional[StrictStr] = Field(None, alias="attributeName", description="The name of the field or property that has been changed.")
    previous_value: Optional[Any] = Field(None, alias="previousValue", description="The value of the attribute prior to the change.")
    new_value: Optional[Any] = Field(None, alias="newValue", description="The value of the attribute following the change.")
    effective_from: Optional[datetime] = Field(None, alias="effectiveFrom", description="The effective datetime from which the field's new value is valid.")
    effective_until: Optional[datetime] = Field(None, alias="effectiveUntil", description="The effective datetime until which the field's new value is valid.")
    detail: Optional[Dict[str, StrictStr]] = Field(None, description="Information about the particular instance of the ChangeItem (supplied information depends on the type of Action).")
    __properties = ["asAtModified", "userIdModified", "requestIdModified", "asAtVersionNumber", "action", "actionDescription", "attributeName", "previousValue", "newValue", "effectiveFrom", "effectiveUntil", "detail"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> EntityChangeItem:
        """Create an instance of EntityChangeItem from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if attribute_name (nullable) is None
        # and __fields_set__ contains the field
        if self.attribute_name is None and "attribute_name" in self.__fields_set__:
            _dict['attributeName'] = None

        # set to None if previous_value (nullable) is None
        # and __fields_set__ contains the field
        if self.previous_value is None and "previous_value" in self.__fields_set__:
            _dict['previousValue'] = None

        # set to None if new_value (nullable) is None
        # and __fields_set__ contains the field
        if self.new_value is None and "new_value" in self.__fields_set__:
            _dict['newValue'] = None

        # set to None if effective_from (nullable) is None
        # and __fields_set__ contains the field
        if self.effective_from is None and "effective_from" in self.__fields_set__:
            _dict['effectiveFrom'] = None

        # set to None if effective_until (nullable) is None
        # and __fields_set__ contains the field
        if self.effective_until is None and "effective_until" in self.__fields_set__:
            _dict['effectiveUntil'] = None

        # set to None if detail (nullable) is None
        # and __fields_set__ contains the field
        if self.detail is None and "detail" in self.__fields_set__:
            _dict['detail'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> EntityChangeItem:
        """Create an instance of EntityChangeItem from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return EntityChangeItem.parse_obj(obj)

        _obj = EntityChangeItem.parse_obj({
            "as_at_modified": obj.get("asAtModified"),
            "user_id_modified": obj.get("userIdModified"),
            "request_id_modified": obj.get("requestIdModified"),
            "as_at_version_number": obj.get("asAtVersionNumber"),
            "action": obj.get("action"),
            "action_description": obj.get("actionDescription"),
            "attribute_name": obj.get("attributeName"),
            "previous_value": obj.get("previousValue"),
            "new_value": obj.get("newValue"),
            "effective_from": obj.get("effectiveFrom"),
            "effective_until": obj.get("effectiveUntil"),
            "detail": obj.get("detail")
        })
        return _obj
