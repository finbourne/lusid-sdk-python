# coding: utf-8

"""
    LUSID API

    FINBOURNE Technology  # noqa: E501

    Contact: info@finbourne.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Dict, Optional
from pydantic import BaseModel, Field, constr, validator
from lusid.models.model_property import ModelProperty

class ChartOfAccountsRequest(BaseModel):
    """
    The request used to create a chart of account.
    """
    code: constr(strict=True, max_length=64, min_length=1) = Field(..., description="The code given for the chart of account.")
    name: Optional[constr(strict=True, max_length=512, min_length=1)] = Field(None, description="The given name for the chart of account.")
    description: Optional[constr(strict=True, max_length=1024, min_length=0)] = Field(None, description="The description for the chart of account.")
    properties: Optional[Dict[str, ModelProperty]] = Field(None, description="Chart of Accounts properties to add to the chart of account.")
    __properties = ["code", "name", "description", "properties"]

    @validator('code')
    def code_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[a-zA-Z0-9\-_]+$", value):
            raise ValueError(r"must validate the regular expression /^[a-zA-Z0-9\-_]+$/")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ChartOfAccountsRequest:
        """Create an instance of ChartOfAccountsRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each value in properties (dict)
        _field_dict = {}
        if self.properties:
            for _key in self.properties:
                if self.properties[_key]:
                    _field_dict[_key] = self.properties[_key].to_dict()
            _dict['properties'] = _field_dict
        # set to None if name (nullable) is None
        # and __fields_set__ contains the field
        if self.name is None and "name" in self.__fields_set__:
            _dict['name'] = None

        # set to None if description (nullable) is None
        # and __fields_set__ contains the field
        if self.description is None and "description" in self.__fields_set__:
            _dict['description'] = None

        # set to None if properties (nullable) is None
        # and __fields_set__ contains the field
        if self.properties is None and "properties" in self.__fields_set__:
            _dict['properties'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ChartOfAccountsRequest:
        """Create an instance of ChartOfAccountsRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ChartOfAccountsRequest.parse_obj(obj)

        # raise errors for additional fields in the input
        for _key in obj.keys():
            if _key not in cls.__properties:
                raise ValueError("Error due to additional fields (not defined in ChartOfAccountsRequest) in the input: " + obj)

        _obj = ChartOfAccountsRequest.parse_obj({
            "code": obj.get("code"),
            "name": obj.get("name"),
            "description": obj.get("description"),
            "properties": {k: None if v is None else {ik: ModelProperty.from_dict(iv) for ik, iv in v.items()} for k, v in obj.get("properties").items()} if obj.get("properties") is not None else None,
        })
        return _obj

