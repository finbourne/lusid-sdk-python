# coding: utf-8

"""
    LUSID API

    FINBOURNE Technology  # noqa: E501

    Contact: info@finbourne.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist, constr, validator

class JELinesQueryParameters(BaseModel):
    """
    JELinesQueryParameters
    """
    start_date: Optional[StrictStr] = Field(None, alias="startDate", description="The start date of the JELines.")
    end_date: Optional[StrictStr] = Field(None, alias="endDate", description="The end date of the JELInes")
    filter: Optional[constr(strict=True, max_length=16384, min_length=0)] = Field(None, description="Expression to filter the result set.")
    property_keys: Optional[conlist(StrictStr)] = Field(None, alias="propertyKeys", description="A list of property keys from the 'Instrument', 'Transaction', 'Portfolio', 'Account', 'LegalEntity' or 'CustodianAccount' domain to decorate onto the JELine.")
    __properties = ["startDate", "endDate", "filter", "propertyKeys"]

    @validator('filter')
    def filter_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[\s\S]*$", value):
            raise ValueError(r"must validate the regular expression /^[\s\S]*$/")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> JELinesQueryParameters:
        """Create an instance of JELinesQueryParameters from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if start_date (nullable) is None
        # and __fields_set__ contains the field
        if self.start_date is None and "start_date" in self.__fields_set__:
            _dict['startDate'] = None

        # set to None if end_date (nullable) is None
        # and __fields_set__ contains the field
        if self.end_date is None and "end_date" in self.__fields_set__:
            _dict['endDate'] = None

        # set to None if filter (nullable) is None
        # and __fields_set__ contains the field
        if self.filter is None and "filter" in self.__fields_set__:
            _dict['filter'] = None

        # set to None if property_keys (nullable) is None
        # and __fields_set__ contains the field
        if self.property_keys is None and "property_keys" in self.__fields_set__:
            _dict['propertyKeys'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> JELinesQueryParameters:
        """Create an instance of JELinesQueryParameters from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return JELinesQueryParameters.parse_obj(obj)

        # raise errors for additional fields in the input
        for _key in obj.keys():
            if _key not in cls.__properties:
                raise ValueError("Error due to additional fields (not defined in JELinesQueryParameters) in the input: " + obj)

        _obj = JELinesQueryParameters.parse_obj({
            "start_date": obj.get("startDate"),
            "end_date": obj.get("endDate"),
            "filter": obj.get("filter"),
            "property_keys": obj.get("propertyKeys")
        })
        return _obj

