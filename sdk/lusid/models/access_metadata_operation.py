# coding: utf-8

"""
    LUSID API

    FINBOURNE Technology  # noqa: E501

    Contact: info@finbourne.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, List, Optional
from pydantic.v1 import BaseModel, Field, StrictStr, conlist, constr, validator
from lusid.models.access_metadata_value import AccessMetadataValue

class AccessMetadataOperation(BaseModel):
    """
    AccessMetadataOperation
    """
    value: conlist(AccessMetadataValue, min_items=1) = Field(...)
    path: constr(strict=True, max_length=1025, min_length=1) = Field(...)
    op: StrictStr = Field(..., description="The available values are: add")
    var_from: Optional[StrictStr] = Field(None, alias="from")
    __properties = ["value", "path", "op", "from"]

    @validator('path')
    def path_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^\/.+", value):
            raise ValueError(r"must validate the regular expression /^\/.+/")
        return value

    @validator('op')
    def op_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('add'):
            raise ValueError("must be one of enum values ('add')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> AccessMetadataOperation:
        """Create an instance of AccessMetadataOperation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in value (list)
        _items = []
        if self.value:
            for _item in self.value:
                if _item:
                    _items.append(_item.to_dict())
            _dict['value'] = _items
        # set to None if var_from (nullable) is None
        # and __fields_set__ contains the field
        if self.var_from is None and "var_from" in self.__fields_set__:
            _dict['from'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> AccessMetadataOperation:
        """Create an instance of AccessMetadataOperation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return AccessMetadataOperation.parse_obj(obj)

        _obj = AccessMetadataOperation.parse_obj({
            "value": [AccessMetadataValue.from_dict(_item) for _item in obj.get("value")] if obj.get("value") is not None else None,
            "path": obj.get("path"),
            "op": obj.get("op"),
            "var_from": obj.get("from")
        })
        return _obj
